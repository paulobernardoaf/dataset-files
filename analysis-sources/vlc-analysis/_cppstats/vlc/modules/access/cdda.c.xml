<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\cdda.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GCRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vcd/cdrom.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../misc/webservices/musicbrainz.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cddb/cddb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>DiscOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>trackp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>devpath</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>trackp</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cdda-track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>devpath</name> <operator>=</operator> <call><name>ToLocaleDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DIR_SEP_CHAR</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><call><name>vlc_uri_decode_duplicate</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="string">"/Track %2u"</literal></expr></argument>, <argument><expr><name>trackp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dec</name><index>[<expr><name>sl</name> <operator>-</operator> <name>dec</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>trackp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>devpath</name></expr></argument>, <argument><expr><literal type="string">"/dev/%s"</literal></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>devpath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>location</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>devpath</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cd-audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>devpath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>devpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>devpath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">":"</literal> <name>DIR_SEP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>devpath</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>ioctl_Open</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>devpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot open disc %s"</literal></expr></argument>, <argument><expr><name>devpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>devpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dev</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDDA_BLOCKS_ONCE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>vcddev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>;</decl_stmt> 

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><name>CDDA_BLOCKS_ONCE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>+</operator> <name>count</name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <name>CDDA_DATA_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl_ReadSectors</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vcddev</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>position</name></name></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>CDDA_TYPE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read sector %u"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxControl</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><name>CDDA_DATA_SIZE</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <literal type="number">3</literal> <operator>==</operator>

<literal type="number">4</literal> <operator>*</operator> <literal type="number">44100</literal> <operator>*</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Wrong time/sector ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"disc-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>position</name></name><operator>)</operator>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <call><name>lround</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>position</name></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TOC_GetAudioRange</name><parameter_list>(<parameter><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_first</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_first</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>i_first</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_control</name> <operator>&amp;</operator> <name>CD_ROM_DATA_FLAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_first</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>i_last</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_control</name> <operator>&amp;</operator> <name>CD_ROM_DATA_FLAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>vcddev_sector_t</name> <modifier>*</modifier></type><name>p_last</name> <init>= <expr><operator>&amp;</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i_last</name> <operator>-</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vcddev_sector_t</name> <modifier>*</modifier></type><name>p_lout</name> <init>= <expr><operator>&amp;</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_lout</name><operator>-&gt;</operator><name>i_lba</name></name> <operator>&gt;</operator> <name><name>p_last</name><operator>-&gt;</operator><name>i_lba</name></name> <operator>||</operator> <name>i_last</name> <operator>&lt;=</operator> <name>i_first</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last</name> <operator>=</operator> <name>i_last</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name>i_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>i_lba</name></name> <operator>-=</operator> <name>CD_ROM_XA_INTERVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>--</operator></expr>;</expr_stmt> 

</block_content>}</block> while<condition>( <expr><name>i_last</name> <operator>&gt;</operator> <name>i_first</name></expr> )</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>pi_first</name> <operator>=</operator> <name>i_first</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_last</name> <operator>=</operator> <name>i_last</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i_last</name> <operator>&gt;=</operator> <name>i_first</name><operator>)</operator></expr> ?</condition><then> <expr><name>i_last</name> <operator>-</operator> <name>i_first</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vcddev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cdda-first-sector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cdda-last-sector"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name> <init>= <expr><call><name>ioctl_GetTOC</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_toc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cdda_tracks</name></decl>, <decl><type ref="prev"/><name>i_cdda_first</name></decl>, <decl><type ref="prev"/><name>i_cdda_last</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_cdda_tracks</name> <operator>=</operator> <call><name>TOC_GetAudioRange</name><argument_list>(<argument><expr><name>p_toc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cdda_first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cdda_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>track</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>i_cdda_tracks</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid track number: %u/%i"</literal></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>i_cdda_tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>(<argument><expr><name>p_toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>track</name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_first_sector</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>track</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_sector</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>track</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_cdda_first</name> <operator>+</operator> <name>track</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>i_cdda_last</name> <operator>&amp;&amp;</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>&gt;</operator> <name>i_cdda_last</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_sector</name> <operator>-=</operator> <name>CD_ROM_XA_INTERVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>i_first_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>i_last_sector</name> <operator>-</operator> <name>i_first_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>(<argument><expr><name>p_toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>DemuxControl</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ioctl_Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>vcddev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_cdda_tracks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_cdda_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_cdda_last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cdtextc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cdtextv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cddb_disc_t</name> <modifier>*</modifier></type><name>cddb</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>mbrecord</name></decl>;</decl_stmt>

}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>LBAPregap</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_sector</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_sector</name> <operator>+</operator> <literal type="number">150</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GCRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>BuildMusicbrainzDiscID</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_last</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>hd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>err</name> <init>= <expr><call><name>gcry_md_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>gcry_md_enable</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA1</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name>i_first</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name>i_last</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_track_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&gt;</operator> <name>i_total</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_track_end</name> <operator>=</operator> <call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i_total</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>CD_ROM_XA_INTERVAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_track_end</name> <operator>=</operator> <call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%08X"</literal></expr></argument>, <argument><expr><name>i_last_track_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> 

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%08X"</literal></expr></argument>, <argument><expr><call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_total</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gcry_md_final</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>gcry_md_get_algo_dlen</name><argument_list>( <argument><expr><name>GCRY_MD_SHA1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>gcry_md_read</name><argument_list>( <argument><expr><name>hd</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>out</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>( <argument><expr><name>hd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BuildMusicbrainzDiscID</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NULL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>musicbrainz_recording_t</name> <modifier>*</modifier></type> <name>GetMusicbrainzInfo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_last</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>recording</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mbserver</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"musicbrainz-server"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_mbserver</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_mbserver</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_config_t</name></type> <name>cfg</name> <init>= <expr><block>{ <expr><operator>.</operator><name>obj</name> <operator>=</operator> <name>obj</name></expr>,

<expr><operator>.</operator><name>psz_mb_server</name> <operator>=</operator> <name>psz_mbserver</name></expr>,

<expr><operator>.</operator><name>psz_coverart_server</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_disc_id</name> <init>= <expr><call><name>BuildMusicbrainzDiscID</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument>,

<argument><expr><name>i_total</name></expr></argument>, <argument><expr><name>i_first</name></expr></argument>, <argument><expr><name>i_last</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_disc_id</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>recording</name> <operator>=</operator> <call><name>musicbrainz_lookup_recording_by_discid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>psz_disc_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"toc=%u+%u"</literal></expr></argument>, <argument><expr><name>i_first</name></expr></argument>, <argument><expr><name>i_last</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_track_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&gt;</operator> <name>i_total</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_track_end</name> <operator>=</operator> <call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i_total</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>CD_ROM_XA_INTERVAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_track_end</name> <operator>=</operator> <call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"+%u"</literal></expr></argument>, <argument><expr><name>i_last_track_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"+%u"</literal></expr></argument>, <argument><expr><call><name>LBAPregap</name><argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>recording</name> <operator>=</operator> <call><name>musicbrainz_lookup_recording_by_toc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mbserver</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>recording</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>cddb_disc_t</name> <modifier>*</modifier></type><name>GetCDDBInfo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"retrieving metadata with CDDB"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cddb_conn_t</name> <modifier>*</modifier></type><name>p_cddb</name> <init>= <expr><call><name>cddb_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cddb</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unable to use CDDB"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cddb_http_enable</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cddb-server"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cddb_set_server_name</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cddb_set_server_port</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cddb-port"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_set_email_address</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><literal type="string">"vlc@videolan.org"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_set_http_path_query</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><literal type="string">"/~cddb/cddb.cgi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_set_http_path_submit</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><literal type="string">"/~cddb/submit.cgi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cachedir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_CACHE_DIR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_cachedir</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"cddb"</literal></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cddb_cache_enable</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_cache_set_dir</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><name>psz_cachedir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cachedir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_set_timeout</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cddb_disc_t</name> <modifier>*</modifier></type><name>p_disc</name> <init>= <expr><call><name>cddb_disc_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_disc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unable to create CDDB disc structure."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_length</name> <init>= <expr><literal type="number">2000000</literal></expr></init></decl>;</decl_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cddb_track_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>cddb_track_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cddb_track_set_frame_offset</name><argument_list>( <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>+</operator> <literal type="number">150</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cddb_disc_add_track</name><argument_list>( <argument><expr><name>p_disc</name></expr></argument>, <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_size</name> <init>= <expr><operator>(</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>-</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>)</operator> <operator>*</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name>CDDA_DATA_SIZE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_length</name> <operator>+=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>i_size</name> <operator>/</operator> <literal type="number">44100</literal> <operator>/</operator> <literal type="number">4</literal></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Track %i offset: %i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>+</operator> <literal type="number">150</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Total length: %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i_length</name><operator>/</operator><literal type="number">1000000</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_disc_set_length</name><argument_list>( <argument><expr><name>p_disc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i_length</name><operator>/</operator><literal type="number">1000000</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>cddb_disc_calc_discid</name><argument_list>( <argument><expr><name>p_disc</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDDB disc ID calculation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_matches</name> <init>= <expr><call><name>cddb_query</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><name>p_disc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_matches</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDDB error: %s"</literal></expr></argument>, <argument><expr><call><name>cddb_error_str</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_matches</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find any matches in CDDB."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_matches</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"found %d matches in CDDB. Using first one."</literal></expr></argument>, <argument><expr><name>i_matches</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cddb_read</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>, <argument><expr><name>p_disc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"disc ID: 0x%08x"</literal></expr></argument>, <argument><expr><call><name>cddb_disc_get_discid</name><argument_list>(<argument><expr><name>p_disc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cddb_destroy</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_disc</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_disc</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cddb_disc_destroy</name><argument_list>( <argument><expr><name>p_disc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cddb_destroy</name><argument_list>( <argument><expr><name>p_cddb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDDB failure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>AccessGetMeta</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"Audio CD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONEMPTY</name><parameter_list>( <parameter><type><name>psz</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (psz) &amp;&amp; *(psz) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON_EMPTY</name><parameter_list>( <parameter><type><name>psz</name></type></parameter>, <parameter><type><name>code</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( !NONEMPTY( psz) ) { (psz) = code; } } while(0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>cddb_disc_get_title</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cddb_disc_get_genre</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_SetGenre</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>year</name> <init>= <expr><call><name>cddb_disc_get_year</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>year</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>yearbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>yearbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>yearbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetDate</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name>yearbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cddb_disc_get_artist</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cddb_track_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>cddb_disc_get_track</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>track_artist</name> <init>= <expr><call><name>cddb_track_get_artist</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>track_artist</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>track_artist</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>track_artist</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_start_track_offset</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_first</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_cdda_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>i_start_track_offset</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"track[%d] start=%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio CD - Track %02i"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>i</name> <operator>-</operator> <name>i_start_track_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_first_sector</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_sector</name> <init>= <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_first</name></name> <operator>+</operator> <name>i</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_cdda_last</name></name> <operator>&amp;&amp;</operator>

<name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_cdda_last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_sector</name> <operator>-=</operator> <name>CD_ROM_XA_INTERVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>duration</name> <init>=

<expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator><name>i_last_sector</name> <operator>-</operator> <name>i_first_sector</name><operator>)</operator>

<operator>*</operator> <name>CDDA_DATA_SIZE</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <literal type="number">44100</literal> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_NewDisc</name><argument_list>(<argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>:

<expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"cdda-track=%i"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"cdda-first-sector=%i"</literal></expr></argument>,

<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="string">"cdda-last-sector=%i"</literal></expr></argument>, <argument><expr><name>i_last_sector</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>artist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>album</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>genre</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>cddb_track_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>cddb_disc_get_track</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>cddb_track_get_title</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>artist</name> <operator>=</operator> <call><name>cddb_track_get_artist</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>artist</name></expr></argument>, <argument><expr><call><name>cddb_disc_get_artist</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>album</name> <operator>=</operator> <call><name>cddb_disc_get_title</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>genre</name> <operator>=</operator> <call><name>cddb_disc_get_genre</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>cddb_disc_get_year</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>artist</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>genre</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Genre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>artist</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>album</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Album</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>genre</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Genre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>vlc_meta_Description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name><operator>-&gt;</operator><name>i_release</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>musicbrainz_release_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name><operator>-&gt;</operator><name>p_releases</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>r</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_index</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>artist</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ON_EMPTY</name><argument_list>(<argument><expr><name>album</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>artist</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>psz_artist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetAlbumArtist</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>year</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>psz_date</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_year</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_date</name></name></expr></argument>, <argument><expr><literal type="string">"%4d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_year</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>year</name> <operator>=</operator> <name>i_year</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_coverart_url</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetArtworkURL</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_coverart_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_SetName</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>artist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetArtist</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>genre</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetGenre</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetDescription</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NONEMPTY</name><argument_list>(<argument><expr><name>album</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetAlbum</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>album</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>year</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>yearbuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>yearbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>yearbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetDate</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>yearbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetTrackNum</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetTrackTotal</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ON_EMPTY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NONEMPTY</name></cpp:undef>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AccessControl</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>query</name> <operator>==</operator> <name>STREAM_GET_META</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AccessGetMeta</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>access_vaDirectoryControlHelper</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AccessOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ioctl_Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vcddev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name> <operator>=</operator> <call><name>ioctl_GetTOC</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot count tracks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_tracks</name></name> <operator>=</operator> <call><name>TOC_GetAudioRange</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_first</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_tracks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no audio tracks found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl_GetCdText</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CD-TEXT information missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"metadata-network-access"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name> <operator>=</operator> <call><name>GetMusicbrainzInfo</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_tracks</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_first</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_cdda_last</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name> <operator>=</operator> <call><name>GetCDDBInfo</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"album art policy set to manual: not fetching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>AccessControl</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ioctl_Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AccessClose</name><parameter_list>(<parameter><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>cdtextc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cdtextv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cddb_disc_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>musicbrainz_recording_release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mbrecord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_toc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>DiscOpen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>track</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AccessOpen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>DemuxOpen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AccessClose</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>demux_sys_t</name></expr></argument>, <argument><expr><name>vcddev</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>access_sys_t</name></expr></argument>, <argument><expr><name>vcddev</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ioctl_Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>vcddev_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDAUDIO_DEV_TEXT</name></cpp:macro> <cpp:value>N_("Audio CD device")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDAUDIO_DEV_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the default Audio CD drive (or file) to use. Don't forget the " "colon after the drive letter (e.g. D:)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_DEVICE</name></cpp:macro> <cpp:value>"D:"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDAUDIO_DEV_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the default Audio CD device to use." )</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_DEVICE</name></cpp:macro> <cpp:value>"/dev/cd0c"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_DEVICE</name></cpp:macro> <cpp:value>"/dev/sr0"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_DEVICE</name></cpp:macro> <cpp:value>"/dev/cdrom"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Audio CD"</literal>)</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio CD input"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>add_loadfile</name><argument_list>(<argument><literal type="string">"cd-audio"</literal></argument>, <argument>CD_DEVICE</argument>, <argument>CDAUDIO_DEV_TEXT</argument>, <argument>CDAUDIO_DEV_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_usage_hint</name><argument_list>( <argument>N_(<literal type="string">"[cdda:][device][@[track]]"</literal>)</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"cdda-track"</literal></argument>, <argument><literal type="number">0</literal></argument> , <argument>NULL</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_volatile</name> <argument_list>()</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"cdda-first-sector"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_volatile</name> <argument_list>()</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"cdda-last-sector"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_volatile</name> <argument_list>()</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"musicbrainz-server"</literal></argument>, <argument>MUSICBRAINZ_DEFAULT_SERVER</argument>,

<argument>N_( <literal type="string">"Musicbrainz Server"</literal> )</argument>,

<argument>N_( <literal type="string">"Address of the musicbrainz server to use."</literal> )</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCDDB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"cddb-server"</literal></argument>, <argument><literal type="string">"freedb.videolan.org"</literal></argument>, <argument>N_( <literal type="string">"CDDB Server"</literal> )</argument>,

<argument>N_( <literal type="string">"Address of the CDDB server to use."</literal> )</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"cddb-port"</literal></argument>, <argument><literal type="number">80</literal></argument>, <argument>N_( <literal type="string">"CDDB port"</literal> )</argument>,

<argument>N_( <literal type="string">"CDDB Server port to use."</literal> )</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">65535</literal></argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"cdda"</literal></argument>, <argument><literal type="string">"cddasimple"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
