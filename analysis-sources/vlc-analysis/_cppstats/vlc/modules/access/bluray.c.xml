<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\bluray.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMNTENT_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mntent.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ucred.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mount.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mpeg/timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/timestamps_filter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/text/iso-639_def.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/bluray.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/bluray-version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/keys.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/meta_data.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/overlay.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/clpi_data.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BLURAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/log_control.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_DEBUG_MASK</name></cpp:macro> <cpp:value>(0xFFFFF &amp; ~DBG_STREAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_object_t</name> <modifier>*</modifier></type><name>p_bluray_DebugObject</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluray_DebugHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_log</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>psz</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_log</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_bluray_DebugObject</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_log</name></expr> ?</condition><then> <expr><name>psz_log</name></expr> </then><else>: <expr><name>psz</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BLURAY_EVENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_DEBUG_EVENT_ENTRY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[a]=#a</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>bluray_event_debug_strings</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_READ_ERROR</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_ENCRYPTED</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_ANGLE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_TITLE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PLAYLIST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PLAYITEM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_CHAPTER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PLAYMARK</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_END_OF_TITLE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_AUDIO_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_IG_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PG_TEXTST_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PIP_PG_TEXTST_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SECONDARY_AUDIO_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SECONDARY_VIDEO_STREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PG_TEXTST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PIP_PG_TEXTST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SECONDARY_AUDIO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SECONDARY_VIDEO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SECONDARY_VIDEO_SIZE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_PLAYLIST_STOP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SEEK</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_STILL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_STILL_TIME</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_SOUND_EFFECT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_IDLE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_POPUP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_MENU</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_STEREOSCOPIC_STATUS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_KEY_INTEREST_TABLE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>BD_DEBUG_EVENT_ENTRY</name><argument_list>(<argument><expr><name>BD_EVENT_UO_MASK_CHANGED</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blurayDebugEvent</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if(e &lt; ARRAY_SIZE(bluray_event_debug_strings))msg_Dbg(p_demux, "Event %s %x", bluray_event_debug_strings[e], v);elsemsg_Dbg(p_demux, "Event Unk 0x%x %x", e, v);} while(0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blurayDebugEvent</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLURAY_HAS_BDJO_DATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libbluray/bdjo_data.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BDJO_FileSelect</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>!</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_filename</name><index>[<expr><name>i_len</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".bdjo"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>BDJO_IsBlacklisted</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_bd_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>rgsz_class_blacklist</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"com.macrovision.bdplus.Handshake"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_bdjo_dir</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_bdjo_dir</name></expr></argument>, <argument><expr><literal type="string">"%s/BDMV/BDJO"</literal></expr></argument>, <argument><expr><name>psz_bd_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filenames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_files</name> <init>= <expr><call><name>vlc_scandir</name><argument_list>(<argument><expr><name>psz_bdjo_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_filenames</name></expr></argument>, <argument><expr><name>BDJO_FileSelect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_files</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_bdjo_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_files</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_ret</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_bdjo_file</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_bdjo_file</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>psz_bdjo_dir</name></expr></argument>, <argument><expr><name><name>ppsz_filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bdjo_data</name></name> <modifier>*</modifier></type><name>bdjo</name> <init>= <expr><call><name>bd_read_bdjo</name><argument_list>(<argument><expr><name>psz_bdjo_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bdjo</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>bdjo</name><operator>-&gt;</operator><name>app_table</name><operator>.</operator><name>num_app</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_ret</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init>;</init> <condition><expr><name>k</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rgsz_class_blacklist</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_ret</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rgsz_class_blacklist</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>bdjo</name><operator>-&gt;</operator><name>app_table</name><operator>.</operator><name>app</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>initial_class</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BLURAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>b_ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Found blacklisted class %s in %s"</literal></expr></argument>,

<argument><expr><name><name>rgsz_class_blacklist</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ppsz_filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bd_free_bdjo</name><argument_list>(<argument><expr><name>bdjo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_bdjo_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_bdjo_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppsz_filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_filenames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDJO_IsBlacklisted</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>, <parameter><type><name>bar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_MENU_TEXT</name></cpp:macro> <cpp:value>N_("Blu-ray menus")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_MENU_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use Blu-ray menus. If disabled, ""the movie will start directly")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_REGION_TEXT</name></cpp:macro> <cpp:value>N_("Region code")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_REGION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Blu-Ray player region code. ""Some discs can be played only with a correct region code.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_region_code</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"C"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_region_code_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Region A"</literal></expr>, <expr><literal type="string">"Region B"</literal></expr>, <expr><literal type="string">"Region C"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGION_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LANGUAGE_DEFAULT</name></cpp:macro> <cpp:value>("eng")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLURAY_VERSION</name> <operator>&gt;=</operator> <call><name>BLURAY_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">8</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_DEMUX</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BD_STREAM_TYPE_VIDEO_HEVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_STREAM_TYPE_VIDEO_HEVC</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_CLUSTER_SIZE</name></cpp:macro> <cpp:value>6144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_READ_SIZE</name></cpp:macro> <cpp:value>(10 * BD_CLUSTER_SIZE)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>blurayOpen</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayClose</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Blu-ray"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Blu-ray Disc support (libbluray)"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">500</literal></argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"bluray-menu"</literal></argument>, <argument>true</argument>, <argument>BD_MENU_TEXT</argument>, <argument>BD_MENU_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"bluray-region"</literal></argument>, <argument>ppsz_region_code[REGION_DEFAULT]</argument>, <argument>BD_REGION_TEXT</argument>, <argument>BD_REGION_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>ppsz_region_code</argument>, <argument>ppsz_region_code_text</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"bluray"</literal></argument>, <argument><literal type="string">"file"</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>blurayOpen</argument>, <argument>blurayClose</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLURAY_DEMUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument><literal type="string">"BluRay demuxer"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">5</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>blurayOpen</argument>, <argument>blurayClose</argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OVERLAY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>OverlayStatus</name> <block>{

<decl><name>Closed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ToDisplay</name></decl>, 

<decl><name>Displayed</name></decl>,

<decl><name>Outdated</name></decl> 

}</block></enum></type> <name>OverlayStatus</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>bluray_spu_updater_sys_t</name></name></type> <name>bluray_spu_updater_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bluray_overlay_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_on_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OverlayStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_regions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_updater</name></decl>;</decl_stmt>

}</block></struct></type> <name>bluray_overlay_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>BLURAY</name> <modifier>*</modifier></type><name>bluray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_draining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_longest_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cur_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cur_seekpoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>updates</name></decl>;</decl_stmt>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>BD_EVENT</argument>)</argument_list></macro> <expr_stmt><expr><name>events_delayed</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>pl_info_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>p_pl_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BLURAY_CLIP_INFO</name> <modifier>*</modifier></type><name>p_clip_info</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_MOVIE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_TIMED_SLIDESHOW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_BROWSABLE_SLIDESHOW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_SUB_PATH_BROWSABLE_SLIDESHOW</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_SUB_PATH_INTERACTIVE_MENU</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_SUB_PATH_TEXT_SUBTITLE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>BD_CLIP_APP_TYPE_TS_SUB_PATH_ELEMENTARY_STREAM_PATH</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

}</block> <decl><name>clip_application_type</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cover_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>META_DL</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_fatal_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_menu_open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_popup_available</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_still_end_time</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name><name>p_overlays</name><index>[<expr><name>MAX_OVERLAY</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

}</block> <decl><name>bdj</name></decl>;</struct>

<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>oldmouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_tf_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_spu_enable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type><name>p_parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_flushed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_pl_playing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>read_block_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_bd_path</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_recyling</name></decl>;</decl_stmt>

}</block></struct></type> <name>es_pair_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>es_pair_Add</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_pair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_pair</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>b_recyling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_array_append</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>p_pair</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pair</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_pair</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>es_pair_Delete</name><parameter_list>(<parameter><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>es_pair_Remove</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>, <parameter><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><call><name>vlc_array_index_of_item</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>p_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_pair_Delete</name><argument_list>(<argument><expr><name>p_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>getEsPair</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>,

<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>match</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_pair_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>p_pair</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_pair</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>es_pair_compare_PID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>p_pid</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>es_pair_compare_ES</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>es_out_id_t</name> <operator>*</operator><operator>)</operator><name>p_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>es_pair_compare_Unused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_pair</name><operator>-&gt;</operator><name>b_recyling</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>getEsPairByPID</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>getEsPair</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>es_pair_compare_PID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>getEsPairByES</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>getEsPair</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>es_pair_compare_ES</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_pair_t</name> <modifier>*</modifier></type><name>getUnusedEsPair</name><parameter_list>(<parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>getEsPair</name><argument_list>(<argument><expr><name>p_array</name></expr></argument>, <argument><expr><name>es_pair_compare_Unused</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>bluray_spu_updater_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_overlay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ref_cnt</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unref_subpicture_updater</name><parameter_list>(<parameter><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refs</name> <init>= <expr><operator>--</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ref_cnt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_overlay</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DemuxGetLanguageCode</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_lang</name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_lang</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>LANGUAGE_DEFAULT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_lang</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>pl</name> <operator>=</operator> <name>p_languages</name></expr>;</init> <condition><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pl</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_lang</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2B</name></name></expr></argument>, <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pl</name><operator>-&gt;</operator><name>psz_eng_name</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LANGUAGE_DEFAULT</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>es_out_t</name> <modifier>*</modifier></type><name>esOutNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>blurayControl</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>blurayDemux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayInitTitles</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>menu_titles</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bluraySetTitle</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayOverlayProc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_OVERLAY</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>overlay</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayArgbOverlayProc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_ARGB_OVERLAY</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>overlay</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayCloseOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>onMouseEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>blurayRestartParser</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>notifyDiscontinuityToParser</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STILL_IMAGE_NOT_SET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STILL_IMAGE_INFINITE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENT_TITLE</name></cpp:macro> <cpp:value>p_sys-&gt;pp_title[p_sys-&gt;cur_title]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUR_LENGTH</name></cpp:macro> <cpp:value>CURRENT_TITLE-&gt;i_length</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FindMountPoint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><operator>*</operator><name>file</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETMNTENT_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bd_device</name> <init>= <expr><call><name>realpath</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bd_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name> <argument_list>(<argument><expr><name>bd_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISBLK</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><call><name>setmntent</name> <argument_list>(<argument><expr><literal type="string">"/proc/self/mounts"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mtab</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mntent</name></name> <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"/><name>mbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name> <index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>getmntent_r</name> <argument_list>(<argument><expr><name>mtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mnt_fsname</name></name></expr></argument>, <argument><expr><name>bd_device</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mnt_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>endmntent</name> <argument_list>(<argument><expr><name>mtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bd_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stat</name> <argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISBLK</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fs_count</name> <init>= <expr><call><name>getfsstat</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MNT_NOWAIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fs_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name></type> <name><name>mbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getfsstat</name> <argument_list>(<argument><expr><name>mbuf</name></expr></argument>, <argument><expr><name>fs_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MNT_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fs_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>mbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntfromname</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Disc device to mount point not implemented</cpp:warning>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluraySendBackgroundImage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_dst_out</name></decl></parameter>,

<parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Start background"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>*</operator>

<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Error allocating block for background video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name>p_dst_out</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name>p_dst_out</name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name>p_dst_out</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name>p_dst_out</name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_SET_MOUSE_EVENT</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>onMouseEvent</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name>p_dst_out</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setTitleInfo</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bd_free_title_info</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name><operator>-&gt;</operator><name>clip_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attachThumbnail</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLURAY_VERSION</name> <operator>&gt;=</operator> <call><name>BLURAY_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name><operator>-&gt;</operator><name>thumb_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name><operator>-&gt;</operator><name>thumbnails</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bd_get_meta_file</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name><operator>-&gt;</operator><name>thumbnails</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"picture%d_%s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name><operator>-&gt;</operator><name>thumbnails</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_attachment</name> <operator>=</operator> <call><name>vlc_input_attachment_New</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Album art"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_attachment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>p_attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probeStream</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_canseek</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_canseek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_canseek</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>!=</operator> <literal type="number">2048</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i_peek</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_peek</name><index>[ <expr><operator>--</operator><name>i_peek</name></expr> ]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLURAY_DEMUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blurayReadBlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lba</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_blocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>read_block_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>lba</name> <operator>*</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>req</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">2048</literal> <operator>*</operator> <name>num_blocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>got</name></decl>;</decl_stmt>

<expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"read from lba %d failed"</literal></expr></argument>, <argument><expr><name>lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>got</name> <operator>/</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek to lba %d failed"</literal></expr></argument>, <argument><expr><name>lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>read_block_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_descriptor_tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>checksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>checksum</name> <operator>+</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>checksum</name> <operator>+</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probeFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>peek</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>vlc_open</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_info</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>stat_info</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>stat_info</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>peek</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">2048</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>

<call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator>

<call><name>decode_descriptor_tag</name><argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>bailout</name>:</label>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blurayOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>forced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_init_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_ERROR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { error_msg = s; goto error; } while(0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>forced</name> <operator>=</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"bluray:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>probeStream</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>forced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>probeFile</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>=</operator> <name>STILL_IMAGE_NOT_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mouse_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>oldmouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>read_block_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-cc-check"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-cc-check"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-standard"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-standard"</literal></expr></argument>, <argument><expr><literal type="string">"mpeg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pmtfix-waitdata"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pmtfix-waitdata"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-patfix"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-patfix"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pcr-offsetfix"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pcr-offsetfix"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BLURAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_bluray_DebugObject</name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_set_debug_mask</name><argument_list>(<argument><expr><name>BLURAY_DEBUG_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_set_debug_handler</name><argument_list>(<argument><expr><name>bluray_DebugHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLURAY_DEMUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_init_pos</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name> <operator>=</operator> <call><name>bd_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bd_open_stream</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>blurayReadBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bd_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"dvd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>FindMountPoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name> <operator>=</operator> <call><name>bd_open</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BLURAY_DISC_INFO</name> <modifier>*</modifier></type><name>disc_info</name> <init>= <expr><call><name>bd_get_disc_info</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>bluray_detected</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Path doesn't appear to be a Blu-ray"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"First play: %i, Top menu: %i\n"</literal>

<literal type="string">"HDMV Titles: %i, BD-J Titles: %i, Other: %i"</literal></expr></argument>,

<argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>first_play_supported</name></name></expr></argument>, <argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>top_menu_supported</name></name></expr></argument>,

<argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>num_hdmv_titles</name></name></expr></argument>, <argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>num_bdj_titles</name></name></expr></argument>,

<argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>num_unsupported_titles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>aacs_detected</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Disc is using AACS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>libaacs_detected</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"This Blu-ray Disc needs a library for AACS decoding"</literal>

<literal type="string">", and your system does not have it."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>aacs_handled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>aacs_error_code</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>aacs_error_code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BD_AACS_CORRUPTED_DISC</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blu-ray Disc is corrupted."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BD_AACS_NO_CONFIG</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Missing AACS configuration file!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BD_AACS_NO_PK</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No valid processing key found in AACS config file."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BD_AACS_NO_CERT</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No valid host certificate found in AACS config file."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BD_AACS_CERT_REVOKED</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"AACS Host certificate revoked."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>BD_AACS_MMC_FAILED</name></expr>:</case>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"AACS MMC failed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>bdplus_detected</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Disc is using BD+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>libbdplus_detected</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"This Blu-ray Disc needs a library for BD+ decoding"</literal>

<literal type="string">", and your system does not have it."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>bdplus_handled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your system BD+ decoding library does not work. "</literal>

<literal type="string">"Missing configuration?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_region</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"bluray-region"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>region</name> <init>= <expr><ternary><condition><expr><name>psz_region</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>psz_region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr> </then><else>: <expr><name>REGION_DEFAULT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_set_player_setting</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_REGION_CODE</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_code</name> <init>= <expr><call><name>DemuxGetLanguageCode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"audio-language"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bd_set_player_setting_str</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_AUDIO_LANG</name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_code</name> <operator>=</operator> <call><name>DemuxGetLanguageCode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sub-language"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_set_player_setting_str</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_PG_LANG</name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_code</name> <operator>=</operator> <call><name>DemuxGetLanguageCode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"menu-language"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_set_player_setting_str</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_MENU_LANG</name></expr></argument>, <argument><expr><name>psz_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>bd_get_meta</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to get meta info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attachThumbnail</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"bluray-menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>&amp;&amp;</operator> <name><name>disc_info</name><operator>-&gt;</operator><name>bdj_detected</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>bdj_handled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"BD-J menus not supported. Playing without menus. "</literal>

<literal type="string">"BD-J support: %d, JVM found: %d, JVM usable: %d"</literal></expr></argument>,

<argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>bdj_supported</name></name></expr></argument>, <argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>libjvm_detected</name></name></expr></argument>, <argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>bdj_handled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Java required"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"This Blu-ray disc requires Java for menus support.%s\nThe disc will be played without menus."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>!</operator><name><name>disc_info</name><operator>-&gt;</operator><name>libjvm_detected</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Java was not found on your system."</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>bdj_detected</name></name> <operator>&amp;&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>&amp;&amp;</operator>

<call><name>BDJO_IsBlacklisted</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Play without Menus"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try anyway"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"BDJO Menu check"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Incompatible Java Menu detected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blurayInitTitles</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>disc_info</name><operator>-&gt;</operator><name>num_hdmv_titles</name></name> <operator>+</operator> <name><name>disc_info</name><operator>-&gt;</operator><name>num_bdj_titles</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_get_event</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_register_overlay_proc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>blurayOverlayProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>disc_info</name><operator>-&gt;</operator><name>num_bdj_titles</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_register_argb_overlay_proc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>blurayArgbOverlayProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bd_play</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLURAY_ERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to start bluray playback. Please try without menu support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bluraySetTitle</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_longest_title</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Could not set the title %d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_longest_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name> <operator>=</operator> <call><name>timestamps_filter_es_out_New</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <call><name>esOutNew</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name> <operator>=</operator> <call><name>vlc_demux_chained_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to create TS demuxer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>blurayControl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>blurayDemux</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>error_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blu-ray error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>blurayClose</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_init_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to seek back to stream start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ETIMEOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLURAY_ERROR</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayClose</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setTitleInfo</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bd_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_OVERLAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayCloseOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_demux_chained_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timestamps_filter_es_out_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>blurayGetStreamsUnlocked</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_stream_type</name></decl></parameter>,

<parameter><decl><type><name>BLURAY_STREAM_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_streams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>i_stream_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>BD_EVENT_AUDIO_STREAM</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pp_streams</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>audio_streams</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>audio_stream_count</name></name></expr>;</return>

<case>case <expr><name>BD_EVENT_PG_TEXTST_STREAM</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pp_streams</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>pg_streams</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>pg_stream_count</name></name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type> <name>blurayGetStreamInfoUnlocked</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_stream_type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_stream_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type><name>p_streams</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_streams_count</name> <init>= <expr><call><name>blurayGetStreamsUnlocked</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_stream_idx</name> <operator>&lt;</operator> <name>i_streams_count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>p_streams</name><index>[<expr><name>i_stream_idx</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type> <name>blurayGetStreamInfoByPIDUnlocked</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i_type</name><init>=<expr><name>BD_EVENT_AUDIO_STREAM</name></expr></init></decl>;</init> <condition><expr><name>i_type</name><operator>&lt;=</operator><name>BD_EVENT_SECONDARY_VIDEO_STREAM</name></expr>;</condition> <incr><expr><name>i_type</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type><name>p_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_streams_count</name> <init>= <expr><call><name>blurayGetStreamsUnlocked</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_streams_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>i_pid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setStreamLang</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>blurayGetStreamInfoByPIDUnlocked</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_stream</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blurayGetStreamPID</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_stream_type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>blurayGetStreamInfoUnlocked</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>,

<argument><expr><name>i_stream_type</name></expr></argument>,

<argument><expr><name>i_stream_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pid</name> <init>= <expr><ternary><condition><expr><name>p_stream</name></expr> ?</condition><then> <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pid</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_pid</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_dst_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>es</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_entered_recycling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_restart_decoders_on_reuse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_discontinuity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_disable_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_lowdelay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_pid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_spu_pid</name></decl>;</decl_stmt> 

}</block> <decl><name>selected</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_video_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>channels</name><index>[<expr><name>MAX_OVERLAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>overlay</name></decl>;</struct>

<decl_stmt><decl><type><name>es_out_t</name></type> <name>es_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>bluray_esout_priv_t</name>;</typedef>

<enum>enum

<block>{

<decl><name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name> <init>= <expr><name>ES_OUT_PRIVATE_START</name></expr></init></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_UNSET_ES_BY_PID</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_ENABLE_OUTPUT</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_DISABLE_OUTPUT</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_ENABLE_LOW_DELAY</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_DISABLE_LOW_DELAY</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_CREATE_OVERLAY</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_DELETE_OVERLAY</name></decl>,

<decl><name>BLURAY_ES_OUT_CONTROL_RANDOM_ACCESS</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>bluray_esOutAddUnlocked</name><parameter_list>(<parameter><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>esout_priv</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_select</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_lowdelay</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_SELECTABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_select</name> <operator>=</operator> <operator>(</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <literal type="number">0x1011</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_audio_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_audio_pid</name></name> <operator>==</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_select</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_SELECTABLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setStreamLang</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break ;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_spu_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_spu_pid</name></name> <operator>==</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_select</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_enable</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_SELECTABLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setStreamLang</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break ;</break>

<default>default:</default>

<empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>getEsPairByPID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pair</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Adding ES %d select %d"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>b_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_pair_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Reusing ES %d"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>b_recyling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>p_fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>!=</operator> <name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>||</operator>

<name><name>esout_priv</name><operator>-&gt;</operator><name>b_restart_decoders_on_reuse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_FMT</name></expr></argument>, <argument><expr><name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_select</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_es</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name>b_select</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_SET_MOUSE_EVENT</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>,

<argument><expr><name>onMouseEvent</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>bluray_esOutAdd</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>bluray_esOutAddUnlocked</name><argument_list>(<argument><expr><name>esout_priv</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluray_esOutDeleteNonReusedESUnlocked</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>b_entered_recycling</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_entered_recycling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_restart_decoders_on_reuse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>p_pair</name> <operator>=</operator> <call><name>getUnusedEsPair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Trashing unused ES %d"</literal></expr></argument>, <argument><expr><name><name>p_pair</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>==</operator> <name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_pair_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bluray_esOutSend</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bluray_esOutDeleteNonReusedESUnlocked</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>getEsPairByES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_pair</name> <operator>&amp;&amp;</operator> <name><name>p_pair</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_pair</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_disable_output</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>p_block</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluray_esOutDel</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>getEsPairByES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pair</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pair</name><operator>-&gt;</operator><name>b_recyling</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_entered_recycling</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bluray_esOutControl</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_disable_output</name></name> <operator>&amp;&amp;</operator>

<name>i_query</name> <operator>&lt;</operator> <name>ES_OUT_PRIVATE_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>i_query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name></expr>:</case>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_UNSET_ES_BY_PID</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_select</name> <init>= <expr><operator>(</operator><name>i_query</name> <operator>==</operator> <name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bluray_stream_type</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pid</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>i_bluray_stream_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>BD_EVENT_AUDIO_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_audio_pid</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_PG_TEXTST_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_spu_pid</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>es_pair_t</name> <modifier>*</modifier></type><name>p_pair</name> <init>= <expr><call><name>getEsPairByPID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_pair</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>b_select</name></expr> ?</condition><then> <expr><name>ES_OUT_SET_ES</name></expr> </then><else>: <expr><name>ES_OUT_UNSET_ES</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_pair</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_RANDOM_ACCESS</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_restart_decoders_on_reuse</name></name> <operator>=</operator> <operator>!</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_ENABLE_OUTPUT</name></expr>:</case>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_DISABLE_OUTPUT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_disable_output</name></name> <operator>=</operator> <operator>(</operator><name>i_query</name> <operator>==</operator> <name>BLURAY_ES_OUT_CONTROL_DISABLE_OUTPUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_ENABLE_LOW_DELAY</name></expr>:</case>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_DISABLE_LOW_DELAY</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_lowdelay</name></name> <operator>=</operator> <operator>(</operator><name>i_query</name> <operator>==</operator> <name>BLURAY_ES_OUT_CONTROL_ENABLE_LOW_DELAY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_CREATE_OVERLAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>subpicture_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>VLC_CODEC_I420</name></expr></argument>,

<argument><expr><literal type="number">1920</literal></expr></argument>, <argument><expr><literal type="number">1080</literal></expr></argument>, <argument><expr><literal type="number">1920</literal></expr></argument>, <argument><expr><literal type="number">1080</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_SELECTABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0x1011</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>=</operator> <call><name>bluray_esOutAddUnlocked</name><argument_list>(<argument><expr><name>esout_priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bluraySendBackgroundImage</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>,

<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>,

<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>&amp;&amp;</operator> <name>i_plane</name> <operator>&lt;</operator> <name>MAX_OVERLAY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_ADD_OVERLAY</name></expr></argument>,

<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>BLURAY_ES_OUT_CONTROL_DELETE_OVERLAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>&amp;&amp;</operator>

<name>i_plane</name> <operator>&lt;</operator> <name>MAX_OVERLAY</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_DEL_OVERLAY</name></expr></argument>,

<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name></expr></argument>,

<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>==</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_ES_DEFAULT</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_UNSET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_STATE</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_GET_ES_STATE</name></expr>:</case>

<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_vaControl</name><argument_list>(<argument><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluray_esOutDestroy</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>bluray_esout_priv_t</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_pair_Delete</name><argument_list>(<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>esout_priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>bluray_esOutCallbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>add</name> <operator>=</operator> <name>bluray_esOutAdd</name></expr>,

<expr><operator>.</operator><name>send</name> <operator>=</operator> <name>bluray_esOutSend</name></expr>,

<expr><operator>.</operator><name>del</name> <operator>=</operator> <name>bluray_esOutDel</name></expr>,

<expr><operator>.</operator><name>control</name> <operator>=</operator> <name>bluray_esOutControl</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>bluray_esOutDestroy</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>es_out_t</name> <modifier>*</modifier></type><name>esOutNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_dst_out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_esout_priv_t</name> <modifier>*</modifier></type><name>esout_priv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>esout_priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>esout_priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_dst_out</name></name> <operator>=</operator> <name>p_dst_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name>p_obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>es_out</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>bluray_esOutCallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_disable_output</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_entered_recycling</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_restart_decoders_on_reuse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>b_lowdelay</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_audio_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>selected</name><operator>.</operator><name>i_spu_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>p_video_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_OVERLAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>esout_priv</name><operator>-&gt;</operator><name>overlay</name><operator>.</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>esout_priv</name><operator>-&gt;</operator><name>es_out</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bluray_overlay_t</name> <modifier>*</modifier></type><name>updater_lock_overlay</name><parameter_list>(<parameter><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_upd_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_upd_sys</name><operator>-&gt;</operator><name>p_overlay</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ov</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ov</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_upd_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>updater_unlock_overlay</name><parameter_list>(<parameter><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>p_upd_sys</name><operator>-&gt;</operator><name>p_overlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_upd_sys</name><operator>-&gt;</operator><name>p_overlay</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_upd_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subpictureUpdaterValidate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_fmt_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_fmt_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_overlay</name> <init>= <expr><call><name>updater_lock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_overlay</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name><name>p_overlay</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>Outdated</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>updater_unlock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subpictureUpdaterUpdate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_overlay</name> <init>= <expr><call><name>updater_lock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_overlay</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_overlay</name><operator>-&gt;</operator><name>p_regions</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_src</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>updater_unlock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_src</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <call><name>subpicture_region_Copy</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p_dst</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>p_dst</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_overlay</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>Displayed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updater_unlock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subpictureUpdaterDestroy</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_overlay</name> <init>= <expr><call><name>updater_lock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_overlay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_overlay</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ToDisplay</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_overlay</name><operator>-&gt;</operator><name>b_on_vout</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updater_unlock_overlay</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unref_subpicture_updater</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>bluraySubpictureCreate</name><parameter_list>(<parameter><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_ov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bluray_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_upd_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_upd_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_upd_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_upd_sys</name><operator>-&gt;</operator><name>p_overlay</name></name> <operator>=</operator> <name>p_ov</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pf_validate</name> <operator>=</operator> <name>subpictureUpdaterValidate</name></expr>,

<expr><operator>.</operator><name>pf_update</name> <operator>=</operator> <name>subpictureUpdaterUpdate</name></expr>,

<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>subpictureUpdaterDestroy</name></expr>,

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>p_upd_sys</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>subpicture_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updater</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_upd_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>p_ov</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>p_ov</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_upd_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_upd_sys</name><operator>-&gt;</operator><name>ref_cnt</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name> <operator>=</operator> <name>p_upd_sys</name></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onMouseEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>newmouse</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newmouse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mouse_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>oldmouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mouse_HasMoved</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>oldmouse</name></name></expr></argument>, <argument><expr><name>newmouse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_mouse_select</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>newmouse</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>newmouse</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>oldmouse</name></name></expr></argument>, <argument><expr><name>newmouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_user_input</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>BD_VK_MOUSE_ACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>oldmouse</name></name> <operator>=</operator> <operator>*</operator><name>newmouse</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sendKeyEvent</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bd_user_input</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayCloseOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ov</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ov</name><operator>-&gt;</operator><name>p_updater</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unref_subpicture_updater</name><argument_list>(<argument><expr><name><name>ov</name><operator>-&gt;</operator><name>p_updater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_DELETE_OVERLAY</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_region_ChainDelete</name><argument_list>(<argument><expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayActivateOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ov</name><operator>-&gt;</operator><name>status</name></name> <operator>&gt;=</operator> <name>Displayed</name> <operator>&amp;&amp;</operator> <name><name>ov</name><operator>-&gt;</operator><name>b_on_vout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>Outdated</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ToDisplay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayClearOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_region_ChainDelete</name><argument_list>(<argument><expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>Outdated</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayInitOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Trying to init over an existing overlay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayClearOverlay</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayCloseOverlay</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ov</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>b_on_vout</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>ov</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayDrawOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_OVERLAY</name><modifier>*</modifier> <specifier>const</specifier></type> <name>eventov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name><name>eventov</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_reg</name> <init>= <expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_reg</name> <init>= <expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_reg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_last</name> <operator>=</operator> <name>p_reg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>==</operator> <name><name>eventov</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator>

<name><name>p_reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>==</operator> <name><name>eventov</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;&amp;</operator>

<name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>==</operator> <name><name>eventov</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator>

<name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>==</operator> <name><name>eventov</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator>

<name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp_reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_reg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_reg</name> <operator>=</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eventov</name><operator>-&gt;</operator><name>img</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_reg</name> <operator>=</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_region_Delete</name><argument_list>(<argument><expr><name>p_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_reg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument>, <argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_reg</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_last</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_reg</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <name>p_reg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BD_PG_RLE_ELEM</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name><name>eventov</name><operator>-&gt;</operator><name>img</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>eventov</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>eventov</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_reg</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>eventov</name><operator>-&gt;</operator><name>palette</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>T</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayOverlayProc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_OVERLAY</name> <modifier>*</modifier><specifier>const</specifier></type> <name>overlay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overlay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Closing overlays."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_OVERLAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayCloseOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name> <operator>&gt;=</operator> <name>MAX_OVERLAY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>overlay</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BD_OVERLAY_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Initializing overlay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayInitOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_OVERLAY_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>blurayClearOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayCloseOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_OVERLAY_CLEAR</name></expr>:</case>

<expr_stmt><expr><call><name>blurayClearOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_OVERLAY_FLUSH</name></expr>:</case>

<expr_stmt><expr><call><name>blurayActivateOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_OVERLAY_DRAW</name></expr>:</case>

<case>case <expr><name>BD_OVERLAY_WIPE</name></expr>:</case>

<expr_stmt><expr><call><name>blurayDrawOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown BD overlay command: %u"</literal></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayInitArgbOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>blurayInitOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayDrawArgbOverlay</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_ARGB_OVERLAY</name><modifier>*</modifier> <specifier>const</specifier></type> <name>eventov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name><name>eventov</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>rgbchroma</name> <init>= <expr><name>VLC_CODEC_ARGB</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>rgbchroma</name> <init>= <expr><name>VLC_CODEC_BGRA</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>,

<argument><expr><name>rgbchroma</name></expr></argument>,

<argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name><name>ov</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>ov</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ov</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_reg</name> <init>= <expr><name><name>ov</name><operator>-&gt;</operator><name>p_regions</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_reg</name> <operator>||</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>rgbchroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>eventov</name><operator>-&gt;</operator><name>argb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name><name>p_reg</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>

<name><name>p_reg</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>eventov</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator>

<name><name>eventov</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>stride</name></name> <operator>==</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name><name>eventov</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name><name>eventov</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>eventov</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>(<init><decl><type><name>uint16_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name><name>eventov</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>eventov</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>eventov</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayArgbOverlayProc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_ARGB_OVERLAY</name> <modifier>*</modifier><specifier>const</specifier></type> <name>overlay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name> <operator>&gt;=</operator> <name>MAX_OVERLAY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>overlay</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BD_ARGB_OVERLAY_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayInitArgbOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_ARGB_OVERLAY_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayClearOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayCloseOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_ARGB_OVERLAY_FLUSH</name></expr>:</case>

<expr_stmt><expr><call><name>blurayActivateOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_ARGB_OVERLAY_DRAW</name></expr>:</case>

<expr_stmt><expr><call><name>blurayDrawArgbOverlay</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown BD ARGB overlay command: %u"</literal></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bluraySendOverlayToVout</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>p_ov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_ov</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_ov</name><operator>-&gt;</operator><name>b_on_vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unref_subpicture_updater</name><argument_list>(<argument><expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>bluraySubpictureCreate</name><argument_list>(<argument><expr><name>p_ov</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"bluraySubpictureCreate() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_CREATE_OVERLAY</name></expr></argument>,

<argument><expr><name>plane</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>unref_subpicture_updater</name><argument_list>(<argument><expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>p_updater</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>b_on_vout</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>b_on_vout</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ov</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>Outdated</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>blurayTitleIsRepeating</name><parameter_list>(<parameter><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>title_info</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>repeats</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ratio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLURAY_VERSION</name> <operator>&gt;=</operator> <call><name>BLURAY_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>BLURAY_CLIP_INFO</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>maxrepeats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sequence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>title_info</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>title_info</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>title_info</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>clip_ref</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>title_info</name><operator>-&gt;</operator><name>clip_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>title_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_time</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>title_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>clip_id</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>clip_id</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>prev</name><operator>-&gt;</operator><name>in_time</name></name> <operator>!=</operator> <name><name>title_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in_time</name> <operator>||</operator>

<name><name>prev</name><operator>-&gt;</operator><name>pkt_count</name></name> <operator>!=</operator> <name><name>title_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pkt_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sequence</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>title_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>maxrepeats</name> <operator>&lt;</operator> <name>sequence</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxrepeats</name> <operator>=</operator> <name>sequence</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>maxrepeats</name> <operator>&gt;</operator> <name>repeats</name> <operator>&amp;&amp;</operator>

<operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>maxrepeats</name> <operator>/</operator> <name><name>title_info</name><operator>-&gt;</operator><name>chapter_count</name></name><operator>)</operator> <operator>&gt;=</operator> <name>ratio</name><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayUpdateTitleInfo</name><parameter_list>(<parameter><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>title_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>title_info</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>blurayTitleIsRepeating</name><argument_list>(<argument><expr><name>title_info</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>title_info</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>title_info</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayInitTitles</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>menu_titles</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BLURAY_DISC_INFO</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>bd_get_disc_info</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_title</name> <init>= <expr><name>menu_titles</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_title</name> <operator>=</operator> <call><name>bd_get_titles</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>TITLES_RELEVANT</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_longest_title</name></name> <operator>=</operator> <call><name>bd_get_main_title</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_title</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>title_info</name> <init>= <expr><call><name>bd_get_title_info</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blurayUpdateTitleInfo</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>title_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_free_title_info</name><argument_list>(<argument><expr><name>title_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Top Menu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>INPUT_TITLE_MENU</name> <operator>|</operator> <name>INPUT_TITLE_INTERACTIVE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>i_title</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"First Play"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>first_play</name></name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>first_play</name><operator>-&gt;</operator><name>interactive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>INPUT_TITLE_INTERACTIVE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>titles</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>di</name><operator>-&gt;</operator><name>num_titles</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>titles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>titles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>titles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>interactive</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>INPUT_TITLE_INTERACTIVE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayRestartParser</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_random_access</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_flush</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_DISABLE_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_demux_chained_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_flush</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tf_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_TF_FILTER_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name> <operator>=</operator> <call><name>vlc_demux_chained_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to create TS demuxer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_ENABLE_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_RANDOM_ACCESS</name></expr></argument>, <argument><expr><name>b_random_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bluraySetTitle</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_title</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Playing TopMenu Title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bd_menu_call</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i_title</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Playing FirstPlay Title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bd_play_title</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_TITLE_FIRST_PLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Playing Title %i"</literal></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bd_play_title</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot play bd title '%d'"</literal></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_title</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_title</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_longest_title</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>i_title</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Selecting Title %i"</literal></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bd_select_title</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot select bd title '%d'"</literal></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLURAY_VERSION</name> <operator>&lt;</operator> <call><name>BLURAY_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_AUDIO_STREAM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayOnUserStreamSelection</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_pid</name> <operator>==</operator> <operator>-</operator><name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_select_stream</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_AUDIO_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>i_pid</name> <operator>==</operator> <operator>-</operator><name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_select_stream</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PG_TEXTST_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_pid</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1100</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_in_playlist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_id</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>audio_stream_count</name></name></expr>;</condition> <incr><expr><name>i_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_pid</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>audio_streams</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bd_select_stream</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_AUDIO_STREAM</name></expr></argument>, <argument><expr><name>i_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_set_player_setting_str</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_AUDIO_LANG</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>audio_streams</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_in_playlist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_in_playlist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Incorrect playlist for menuless track, forcing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name></expr></argument>,

<argument><expr><name>BD_EVENT_AUDIO_STREAM</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>i_pid</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1200</literal> <operator>||</operator> <name>i_pid</name> <operator>==</operator> <literal type="number">0x1800</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_in_playlist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_id</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>pg_stream_count</name></name></expr>;</condition> <incr><expr><name>i_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_pid</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>pg_streams</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bd_select_stream</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PG_TEXTST_STREAM</name></expr></argument>, <argument><expr><name>i_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bd_set_player_setting_str</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_PLAYER_SETTING_PG_LANG</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>pg_streams</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_in_playlist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_in_playlist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Incorrect playlist for menuless track, forcing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name></expr></argument>,

<argument><expr><name>BD_EVENT_PG_TEXTST_STREAM</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blurayControl</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"disc-caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BLURAY_RATE_NORMAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bd_set_rate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>BLURAY_RATE_NORMAL</name> <operator>*</operator> <operator>(</operator><operator>!</operator><name>b_paused</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_ES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blurayOnUserStreamSelection</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_ES_LIST</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_title</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bluraySetTitle</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_chapter</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bd_seek_chapter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>i_chapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_seekpoint</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_chapter_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_title_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_chapter_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_title_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ppp_title</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>vlc_input_title_Duplicate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_dup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>pi_int</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>CURRENT_TITLE</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>INPUT_TITLE_INTERACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr> ?</condition><then> <expr><name>CUR_LENGTH</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>bd_seek_time</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_time</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>CURRENT_TITLE</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>INPUT_TITLE_INTERACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><call><name>bd_tell_time</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_position</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>CURRENT_TITLE</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>INPUT_TITLE_INTERACTIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_position</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&amp;&amp;</operator> <name>CUR_LENGTH</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><operator>(</operator><name>double</name><operator>)</operator><call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><call><name>bd_tell_time</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>/</operator><name>CUR_LENGTH</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_position</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bd_seek_time</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name>f_position</name><operator>*</operator><name>CUR_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>META_DL</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>language_code</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Language"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>language_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Filename"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>di_alternative</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Alternative"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>di_alternative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_url</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"attachment://%s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>thumb_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>meta</name><operator>-&gt;</operator><name>thumbnails</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_thumbpath</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_thumbpath</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"BDMV"</literal> <name>DIR_SEP</name> <literal type="string">"META"</literal> <name>DIR_SEP</name> <literal type="string">"DL"</literal> <name>DIR_SEP</name> <literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_bd_path</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>thumbnails</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_thumburl</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>(<argument><expr><name>psz_thumbpath</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_thumbpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz_thumburl</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetArtURL</name><argument_list>(<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_thumburl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_thumburl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>=

<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ppp_attach</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>vlc_input_attachment_Duplicate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_dup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>pi_int</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_NAV_ACTIVATE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_popup_available</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu_open</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_POPUP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_ENTER</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_UP</name></expr>:</case>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_UP</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_DOWN</name></expr>:</case>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_DOWN</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_LEFT</name></expr>:</case>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_LEFT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_RIGHT</name></expr>:</case>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_RIGHT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_POPUP</name></expr>:</case>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_POPUP</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_NAV_MENU</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bd_menu_call</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't select Top Menu title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sendKeyEvent</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BD_VK_POPUP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_ALL</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_LIST</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeTsPacketWDiscontinuity</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_payload</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_payload</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ts_header</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 

<expr><literal type="number">0x47</literal></expr>,

<expr><literal type="number">0x40</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i_pid</name> <operator>&amp;</operator> <literal type="number">0x1f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, <expr><name>i_pid</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>, 

<expr><name>i_payload</name> <operator>?</operator> <literal type="number">0x30</literal> <operator>:</operator> <literal type="number">0x20</literal></expr>, 

<expr><literal type="number">192</literal> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>i_payload</name></expr>, 

<expr><literal type="number">0x82</literal></expr>, 

<expr><literal type="number">0x0E</literal></expr>, 

<expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'_'</literal></expr>,

<expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'U'</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>ts_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts_header</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts_header</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">192</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ts_header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_payload</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">192</literal> <operator>-</operator> <name>i_payload</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_payload</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>notifyStreamsDiscontinuity</name><parameter_list>( <parameter><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>BLURAY_STREAM_INFO</name> <modifier>*</modifier></type><name>p_sinfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_sinfo</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_sinfo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_pid</name> <init>= <expr><name><name>p_sinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writeTsPacketWDiscontinuity</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_demux_chained_Send</name><argument_list>(<argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONOTIFY</name><parameter_list>(<parameter><type><name>memb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>notifyStreamsDiscontinuity( p_sys-&gt;p_parser, p_clip-&gt;memb##_streams, p_clip-&gt;memb##_stream_count )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>notifyDiscontinuityToParser</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BLURAY_CLIP_INFO</name> <modifier>*</modifier></type><name>p_clip</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_clip</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>ig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>sec_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DONOTIFY</name><argument_list>(<argument><expr><name>sec_video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DONOTIFY</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>streamFlush</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flushed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bd_stream_type_e</name></type> <name>i_coding_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_coding_type</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>video_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coding_type</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_coding_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_eos</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_coding_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>BLURAY_STREAM_TYPE_VIDEO_MPEG1</name></expr>:</case>

<case>case <expr><name>BLURAY_STREAM_TYPE_VIDEO_MPEG2</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>i_eos</name> <operator>=</operator> <literal type="number">0xB7</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>BLURAY_STREAM_TYPE_VIDEO_VC1</name></expr>:</case>

<case>case <expr><name>BLURAY_STREAM_TYPE_VIDEO_H264</name></expr>:</case>

<expr_stmt><expr><name>i_eos</name> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>BD_STREAM_TYPE_VIDEO_HEVC</name></expr>:</case>

<expr_stmt><expr><name>i_eos</name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>seq_end_pes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><name>i_eos</name></expr>, 

<expr><literal type="number">0x00</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writeTsPacketWDiscontinuity</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0x1011</literal></expr></argument>, <argument><expr><name>seq_end_pes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq_end_pes</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_demux_chained_Send</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayResetStillImage</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>!=</operator> <name>STILL_IMAGE_NOT_SET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>=</operator> <name>STILL_IMAGE_NOT_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayStillImage</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_timeout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>!=</operator> <name>STILL_IMAGE_NOT_SET</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>!=</operator> <name>STILL_IMAGE_INFINITE</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>&lt;=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Still image end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_read_skip_still</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayResetStillImage</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>==</operator> <name>STILL_IMAGE_NOT_SET</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_timeout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Still image (%d seconds)"</literal></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Still image (infinite)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_still_end_time</name></name> <operator>=</operator> <name>STILL_IMAGE_INFINITE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>streamFlush</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_empty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayOnStreamSelectedEvent</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_id</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <name>BD_EVENT_AUDIO_STREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_pid</name> <operator>=</operator> <call><name>blurayGetStreamPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i_type</name> <operator>==</operator> <name>BD_EVENT_PG_TEXTST_STREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_pid</name> <operator>=</operator> <call><name>blurayGetStreamPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <name>BD_EVENT_PG_TEXTST_STREAM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_UNSET_ES_BY_PID</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_type</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_SET_ES_BY_PID</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_type</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayUpdatePlaylist</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <call><name>bd_get_current_title</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_seekpoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BLURAY_TITLE_INFO</name> <modifier>*</modifier></type><name>p_title_info</name> <init>= <expr><call><name>bd_get_playlist_info</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>i_playlist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_title_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blurayUpdateTitleInfo</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>p_title_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE_LIST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setTitleInfo</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_title_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayResetStillImage</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayOnClipUpdate</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>clip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name></name> <operator>&amp;&amp;</operator> <name>clip</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name><operator>-&gt;</operator><name>clip_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pl_info</name><operator>-&gt;</operator><name>clips</name><index>[<expr><name>clip</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_clip_info</name><operator>-&gt;</operator><name>video_stream_count</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CLPI_CL</name> <modifier>*</modifier></type><name>clpi</name> <init>= <expr><call><name>bd_get_clpi</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>clpi</name> <operator>&amp;&amp;</operator> <name><name>clpi</name><operator>-&gt;</operator><name>clip</name><operator>.</operator><name>application_type</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>clip_application_type</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>clip_application_type</name></name> <operator>==</operator> <name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_TIMED_SLIDESHOW</name> <operator>||</operator>

<name><name>clpi</name><operator>-&gt;</operator><name>clip</name><operator>.</operator><name>application_type</name></name> <operator>==</operator> <name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_TIMED_SLIDESHOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>clpi</name><operator>-&gt;</operator><name>clip</name><operator>.</operator><name>application_type</name></name> <operator>==</operator> <name>BD_CLIP_APP_TYPE_TS_MAIN_PATH_TIMED_SLIDESHOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_ENABLE_LOW_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_DISABLE_LOW_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bd_free_clpi</name><argument_list>(<argument><expr><name>clpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pl_info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayResetStillImage</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayHandleEvent</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BD_EVENT</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_delayed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blurayDebugEvent</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BD_EVENT_TITLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name> <operator>==</operator> <name>BLURAY_TITLE_FIRST_PLAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>setTitleInfo</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_PLAYLIST</name></expr>:</case>

<expr_stmt><expr><call><name>blurayUpdatePlaylist</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pl_playing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Stopping playlist playback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pl_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_PLAYITEM</name></expr>:</case>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayOnClipUpdate</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_CHAPTER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name> <operator>&lt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_seekpoint</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_seekpoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_PLAYMARK</name></expr>:</case>

<case>case <expr><name>BD_EVENT_ANGLE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>BD_EVENT_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLURAY_VERSION</name> <operator>&gt;=</operator> <call><name>BLURAY_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">8</literal><operator>,</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>BD_EVENT_UO_MASK_CHANGED</name></expr>:</case>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>BD_EVENT_MENU</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu_open</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_POPUP</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_popup_available</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blu-ray error"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"Playback with BluRay menus failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fatal_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_ENCRYPTED</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blu-ray error"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"This disc seems to be encrypted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fatal_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_READ_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"bluray: read error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_PG_TEXTST</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_enable</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_AUDIO_STREAM</name></expr>:</case>

<case>case <expr><name>BD_EVENT_PG_TEXTST_STREAM</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>b_delayed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayOnStreamSelectedEvent</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name></name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_IG_STREAM</name></expr>:</case>

<case>case <expr><name>BD_EVENT_SECONDARY_AUDIO</name></expr>:</case>

<case>case <expr><name>BD_EVENT_SECONDARY_AUDIO_STREAM</name></expr>:</case>

<case>case <expr><name>BD_EVENT_SECONDARY_VIDEO</name></expr>:</case>

<case>case <expr><name>BD_EVENT_SECONDARY_VIDEO_STREAM</name></expr>:</case>

<case>case <expr><name>BD_EVENT_SECONDARY_VIDEO_SIZE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>BD_EVENT_STILL_TIME</name></expr>:</case>

<expr_stmt><expr><call><name>blurayStillImage</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_DISCONTINUITY</name></expr>:</case>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>BLURAY_ES_OUT_CONTROL_FLAG_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_END_OF_TITLE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pl_playing</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>notifyDiscontinuityToParser</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayRestartParser</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pl_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>BD_EVENT_IDLE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"event: %d param: %d"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blurayHandleOverlays</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_OVERLAY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bluray_overlay_t</name> <modifier>*</modifier></type><name>ov</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>p_overlays</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ov</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>display</name> <init>= <expr><name><name>ov</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ToDisplay</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ov</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ov</name><operator>-&gt;</operator><name>b_on_vout</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bluraySendOverlayToVout</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bdj</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blurayDemux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BD_EVENT</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_empty</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <name>b_empty</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_draining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Draining..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>BD_READ_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>bd_read</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>BD_READ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bd_get_event</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayHandleEvent</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>bd_read_ext</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>BD_READ_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>e</name><operator>.</operator><name>event</name></name> <operator>!=</operator> <name>BD_EVENT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blurayHandleEvent</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bd_get_event</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bluray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blurayHandleEvent</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>events_delayed</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blurayHandleOverlays</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fatal_error</name></name> <operator>||</operator> <name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"bluray: stopping playback after fatal error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_menu</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_demux_chained_Send</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_parser</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
