<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\mms\buffer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>var_buffer_initwrite</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_default_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_default_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_default_size</name></expr> </then><else>: <expr><literal type="number">2048</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>var_buffer_reinitwrite</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_default_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <name>i_default_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_default_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_default_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_default_size</name></expr> </then><else>: <expr><literal type="number">2048</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_add8</name> <parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_byte</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name></expr>]</index></name> <operator>=</operator> <name>i_byte</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_add16</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_word</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_word</name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>(</operator> <name>i_word</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_add32</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_dword</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_dword</name><operator>&amp;</operator><literal type="number">0xffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>(</operator> <name>i_dword</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_add64</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_long</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_long</name><operator>&amp;</operator><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>(</operator> <name>i_long</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_addmemory</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_mem</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <name>i_mem</name> <operator>&gt;=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+=</operator> <name>i_mem</name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>+</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>, <argument><expr><name>p_mem</name></expr></argument>, <argument><expr><name>i_mem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+=</operator> <name>i_mem</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_addUTF16</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_str</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>ToCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><name>p_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>ToCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>p_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"UTF-16 conversion failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_out</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_out</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name><name>p_out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_free</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_initread</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>var_buffer_get8</name> <parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_byte</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_byte</name> <operator>=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>i_byte</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>var_buffer_get16</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_b1</name></decl>, <decl><type ref="prev"/><name>i_b2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_b1</name> <operator>=</operator> <call><name>var_buffer_get8</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_b2</name> <operator>=</operator> <call><name>var_buffer_get8</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>i_b1</name> <operator>+</operator> <operator>(</operator> <name>i_b2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>var_buffer_get32</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_w1</name></decl>, <decl><type ref="prev"/><name>i_w2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_w1</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_w2</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>i_w1</name> <operator>+</operator> <operator>(</operator> <name>i_w2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>var_buffer_get64</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_dw1</name></decl>, <decl><type ref="prev"/><name>i_dw2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dw1</name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dw2</name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>i_dw1</name> <operator>+</operator> <operator>(</operator> <name>i_dw2</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>var_buffer_getmemory</name> <parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_mem</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_mem</name></expr></argument>, <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_mem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_mem</name></expr></argument>, <argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>p_data</name></name> <operator>+</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> , <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>i_copy</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>var_buffer_readempty</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return<expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_size</name></name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_buffer_getguid</name><parameter_list>( <parameter><decl><type><name>var_buffer_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_guid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data1</name></name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data2</name></name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data3</name></name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>var_buffer_get8</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
