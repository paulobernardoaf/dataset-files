<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\vcd\cdrom_internals.h"><struct>struct <name>vcddev_s</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_vcdimage_handle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vcddev_toc_t</name></type> <name>toc</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_device_handle</name></decl>;</decl_stmt> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>HFILE</name></type> <name>hcd</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i_device_handle</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCDDEV_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>darwin_freeTOC</name><parameter_list>( <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>free( (void*)p )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_MIN_TRACK_NO</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_MAX_TRACK_NO</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXIMUM_NUMBER_TRACKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXIMUM_NUMBER_TRACKS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>_TRACK_DATA</name> <block>{

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Control</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Adr</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>TrackNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>Address</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>TRACK_DATA</name><operator>,</operator> *<name>PTRACK_DATA</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CDROM_TOC</name> <block>{

<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>Length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>FirstTrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>LastTrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRACK_DATA</name></type> <name><name>TrackData</name><index>[<expr><name>MAXIMUM_NUMBER_TRACKS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>CDROM_TOC</name><operator>,</operator> *<name>PCDROM_TOC</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_TRACK_MODE_TYPE</name> <block>{

<decl><name>YellowMode2</name></decl>,

<decl><name>XAForm2</name></decl>,

<decl><name>CDDA</name></decl>

}</block></enum></type> <name>TRACK_MODE_TYPE</name><operator>,</operator> *<name>PTRACK_MODE_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>__RAW_READ_INFO</name> <block>{

<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>DiskOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>SectorCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TRACK_MODE_TYPE</name></type> <name>TrackMode</name></decl>;</decl_stmt>

}</block></struct></type> <name>RAW_READ_INFO</name><operator>,</operator> *<name>PRAW_READ_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CDROM_READ_TOC_EX</name> <block>{

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Format</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Reserved1</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Msf</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>SessionTrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Reserved2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCHAR</name></type> <name>Reserved3</name></decl>;</decl_stmt>

}</block></struct></type> <name>CDROM_READ_TOC_EX</name><operator>,</operator> *<name>PCDROM_READ_TOC_EX</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IOCTL_CDROM_BASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_CDROM_BASE</name></cpp:macro> <cpp:value>FILE_DEVICE_CD_ROM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IOCTL_CDROM_READ_TOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_CDROM_READ_TOC</name></cpp:macro> <cpp:value>CTL_CODE(IOCTL_CDROM_BASE, 0x0000, METHOD_BUFFERED, FILE_READ_ACCESS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IOCTL_CDROM_RAW_READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_CDROM_RAW_READ</name></cpp:macro> <cpp:value>CTL_CODE(IOCTL_CDROM_BASE, 0x000F, METHOD_OUT_DIRECT, FILE_READ_ACCESS)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCTL_CDROM_READ_TOC_EX</name></cpp:macro> <cpp:value>CTL_CODE(IOCTL_CDROM_BASE, 0x0015, METHOD_BUFFERED, FILE_READ_ACCESS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_CDROM_READ_TOC_EX_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDROM_READ_TOC_EX_FORMAT_CDTEXT</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name> <name>push</name><name>,</name> <name>1</name> <name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct <name>os2_msf_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>minute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reserved</name></decl>;</decl_stmt>

}</block></struct></type> <name>os2_msf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cdrom_get_tochdr_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>cdrom_get_tochdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cdrom_tochdr_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>first_track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>last_track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>os2_msf_t</name></type> <name>lead_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>cdrom_tochdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cdrom_get_track_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>track</name></decl>;</decl_stmt>

}</block></struct></type> <name>cdrom_get_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cdrom_track_s</name>

<block>{

<decl_stmt><decl><type><name>os2_msf_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>adr</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>control</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>cdrom_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cdrom_readlong_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sign</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>addr_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sectors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>interleaved_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>cdrom_readlong_t</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name> <name>pop</name> <name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_TYPE_MODE2_FORM2</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTOR_TYPE_CDDA</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_CD_RAW_MODE2</name></cpp:macro> <cpp:value>0xF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_CD_USERDATA</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenVCDImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vcddev_s</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseVCDImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vcddev_s</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>CDTOC</name> <modifier>*</modifier></type><name>darwin_getTOC</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vcddev_s</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>darwin_getNumberOfTracks</name><parameter_list>( <parameter><decl><type><name>CDTOC</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_vcd_open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vcddev_s</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>os2_vcd_open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vcddev_s</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
