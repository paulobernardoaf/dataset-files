<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\rdp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boolean</name></cpp:macro> <cpp:value>bool</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;freerdp/freerdp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;freerdp/settings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;freerdp/channels/channels.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;freerdp/gdi/gdi.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_INTERFACE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;freerdp/version.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FREERDP_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SoftwareGdi</name></cpp:macro> <cpp:value>sw_gdi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fullscreen</name></cpp:macro> <cpp:value>fullscreen</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ServerHostname</name></cpp:macro> <cpp:value>hostname</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Username</name></cpp:macro> <cpp:value>username</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Password</name></cpp:macro> <cpp:value>password</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ServerPort</name></cpp:macro> <cpp:value>port</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EncryptionMethods</name></cpp:macro> <cpp:value>encryption</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ContextSize</name></cpp:macro> <cpp:value>context_size</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_TEXT</name></cpp:macro> <cpp:value>N_("Username")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Username that will be used for the connection, " "if no username is set in the URL.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_TEXT</name></cpp:macro> <cpp:value>N_("Password")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Password that will be used for the connection, " "if no username or password are set in URL.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDP_ENCRYPT</name></cpp:macro> <cpp:value>N_("Encrypted connexion")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDP_FPS</name></cpp:macro> <cpp:value>N_("Frame rate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDP_FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Acquisition rate (in fps)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"rdp-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"RDP"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rdp"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"RDP Remote Desktop"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"user"</literal></argument>, <argument>NULL</argument>, <argument>USER_TEXT</argument>, <argument>USER_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_password</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"password"</literal></argument>, <argument>NULL</argument>, <argument>PASS_TEXT</argument>, <argument>PASS_LONGTEXT</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"fps"</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>RDP_FPS</argument>, <argument>RDP_FPS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"encrypt"</literal></argument>, <argument>false</argument>, <argument>RDP_ENCRYPT</argument>, <argument>RDP_ENCRYPT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDP_MAX_FD</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>freerdp</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_framebuffersize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_starttime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_port</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<struct>struct <name>vlcrdp_context_t</name>

<block>{

<decl_stmt><decl><type><name>rdpContext</name></type> <name>rdp_context</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rdpSettings</name><modifier>*</modifier></type> <name>p_settings</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>vlcrdp_context_t</name></name></type> <name>vlcrdp_context_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>desktopResizeHandler</name><parameter_list>( <parameter><decl><type><name>rdpContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name>p_context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rdpGdi</name> <modifier>*</modifier></type><name>p_gdi</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>gdi</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_gdi</name><operator>-&gt;</operator><name>bytesPerPixel</name></name></expr> )</condition>

<block>{<block_content>

<default>default:</default>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB16</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_gdi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_gdi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name> <operator>=</operator> <name><name>p_gdi</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>p_gdi</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>p_gdi</name><operator>-&gt;</operator><name>bytesPerPixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>beginPaintHandler</name><parameter_list>( <parameter><decl><type><name>rdpContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name>p_context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rdpGdi</name> <modifier>*</modifier></type><name>p_gdi</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>gdi</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_gdi</name><operator>-&gt;</operator><name>primary</name><operator>-&gt;</operator><name>hdc</name><operator>-&gt;</operator><name>hwnd</name><operator>-&gt;</operator><name>invalid</name><operator>-&gt;</operator><name>null</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gdi</name><operator>-&gt;</operator><name>primary</name><operator>-&gt;</operator><name>hdc</name><operator>-&gt;</operator><name>hwnd</name><operator>-&gt;</operator><name>ninvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>endPaintHandler</name><parameter_list>( <parameter><decl><type><name>rdpContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name>p_context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rdpGdi</name> <modifier>*</modifier></type><name>p_gdi</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>gdi</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_framebuffersize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_gdi</name><operator>-&gt;</operator><name>primary_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>preConnectHandler</name><parameter_list>( <parameter><decl><type><name>freerdp</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>SoftwareGdi</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>Fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>ServerHostname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_hostname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>Username</name></name> <operator>=</operator>

<call><name>var_InheritString</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"user"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>Password</name></name> <operator>=</operator>

<call><name>var_InheritString</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"password"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>ServerPort</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>settings</name><operator>-&gt;</operator><name>EncryptionMethods</name></name> <operator>=</operator>

<call><name>var_InheritBool</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"encrypt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>postConnectHandler</name><parameter_list>( <parameter><decl><type><name>freerdp</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<macro><name>msg_Dbg</name><argument_list>( <argument>p_vlccontext-&gt;p_demux</argument>, <argument><literal type="string">"connected to desktop %dx%d (%d bpp)"</literal></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FREERDP_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<argument>p_instance-&gt;settings-&gt;DesktopWidth</argument>,

<argument>p_instance-&gt;settings-&gt;DesktopHeight</argument>,

<argument>p_instance-&gt;settings-&gt;ColorDepth

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

p_instance-&gt;settings-&gt;width</argument>,

<argument>p_instance-&gt;settings-&gt;height</argument>,

<argument>p_instance-&gt;settings-&gt;color_depth</argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>update</name><operator>-&gt;</operator><name>DesktopResize</name></name> <operator>=</operator> <name>desktopResizeHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>update</name><operator>-&gt;</operator><name>BeginPaint</name></name> <operator>=</operator> <name>beginPaintHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>update</name><operator>-&gt;</operator><name>EndPaint</name></name> <operator>=</operator> <name>endPaintHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdi_init</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>,

<argument><expr><name>CLRBUF_16BPP</name> <operator>|</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FREERDP_VERSION_MINOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>FREERDP_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FREERDP_VERSION_MINOR</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<name>CLRBUF_24BPP</name> <operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>CLRBUF_32BPP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>desktopResizeHandler</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>authenticateHandler</name><parameter_list>( <parameter><decl><type><name>freerdp</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_username</name></decl></parameter>,

<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_password</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_domain</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ppsz_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_username</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"user"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_password</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"password"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p_dbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_starttime</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<expr_stmt><expr><name>p_dbl</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dbl</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<expr_stmt><expr><name>p_meta</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DemuxThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_starttime</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_frame_date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_interval</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cancel_state</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>freerdp_shall_disconnect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>cancel_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"RDP server closed session"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>pp_rfds</name><index>[<expr><name>RDP_MAX_FD</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name><name>pp_wfds</name><index>[<expr><name>RDP_MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nbw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufds</name><index>[<expr><name>RDP_MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>fds</name></decl>;</struct>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>i_nbr</name></name> <operator>=</operator> <name><name>fds</name><operator>.</operator><name>i_nbw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>freerdp_get_fds</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument>, <argument><expr><name><name>fds</name><operator>.</operator><name>pp_rfds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fds</name><operator>.</operator><name>i_nbr</name></name></expr></argument>,

<argument><expr><name><name>fds</name><operator>.</operator><name>pp_wfds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fds</name><operator>.</operator><name>i_nbw</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>true</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>cancel_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get FDS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>( <expr><operator>(</operator><name><name>fds</name><operator>.</operator><name>i_nbr</name></name> <operator>+</operator> <name><name>fds</name><operator>.</operator><name>i_nbw</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>cancel_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fds</name><operator>.</operator><name>i_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name></expr> ]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>fds</name><operator>.</operator><name>pp_rfds</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name><operator>++</operator></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fds</name><operator>.</operator><name>i_nbw</name></name> <operator>&amp;&amp;</operator> <name>i_count</name> <operator>&lt;</operator> <name>RDP_MAX_FD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content> 

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name></expr> ]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>fds</name><operator>.</operator><name>pp_wfds</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name></expr> ]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>ufds</name><index>[ <expr><name>i_count</name><operator>++</operator></expr> ]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>poll</name><argument_list>( <argument><expr><name><name>fds</name><operator>.</operator><name>ufds</name></name></expr></argument>, <argument><expr><name>i_count</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_interval</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>cancel_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>( <argument><expr><name>i_next_frame_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_next_frame_date</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_interval</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>cancel_state</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freerdp_check_fds</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>cancel_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>( <argument><expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_starttime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"fps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_interval</name></name> <operator>=</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FREERDP_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FREERDP_VERSION_MINOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<expr_stmt><expr><call><name>freerdp_channels_global_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name> <operator>=</operator> <call><name>freerdp_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"rdp instantiation error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name><operator>-&gt;</operator><name>PreConnect</name></name> <operator>=</operator> <name>preConnectHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name><operator>-&gt;</operator><name>PostConnect</name></name> <operator>=</operator> <name>postConnectHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name><operator>-&gt;</operator><name>Authenticate</name></name> <operator>=</operator> <name>authenticateHandler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name><operator>-&gt;</operator><name>ContextSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>vlcrdp_context_t</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freerdp_context_new</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlcrdp_context_t</name> <modifier>*</modifier></type> <name>p_vlccontext</name> <init>= <expr><operator>(</operator><name>vlcrdp_context_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_vlccontext</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>=</operator> <name>p_demux</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_hostname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_hostname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"localhost"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr> </then><else>: <expr><literal type="number">3389</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>freerdp_connect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't connect to rdp server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>DemuxThread</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't spawn thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freerdp_disconnect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>freerdp_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_hostname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freerdp_disconnect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freerdp_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FREERDP_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>FREERDP_VERSION_MINOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>

<expr_stmt><expr><call><name>freerdp_channels_global_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_hostname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
