<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dvb\scan.h"><typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_DVB_T</name></decl>,

<decl><name>SCAN_DVB_S</name></decl>,

<decl><name>SCAN_DVB_C</name></decl>,

}</block></enum></type> <name>scan_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_DELIVERY_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_DELIVERY_DVB_T</name></decl>,

<decl><name>SCAN_DELIVERY_DVB_T2</name></decl>,

<decl><name>SCAN_DELIVERY_DVB_S</name></decl>,

<decl><name>SCAN_DELIVERY_DVB_S2</name></decl>,

<decl><name>SCAN_DELIVERY_DVB_C</name></decl>,

<decl><name>SCAN_DELIVERY_ISDB_T</name></decl>,

}</block></enum></type> <name>scan_delivery_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_MODULATION_AUTO</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_16</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_32</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_64</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_128</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_256</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,

<decl><name>SCAN_MODULATION_QAM_4NR</name></decl>,

<decl><name>SCAN_MODULATION_QAM_AUTO</name></decl>,

<decl><name>SCAN_MODULATION_PSK_8</name></decl>,

<decl><name>SCAN_MODULATION_QPSK</name></decl>,

<decl><name>SCAN_MODULATION_DQPSK</name></decl>,

<decl><name>SCAN_MODULATION_APSK_16</name></decl>,

<decl><name>SCAN_MODULATION_APSK_32</name></decl>,

<decl><name>SCAN_MODULATION_VSB_8</name></decl>,

<decl><name>SCAN_MODULATION_VSB_16</name></decl>,

}</block></enum></type> <name>scan_modulation_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_tuple</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a &lt;&lt; 16)|b)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_CODERATE_AUTO</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>SCAN_CODERATE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_CODERATE_1_2</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_2_3</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_3_4</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_3_5</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_4_5</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_5_6</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_7_8</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_8_9</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_CODERATE_9_10</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>,

}</block></enum></type> <name>scan_coderate_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_POLARIZATION_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_POLARIZATION_HORIZONTAL</name> <init>= <expr><literal type="char">'H'</literal></expr></init></decl>,

<decl><name>SCAN_POLARIZATION_CIRC_LEFT</name> <init>= <expr><literal type="char">'L'</literal></expr></init></decl>,

<decl><name>SCAN_POLARIZATION_CIRC_RIGHT</name> <init>= <expr><literal type="char">'R'</literal></expr></init></decl>,

<decl><name>SCAN_POLARIZATION_VERTICAL</name> <init>= <expr><literal type="char">'V'</literal></expr></init></decl>,

}</block></enum></type> <name>scan_polarization_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>SCAN_GUARD_INTERVAL_AUTO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_1_4</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_1_8</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_1_16</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_1_32</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_1_128</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_19_128</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>SCAN_GUARD_INTERVAL_19_256</name> <init>= <expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>,

}</block></enum></type> <name>scan_guard_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frequency</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bandwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_symbolrate</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>scan_modulation_t</name></type> <name>modulation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_coderate_t</name></type> <name>coderate_lp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_coderate_t</name></type> <name>coderate_hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_coderate_t</name></type> <name>inner_fec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_polarization_t</name></type> <name>polarization</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_delivery_t</name></type> <name>delivery</name></decl>;</decl_stmt>

}</block></struct></type> <name>scan_tuner_config_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>scan_parameter_t</name>

<block>{

<decl_stmt><decl><type><name>scan_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_exhaustive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_nit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_free_only</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_modulation_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_symbolrate</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_step</name></decl>;</decl_stmt>

}</block> <decl><name>frequency</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max</name></decl>;</decl_stmt>

}</block> <decl><name>bandwidth</name></decl>;</struct>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_scanlist_file</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>FORMAT_DVBv3</name></decl>,

<decl><name>FORMAT_DVBv5</name></decl>,

}</block> <decl><name>scanlist_format</name></decl>;</enum>

}</block></struct></type> <name>scan_parameter_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_READ_BUFFER_COUNT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>scan_t</name></name></type> <name>scan_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scan_frontend_tune_cb</name>)<parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scan_frontend_stats_cb</name>)<parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scan_demux_filter_cb</name>)<parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scan_demux_read_cb</name>)<parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name><name>struct</name> <name>scan_service_t</name></name></type> <name>scan_service_t</name>;</typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>scan_service_notify_cb</name>)<parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>scan_set_NotifyCB</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>scan_service_notify_cb</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetProvider</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>scan_service_GetUri</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>uint16_t</name></type> <name>scan_service_GetProgram</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetNetworkName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>scan_parameter_Init</name><parameter_list>( <parameter><decl><type><name>scan_parameter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>scan_parameter_Clean</name><parameter_list>( <parameter><decl><type><name>scan_parameter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>scan_t</name> <modifier>*</modifier></type><name>scan_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_parameter</name></decl></parameter>,

<parameter><decl><type><name>scan_frontend_tune_cb</name></type></decl></parameter>,

<parameter><decl><type><name>scan_frontend_stats_cb</name></type></decl></parameter>,

<parameter><decl><type><name>scan_demux_filter_cb</name></type></decl></parameter>,

<parameter><decl><type><name>scan_demux_read_cb</name></type></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>scan_Destroy</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>scan_Run</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type><name>scan_GetM3U</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>scan_IsCancelled</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scan_value_modulation</name><parameter_list>(<parameter><decl><type><name>scan_modulation_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scan_value_coderate</name><parameter_list>(<parameter><decl><type><name>scan_coderate_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
