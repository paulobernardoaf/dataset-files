<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dvb\scan_list.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_list.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>scan_list_entry_t</name> <modifier>*</modifier></type> <name>scan_list_entry_New</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scan_list_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>coderate_hp</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>coderate_lp</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>inner_fec</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_AUTO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_entry</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_list_entry_Delete</name><parameter_list>( <parameter><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_channel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_list_entry_validate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SCAN_DELIVERY_DVB_S</name></expr>:</case>

<case>case <expr><name>SCAN_DELIVERY_DVB_S2</name></expr>:</case>

<case>case <expr><name>SCAN_DELIVERY_DVB_C</name></expr>:</case>

<return>return <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_freq</name></name> <operator>&amp;&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</return>

<case>case <expr><name>SCAN_DELIVERY_DVB_T</name></expr>:</case>

<case>case <expr><name>SCAN_DELIVERY_DVB_T2</name></expr>:</case>

<case>case <expr><name>SCAN_DELIVERY_ISDB_T</name></expr>:</case>

<return>return <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_freq</name></name> <operator>&amp;&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_bw</name></name></expr>;</return>

<case>case <expr><name>SCAN_DELIVERY_UNKNOWN</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_list_entry_add</name><parameter_list>( <parameter><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_last</name></decl></parameter>, <parameter><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>scan_list_entry_validate</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>ppp_last</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>scan_list_entry_Delete</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_list_parse_fec</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>psz_fec</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><name>psz_fec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SCAN_CODERATE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>psz_fec</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu16</name><literal type="string">"/%"</literal><name>SCNu16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>SCAN_CODERATE_AUTO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_list_parse_guard</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_guard</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>psz_guard</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"AUTO"</literal></expr></argument>, <argument><expr><name>psz_guard</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>psz_guard</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu16</name><literal type="string">"/%"</literal><name>SCNu16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>SCAN_GUARD_INTERVAL_AUTO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_token_strip</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>ppsz</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><operator>*</operator><name>pi_len</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_len</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name> <init>= <expr><name><name>p</name><index>[ <expr><name>i_len</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>&gt;</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_len</name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_list_token_split</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_keylen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_valuelen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_split</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_split</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_keylen</name> <init>= <expr><name>p_split</name> <operator>-</operator> <name>psz_line</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_split</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_valuelen</name> <init>= <expr><operator>&amp;</operator><name><name>psz_line</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>-</operator> <name>p_split</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scan_token_strip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_token_strip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_split</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_valuelen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_keylen</name> <operator>||</operator> <operator>!</operator><name>i_valuelen</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_key</name> <operator>=</operator> <name>psz_line</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_keylen</name> <operator>=</operator> <name>i_keylen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_value</name> <operator>=</operator> <name>p_split</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_valuelen</name> <operator>=</operator> <name>i_valuelen</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_EQUALS</name><parameter_list>(<parameter><type><name>token</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>stringlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(token) - 1) == stringlen &amp;&amp; !strncasecmp( string, token, stringlen ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_EQUALS</name><parameter_list>(<parameter><type><name>token</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(token) - 1) == i_keylen &amp;&amp; !strncasecmp( psz_key, token, i_keylen ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_EQUALS</name><parameter_list>(<parameter><type><name>token</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof(token) - 1) == i_valuelen &amp;&amp; !strncasecmp( psz_value, token, i_valuelen ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_STRINGVAL</name><parameter_list>(<parameter><type><name>variable</name></type></parameter>, <parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char *psz_val = strndup(psz_value, i_valuelen);if( psz_val ){variable = parser( psz_val );free( psz_val );} }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WLEN</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(string) - 1), string</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_list_dvbv5_entry_fill</name><parameter_list>( <parameter><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_keylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_valuelen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>scan_list_token_split</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_valuelen</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>psz_value</name><index>[<expr><name>i_valuelen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"FREQUENCY"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_freq</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"BANDWIDTH_HZ"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_bw</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DELIVERY_SYSTEM"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DVBT"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_T</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DVBT2"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_T2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DVBS"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_S</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DVBS2"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_S2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"DVBC/ANNEX_A"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_C</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"ISDBT"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_ISDB_T</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"MODULATION"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

}</block> <decl><name><name>map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"APSK/16"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_APSK_16</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"APSK/32"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_APSK_32</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"DQPSK"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_DQPSK</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"PSK/8"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_PSK_8</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/4_NR"</literal></expr></argument> )</argument_list></call></expr>,<expr><name>SCAN_MODULATION_QAM_4NR</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/16"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QAM_16</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/32"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QAM_32</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/64"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QAM_64</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/128"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QAM_128</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/256"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QAM_256</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QAM/AUTO"</literal></expr></argument> )</argument_list></call></expr>,<expr><name>SCAN_MODULATION_QAM_AUTO</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"QPSK"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_QPSK</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"VSB/8"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_VSB_8</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>WLEN</name><argument_list>( <argument><expr><literal type="string">"VSB/16"</literal></expr></argument> )</argument_list></call></expr>, <expr><name>SCAN_MODULATION_VSB_16</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_AUTO</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_len</name> <operator>==</operator> <name>i_valuelen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>, <argument><expr><name>i_valuelen</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"POLARIZATION"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>VALUE_EQUALS</name><argument_list>(<argument><expr><literal type="string">"VERTICAL"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>polarization</name></name> <operator>=</operator> <name>SCAN_POLARIZATION_VERTICAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>polarization</name></name> <operator>=</operator> <name>SCAN_POLARIZATION_HORIZONTAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"SYMBOL_RATE"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"INNER_FEC"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>READ_STRINGVAL</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>inner_fec</name></name></expr></argument>, <argument><expr><name>scan_list_parse_fec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"CODE_RATE_HP"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>READ_STRINGVAL</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>coderate_hp</name></name></expr></argument>, <argument><expr><name>scan_list_parse_fec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"CODE_RATE_LP"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>READ_STRINGVAL</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>coderate_lp</name></name></expr></argument>, <argument><expr><name>scan_list_parse_fec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KEY_EQUALS</name><argument_list>(<argument><expr><literal type="string">"GUARD_INTERVAL"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>READ_STRINGVAL</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>guard_interval</name></name></expr></argument>, <argument><expr><name>scan_list_parse_guard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>scan_list_entries_release</name><parameter_list>( <parameter><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_list</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scan_list_entry_Delete</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>scan_list_entry_t</name> <modifier>*</modifier></type> <name>scan_list_dvbv5_load</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_source</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_source</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_file</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"failed to open dvbv5 file (%s)"</literal></expr></argument>, <argument><expr><name>psz_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list_last</name> <init>= <expr><operator>&amp;</operator><name>p_list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>(</operator><name>i_read</name> <operator>=</operator> <call><name>getline</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_error</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_line</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_read</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

<switch>switch<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">'#'</literal></expr>:</case> 

<continue>continue;</continue>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_entry</name> <operator>&amp;&amp;</operator> <call><name>scan_list_entry_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_list_last</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>scan_list_entry_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len_name</name> <init>= <expr><name>p_end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scan_token_strip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_channel</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_len_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scan_list_dvbv5_entry_fill</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p_entry</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_error</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scan_list_entry_Delete</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>scan_list_entry_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_list_last</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>scan_list_entry_t</name> <modifier>*</modifier></type> <name>scan_list_dvbv3_load</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_source</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_source</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_file</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"failed to open satellite file (%s)"</literal></expr></argument>, <argument><expr><name>psz_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list_last</name> <init>= <expr><operator>&amp;</operator><name>p_list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_delims</name> <init>= <expr><literal type="string">" \t"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>(</operator><name>i_read</name> <operator>=</operator> <call><name>getline</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_entry</name> <operator>&amp;&amp;</operator> <call><name>scan_list_entry_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_list_last</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>scan_list_entry_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_entry</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_S</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">"S2"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_S2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>==</operator> <name>SCAN_DELIVERY_DVB_S</name> <operator>||</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name> <operator>==</operator> <name>SCAN_DELIVERY_DVB_S2</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_freq</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>polarization</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SCAN_POLARIZATION_HORIZONTAL</name></expr>

</then><else>: <expr><name>SCAN_POLARIZATION_VERTICAL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>inner_fec</name></name> <operator>=</operator> <call><name>scan_list_parse_fec</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_delims</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p_entry</name> <operator>&amp;&amp;</operator> <call><name>scan_list_entry_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_list_last</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_list</name></expr>;</return>

</block_content>}</block></function>

</unit>
