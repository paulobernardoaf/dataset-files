<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\rtp\xiph.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>rtp_xiph_t</name>

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vorbis</name></decl>;</decl_stmt>

}</block></struct></type> <name>rtp_xiph_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>xiph_init</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>vorbis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_xiph_t</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name> <operator>=</operator> <name>vorbis</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void *vorbis_init (demux_t *demux)

{

(void)demux;

return xiph_init (true);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name> <modifier>*</modifier></type><name>theora_init</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt>

<return>return <expr><call><name>xiph_init</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xiph_destroy</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_xiph_t</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>codec_decode</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>codec_destroy</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>xiph_header</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pextra</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>hcount</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hcount</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>idlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cmtlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>setuplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idlen</name> <operator>=</operator> <operator>(</operator><name>idlen</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmtlen</name> <operator>=</operator> <operator>(</operator><name>cmtlen</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>idlen</name> <operator>+</operator> <name>cmtlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>setuplen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>idlen</name> <operator>+</operator> <name>cmtlen</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>idlen</name></expr>, <expr><name>cmtlen</name></expr>, <expr><name>setuplen</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>payloads</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr>,

<expr><name>buf</name> <operator>+</operator> <name>idlen</name></expr>,

<expr><name>buf</name> <operator>+</operator> <name>idlen</name> <operator>+</operator> <name>cmtlen</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xiph_PackHeaders</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>extra_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>payloads</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>pextra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

<return>return <expr><name>extra_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xiph_decode</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_xiph_t</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ident</name> <init>= <expr><call><name>GetDWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fragtype</name> <init>= <expr><operator>(</operator><name>ident</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>datatype</name> <init>= <expr><operator>(</operator><name>ident</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pkts</name> <init>= <expr><operator>(</operator><name>ident</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ident</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name></expr> ?</condition><then>

<expr><literal type="string">"discontinuity in fragmented Vorbis packet"</literal></expr> </then><else>:

<expr><literal type="string">"discontinuity in fragmented Theora packet"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fragtype</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fragtype</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>pkts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fraglen</name> <init>= <expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <operator>(</operator><name>fraglen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>fraglen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fragtype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>block_Realloc</name> <argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>fraglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>fraglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fragtype</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>pkts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>datatype</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>ident</name></name> <operator>!=</operator> <name>ident</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name></expr> ?</condition><then>

<expr><literal type="string">"ignoring raw Vorbis payload without configuration"</literal></expr> </then><else>:

<expr><literal type="string">"ignoring raw Theora payload without configuration"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>raw</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>codec_decode</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>ident</name></name> <operator>==</operator> <name>ident</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>extc</name> <init>= <expr><call><name>xiph_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>extv</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name></expr> ?</condition><then> <expr><name>AUDIO_ES</name></expr> </then><else>: <expr><name>VIDEO_ES</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name></expr> ?</condition><then> <expr><name>VLC_CODEC_VORBIS</name></expr>

</then><else>: <expr><name>VLC_CODEC_THEORA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>extv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>extc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>codec_destroy</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>vorbis</name></name></expr> ?</condition><then>

<expr><literal type="string">"Vorbis packed configuration received (%06"</literal><name>PRIx32</name><literal type="string">")"</literal></expr> </then><else>:

<expr><literal type="string">"Theora packed configuration received (%06"</literal><name>PRIx32</name><literal type="string">")"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>codec_init</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pkts</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
