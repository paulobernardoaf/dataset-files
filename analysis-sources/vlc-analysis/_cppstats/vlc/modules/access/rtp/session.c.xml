<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\rtp\session.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>rtp_source_t</name></name></type> <name>rtp_source_t</name>;</typedef>

<struct>struct <name>rtp_session_t</name>

<block>{

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>srcv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>srcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ptc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rtp_pt_t</name> <modifier>*</modifier></type><name>ptv</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>rtp_source_t</name> <modifier>*</modifier></type>

<name>rtp_source_create</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>

<name>rtp_source_destroy</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rtp_decode</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>rtp_session_t</name> <modifier>*</modifier></type>

<name>rtp_session_create</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>ptc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>ptv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt>

<return>return <expr><name>session</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_session_destroy</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>srcc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rtp_source_destroy</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>ptv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>no_init</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>no_destroy</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>opaque</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>no_decode</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>rtp_add_type</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>rtp_session_t</name> <modifier>*</modifier></type><name>ses</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_pt_t</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ses</name><operator>-&gt;</operator><name>srcc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot change RTP payload formats during session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>rtp_pt_t</name> <modifier>*</modifier></type><name>ppt</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>ses</name><operator>-&gt;</operator><name>ptv</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>ses</name><operator>-&gt;</operator><name>ptc</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>rtp_pt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ses</name><operator>-&gt;</operator><name>ptv</name></name> <operator>=</operator> <name>ppt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ppt</name> <operator>+=</operator> <name><name>ses</name><operator>-&gt;</operator><name>ptc</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pt</name><operator>-&gt;</operator><name>init</name></name></expr> ?</condition><then> <expr><name><name>pt</name><operator>-&gt;</operator><name>init</name></name></expr> </then><else>: <expr><name>no_init</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pt</name><operator>-&gt;</operator><name>destroy</name></name></expr> ?</condition><then> <expr><name><name>pt</name><operator>-&gt;</operator><name>destroy</name></name></expr> </then><else>: <expr><name>no_destroy</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pt</name><operator>-&gt;</operator><name>decode</name></name></expr> ?</condition><then> <expr><name><name>pt</name><operator>-&gt;</operator><name>decode</name></name></expr> </then><else>: <expr><name>no_decode</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>frequency</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppt</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"added payload type %"</literal><name>PRIu8</name><literal type="string">" (f = %"</literal><name>PRIu32</name><literal type="string">" Hz)"</literal></expr></argument>,

<argument><expr><name><name>ppt</name><operator>-&gt;</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>ppt</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>ppt</name><operator>-&gt;</operator><name>frequency</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>demux</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>rtp_source_t</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>jitter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_rx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_ts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref_rtp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ref_ntp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bad_seq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>max_seq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>last_seq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>opaque</name><index>[]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>rtp_source_t</name> <modifier>*</modifier></type>

<name>rtp_source_create</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>init_seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>source</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>session</name><operator>-&gt;</operator><name>ptc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>=</operator> <name>ssrc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>jitter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>ref_rtp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>ref_ntp</name></name> <operator>=</operator> <call><name>UINT64_C</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>bad_seq</name></name> <operator>=</operator> <name>init_seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>last_seq</name></name> <operator>=</operator> <name>init_seq</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>ptc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>source</name><operator>-&gt;</operator><name>opaque</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>ptv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>init</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"added RTP source (%08x)"</literal></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>source</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>rtp_source_destroy</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"removing RTP source (%08x)"</literal></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>ptc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>ptv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>destroy</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>opaque</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>block_ChainRelease</name> <argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>rtp_seq</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>rtp_timestamp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>GetDWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>rtp_pt_t</name></name> <modifier>*</modifier></type>

<name>rtp_find_ptype</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pt_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ptype</name> <init>= <expr><call><name>rtp_ptype</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>ptc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>ptv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>number</name> <operator>==</operator> <name>ptype</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pt_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pt_data</name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>opaque</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ptv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>rtp_queue</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>padding</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>padding</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">12u</literal> <operator>+</operator> <name>padding</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>seq</name> <init>= <expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>ssrc</name> <init>= <expr><call><name>GetDWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>==</operator> <name>ssrc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>last_rx</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator> <operator>&lt;</operator> <name>now</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rtp_source_destroy</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>max_src</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"too many RTP sessions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>rtp_source_create</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rtp_pt_t</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>rtp_find_ptype</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>frequency</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>rtp_timestamp</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>d</name> <init>= <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>now</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>last_rx</name></name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>-=</operator> <name>ts</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>last_ts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>jitter</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>jitter</name></name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_rx</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>=</operator> <call><name>rtp_timestamp</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>delta_seq</name> <init>= <expr><name>seq</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>max_seq</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>delta_seq</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>delta_seq</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>max_dropout</name></name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>-</operator><name>delta_seq</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>max_misorder</name></name><operator>)</operator></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"sequence discontinuity"</literal>

<literal type="string">" (got: %"</literal><name>PRIu16</name><literal type="string">", expected: %"</literal><name>PRIu16</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>max_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>bad_seq</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bad_seq</name></name> <operator>=</operator> <name>seq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_seq</name></name> <operator>=</operator> <name>seq</name> <operator>-</operator> <literal type="number">0x7fffe</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"sequence resynchronized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name> <argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>bad_seq</name></name> <operator>=</operator> <name>seq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name>delta_seq</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>seq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</init> <condition><expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>delta_seq</name> <operator>=</operator> <name>seq</name> <operator>-</operator> <call><name>rtp_seq</name> <argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_seq</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_seq</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"duplicate packet (sequence: %"</literal><name>PRIu16</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>prev</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<return>return;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rtp_decode</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>rtp_dequeue</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>deadlinep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>deadlinep</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>block</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>last_seq</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>rtp_decode</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rtp_pt_t</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>rtp_find_ptype</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>jitter</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>deadline</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>deadline</name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name>deadline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rtp_decode</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>deadlinep</name> <operator>&gt;</operator> <name>deadline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>deadlinep</name> <operator>=</operator> <name>deadline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><name>pending</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_dequeue_force</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcc</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>srcv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>block</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rtp_decode</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>rtp_decode</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rtp_session_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>rtp_source_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>delta_seq</name> <init>= <expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>last_seq</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_seq</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>delta_seq</name> <operator>&gt;=</operator> <literal type="number">0x8000</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"ignoring late packet (sequence: %"</literal><name>PRIu16</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu16</name><literal type="string">" packet(s) lost"</literal></expr></argument>, <argument><expr><name>delta_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last_seq</name></name> <operator>=</operator> <call><name>rtp_seq</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pt_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rtp_pt_t</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>rtp_find_ptype</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown payload (%"</literal><name>PRIu8</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>rtp_ptype</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>pt</name><operator>-&gt;</operator><name>header</name></name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>pt_data</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>timestamp</name> <init>= <expr><call><name>rtp_timestamp</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ref_ntp</name></name>

<operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>timestamp</name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>ref_rtp</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>ref_ntp</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>ref_rtp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name> <init>= <expr><literal type="number">12u</literal> <operator>+</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>GetWBE</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>skip</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pt</name><operator>-&gt;</operator><name>decode</name></name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>pt_data</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
