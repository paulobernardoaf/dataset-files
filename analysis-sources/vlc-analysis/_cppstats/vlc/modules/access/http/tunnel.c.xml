<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\http\tunnel.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_http_authority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>formats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"%s:%u"</literal></expr>, <expr><literal type="string">"[%s]:%u"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>brackets</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authority</name></expr></argument>, <argument><expr><name><name>formats</name><index>[<expr><name>brackets</name></expr>]</index></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>authority</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_http_tunnel_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority</name> <init>= <expr><call><name>vlc_http_authority</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>authority</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>vlc_http_req_create</name><argument_list>(<argument><expr><literal type="string">"CONNECT"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>authority</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>req</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"ALPN"</literal></expr></argument>, <argument><expr><literal type="string">"h2, http%%2F1.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_add_agent</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PACKAGE_NAME</name> <literal type="string">"/"</literal> <name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>username</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_add_creds_basic</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>username</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>password</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>password</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>vlc_http_stream_open</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_msg_get_initial</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>vlc_http_msg_get_final</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>resp</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>vlc_tls_proxy</name>

<block>{

<decl_stmt><decl><type><name>vlc_tls_t</name></type> <name>tls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_tls_proxy_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_tls_ProxyGetFD</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>(</operator><name>vlc_tls_proxy_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_ProxyRead</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>(</operator><name>vlc_tls_proxy_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_tls_ProxyWrite</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>(</operator><name>vlc_tls_proxy_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_tls_ProxyShutdown</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>duplex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>(</operator><name>vlc_tls_proxy_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tls_Shutdown</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>duplex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_tls_ProxyClose</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>(</operator><name>vlc_tls_proxy_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>vlc_tls_proxy_ops</name> <init>=

<expr><block>{

<expr><name>vlc_tls_ProxyGetFD</name></expr>,

<expr><name>vlc_tls_ProxyRead</name></expr>,

<expr><name>vlc_tls_ProxyWrite</name></expr>,

<expr><name>vlc_tls_ProxyShutdown</name></expr>,

<expr><name>vlc_tls_ProxyClose</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_https_connect_proxy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>creds</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>two</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>proxy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">443</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ptwo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>vlc_https_connect</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>vlc_tls_SocketOpenTCP</name><argument_list>(<argument><expr><ternary><condition><expr><name>creds</name></expr> ?</condition><then> <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>ptwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>vlc_tls_proxy_t</name> <modifier>*</modifier></type><name>psock</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>psock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psock</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>psock</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_tls_proxy_ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psock</name><operator>-&gt;</operator><name>tls</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psock</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= 

<expr><call><name>vlc_h1_conn_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psock</name><operator>-&gt;</operator><name>tls</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>psock</name><operator>-&gt;</operator><name>tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_tunnel_open</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,

<argument><expr><name><name>url</name><operator>.</operator><name>psz_username</name></name></expr></argument>,

<argument><expr><name><name>url</name><operator>.</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_conn_release</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>alpn</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"h2"</literal></expr>, <expr><literal type="string">"http/1.1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>vlc_tls_ClientSessionCreate</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>,

<argument><expr><name>alpn</name> <operator>+</operator> <operator>!</operator><operator>*</operator><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>two</name> <operator>=</operator> <operator>(</operator><name>alp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"h2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tls</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
