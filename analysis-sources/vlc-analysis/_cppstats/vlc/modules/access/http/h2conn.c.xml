<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\http\h2conn.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CO</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c)-&gt;opaque)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CO((s)-&gt;conn)</cpp:value></cpp:define>

<struct>struct <name>vlc_h2_conn</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name></type> <name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_output</name></name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>released</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_send_cwnd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>send_cwnd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_conn_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>vlc_h2_stream</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name></type> <name>stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>older</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>newer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>interrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>recv_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>recv_err</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>recv_hdr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>recv_cwnd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>recv_head</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>recv_tailp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>recv_wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>send_cwnd</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_conn_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_h2_frame_dump</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_conn_queue_prio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_h2_frame_dump</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"out (priority)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_h2_stream_lookup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>VLC_H2_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_err</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local stream %"</literal><name>PRIuFAST32</name><literal type="string">" error: "</literal>

<literal type="string">"%s (0x%"</literal><name>PRIXFAST32</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>vlc_h2_strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local stream %"</literal><name>PRIuFAST32</name><literal type="string">" shut down"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_rst_stream</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_fatal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_err</name></name> <operator>=</operator> <name>EPROTO</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_headers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>hdrs</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stream %"</literal><name>PRIu32</name><literal type="string">" discarding old headers"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stream %"</literal><name>PRIu32</name><literal type="string">" %u headers:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %s: \"%s\""</literal></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>=</operator> <call><name>vlc_http_msg_h2_headers</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_h2_stream_fatal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>VLC_H2_STREAM_CLOSED</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_frame_data_get</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>recv_cwnd</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_stream_fatal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_H2_FLOW_CONTROL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_cwnd</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>recv_tailp</name></name><operator>)</operator> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_tailp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stream %"</literal><name>PRIu32</name><literal type="string">" closed by peer"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_reset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_err</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"peer stream %"</literal><name>PRIu32</name><literal type="string">" error: %s (0x%"</literal><name>PRIXFAST32</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>vlc_h2_strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_err</name></name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_window_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>credit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>+=</operator> <name>credit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>SO</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stream %"</literal><name>PRIu32</name><literal type="string">" window update: +%"</literal><name>PRIuFAST32</name><literal type="string">" to "</literal>

<literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>credit</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>send_cwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_wake_up</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interrupted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interrupted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_register</name><argument_list>(<argument><expr><name>vlc_h2_stream_wake_up</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_interrupt_unregister</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_h2_stream_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>=

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>struct <name>vlc_h2_stream</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_lock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>interrupted</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_unlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_attach</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>vlc_h2_stream_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>=

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>struct <name>vlc_h2_stream</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_lock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>interrupted</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>recv_err</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_unlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<return>return <expr><name>vlc_http_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_tailp</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_tailp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>credit</name> <init>= <expr><name>VLC_H2_INIT_WINDOW</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>recv_cwnd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>credit</name> <operator>&gt;=</operator> <operator>(</operator><name>VLC_H2_INIT_WINDOW</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_window_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>credit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_cwnd</name></name> <operator>+=</operator> <name>credit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_unlock</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_heap_Alloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>vlc_h2_frame_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>VLC_H2_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vlc_http_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>vlc_h2_frame_data_get</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>&lt;=</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_stream_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>aborted</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>=

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>struct <name>vlc_h2_stream</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>code</name> <init>= <expr><name>VLC_H2_NO_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>older</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>older</name><operator>-&gt;</operator><name>newer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>newer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>newer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>newer</name><operator>-&gt;</operator><name>older</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>==</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>destroy</name> <operator>=</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>VLC_H2_CANCEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aborted</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>f</name> <operator>=</operator> <name>next</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_h2_conn_destroy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_http_stream_cbs</name></name></type> <name>vlc_h2_stream_callbacks</name> <init>=

<expr><block>{

<expr><name>vlc_h2_stream_wait</name></expr>,

<expr><name>vlc_h2_stream_read</name></expr>,

<expr><name>vlc_h2_stream_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>vlc_h2_stream_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>struct <name>vlc_h2_conn</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_h2_stream_callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>newer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_end</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_hdr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_cwnd</name></name> <operator>=</operator> <name>VLC_H2_INIT_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>recv_tailp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>init_send_cwnd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>released</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>next_id</name></name> <operator>&gt;</operator> <literal type="number">0x7ffffff</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no more stream identifiers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>next_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>next_id</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_http_msg_h2_frame</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>older</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>streams</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>older</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>older</name><operator>-&gt;</operator><name>newer</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_initial_window_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>uint_fast32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>value</name> <operator>-</operator> <name><name>conn</name><operator>-&gt;</operator><name>init_send_cwnd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>init_send_cwnd</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_setting</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast16_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"setting: %s (0x%04"</literal><name>PRIxFAST16</name><literal type="string">"): %"</literal><name>PRIuFAST32</name></expr></argument>,

<argument><expr><call><name>vlc_h2_setting_name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_H2_SETTING_INITIAL_WINDOW_SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_h2_initial_window_update</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_settings_done</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_settings_ack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_ping</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast64_t</name></type> <name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_h2_conn_queue_prio</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_pong</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>VLC_H2_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_err</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local error: %s (0x%"</literal><name>PRIxFAST32</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>vlc_h2_strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_goaway</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_reset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>last_seq</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_err</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"peer error: %s (0x%"</literal><name>PRIxFAST32</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>vlc_h2_strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"last stream: %"</literal><name>PRIuFAST32</name></expr></argument>, <argument><expr><name>last_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_goaway</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VLC_H2_NO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>next_id</name></name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name>last_seq</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_h2_stream_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_H2_REFUSED_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_window_status</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>rcwd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcwd</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vlc_h2_conn_queue_prio</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,

<argument><expr><call><name>vlc_h2_frame_window_update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rcwd</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_window_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>credit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>+=</operator> <name>credit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"window update: +%"</literal><name>PRIuFAST32</name><literal type="string">" to %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name>credit</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>send_cwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_parser_cbs</name></name></type> <name>vlc_h2_parser_callbacks</name> <init>=

<expr><block>{

<expr><name>vlc_h2_setting</name></expr>,

<expr><name>vlc_h2_settings_done</name></expr>,

<expr><name>vlc_h2_ping</name></expr>,

<expr><name>vlc_h2_error</name></expr>,

<expr><name>vlc_h2_reset</name></expr>,

<expr><name>vlc_h2_window_status</name></expr>,

<expr><name>vlc_h2_window_update</name></expr>,

<expr><name>vlc_h2_stream_lookup</name></expr>,

<expr><name>vlc_h2_stream_error</name></expr>,

<expr><name>vlc_h2_stream_headers</name></expr>,

<expr><name>vlc_h2_stream_data</name></expr>,

<expr><name>vlc_h2_stream_end</name></expr>,

<expr><name>vlc_h2_stream_reset</name></expr>,

<expr><name>vlc_h2_stream_window_update</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_https_recv</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>tls</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>count</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ufd</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>vlc_h2_frame_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_tls</name></name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>vlc_https_recv</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>len</name> <init>= <expr><literal type="number">9</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>free</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_https_recv</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>r</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_parser</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_h2_parse_destroy</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_h2_recv_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>vlc_h2_parse_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_h2_parser_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>cleanup_parser</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>vlc_h2_frame_recv</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"connection shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_frame_dump</name><argument_list>(<argument><expr><call><name>CO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_h2_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_parse_destroy</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_stream</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>older</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_h2_stream_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_H2_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_conn_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>VLC_H2_NO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tls_Shutdown</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>tls</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_conn_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>struct <name>vlc_h2_conn</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>released</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>destroy</name> <operator>=</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_h2_conn_destroy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_http_conn_cbs</name></name></type> <name>vlc_h2_conn_callbacks</name> <init>=

<expr><block>{

<expr><name>vlc_h2_stream_open</name></expr>,

<expr><name>vlc_h2_conn_release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>vlc_h2_conn_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_tls</name></name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_h2_conn_callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>tls</name></name> <operator>=</operator> <name>tls</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>next_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>init_send_cwnd</name></name> <operator>=</operator> <name>VLC_H2_DEFAULT_INIT_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send_cwnd</name></name> <operator>=</operator> <name>VLC_H2_DEFAULT_INIT_WINDOW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_h2_conn_queue</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_settings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>vlc_h2_recv_thread</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn</name></name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
