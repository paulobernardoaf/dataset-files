<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\http\resource.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type>

<name>vlc_http_res_req</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>vlc_http_req_create</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>res</name><operator>-&gt;</operator><name>secure</name></name></expr> ?</condition><then> <expr><literal type="string">"https"</literal></expr> </then><else>: <expr><literal type="string">"http"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>req</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>negotiate</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <literal type="string">"en_US"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"Accept-Language"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>password</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_add_creds_basic</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>agent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_add_agent</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>referrer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"Referer"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>referrer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_add_cookies</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>vlc_http_mgr_get_jar</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>manager</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>res</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>request_format</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>req</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_http_res_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>vlc_http_res_req</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>req</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_mgr_request</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>manager</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>secure</name></name></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>vlc_http_msg_get_final</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_msg_get_cookies</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><call><name>vlc_http_mgr_get_jar</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>manager</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">200</literal> <operator>||</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">599</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">406</literal> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>negotiate</name></name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>negotiate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>res</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>response_validate</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>resp</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_http_res_get_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>failure</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>vlc_http_res_open</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_http_res_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>referrer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_res_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_res_deinit</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_http_authority</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>formats</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"%s"</literal></expr>, <expr><literal type="string">"[%s]"</literal></expr>, <expr><literal type="string">"%s:%u"</literal></expr>, <expr><literal type="string">"[%s]:%u"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>brackets</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name><name>formats</name><index>[<expr><name>brackets</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>port</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authority</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authority</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>authority</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_http_res_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>res</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_resource_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ua</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>secure</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name>secure</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>negotiate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>failure</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>url</name><operator>.</operator><name>i_port</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name> <operator>=</operator> <call><name>vlc_http_authority</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>url</name><operator>.</operator><name>psz_username</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_username</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>url</name><operator>.</operator><name>psz_password</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_password</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>agent</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ua</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>ua</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>referrer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ref</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"%s?%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_option</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>manager</name></name> <operator>=</operator> <name>mgr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>authority</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_res_deinit</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_http_res_get_redirect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>secure</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pragma</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pragma</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>pragma</name></expr></argument>, <argument><expr><literal type="string">"features"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"mmsh://%s%s"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>url</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><literal type="string">"Icy-Name"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><literal type="string">"Icy-Genre"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"icyx://%s%s"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>url</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">201</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">304</literal> 

<operator>||</operator> <name>status</name> <operator>==</operator> <literal type="number">305</literal> 

<operator>||</operator> <name>status</name> <operator>==</operator> <literal type="number">306</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><literal type="string">"Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>location</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><literal type="string">"http%s://%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>res</name><operator>-&gt;</operator><name>secure</name></name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fixed</name> <init>= <expr><call><name>vlc_uri_fixup</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fixed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>location</name> <operator>=</operator> <name>fixed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abs</name> <init>= <expr><call><name>vlc_uri_resolve</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>abs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>abs</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>abs</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>abs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_http_res_get_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">200</literal> <operator>||</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>block_t</name></name> <modifier>*</modifier></type><name>vlc_http_res_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">200</literal> <operator>||</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>vlc_http_msg_read</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_http_res_set_login</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>username</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>user</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>password</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>password</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pass</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <name>pass</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">401</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_http_res_get_basic_realm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">401</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_http_msg_get_basic_realm</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
