<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dshow\vlc_dshow.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;_mingw.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wtypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unknwn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ole2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strmif.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ksmedia.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wmcodecdsp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ddraw.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dshow.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>dshow</name> <block>{<block_content>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAMBufferNegotiation</name></expr></argument> ,<argument><expr><literal type="number">0x56ed71a0</literal></expr></argument>, <argument><expr><literal type="number">0xaf5f</literal></expr></argument>, <argument><expr><literal type="number">0x11d0</literal></expr></argument>, <argument><expr><literal type="number">0xb3</literal></expr></argument>, <argument><expr><literal type="number">0xf0</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAMTVAudio</name></expr></argument> ,<argument><expr><literal type="number">0x83EC1C30</literal></expr></argument>, <argument><expr><literal type="number">0x23D1</literal></expr></argument>, <argument><expr><literal type="number">0x11d1</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAMCrossbar</name></expr></argument> ,<argument><expr><literal type="number">0xC6E13380</literal></expr></argument>, <argument><expr><literal type="number">0x30AC</literal></expr></argument>, <argument><expr><literal type="number">0x11d0</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x89</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>IID_IAMTVTuner</name></expr></argument> ,<argument><expr><literal type="number">0x211A8766</literal></expr></argument>, <argument><expr><literal type="number">0x03AC</literal></expr></argument>, <argument><expr><literal type="number">0x11d1</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_ARGB32</name></expr></argument> ,<argument><expr><literal type="number">0x773c9ac0</literal></expr></argument>, <argument><expr><literal type="number">0x3274</literal></expr></argument>, <argument><expr><literal type="number">0x11d0</literal></expr></argument>, <argument><expr><literal type="number">0xb7</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0x1a</literal></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_YUYV</name></expr></argument> ,<argument><expr><literal type="number">0x56595559</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_IYUV</name></expr></argument> ,<argument><expr><literal type="number">0x56555949</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_I420</name></expr></argument> ,<argument><expr><literal type="number">0x30323449</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_MPEG2_VIDEO</name></expr></argument> ,<argument><expr><literal type="number">0xe06d8026</literal></expr></argument>, <argument><expr><literal type="number">0xdb46</literal></expr></argument>, <argument><expr><literal type="number">0x11cf</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_MPEG2_PROGRAM</name></expr></argument> ,<argument><expr><literal type="number">0xe06d8022</literal></expr></argument>, <argument><expr><literal type="number">0xdb46</literal></expr></argument>, <argument><expr><literal type="number">0x11cf</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_MPEG2_TRANSPORT</name></expr></argument> ,<argument><expr><literal type="number">0xe06d8023</literal></expr></argument>, <argument><expr><literal type="number">0xdb46</literal></expr></argument>, <argument><expr><literal type="number">0x11cf</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>FORMAT_MPEG2Video</name></expr></argument> ,<argument><expr><literal type="number">0xe06d80e3</literal></expr></argument>, <argument><expr><literal type="number">0xdb46</literal></expr></argument>, <argument><expr><literal type="number">0x11cf</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MEDIASUBTYPE_IEEE_FLOAT</name></expr></argument> ,<argument><expr><literal type="number">0x00000003</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KS_AnalogVideo_None</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_NTSC_M</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_NTSC_M_J</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_NTSC_433</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_B</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_D</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_G</name> <init>= <expr><literal type="number">0x00000040</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_H</name> <init>= <expr><literal type="number">0x00000080</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_I</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_M</name> <init>= <expr><literal type="number">0x00000200</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_N</name> <init>= <expr><literal type="number">0x00000400</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_60</name> <init>= <expr><literal type="number">0x00000800</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_B</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_D</name> <init>= <expr><literal type="number">0x00002000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_G</name> <init>= <expr><literal type="number">0x00004000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_H</name> <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_K</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_K1</name> <init>= <expr><literal type="number">0x00020000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_L</name> <init>= <expr><literal type="number">0x00040000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_SECAM_L1</name> <init>= <expr><literal type="number">0x00080000</literal></expr></init></decl>,

<decl><name>KS_AnalogVideo_PAL_N_COMBO</name> <init>= <expr><literal type="number">0x00100000</literal></expr></init></decl>

}</block></enum></type> <name>KS_AnalogVideoStandard</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KSPROPERTY_TUNER_CAPS</name></decl>, 

<decl><name>KSPROPERTY_TUNER_MODE_CAPS</name></decl>, 

<decl><name>KSPROPERTY_TUNER_MODE</name></decl>, 

<decl><name>KSPROPERTY_TUNER_STANDARD</name></decl>, 

<decl><name>KSPROPERTY_TUNER_FREQUENCY</name></decl>, 

<decl><name>KSPROPERTY_TUNER_INPUT</name></decl>, 

<decl><name>KSPROPERTY_TUNER_STATUS</name></decl>, 

<decl><name>KSPROPERTY_TUNER_IF_MEDIUM</name></decl>, 

<decl><name>KSPROPERTY_TUNER_SCAN_CAPS</name></decl>, 

<decl><name>KSPROPERTY_TUNER_SCAN_STATUS</name></decl>, 

<decl><name>KSPROPERTY_TUNER_STANDARD_MODE</name></decl>, 

<decl><name>KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS</name></decl> 

}</block></enum></type> <name>KSPROPERTY_TUNER</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KS_TUNER_TUNING_EXACT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>KS_TUNER_TUNING_FINE</name></decl>, 

<decl><name>KS_TUNER_TUNING_COARSE</name></decl>, 

}</block></enum></type><name>KS_TUNER_TUNING_FLAGS</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KS_TUNER_STRATEGY_PLL</name> <init>= <expr><literal type="number">0X01</literal></expr></init></decl>, 

<decl><name>KS_TUNER_STRATEGY_SIGNAL_STRENGTH</name> <init>= <expr><literal type="number">0X02</literal></expr></init></decl>, 

<decl><name>KS_TUNER_STRATEGY_DRIVER_TUNES</name> <init>= <expr><literal type="number">0X04</literal></expr></init></decl>, 

}</block></enum></type><name>KS_TUNER_STRATEGY</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>GUID</name></type> <name>Set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>LONGLONG</name></type> <name>Alignment</name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>KSIDENTIFIER</name><operator>,</operator> *<name>PKSIDENTIFIER</name>;</typedef>

<typedef>typedef <type><name>KSIDENTIFIER</name></type> <name>KSPROPERTY</name>, <modifier>*</modifier><name>PKSPROPERTY</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>KSPROPERTY</name></type> <name>Property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>StandardsSupported</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>MinFrequency</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>MaxFrequency</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>TuningGranularity</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>NumberOfInputs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>SettlingTime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>Strategy</name></decl>;</decl_stmt> 

}</block></struct></type> <name>KSPROPERTY_TUNER_MODE_CAPS_S</name><operator>,</operator> *<name>PKSPROPERTY_TUNER_MODE_CAPS_S</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>KSPROPERTY</name></type> <name>Property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Frequency</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>LastFrequency</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>TuningFlags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>VideoSubChannel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>AudioSubChannel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>Channel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ULONG</name></type> <name>Country</name></decl>;</decl_stmt> 

}</block></struct></type> <name>KSPROPERTY_TUNER_FREQUENCY_S</name><operator>,</operator> *<name>PKSPROPERTY_TUNER_FREQUENCY_S</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>KSPROPERTY</name></type> <name>Property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>Standard</name></decl>;</decl_stmt> 

}</block></struct></type> <name>KSPROPERTY_TUNER_STANDARD_S</name><operator>,</operator> *<name>PKSPROPERTY_TUNER_STANDARD_S</name>;</typedef>

<typedef>typedef <type><enum>enum <name>tagAMTunerModeType</name> <block>{

<decl><name>AMTUNER_MODE_DEFAULT</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>,

<decl><name>AMTUNER_MODE_TV</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>AMTUNER_MODE_FM_RADIO</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>AMTUNER_MODE_AM_RADIO</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>AMTUNER_MODE_DSS</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>

}</block></enum></type> <name>AMTunerModeType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPROPERTY_PIN_CATEGORY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>tagAMTunerSubChannel</name> <block>{

<decl><name>AMTUNER_SUBCHAN_NO_TUNE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>AMTUNER_SUBCHAN_DEFAULT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>AMTunerSubChannel</name>;</typedef>

<typedef>typedef <type><enum>enum <name>tagTunerInputType</name> <block>{

<decl><name>TunerInputCable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TunerInputAntenna</name> <init>= <expr><name>TunerInputCable</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>TunerInputType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>tagAMTunerEventType</name> <block>{

<decl><name>AMTUNER_EVENT_CHANGED</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>

}</block></enum></type> <name>AMTunerEventType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>tagPhysicalConnectorType</name> <block>{

<decl><name>PhysConn_Video_Tuner</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PhysConn_Video_Composite</name></decl>,

<decl><name>PhysConn_Video_SVideo</name></decl>,

<decl><name>PhysConn_Video_RGB</name></decl>,

<decl><name>PhysConn_Video_YRYBY</name></decl>,

<decl><name>PhysConn_Video_SerialDigital</name></decl>,

<decl><name>PhysConn_Video_ParallelDigital</name></decl>,

<decl><name>PhysConn_Video_SCSI</name></decl>,

<decl><name>PhysConn_Video_AUX</name></decl>,

<decl><name>PhysConn_Video_1394</name></decl>,

<decl><name>PhysConn_Video_USB</name></decl>,

<decl><name>PhysConn_Video_VideoDecoder</name></decl>,

<decl><name>PhysConn_Video_VideoEncoder</name></decl>,

<decl><name>PhysConn_Video_SCART</name></decl>,

<decl><name>PhysConn_Video_Black</name></decl>,

<decl><name>PhysConn_Audio_Tuner</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>, 

<decl><name>PhysConn_Audio_Line</name></decl>,

<decl><name>PhysConn_Audio_Mic</name></decl>,

<decl><name>PhysConn_Audio_AESDigital</name></decl>,

<decl><name>PhysConn_Audio_SPDIFDigital</name></decl>,

<decl><name>PhysConn_Audio_SCSI</name></decl>,

<decl><name>PhysConn_Audio_AUX</name></decl>,

<decl><name>PhysConn_Audio_1394</name></decl>,

<decl><name>PhysConn_Audio_USB</name></decl>,

<decl><name>PhysConn_Audio_AudioDecoder</name></decl>

}</block></enum></type> <name>PhysicalConnectorType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_VIDEO_STREAM_CONFIG_CAPS</name> <block>{

<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>VideoStandard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>InputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>MinCroppingSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>MaxCroppingSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CropGranularityX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CropGranularityY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CropAlignX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CropAlignY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>MinOutputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE</name></type> <name>MaxOutputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>OutputGranularityX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>OutputGranularityY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>StretchTapsX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>StretchTapsY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ShrinkTapsX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ShrinkTapsY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONGLONG</name></type> <name>MinFrameInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONGLONG</name></type> <name>MaxFrameInterval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>MinBitsPerSecond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>MaxBitsPerSecond</name></decl>;</decl_stmt>

}</block></struct></type> <name>VIDEO_STREAM_CONFIG_CAPS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_AUDIO_STREAM_CONFIG_CAPS</name> <block>{

<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MinimumChannels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MaximumChannels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ChannelsGranularity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MinimumBitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MaximumBitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>BitsPerSampleGranularity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MinimumSampleFrequency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MaximumSampleFrequency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>SampleFrequencyGranularity</name></decl>;</decl_stmt>

}</block></struct></type> <name>AUDIO_STREAM_CONFIG_CAPS</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IAMBufferNegotiation</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IAMBufferNegotiation</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name><operator>,</operator> <name>PVOID</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>,<argument><expr><name>AddRef</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>,<argument><expr><name>Release</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>SuggestAllocatorProperties</name> )<parameter_list>(<parameter><decl><type><name>THIS_</name> <specifier>const</specifier> <name>ALLOCATOR_PROPERTIES</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetAllocatorProperties</name> )<parameter_list>(<parameter><decl><type><name>THIS_</name> <name>ALLOCATOR_PROPERTIES</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IAMCrossbar</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IAMCrossbar</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name><operator>,</operator> <name>PVOID</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_PinCounts</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>CanRoute</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>Route</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_IsRoutedTo</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_CrossbarPinInfo</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>BOOL</name></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IAMTunerNotification</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>( <argument>IAMTunerNotification</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name><operator>,</operator> <name>PVOID</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>OnEvent</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>AMTunerEventType</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IAMTVTuner</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IAMTVTuner</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name><operator>,</operator> <name>PVOID</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_Channel</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_Channel</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>ChannelMinMax</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_CountryCode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_CountryCode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_TuningSpace</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_TuningSpace</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>Logon</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>HANDLE</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>Logout</name>) <parameter_list>(<parameter><decl><type><name>IAMTVTuner</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>SignalPresen</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_Mode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>AMTunerModeType</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_Mode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>AMTunerModeType</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetAvailableModes</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>RegisterNotificationCallBack</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>IAMTunerNotification</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>UnRegisterNotificationCallBack</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>IAMTunerNotification</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_AvailableTVFormats</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_TVFormat</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>AutoTune</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>StoreAutoTune</name>) <parameter_list>(<parameter><decl><type><name>IAMTVTuner</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_NumInputConnections</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_InputType</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>TunerInputType</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_InputType</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>TunerInputType</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_ConnectInput</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_ConnectInput</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_VideoFrequency</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_AudioFrequency</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTERFACE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERFACE</name></cpp:macro> <cpp:value>IAMTVAudio</cpp:value></cpp:define>

<macro><name>DECLARE_INTERFACE_</name><argument_list>(<argument>IAMTVAudio</argument>, <argument>IUnknown</argument>)</argument_list></macro>

<block>{<block_content>

<macro><name>STDMETHOD</name><argument_list>(<argument>QueryInterface</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator><name>THIS_</name> <name>REFIID</name><operator>,</operator> <name>PVOID</name><operator>*</operator><operator>)</operator> <name>PURE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>STDMETHOD_</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetHardwareSupportedTVAudioModes</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>GetAvailableTVAudioModes</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>get_TVAudioMode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>put_TVAudioMode</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>RegisterNotificationCallBack</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>IAMTunerNotification</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type>(<name>UnRegisterNotificationCallBack</name>) <parameter_list>(<parameter><decl><type><name>THIS_</name> <name>IAMTunerNotification</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
