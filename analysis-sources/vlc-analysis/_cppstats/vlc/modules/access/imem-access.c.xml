<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\imem-access.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>seek_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>sys</name><operator>-&gt;</operator><name>read_cb</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>DEFAULT_PTS_DELAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>access</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_cb_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>datap</name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sizep</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opaque</name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"imem-data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>open_cb</name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"imem-open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"imem-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"imem-seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"imem-close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>open_cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>open_cb</name> <operator>=</operator> <name>open_cb_default</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>open_cb</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"open error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>seek_cb</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>Seek</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Memory stream"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"In-memory stream input"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"imem"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
