<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\rist.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_QUEUE_SIZE</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_PKT_SIZE</name></cpp:macro> <cpp:value>(1472)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTCP_INTERVAL</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEVENTY_YEARS_OFFSET</name></cpp:macro> <cpp:value>(2208988800ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NACKS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CNAME</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTCP_EMPTY_RR_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTCP_PT_RTPFR</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>

<struct>struct <name>rtp_pkt</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rtp_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_t</name></name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>rist_flow</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>qsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>MAX_CNAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peer_sockaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>peer_socklen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>ri</name></decl>, <decl><type ref="prev"/><name>wi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_rtcp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_rtcp_m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_nack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nacks_retries</name><index>[<expr><name>RIST_QUEUE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>feedback_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>latency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rtp_latency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>retry_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>reorder_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_retries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>packets_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes_count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>rtcp_fb_nack_get_range_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_rtcp_fb_nack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>rtcp_fb_nack_get_range_extra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_rtcp_fb_nack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rtcp_fb_nack_set_range_start</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rtcp_fb_nack</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>start</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>start</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rtcp_fb_nack_set_range_extra</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rtcp_fb_nack</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>extra</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rtcp_fb_nack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>extra</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>populate_cname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>identifier</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>MAX_CNAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peer_sockaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>peer_socklen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_hostname</name> <init>= <expr><call><name>gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_hostname</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>, <argument><expr><literal type="string">"UnknownHost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_sockname</name> <init>= <expr><call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer_sockaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_socklen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_sockname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer_sockaddr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>xin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>peer</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name_length</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>, <argument><expr><literal type="string">"%s@%s:%u"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;=</operator> <name>MAX_CNAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>identifier</name><index>[<expr><name>MAX_CNAME</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>xin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>peer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_length</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>, <argument><expr><literal type="string">"%s@%s:%u"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;=</operator> <name>MAX_CNAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>identifier</name><index>[<expr><name>MAX_CNAME</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name_length</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;=</operator> <name>MAX_CNAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>identifier</name><index>[<expr><name>MAX_CNAME</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>rtp_get_ts</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_clock_rate</name> <init>= <expr><literal type="number">90000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lldiv_t</name></type> <name>q</name> <init>= <expr><call><name>lldiv</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>q</name><operator>.</operator><name>quot</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i_clock_rate</name>

<operator>+</operator> <name><name>q</name><operator>.</operator><name>rem</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i_clock_rate</name> <operator>/</operator> <name>CLOCK_FREQ</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>ts_get_from_rtp</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_rtp_ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_clock_rate</name> <init>= <expr><literal type="number">90000</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><name>i_rtp_ts</name> <operator>*</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator><name>CLOCK_FREQ</name><operator>/</operator><name>i_clock_rate</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_ReadFrom_i11e</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, 

<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_recv_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_recvfrom_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>errno</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>EAGAIN</name></expr>:</case>

<case>case <expr><name>EINTR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_recv_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_recvfrom_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_Read_i11e</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rist_ReadFrom_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_ReadFrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, 

<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>errno</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>EAGAIN</name></expr>:</case>

<case>case <expr><name>EINTR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_Read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rist_ReadFrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_WriteTo_i11e</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOBUFS</name></cpp:macro> <cpp:value>WSAENOBUFS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGAIN</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vlc_send_i11e</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vlc_sendto_i11e</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name>

<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOBUFS</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOMEM</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><macro><name>getsockopt</name><argument_list>( <argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_TYPE</argument>,

<argument>&amp;type</argument>, <argument>&amp;(socklen_t){ sizeof(type) }</argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>SOCK_DGRAM</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vlc_send_i11e</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vlc_sendto_i11e</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_Write_i11e</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rist_WriteTo_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_WriteTo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, 

<parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOBUFS</name></cpp:macro> <cpp:value>WSAENOBUFS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGAIN</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendto</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name>

<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOBUFS</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOMEM</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><macro><name>getsockopt</name><argument_list>( <argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_TYPE</argument>,

<argument>&amp;type</argument>, <argument>&amp;(socklen_t){ sizeof(type) }</argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>SOCK_DGRAM</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendto</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>rist_Write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rist_WriteTo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_multicast_address</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst_server</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ismulticast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hint</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,

<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>,

<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_NUMERICSERV</name> <operator>|</operator> <name>AI_IDN</name> <operator>|</operator> <name>AI_PASSIVE</name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_getaddrinfo</name><argument_list>(<argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>addr</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>psz_dst_server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ismulticast</name> <operator>=</operator> <call><name>IN_MULTICAST</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_dst_server</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"[ff00"</literal></expr></argument>, <argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"[FF00"</literal></expr></argument>, <argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ismulticast</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ismulticast</name></expr>;</return>

</block_content>}</block></function>
</unit>
