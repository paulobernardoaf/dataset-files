<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\linsys\linsys_sdi.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linsys_sdi.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ZVBI_DEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libzvbi.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDI_DEVICE</name></cpp:macro> <cpp:value>"/dev/sdirx%u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDI_BUFFERS_FILE</name></cpp:macro> <cpp:value>"/sys/class/sdi/sdirx%u/buffers"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDI_BUFSIZE_FILE</name></cpp:macro> <cpp:value>"/sys/class/sdi/sdirx%u/bufsize"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDI_MODE_FILE</name></cpp:macro> <cpp:value>"/sys/class/sdi/sdirx%u/mode"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_TIMEOUT</name></cpp:macro> <cpp:value>80000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESYNC_TIMEOUT</name></cpp:macro> <cpp:value>500000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_GAP</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(500)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_DATE</name></cpp:macro> <cpp:value>INT64_C(0x100000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMUX_BUFFER_SIZE</name></cpp:macro> <cpp:value>1350000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIOS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLERATE_TOLERANCE</name></cpp:macro> <cpp:value>0.1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINK_TEXT</name></cpp:macro> <cpp:value>N_("Link #")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINK_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to set the desired link of the board for the capture (starting at 0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_TEXT</name></cpp:macro> <cpp:value>N_("Video ID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to set the ES ID of the video." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_ASPECT_TEXT</name></cpp:macro> <cpp:value>N_("Aspect ratio")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_ASPECT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to force the aspect ratio of the video." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_TEXT</name></cpp:macro> <cpp:value>N_("Audio configuration")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to set audio configuration (id=group,pair:id=group,pair...)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_TEXT</name></cpp:macro> <cpp:value>N_("Teletext configuration")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to set Teletext configuration (id=line1-lineN with both fields)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_LANG_TEXT</name></cpp:macro> <cpp:value>N_("Teletext language")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_LANG_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows you to set Teletext language (page=lang/type,...)." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DemuxClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SDI Input"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"SDI"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"linsys-sdi-link"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>LINK_TEXT</argument>, <argument>LINK_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"linsys-sdi-id-video"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>VIDEO_TEXT</argument>, <argument>VIDEO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"linsys-sdi-aspect-ratio"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>VIDEO_ASPECT_TEXT</argument>,

<argument>VIDEO_ASPECT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"linsys-sdi-audio"</literal></argument>, <argument><literal type="string">"0=1,1"</literal></argument>, <argument>AUDIO_TEXT</argument>, <argument>AUDIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"linsys-sdi-telx"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>TELX_TEXT</argument>, <argument>TELX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"linsys-sdi-telx-lang"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>TELX_LANG_TEXT</argument>, <argument>TELX_LANG_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"linsys-sdi"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SDI Demux"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>DemuxOpen</argument>, <argument>DemuxClose</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct <name>sdi_audio_t</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_group</name></decl>, <name>i_pair</name>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_block_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_left_samples</name></decl>, <name>i_right_samples</name>, <name>i_nb_samples</name>, <name>i_max_samples</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

}</block></struct></type> <name>sdi_audio_t</name>;</typedef>

<enum>enum <block>{

<decl><name>STATE_NOSYNC</name></decl>,

<decl><name>STATE_STARTSYNC</name></decl>,

<decl><name>STATE_ANCSYNC</name></decl>,

<decl><name>STATE_LINESYNC</name></decl>,

<decl><name>STATE_ACTIVESYNC</name></decl>,

<decl><name>STATE_VBLANKSYNC</name></decl>,

<decl><name>STATE_PICSYNC</name></decl>,

<decl><name>STATE_SYNC</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_link</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_buffers</name></decl>, <name>i_current_buffer</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_state_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_anc_size</name></decl>, <name>i_active_size</name>, <name>i_picture_size</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_line_offset</name></decl>, <name>i_nb_lines</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_line_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_current_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_current_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name></decl>, <modifier>*</modifier><name>p_u</name>, <modifier>*</modifier><name>p_v</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_wss_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_telx_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_rate</name></decl>, <name>i_frame_rate_base</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_width</name></decl>, <name>i_height</name>, <name>i_aspect</name>, <name>i_forced_aspect</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_telx_line</name></decl>, <name>i_telx_count</name>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_telx</name></decl>, <modifier>*</modifier><name>psz_telx_lang</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hd</name></decl>, <name>b_vbi</name>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_raw_decoder</name></type> <name>rd_wss</name></decl>, <name>rd_telx</name>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_id_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdi_audio_t</name></type> <name><name>p_audios</name><index>[<expr><name>MAX_AUDIOS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_telx</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxDemux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InitWSS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InitTelx</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HandleSDBuffer</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_buffer_size</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InitCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Capture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>DemuxDemux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>DemuxControl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_num</name></decl>, <decl><type ref="prev"/><name>i_den</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_den</name></expr></argument>,

<argument><expr><literal type="string">"linsys-hdsdi-aspect-ratio"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_den</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator>

<name>i_num</name> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <name>i_den</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id_video</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"linsys-sdi-id-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><name>psz_parser</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"linsys-sdi-audio"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>psz_parser</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>, <decl><type ref="prev"/><name>i_group</name></decl>, <decl><type ref="prev"/><name>i_pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_next</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_next</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="string">"%d,%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pair</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group</name> <operator>=</operator> <name>i_group</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pair</name> <operator>=</operator> <name>i_pair</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"malformed audio configuration (%s)"</literal></expr></argument>,

<argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"linsys-sdi-telx"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx_lang</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"linsys-sdi-telx-lang"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_ret</name> <operator>=</operator> <call><name>DemuxOpen</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"linsys-sdi-link"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>InitCapture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DemuxClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CloseCapture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DemuxClose</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxDemux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>DEMUX_BUFFER_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>HandleSDBuffer</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator> <name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <call><name>Capture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">270000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>,

<argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSS_LINE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<struct>struct <name>block_extension_t</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_progressive</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_fields</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_aspect</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>NewFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_v</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>=</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>StartDecode</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name> <operator>=</operator> <name>START_DATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_incr</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal>

<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_extension_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>NewFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_I420</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id_video</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_aspect</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name></expr>

</then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>i_aspect</name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>

<operator>/</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>VOUT_ASPECT_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name> <operator>&amp;&amp;</operator> <call><name>InitWSS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_parser</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"VBI is unsupported on this input stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_next</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_next</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_next</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>InitTelx</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_dr_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"capturing VBI lines %d-%d and %d-%d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">313</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">313</literal>

<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TELETEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_telx_lang</name></name></expr>;</expr_stmt>

<while>while <condition>( <expr><operator>(</operator><name>psz_next</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_page</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>psz_next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>psz_next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>psz_next</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_page</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dr_size</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument>, <argument><expr><name>i_dr_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_next</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call>

<operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>i_page</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dr</name><index>[<expr><name>i_dr_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_page</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_next</name> <operator>==</operator> <literal type="char">','</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_dr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_dr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_telx</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StopDecode</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>!=</operator> <name>STATE_SYNC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_telx</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name> <operator>&amp;&amp;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitVideo</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_total_width</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">625</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">525</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">480</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">1125</literal> <operator>&amp;&amp;</operator> <name>i_total_width</name> <operator>==</operator> <literal type="number">2640</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">1125</literal> <operator>&amp;&amp;</operator> <name>i_total_width</name> <operator>==</operator> <literal type="number">2200</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">750</literal> <operator>&amp;&amp;</operator> <name>i_total_width</name> <operator>==</operator> <literal type="number">1980</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>==</operator> <literal type="number">750</literal> <operator>&amp;&amp;</operator> <name>i_total_width</name> <operator>==</operator> <literal type="number">1650</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">60000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unable to determine video type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name> <operator>=</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_extension_t</name></name></type> <name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>b_progressive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>b_top_field_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>i_aspect</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_forced_aspect</name></name></expr> </then><else>:

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_size</name></name>

<operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_extension_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_extension_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name><operator>-&gt;</operator><name>i_pts</name></name>

<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitWSS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>scanning</name></name> <operator>=</operator> <literal type="number">625</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>sampling_format</name></name> <operator>=</operator> <name>VBI_PIXFMT_UYVY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>sampling_rate</name></name> <operator>=</operator> <literal type="number">13.5e6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>bytes_per_line</name></name> <operator>=</operator> <literal type="number">720</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">9.5e-6</literal> <operator>*</operator> <literal type="number">13.5e6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>interlaced</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name><operator>.</operator><name>synchronous</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vbi_raw_decoder_add_services</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name></name></expr></argument>,

<argument><expr><name>VBI_SLICED_WSS_625</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize zvbi for WSS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeWSS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_sliced</name></type> <name><name>p_sliced</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vbi_raw_decode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_wss</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name></expr></argument>, <argument><expr><name>p_sliced</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_old_aspect</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_sliced</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_aspect</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>parity</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"WSS parity error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>i_aspect</name> <operator>==</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aspect</name></name> <operator>!=</operator> <name>i_old_aspect</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new WSS information (ra=%x md=%x cod=%x hlp=%x rvd=%x sub=%x pos=%x srd=%x c=%x cp=%x)"</literal></expr></argument>,

<argument><expr><name>i_aspect</name></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitTelx</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>scanning</name></name> <operator>=</operator> <literal type="number">625</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>sampling_format</name></name> <operator>=</operator> <name>VBI_PIXFMT_UYVY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>sampling_rate</name></name> <operator>=</operator> <literal type="number">13.5e6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>bytes_per_line</name></name> <operator>=</operator> <literal type="number">720</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">9.5e-6</literal> <operator>*</operator> <literal type="number">13.5e6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">313</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>interlaced</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name><operator>.</operator><name>synchronous</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vbi_raw_decoder_add_services</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument>, <argument><expr><name>VBI_SLICED_TELETEXT_B</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize zvbi for Teletext"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vbi_raw_decoder_destroy</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeTelx</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_sliced</name></type> <name><name>p_sliced</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_slices</name> <init>= <expr><call><name>vbi_raw_decode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rd_telx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name></name></expr></argument>,

<argument><expr><name>p_sliced</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_nb_slices</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_slices_rounded</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>i_nb_slices</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i_nb_slices_rounded</name> <operator>*</operator> <literal type="number">46</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_block</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><name><name>p_sliced</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2c</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>i_line</name> <operator>&gt;</operator> <literal type="number">313</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i_line</name> <operator>%</operator> <literal type="number">313</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe4</literal></expr>;</expr_stmt> 

<for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">42</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vbi_rev8</name><argument_list>( <argument><expr><name><name>p_sliced</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">46</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_slices_rounded</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2c</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">46</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_telx</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"starting audio %u/%u rate:%u delay:%d"</literal></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator>

<name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator>

<name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name>

<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_max_samples</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>

<operator>(</operator><literal type="number">1.f</literal> <operator>+</operator> <name>SAMPLERATE_TOLERANCE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_max_samples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>=</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_block_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResampleAudio</name><parameter_list>( <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_last_sample</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><name>p_in</name> <operator>/</operator> <literal type="number">32768.f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <operator>*</operator><name>p_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_in</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><name>p_in</name> <operator>/</operator> <literal type="number">32768.f</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>i_remainder</name> <operator>&lt;</operator> <name>i_out</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_out</name> <init>= <expr><name>f_last_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_out</name> <operator>+=</operator> <operator>(</operator><name>f_in</name> <operator>-</operator> <name>f_last_sample</name><operator>)</operator> <operator>*</operator> <name>i_remainder</name> <operator>/</operator> <name>i_out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>f_out</name> <operator>&gt;=</operator> <literal type="number">1.f</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>f_out</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1.f</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name>f_out</name> <operator>*</operator> <literal type="number">32768.f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remainder</name> <operator>+=</operator> <name>i_in</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>f_last_sample</name> <operator>=</operator> <name>f_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remainder</name> <operator>-=</operator> <name>i_out</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no audio %u/%u"</literal></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>&lt;</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>SAMPLERATE_TOLERANCE</name><operator>)</operator> <operator>||</operator>

<name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>&gt;</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>+</operator> <name>SAMPLERATE_TOLERANCE</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"left samplerate out of tolerance for audio %u/%u (%u vs. %u)"</literal></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>&lt;</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>SAMPLERATE_TOLERANCE</name><operator>)</operator> <operator>||</operator>

<name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>&gt;</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>+</operator> <name>SAMPLERATE_TOLERANCE</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"right samplerate out of tolerance for audio %u/%u (%u vs. %u)"</literal></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_block</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name>

<operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>==</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&amp;&amp;</operator>

<name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>==</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ResampleAudio</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResampleAudio</name><argument_list>( <argument><expr><name>p_output</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DecodeWSS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>==</operator> <literal type="number">576</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <literal type="number">574</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>( <expr><call><name>DecodeTelx</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_es</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>DecodeAudio</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DecodeVideo</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_incr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>NewFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_1_VBLANK_EAV</name></cpp:macro> <cpp:value>0xB6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_1_VBLANK_SAV</name></cpp:macro> <cpp:value>0xAB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_1_ACTIVE_EAV</name></cpp:macro> <cpp:value>0x9D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_1_ACTIVE_SAV</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_2_VBLANK_EAV</name></cpp:macro> <cpp:value>0xF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_2_VBLANK_SAV</name></cpp:macro> <cpp:value>0xEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_2_ACTIVE_EAV</name></cpp:macro> <cpp:value>0xDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_2_ACTIVE_SAV</name></cpp:macro> <cpp:value>0xC7</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>FindReferenceCode</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_code</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while <condition>( <expr><name>p_parser</name> <operator>&lt;=</operator> <name>p_end</name> <operator>-</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_parser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>p_parser</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x3</literal> <operator>&amp;&amp;</operator> <name><name>p_parser</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0</literal>

<operator>&amp;&amp;</operator> <name><name>p_parser</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0</literal> <operator>&amp;&amp;</operator> <name><name>p_parser</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>i_code</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_parser</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_parser</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>CountReference</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_code</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><call><name>FindReferenceCode</name><argument_list>( <argument><expr><name>i_code</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_tmp</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>+=</operator> <name>p_end</name> <operator>-</operator> <name>p_parser</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>+=</operator> <name>p_tmp</name> <operator>-</operator> <name>p_parser</name></expr>;</expr_stmt>

<return>return <expr><name>p_tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>GetLine</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_total_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_remaining</name> <init>= <expr><name>i_total_size</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name></expr></argument>,

<argument><expr><operator>*</operator><name>pp_parser</name></expr></argument>, <argument><expr><name>i_remaining</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_parser</name> <operator>+=</operator> <name>i_remaining</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_end</name> <operator>-</operator> <operator>*</operator><name>pp_parser</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_total_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pp_parser</name></expr></argument>,

<argument><expr><name>p_end</name> <operator>-</operator> <operator>*</operator><name>pp_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name> <operator>=</operator> <name>p_end</name> <operator>-</operator> <operator>*</operator><name>pp_parser</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <operator>*</operator><name>pp_parser</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_parser</name> <operator>+=</operator> <name>i_total_size</name></expr>;</expr_stmt>

<return>return <expr><name>p_tmp</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro> <cpp:value>(uint16_t)((p_line[0]) | ((p_line[1] &amp; 0x3) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y1</name></cpp:macro> <cpp:value>(uint16_t)((p_line[1] &gt;&gt; 2) | ((p_line[2] &amp; 0xf) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>(uint16_t)((p_line[2] &gt;&gt; 4) | ((p_line[3] &amp; 0x3f) &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y2</name></cpp:macro> <cpp:value>(uint16_t)((p_line[3] &gt;&gt; 6) | (p_line[4] &lt;&lt; 2))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UnpackVBI</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_line</name> <operator>+</operator> <name>i_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_line</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>U</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>V</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Unpack01</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_line</name> <operator>+</operator> <name>i_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_line</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_u</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>U</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_v</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>V</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Unpack2</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_line</name> <operator>+</operator> <name>i_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_line</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>*</operator><name>p_u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>U</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_u</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>*</operator><name>p_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>V</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_v</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Unpack3</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_line</name> <operator>+</operator> <name>i_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_line</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>p_u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>U</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_u</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>p_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>V</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_v</name><operator>++</operator> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>Y2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>U</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Y1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Y2</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A0</name></cpp:macro> <cpp:value>(uint16_t)((p_anc[0]) | ((p_anc[1] &amp; 0x3) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1</name></cpp:macro> <cpp:value>(uint16_t)((p_anc[1] &gt;&gt; 2) | ((p_anc[2] &amp; 0xf) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A2</name></cpp:macro> <cpp:value>(uint16_t)((p_anc[2] &gt;&gt; 4) | ((p_anc[3] &amp; 0x3f) &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A3</name></cpp:macro> <cpp:value>(uint16_t)((p_anc[3] &gt;&gt; 6) | (p_anc[4] &lt;&lt; 2))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UnpackAnc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_anc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_anc</name> <operator>+</operator> <name>i_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_anc</name> <operator>&lt;=</operator> <name>p_end</name> <operator>-</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>A0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>A1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>A2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>A3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_anc</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A3</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HasAncillary</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_anc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0</literal> <operator>&amp;&amp;</operator> <name><name>p_anc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfc</literal> <operator>&amp;&amp;</operator> <name><name>p_anc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleAudioData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_anc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_data_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_group</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_block_number</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data_count</name> <operator>%</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"malformed audio data for group %u"</literal></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name> <operator>==</operator> <name>i_group</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>p_anc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>InitAudio</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_block_number</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_block_number</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>i_block_number</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"audio data block discontinuity (%"</literal><name>PRIu8</name><literal type="string">"-&gt;%"</literal><name>PRIu8</name><literal type="string">") for group %"</literal><name>PRIu8</name></expr></argument>,

<argument><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_block_number</name></name></expr></argument>, <argument><expr><name>i_block_number</name></expr></argument>,

<argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_block_number</name> <operator>==</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_block_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_block_number</name></name> <operator>=</operator> <name>i_block_number</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>( <expr><name>x</name> <operator>&lt;</operator> <name>p_anc</name> <operator>+</operator> <name>i_data_count</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tmp</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <name>i_tmp</name> <operator>|</operator> <literal type="number">0xfff00000</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <name>i_tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name> <operator>&lt;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_max_samples</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name>

<operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_sample</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_right_samples</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name> <operator>&lt;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_max_samples</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name></expr>]</index></name>

<operator>=</operator> <operator>(</operator><name>i_sample</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_left_samples</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleAudioConfig</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_anc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_data_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_group</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data_count</name> <operator>!=</operator> <literal type="number">18</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"malformed audio config for group %u"</literal></expr></argument>, <argument><expr><name>i_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_AUDIOS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sdi_audio_t</name> <modifier>*</modifier></type><name>p_audio</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_group</name></name> <operator>==</operator> <name>i_group</name> <operator>&amp;&amp;</operator> <name><name>p_audio</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_pair</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_rate</name> <operator>=</operator> <operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tmp</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1fe</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <name>i_tmp</name> <operator>|</operator> <literal type="number">0xfc000000</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <name>i_tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"asymetric audio is not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_rate</name> <operator>=</operator> <operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tmp</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1fe</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <name>i_tmp</name> <operator>|</operator> <literal type="number">0xfc000000</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <name>i_tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"asymetric audio is not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>( <expr><name>i_rate</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">32000</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown rate for audio %u/%u (%u)"</literal></expr></argument>,

<argument><expr><name>i_group</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pair</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>InitAudio</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_audio</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleAncillary</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_anc</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_data_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">7</literal>

<operator>||</operator> <name><name>p_anc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>p_anc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3ff</literal> <operator>||</operator> <name><name>p_anc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3ff</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_data_count</name> <operator>=</operator> <name><name>p_anc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name>i_data_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"malformed ancillary packet (size %u &gt; %u)"</literal></expr></argument>,

<argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name><name>p_anc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition> 

<block>{<block_content>

<case>case <expr><literal type="number">0x2ff</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1fd</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1fb</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2f9</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_anc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1ef</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioConfig</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2ee</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioConfig</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2ed</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioConfig</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1ec</literal></expr>:</case>

<expr_stmt><expr><call><name>HandleAudioConfig</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_data_count</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1fe</literal></expr>:</case>

<case>case <expr><literal type="number">0x2fc</literal></expr>:</case>

<case>case <expr><literal type="number">0x2fa</literal></expr>:</case>

<case>case <expr><literal type="number">0x1f8</literal></expr>:</case>

<default>default:</default>

<break>break;</break>

<case>case <expr><literal type="number">0x88</literal></expr>:</case> 

<expr_stmt><expr><name>p_anc</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_anc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>p_anc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3ff</literal>

<operator>||</operator> <name><name>p_anc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_anc</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HandleAncillary</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>HandleAncillary</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name> <operator>+</operator> <name>i_data_count</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>,

<argument><expr><name>i_size</name> <operator>-</operator> <name>i_data_count</name> <operator>-</operator> <literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HandleSDBuffer</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_buffer_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_parser</name> <init>= <expr><name>p_buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_parser</name> <operator>+</operator> <name>i_buffer_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>!=</operator> <name>STATE_SYNC</name>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>&lt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>RESYNC_TIMEOUT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>STATE_NOSYNC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>FindReferenceCode</name><argument_list>( <argument><expr><name>FIELD_2_VBLANK_SAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_STARTSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_STARTSYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>FindReferenceCode</name><argument_list>( <argument><expr><name>FIELD_1_VBLANK_EAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_ANCSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_ANCSYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>CountReference</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name></expr></argument>,

<argument><expr><name>FIELD_1_VBLANK_SAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_LINESYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_LINESYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>CountReference</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr></argument>,

<argument><expr><name>FIELD_1_VBLANK_EAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_ACTIVESYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_ACTIVESYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>CountReference</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name></expr></argument>,

<argument><expr><name>FIELD_1_ACTIVE_EAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name>

<operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_VBLANKSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_VBLANKSYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>CountReference</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name></expr></argument>,

<argument><expr><name>FIELD_2_ACTIVE_EAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_PICSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>STATE_PICSYNC</name></expr>:</case>

<expr_stmt><expr><name>p_parser</name> <operator>=</operator> <call><name>CountReference</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name></expr></argument>,

<argument><expr><name>FIELD_1_VBLANK_EAV</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name>

<operator>%</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"wrong picture size (anc=%d active=%d total=%d offset=%d), syncing"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_picture_size</name></name>

<operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitVideo</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"acquired sync, anc=%d active=%d lines=%d offset=%d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SYNC</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>StartDecode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>StopDecode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name>

<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_line_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>StopDecode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_line_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>STATE_SYNC</name></expr>:</case>

<while>while <condition>( <expr><operator>(</operator><name>p_line</name> <operator>=</operator> <call><name>GetLine</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_parser</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_field</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>:

<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_field_height</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hd</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr> </then><else>:

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_field_line</name> <init>= <expr><ternary><condition><expr><name>b_field</name></expr> ?</condition><then>

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>-</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>:

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_vbi</name> <init>= <expr><name>i_field_line</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>||</operator>

<name>i_field_line</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>+</operator> <name>i_field_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>anc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>p_line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3</literal>

<operator>||</operator> <name><name>p_line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>p_line</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal>

<operator>||</operator> <name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3</literal>

<operator>||</operator> <name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>b_field</name> <operator>&amp;&amp;</operator> <name>b_vbi</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_1_VBLANK_EAV</name> <operator>||</operator>

<name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_1_VBLANK_SAV</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>b_field</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_vbi</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_1_ACTIVE_EAV</name> <operator>||</operator>

<name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_1_ACTIVE_SAV</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>b_field</name> <operator>&amp;&amp;</operator> <name>b_vbi</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_2_VBLANK_EAV</name> <operator>||</operator>

<name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_2_VBLANK_SAV</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>b_field</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_vbi</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_2_ACTIVE_EAV</name> <operator>||</operator>

<name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>FIELD_2_ACTIVE_SAV</name><operator>)</operator><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"lost sync line:%u SAV:%x EAV:%x"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_line</name><index>[<expr><name>anc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StopDecode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_state_change</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HasAncillary</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_anc_words</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>p_anc</name><index>[<expr><name>i_anc_words</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnpackAnc</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_anc_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>p_anc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HandleAncillary</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name></expr></argument>, <argument><expr><name>i_anc_words</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_vbi</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_active_field_line</name> <init>= <expr><name>i_field_line</name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_active_line</name> <init>= <expr><name>b_field</name>

<operator>+</operator> <name>i_active_field_line</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name>i_active_field_line</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_field</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Unpack01</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name>i_active_line</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_v</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name>i_active_field_line</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Unpack01</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name>i_active_line</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_v</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><name>b_field</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Unpack2</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name>i_active_line</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_v</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Unpack3</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name>i_active_line</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_u</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_v</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>i_active_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>==</operator> <literal type="number">576</literal>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_line_offset</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnpackVBI</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_wss_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vbi</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name> <operator>&amp;&amp;</operator>

<name>i_field_line</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>&amp;&amp;</operator>

<name>i_field_line</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name>

<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnpackVBI</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_telx_buffer</name><index>[<expr><operator>(</operator><name>i_field_line</name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_line</name></name> <operator>+</operator> <name>b_field</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_telx_count</name></name><operator>)</operator>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>b_vbi</name> <operator>&amp;&amp;</operator> <call><name>HasAncillary</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <name>anc</name> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_anc_words</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>p_anc</name><index>[<expr><name>i_anc_words</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnpackAnc</name><argument_list>( <argument><expr><name>p_line</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_active_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>,

<argument><expr><name>p_anc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HandleAncillary</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_anc</name></expr></argument>, <argument><expr><name>i_anc_words</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_line</name></name> <operator>%=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_lines</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecodeFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXLEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadULSysfs</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_link</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_file</name><index>[<expr><name>MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>i_link</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fscanf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_data</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>i_data</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteULSysfs</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_link</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_file</name><index>[<expr><name>MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>i_link</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%u\n"</literal></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_page_size</name> <init>= <expr><call><name>getpagesize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bufmemsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_dev</name><index>[<expr><name>MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>WriteULSysfs</name><argument_list>( <argument><expr><name>SDI_MODE_FILE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument>, <argument><expr><name>SDI_CTL_MODE_10BIT</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't write file "</literal> <name>SDI_MODE_FILE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_ret</name> <operator>=</operator> <call><name>ReadULSysfs</name><argument_list>( <argument><expr><name>SDI_BUFFERS_FILE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't read file "</literal> <name>SDI_BUFFERS_FILE</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffers</name></name> <operator>=</operator> <name>i_ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_ret</name> <operator>=</operator> <call><name>ReadULSysfs</name><argument_list>( <argument><expr><name>SDI_BUFSIZE_FILE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't read file "</literal> <name>SDI_BUFSIZE_FILE</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>i_ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>%</operator> <literal type="number">20</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"buffer size must be a multiple of 20"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_dev</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SDI_DEVICE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name> <operator>=</operator> <call><name>vlc_open</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't open device %s"</literal></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_bufmemsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>+</operator> <name>i_page_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>i_page_size</name><operator>)</operator>

<operator>*</operator> <name>i_page_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mmap</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument>,

<argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>,

<argument><expr><name>i</name> <operator>*</operator> <name>i_bufmemsize</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't mmap(%d): %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StopDecode</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Capture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>poll</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>READ_TIMEOUT</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't poll(): %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLPRI</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>, <argument><expr><name>SDI_IOC_RXGETEVENTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_val</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't SDI_IOC_RXGETEVENTS: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_val</name> <operator>&amp;</operator> <name>SDI_EVENT_RX_BUFFER</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"driver receive buffer queue overrun"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_val</name> <operator>&amp;</operator> <name>SDI_EVENT_RX_FIFO</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"onboard receive FIFO overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_val</name> <operator>&amp;</operator> <name>SDI_EVENT_RX_CARRIER</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"carrier status change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_date</name></name> <operator>+=</operator> <name>CLOCK_GAP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>, <argument><expr><name>SDI_IOC_DQBUF</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't SDI_IOC_DQBUF: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>HandleSDBuffer</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>, <argument><expr><name>SDI_IOC_QBUF</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't SDI_IOC_QBUF: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_current_buffer</name></name> <operator>%=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"resetting board"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseCapture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitCapture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
