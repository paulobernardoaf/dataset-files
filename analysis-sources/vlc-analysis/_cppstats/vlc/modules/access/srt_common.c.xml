<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\srt_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srt_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>srt_key_length_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"16 bytes"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"24 bytes"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"32 bytes"</literal></expr></argument> )</argument_list></call></expr>, }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>parsed_param</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

}</block></struct></type> <name>parsed_param_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type>

<name>find</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>find</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>find</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>srt_url_parse_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>delimiter</name></decl></parameter>,

<parameter><decl><type><name>parsed_param_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name> <operator>||</operator> <operator>*</operator><name>query</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params</name> <operator>||</operator> <name>max_params</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>( <argument><expr><name>query</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>max_params</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>val_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>srt_parse_url</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>srt_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>parsed_param</name></name></type> <name><name>local_params</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_params</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name> <operator>||</operator> <operator>!</operator><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>key_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>bandwidth_overhead_limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_params</name> <operator>=</operator> <call><name>srt_url_parse_query</name><argument_list>( <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>local_params</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_params</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>parsed_param</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_params</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>SRT_PARAM_LATENCY</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>SRT_PARAM_PASSPHRASE</name></expr></argument> )</argument_list></call>

<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>SRT_PARAM_PAYLOAD_SIZE</name></expr></argument> )</argument_list></call>

<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>SRT_PARAM_KEY_LENGTH</name></expr></argument> )</argument_list></call>

<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name><name>srt_key_lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>temp</name> <operator>==</operator> <name><name>srt_key_lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>||</operator> <name>temp</name> <operator>==</operator> <name><name>srt_key_lengths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>key_length</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>local_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,

<argument><expr><name>SRT_PARAM_BANDWIDTH_OVERHEAD_LIMIT</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>bandwidth_overhead_limit</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>srt_set_socket_option</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srt_param</name></decl></parameter>,

<parameter><decl><type><name>SRTSOCKET</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>SRT_SOCKOPT</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>srt_setsockopt</name><argument_list>( <argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Failed to set socket option %s (reason: %s)"</literal></expr></argument>, <argument><expr><name>srt_param</name></expr></argument>,

<argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>stat</name></expr>;</return>

</block_content>}</block></function>

</unit>
