<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\screen\xcb.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/composite.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/shm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Frame rate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "How many times the screen content should be refreshed per second.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_TEXT</name></cpp:macro> <cpp:value>N_("Region left column")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Abscissa of the capture region in pixels.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_TEXT</name></cpp:macro> <cpp:value>N_("Region top row")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Ordinate of the capture region in pixels.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Capture region width")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Pixel width of the capture region, or 0 for full width")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Capture region height")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Pixel height of the capture region, or 0 for full height")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLLOW_MOUSE_TEXT</name></cpp:macro> <cpp:value>N_( "Follow the mouse" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLLOW_MOUSE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Follow the mouse when capturing a subscreen." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"Screen"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Screen capture (with X11/XCB)"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>add_float</name> <argument_list>(<argument><literal type="string">"screen-fps"</literal></argument>, <argument><literal type="number">2.0</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"screen-left"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>LEFT_TEXT</argument>, <argument>LEFT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument>-<literal type="number">32768</literal></argument>, <argument><literal type="number">32767</literal></argument>)</argument_list></macro>

<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"screen-top"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TOP_TEXT</argument>, <argument>TOP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument>-<literal type="number">32768</literal></argument>, <argument><literal type="number">32767</literal></argument>)</argument_list></macro>

<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"screen-width"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WIDTH_TEXT</argument>, <argument>WIDTH_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">65535</literal></argument>)</argument_list></macro>

<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"screen-height"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HEIGHT_TEXT</argument>, <argument>HEIGHT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">65535</literal></argument>)</argument_list></macro>

<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"screen-follow-mouse"</literal></argument>, <argument>false</argument>, <argument>FOLLOW_MOUSE_TEXT</argument>,

<argument>FOLLOW_MOUSE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"screen"</literal></argument>, <argument><literal type="string">"window"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Demux</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>InitES</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_fast16_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_fast16_t</name></type></decl></parameter>,

<parameter><decl><type><name>uint_fast8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>pixmap</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>xcb_shm_seg_t</name></type> <name>segment</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int16_t</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>shm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>follow_mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_w</name></decl>, <name>cur_h</name>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckSHM</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>xcb_shm_query_version_cookie_t</name></type> <name>ck</name> <init>= <expr><call><name>xcb_shm_query_version</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_query_version_reply_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xcb_shm_query_version_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x11-display"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>snum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>xcb_connect</name> <argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"screen"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>scr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>xcb_screen_iterator_t</name></type> <name>i</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>

<condition><expr><name><name>i</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>snum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>snum</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>scr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bad X11 screen number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>scr</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ul</name> <init>= <expr><call><name>strtoul</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>||</operator> <name>ul</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bad X11 drawable %s"</literal></expr></argument>, <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_composite_query_version_reply_t</name> <modifier>*</modifier></type><name>r</name> <init>=

<expr><call><name>xcb_composite_query_version_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>,

<argument><expr><call><name>xcb_composite_query_version</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"X Composite extension not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using Composite extension v%"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_composite_redirect_window</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name>XCB_COMPOSITE_REDIRECT_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pixmap</name></name> <operator>=</operator> <call><name>xcb_generate_id</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <call><name>xcb_generate_id</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>=</operator> <call><name>CheckSHM</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>follow_mouse</name></name> <operator>=</operator> <call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-follow-mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>follow_mouse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>follow_mouse</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <call><name>var_InheritFloat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"screen-fps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interval</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_w</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_timer_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>Demux</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule_asap</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>float</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return> 

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Demux</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_cookie_t</name></type> <name>gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_query_pointer_cookie_t</name></type> <name>qc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>xcb_get_geometry</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>follow_mouse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qc</name> <operator>=</operator> <call><name>xcb_query_pointer</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name> <init>= <expr><call><name>xcb_get_geometry_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>geo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"bad X11 drawable 0x%08"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>discard</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>follow_mouse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcb_discard_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gc</name><operator>.</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>follow_mouse</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_query_pointer_reply_t</name> <modifier>*</modifier></type><name>ptr</name> <init>=

<expr><call><name>xcb_query_pointer_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>w</name> <operator>&gt;</operator> <name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>win_x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>w</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>geo</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>w</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>win_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>geo</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>geo</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>discard</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>w</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>geo</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>discard</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cur_w</name></name> <operator>||</operator> <name>h</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cur_h</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Del</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name><name>geo</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>xcb_free_pixmap</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pixmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>xcb_composite_name_window_pixmap</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pixmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pixmap</name></name></expr></argument>,

<argument><expr><name><name>geo</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>InitES</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cur_w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cur_h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>bpp</name></name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_drawable_t</name></type> <name>drawable</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name><name>geo</name><operator>-&gt;</operator><name>root</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>pixmap</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name></expr>)</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>bpp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>shmget</name> <argument_list>(<argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>IPC_CREAT</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"shared memory allocation error: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>noshm</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_shm_get_image_reply_t</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_get_image_cookie_t</name></type> <name>ck</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_shm_attach</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <call><name>xcb_shm_get_image</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_shm_detach</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>xcb_shm_get_image_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_flush</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>img</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>shmctl</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>noshm</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>shm</name> <init>= <expr><call><name>shmat</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>shmctl</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>shm</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"shared memory attachment error: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>block_shm_Alloc</name> <argument_list>(<argument><expr><name>shm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shmdt</name> <argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>noshm</name>:</label>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>xcb_get_image_reply_t</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>xcb_get_image_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>,

<argument><expr><call><name>xcb_get_image</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>img</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xcb_get_image_data</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name> <init>= <expr><call><name>xcb_get_image_data_length</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>block_heap_Alloc</name> <argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>datalen</name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>InitES</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint_fast16_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint_fast16_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint_fast8_t</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chroma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>xcb_setup_pixmap_formats</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>fmt</name> <operator>+</operator> <call><name>xcb_setup_pixmap_formats_length</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>fmt</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <name>depth</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_ARGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB16</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB15</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bpp</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported pixmap formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <operator>*</operator><name>bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><call><name>es_out_Add</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
