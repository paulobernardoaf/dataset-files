<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\amt.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_TEXT</name></cpp:macro> <cpp:value>N_("Receive buffer")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_LONGTEXT</name></cpp:macro> <cpp:value>N_("AMT receive buffer size (bytes)" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_TEXT</name></cpp:macro> <cpp:value>N_("Native multicast timeout (sec)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_TIMEOUT_TEXT</name></cpp:macro> <cpp:value>N_("AMT timeout (sec)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_RELAY_ADDRESS</name></cpp:macro> <cpp:value>N_("AMT relay (IP address or FQDN)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_RELAY_ADDR_LONG</name></cpp:macro> <cpp:value>N_("AMT relay anycast address, or specify the relay you want by address or fully qualified domain name")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_DEFAULT_RELAY</name></cpp:macro> <cpp:value>N_("amt-relay.m2icast.net")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCE_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_TYPE_LEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELAY_QUERY_MSG_LEN</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELAY_ADV_MSG_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGMP_QUERY_LEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGMP_REPORT_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_HDR_LEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_HDR_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_HDR_IGMP_LEN</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDP_HDR_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_REQUEST_MSG_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_DISCO_MSG_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_RELAY_DISCO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_RELAY_ADV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_REQUEST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_MEM_QUERY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_MEM_UPD</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_MULT_DATA</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_TEARDOWN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMPV3_MEMBERSHIP_QUERY_TYPEID</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMPV3_MEMBERSHIP_REPORT_TYPEID</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMPV1_MEMBERSHIP_REPORT_TYPEID</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMPV2_MEMBERSHIP_REPORT_TYPEID</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMPV2_MEMBERSHIP_LEAVE_TYPEID</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_INCLUDE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_EXCLUDE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_INCLUDE_CHANGE</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_EXCLUDE_CHANGE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_ALLOW</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_IGMP_BLOCK</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCAST_ANYCAST</name></cpp:macro> <cpp:value>"0.0.0.0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCAST_ALLHOSTS</name></cpp:macro> <cpp:value>"224.0.0.22"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_LOOPBACK</name></cpp:macro> <cpp:value>"127.0.0.1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMT_PORT</name></cpp:macro> <cpp:value>2268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MTU</name></cpp:macro> <cpp:value>(1500u - (20 + 8))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_amt_ip</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ver_ihl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tot_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>frag_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ttl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>destAddr</name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_ip_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_amt_ip_alert</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ver_ihl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tot_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>frag_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ttl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>srcAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>destAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>options</name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_ip_alert_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_amt_igmpv3_groupRecord</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>auxDatalen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nSrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>srcIP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_igmpv3_groupRecord_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_amt_igmpv3_membership_report</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>resv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>resv2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nGroupRecord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amt_igmpv3_groupRecord_t</name></type> <name><name>grp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_igmpv3_membership_report_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_amt_igmpv3_membership_query</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_resp_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssmIP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>s_qrv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>qqic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nSrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>srcIP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_igmpv3_membership_query_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_amt_membership_update_msg</name> <block>{

<decl_stmt><decl><type><name>amt_ip_alert_t</name></type> <name>ipHead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amt_igmpv3_membership_report_t</name></type> <name>memReport</name></decl>;</decl_stmt>

}</block></struct></type> <name>amt_membership_update_msg_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>amt_sockets_init</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_relay_discovery_msg</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_relay_request</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>amt_joinSSM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>amt_joinASM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>amt_leaveASM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>amt_leaveSSM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>amt_rcv_relay_adv</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>amt_rcv_relay_mem_query</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_mem_update</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leave</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>open_amt_tunnel</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>amt_update_timer_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>_access_sys_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>relayDisco</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_timer_t</name></type> <name>updateTimer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>mcastGroupAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>mcastSrcAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>relayDiscoAddr</name></decl>;</decl_stmt>

<struct>struct <name>relay_mem_query_msg_t</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ulRcvedNonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uchaMAC</name><index>[<expr><name>MAC_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uchaIGMP</name><index>[<expr><name>IGMP_QUERY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>relay_mem_query_msg</name></decl>;</struct>

<decl_stmt><decl><type><name>amt_igmpv3_membership_query_t</name></type> <name>relay_igmp_query</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mtu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>glob_ulNonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sAMT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sQuery</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tryAMT</name></decl>;</decl_stmt>

}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get_checksum</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_report</name><parameter_list>( <parameter><decl><type><name>amt_igmpv3_membership_report_t</name> <modifier>*</modifier></type><name>mr</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_ip_header</name><parameter_list>( <parameter><decl><type><name>amt_ip_alert_t</name> <modifier>*</modifier></type><name>p_ipHead</name></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"AMT"</literal> )</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"AMT input"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"amt-timeout"</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>AMT_TIMEOUT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"amt-native-timeout"</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>TIMEOUT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"amt-relay"</literal></argument>, <argument>AMT_DEFAULT_RELAY</argument>, <argument>AMT_RELAY_ADDRESS</argument>, <argument>AMT_RELAY_ADDR_LONG</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"amt"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockAMT</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>serverinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>server_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_strtok_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mcastSrc_buf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mcastGroup_buf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mcastSrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mcastGroup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bind_port</name> <init>= <expr><literal type="number">1234</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_server_port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>VLC_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>, <decl><type ref="prev"/><name>response</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ACCESS_SET_CALLBACKS</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BlockAMT</name></expr></argument>, <argument><expr><name>Control</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mtu</name></name> <operator>=</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">188</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>psz_name</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Invalid URL: %s"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bind_port</name> <operator>=</operator> <name><name>url</name><operator>.</operator><name>i_port</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Opening multicast: %s:%d local=%s:%d"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>i_server_port</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>i_bind_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hints</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>vlc_getaddrinfo</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>AMT_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>response</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not find multicast group %s, reason: %s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>server_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>serverinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server_addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mcastGroup_buf</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>errConv</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not convert binary socket address to string: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errConv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mcastGroup</name> <operator>=</operator> <name>mcastGroup_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name></name> <operator>=</operator> <operator>*</operator><name>server_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serverinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Setting multicast group address to %s"</literal></expr></argument>, <argument><expr><name>mcastGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_strtok_r</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_strtok_r</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not parse location %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mcastSrc</name> <operator>=</operator> <name>psz_strtok_r</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>mcastSrc</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>mcastSrc</name> <operator>=</operator> <name>MCAST_ANYCAST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No multicast source address specified, trying ASM..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>vlc_getaddrinfo</name><argument_list>( <argument><expr><name>mcastSrc</name></expr></argument>, <argument><expr><name>AMT_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>response</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not find multicast source %s, reason: %s"</literal></expr></argument>, <argument><expr><name>mcastSrc</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>server_addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>serverinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server_addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mcastSrc_buf</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>errConv</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not binary socket address to string: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errConv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mcastSrc</name> <operator>=</operator> <name>mcastSrc_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name></name> <operator>=</operator> <operator>*</operator><name>server_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Setting multicast source address to %s"</literal></expr></argument>, <argument><expr><name>mcastSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"amt-relay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No relay anycast or unicast address specified."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Addresses: mcastGroup: %s mcastSrc: %s relay: %s"</literal></expr></argument>, \

<argument><expr><name>mcastGroup</name></expr></argument>, <argument><expr><name>mcastSrc</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>mcastGroup</name></expr></argument>, <argument><expr><name>i_bind_port</name></expr></argument>,

<argument><expr><name>mcastSrc</name></expr></argument>, <argument><expr><name>i_server_port</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_timer_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument>, <argument><expr><name>amt_update_timer_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>VLC_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"amt-native-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label> 

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>serverinfo</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>VLC_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>amt_leaveSSM_group</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>amt_leaveASM_group</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>amt_send_mem_update</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockAMT</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tunnel</name> <init>= <expr><name>IP_HDR_LEN</name> <operator>+</operator> <name>UDP_HDR_LEN</name> <operator>+</operator> <name>AMT_HDR_LEN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mtu</name></name> <operator>+</operator> <name>tunnel</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>pkt</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Native multicast receive time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>open_amt_tunnel</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recv</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mtu</name></name> <operator>+</operator> <name>tunnel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>!=</operator> <name>AMT_MULT_DATA</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <name>tunnel</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <name>tunnel</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"%zd bytes packet truncated (MTU was %zd)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mtu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>tunnel</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>temp_size</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>sockaddr</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mtu</name></name> <operator>+</operator> <name>tunnel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><name>pkt</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>open_amt_tunnel</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>serverinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hints</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Attempting AMT to %s..."</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tryAMT</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>response</name> <init>= <expr><call><name>vlc_getaddrinfo</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument>, <argument><expr><name>AMT_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverinfo</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>response</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not find relay %s, reason: %s"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>server</name> <operator>=</operator> <name>serverinfo</name></expr>;</init> <condition><expr><name>server</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>server</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>server_addr</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>relay_ip</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server_addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>errConv</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not convert relay ip to binary representation: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errConv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Trying AMT Server: %s"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDiscoAddr</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>server_addr</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>amt_sockets_init</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>amt_send_relay_discovery_msg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Sent relay AMT discovery message to %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>amt_rcv_relay_adv</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error receiving AMT relay advertisement msg from %s, skipping"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Received AMT relay advertisement from %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amt_send_relay_request</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Sent AMT relay request message to %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>amt_rcv_relay_mem_query</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not receive AMT relay membership query from %s, reason: %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Received AMT relay membership query from %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>amt_joinSSM_group</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error joining SSM %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Joined SSM"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>amt_joinASM_group</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error joining ASM %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Joined ASM group"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_disarm</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amt_send_mem_update</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name><init>=<expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name>pkt</name> <operator>=</operator> <call><name>BlockAMT</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to receive UDP packet from AMT relay %s for multicast group"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Got UDP packet from multicast group via AMT relay %s, continuing..."</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No AMT servers responding"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_timer_disarm</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>serverinfo</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>serverinfo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get_checksum</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nleft</name> <init>= <expr><name>nLen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>answer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><name>w</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nleft</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>answer</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>answer</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>answer</name> <operator>=</operator> <operator>~</operator><name>sum</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>answer</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_report</name><parameter_list>( <parameter><decl><type><name>amt_igmpv3_membership_report_t</name> <modifier>*</modifier></type><name>mr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AMT_IGMPV3_MEMBERSHIP_REPORT_TYPEID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>resv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>resv2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mr</name><operator>-&gt;</operator><name>nGroupRecord</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_ip_header</name><parameter_list>( <parameter><decl><type><name>amt_ip_alert_t</name> <modifier>*</modifier></type><name>p_ipHead</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>ver_ihl</name></name> <operator>=</operator> <literal type="number">0x46</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>tos</name></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>tot_len</name></name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><name>IP_HDR_IGMP_LEN</name> <operator>+</operator> <name>IGMP_REPORT_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>frag_off</name></name> <operator>=</operator> <literal type="number">0x0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>check</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>srcAddr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <literal type="number">0x0000</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amt_sockets_init</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>rcvAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rcvAddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDiscoAddr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDiscoAddr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><name>AMT_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>=</operator> <call><name>vlc_socket</name><argument_list>( <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create UDP socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Couldn't make socket reusable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rcvAddr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcvAddr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcvAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bind</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rcvAddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rcvAddr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind UDP socket error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>=</operator> <call><name>vlc_socket</name><argument_list>( <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create query socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>stLocalAddr</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>sin_family</name> <operator>=</operator> <name>AF_INET</name></expr>,

<expr><operator>.</operator><name>sin_port</name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>,

<expr><operator>.</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bind</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>stLocalAddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind query socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>stSvrAddr</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>sin_family</name> <operator>=</operator> <name>AF_INET</name></expr>,

<expr><operator>.</operator><name>sin_port</name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><literal type="number">9124</literal></expr></argument> )</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inet_pton</name><argument_list>( <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>LOCAL_LOOPBACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stSvrAddr</name><operator>.</operator><name>sin_addr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>res</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not convert loopback address"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sQuery</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_relay_discovery_msg</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>chaSendBuffer</name><index>[<expr><name>AMT_DISCO_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ulNonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>chaSendBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chaSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ulNonce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AMT_RELAY_DISCO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srand</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ulNonce</name> <operator>=</operator> <call><name>htonl</name><argument_list>( <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>chaSendBuffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulNonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulNonce</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name> <operator>=</operator> <name>ulNonce</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nRet</name> <operator>=</operator> <call><name>sendto</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>chaSendBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chaSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,\

<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relayDiscoAddr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>nRet</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Sendto failed to %s with error %d."</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_relay_request</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>chaSendBuffer</name><index>[<expr><name>AMT_REQUEST_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ulNonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>chaSendBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chaSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ulNonce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AMT_REQUEST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chaSendBuffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ulNonce</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>chaSendBuffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulNonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nRet</name> <operator>=</operator> <call><name>send</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>chaSendBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chaSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>nRet</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error sending relay request to %s error: %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amt_send_mem_update</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relay_ip</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leave</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sendBufSize</name> <init>= <expr><name>IP_HDR_IGMP_LEN</name> <operator>+</operator> <name>MAC_LEN</name> <operator>+</operator> <name>NONCE_LEN</name> <operator>+</operator> <name>AMT_HDR_LEN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pSendBuffer</name><index>[ <expr><name>sendBufSize</name> <operator>+</operator> <name>IGMP_REPORT_LEN</name></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ulNonce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pSendBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pSendBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AMT_MEM_UPD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pSendBuffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>uchaMAC</name></name></expr></argument>, <argument><expr><name>MAC_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ulNonce</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pSendBuffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulNonce</name></expr></argument>, <argument><expr><name>NONCE_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>amt_ip_alert_t</name></type> <name>p_ipHead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_ipHead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IP_HDR_IGMP_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_ip_header</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_ipHead</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>inet_pton</name><argument_list>( <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>MCAST_ALLHOSTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>temp</name><operator>.</operator><name>sin_addr</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>res</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Could not convert all hosts multicast address: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>.</operator><name>destAddr</name></name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ipHead</name><operator>.</operator><name>check</name></name> <operator>=</operator> <call><name>get_checksum</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ipHead</name></expr></argument>, <argument><expr><name>IP_HDR_IGMP_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>amt_igmpv3_groupRecord_t</name></type> <name>groupRcd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>auxDatalen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>ssm</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>leave</name></expr> ?</condition><then> <expr><name>AMT_IGMP_BLOCK</name></expr></then><else>:<expr><name>AMT_IGMP_INCLUDE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>nSrc</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>srcIP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>leave</name></expr> ?</condition><then> <expr><name>AMT_IGMP_INCLUDE_CHANGE</name></expr></then><else>:<expr><name>AMT_IGMP_EXCLUDE_CHANGE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>groupRcd</name><operator>.</operator><name>nSrc</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>amt_igmpv3_membership_report_t</name></type> <name>p_igmpMemRep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>make_report</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_igmpMemRep</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_igmpMemRep</name><operator>.</operator><name>grp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupRcd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>groupRcd</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_igmpMemRep</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <call><name>get_checksum</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_igmpMemRep</name></expr></argument>, <argument><expr><name>IGMP_REPORT_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>amt_membership_update_msg_t</name></type> <name>memUpdateMsg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memUpdateMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memUpdateMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memUpdateMsg</name><operator>.</operator><name>ipHead</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_ipHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_ipHead</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memUpdateMsg</name><operator>.</operator><name>memReport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_igmpMemRep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_igmpMemRep</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pSendBuffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memUpdateMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memUpdateMsg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>pSendBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pSendBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"AMT relay membership report sent to %s"</literal></expr></argument>, <argument><expr><name>relay_ip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>amt_rcv_relay_adv</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pkt</name><index>[<expr><name>RELAY_ADV_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RELAY_ADV_MSG_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"AMT relay advertisement receive time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>temp_size</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>sockaddr</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>recvfrom</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>RELAY_ADV_MSG_LEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Received message length less than zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ulRcvNonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ipAddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

}</block> <decl><name>relay_adv_msg</name></decl>;</struct>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>relay_adv_msg</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MSG_TYPE_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>relay_adv_msg</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>AMT_RELAY_ADV</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Received message not an AMT relay advertisement, ignoring. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>relay_adv_msg</name><operator>.</operator><name>ulRcvNonce</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>NONCE_LEN</name></expr>]</index></name></expr></argument>, <argument><expr><name>NONCE_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name> <operator>!=</operator> <name><name>relay_adv_msg</name><operator>.</operator><name>ulRcvNonce</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Discovery nonces differ! currNonce:%x rcvd%x"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>relay_adv_msg</name><operator>.</operator><name>ulRcvNonce</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>relay_adv_msg</name><operator>.</operator><name>ipAddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>relayAddr</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>sin_family</name> <operator>=</operator> <name>AF_INET</name></expr>,

<expr><operator>.</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>relay_adv_msg</name><operator>.</operator><name>ipAddr</name></name></expr>,

<expr><operator>.</operator><name>sin_port</name> <operator>=</operator> <call><name>htons</name><argument_list>( <argument><expr><name>AMT_PORT</name></expr></argument> )</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><call><name>connect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>relayAddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>relayAddr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>nRet</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error connecting AMT UDP socket: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>amt_rcv_relay_mem_query</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>pkt</name><index>[<expr><name>RELAY_QUERY_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RELAY_QUERY_MSG_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"AMT relay membership query receive time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>recv</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>RELAY_QUERY_MSG_LEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <name>RELAY_QUERY_MSG_LEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"length less than zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MSG_TYPE_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>uchaMAC</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>AMT_HDR_LEN</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAC_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>ulRcvedNonce</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>AMT_HDR_LEN</name> <operator>+</operator> <name>MAC_LEN</name></expr>]</index></name></expr></argument>, <argument><expr><name>NONCE_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>ulRcvedNonce</name></name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Nonces are different rcvd: %x glob: %x"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_mem_query_msg</name><operator>.</operator><name>ulRcvedNonce</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>glob_ulNonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><name>AMT_HDR_LEN</name> <operator>+</operator> <name>MAC_LEN</name> <operator>+</operator> <name>NONCE_LEN</name> <operator>+</operator> <name>IP_HDR_IGMP_LEN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>max_resp_code</name></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>checksum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>ssmIP</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>s_qrv</name></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>qqic</name></name> <operator>=</operator> <literal type="number">125</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>qqic</name></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>shift</name> <operator>&lt;</operator> <name>RELAY_QUERY_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>nSrc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>qqic</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amt_joinSSM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_ADD_SOURCE_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq_source</name></name></type> <name>imr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_sourceaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_interface</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<return>return <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_ADD_SOURCE_MEMBERSHIP</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amt_joinASM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq</name></name></type> <name>imr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_interface</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<return>return <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_ADD_MEMBERSHIP</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amt_leaveSSM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_DROP_SOURCE_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq_source</name></name></type> <name>imr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_sourceaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastSrcAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_interface</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<return>return <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_DROP_SOURCE_MEMBERSHIP</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amt_leaveASM_group</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq</name></name></type> <name>imr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>mcastGroupAddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_interface</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<return>return <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sAMT</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_DROP_MEMBERSHIP</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amt_update_timer_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>amt_send_mem_update</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relayDisco</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>updateTimer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>relay_igmp_query</name><operator>.</operator><name>qqic</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
