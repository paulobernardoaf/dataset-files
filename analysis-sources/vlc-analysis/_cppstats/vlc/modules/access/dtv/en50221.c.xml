<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dtv\en50221.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dvb/ca.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENABLE_HTTPD</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_HTTPD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_httpd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/dvb-text.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"en50221.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"en50221_capmt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>en50221_session_t</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_resource_id</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>pf_handle</name>)<parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>pf_close</name>)<parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>pf_manage</name>)<parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

}</block></struct></type> <name>en50221_session_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_ENQ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_ANSW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_MENU</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_MENU_ANSW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_MMI_LIST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>en50221_mmi_object_t</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_object_type</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_blind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

}</block> <decl><name>enq</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_answ</name></decl>;</decl_stmt>

}</block> <decl><name>answ</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>, <modifier>*</modifier><name>psz_subtitle</name>, <modifier>*</modifier><name>psz_bottom</name>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_choices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_choices</name></decl>;</decl_stmt>

}</block> <decl><name>menu</name></decl>;</struct> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_choice</name></decl>;</decl_stmt>

}</block> <decl><name>menu_answ</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

}</block></struct></type> <name>mmi_t</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG_TPDU</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAM_PROG_MAX</name></cpp:macro> <cpp:value>MAX_PROGRAMS</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResourceManagerOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ApplicationInformationOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ConditionalAccessOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MMIOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CI_SLOTS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SESSIONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PROGRAMS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<struct>struct <name>cam</name>

<block>{

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ca_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl>, <decl><type ref="prev"/><name>i_next_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_slots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_active_slot</name><index>[<expr><name>MAX_CI_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_tc_has_data</name><index>[<expr><name>MAX_CI_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_slot_mmi_expected</name><index>[<expr><name>MAX_CI_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>MAX_CI_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>en50221_session_t</name></type> <name><name>p_sessions</name><index>[<expr><name>MAX_SESSIONS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name><name>pp_selected_programs</name><index>[<expr><name>MAX_PROGRAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_selected_programs</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_INDICATOR</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>GetLength</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_length</name> <operator>=</operator> <operator>*</operator><name>p_data</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>pi_length</name> <operator>&amp;</operator> <name>SIZE_INDICATOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>*</operator><name>pi_length</name> <operator>&amp;</operator> <operator>~</operator><name>SIZE_INDICATOR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_length</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pi_length</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p_data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>SetLength</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">128</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">256</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SIZE_INDICATOR</name> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SIZE_INDICATOR</name> <operator>|</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">16777216</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SIZE_INDICATOR</name> <operator>|</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SIZE_INDICATOR</name> <operator>|</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_length</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TPDU_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TPDU_DATA</name></cpp:macro> <cpp:value>(MAX_TPDU_SIZE - 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_INDICATOR</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SB</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_RCV</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CREATE_TC</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CTC_REPLY</name></cpp:macro> <cpp:value>0x83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DELETE_TC</name></cpp:macro> <cpp:value>0x84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DTC_REPLY</name></cpp:macro> <cpp:value>0x85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_REQUEST_TC</name></cpp:macro> <cpp:value>0x86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NEW_TC</name></cpp:macro> <cpp:value>0x87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TC_ERROR</name></cpp:macro> <cpp:value>0x88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DATA_LAST</name></cpp:macro> <cpp:value>0xA0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DATA_MORE</name></cpp:macro> <cpp:value>0xA1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Dump</name><parameter_list>( <parameter><decl><type><name>bool</name></type> <name>b_outgoing</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TPDU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DUMP</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_outgoing</name></expr> ?</condition><then> <expr><literal type="string">"--&gt;"</literal></expr> </then><else>: <expr><literal type="string">"&lt;--"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_DUMP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02X "</literal></expr></argument>, <argument><expr><name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i_size</name> <operator>&gt;=</operator> <name>MAX_DUMP</name></expr> ?</condition><then> <expr><literal type="string">"..."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_outgoing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TPDUSend</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_slot</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_content</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>i_slot</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>i_slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>i_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SetLength</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>i_slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dump</name><argument_list>( <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>p_data</name></expr>, <expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>p_data</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_content</name></expr>, <expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>i_length</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>writev</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot write to CAM device: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAM_READ_TIMEOUT</name></cpp:macro> <cpp:value>3500</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>TPDURecv</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_slot</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_tag</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tcid</name> <init>= <expr><name>i_slot</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CAM_READ_TIMEOUT</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"poll error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"CAM device poll time-out"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>pi_size</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>MAX_TPDU_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>read</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>MAX_TPDU_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot read from CAM device (%d): %s"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_size</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>i_tcid</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"invalid read from CAM device (%d instead of %d)"</literal></expr></argument>,

<argument><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_tcid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_size</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_tag</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_tc_has_data</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_size</name> <operator>&gt;=</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <name><name>p_data</name><index>[<expr><name>i_size</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>T_SB</name>

<operator>&amp;&amp;</operator> <name><name>p_data</name><index>[<expr><name>i_size</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><name>i_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>DATA_INDICATOR</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dump</name><argument_list>( <argument><expr><name>false</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pi_size</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_SESSION_NUMBER</name></cpp:macro> <cpp:value>0x90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_OPEN_SESSION_REQUEST</name></cpp:macro> <cpp:value>0x91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_OPEN_SESSION_RESPONSE</name></cpp:macro> <cpp:value>0x92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_CREATE_SESSION</name></cpp:macro> <cpp:value>0x93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_CREATE_SESSION_RESPONSE</name></cpp:macro> <cpp:value>0x94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_CLOSE_SESSION_REQUEST</name></cpp:macro> <cpp:value>0x95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_CLOSE_SESSION_RESPONSE</name></cpp:macro> <cpp:value>0x96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_OK</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_NOT_ALLOCATED</name></cpp:macro> <cpp:value>0xF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_RESOURCE_MANAGER</name></cpp:macro> <cpp:value>0x00010041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_APPLICATION_INFORMATION</name></cpp:macro> <cpp:value>0x00020041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_CONDITIONAL_ACCESS_SUPPORT</name></cpp:macro> <cpp:value>0x00030041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_HOST_CONTROL</name></cpp:macro> <cpp:value>0x00200041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_DATE_TIME</name></cpp:macro> <cpp:value>0x00240041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_MMI</name></cpp:macro> <cpp:value>0x00400041</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ResourceIdToInt</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SPDUSend</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_spdu</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_spdu</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ST_SESSION_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_session_id</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_session_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_spdu</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&gt;</operator> <name>MAX_TPDU_DATA</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_MORE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>MAX_TPDU_DATA</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"couldn't send TPDU on session %d"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>MAX_TPDU_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>MAX_TPDU_DATA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_LAST</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"couldn't send TPDU on session %d"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name>

<operator>||</operator> <name>i_tag</name> <operator>!=</operator> <name>T_SB</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"couldn't recv TPDU on session %d"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SessionOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_slot</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_spdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_session_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_resource_id</name> <init>= <expr><call><name>ResourceIdToInt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_response</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><name>SS_NOT_ALLOCATED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i_session_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i_session_id</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i_session_id</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i_session_id</name> <operator>&gt;</operator> <name>MAX_SESSIONS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"too many sessions !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>=</operator> <name>i_slot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <name>i_resource_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_manage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_resource_id</name> <operator>==</operator> <name>RI_RESOURCE_MANAGER</name>

<operator>||</operator> <name>i_resource_id</name> <operator>==</operator> <name>RI_APPLICATION_INFORMATION</name>

<operator>||</operator> <name>i_resource_id</name> <operator>==</operator> <name>RI_CONDITIONAL_ACCESS_SUPPORT</name>

<operator>||</operator> <name>i_resource_id</name> <operator>==</operator> <name>RI_DATE_TIME</name>

<operator>||</operator> <name>i_resource_id</name> <operator>==</operator> <name>RI_MMI</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>SS_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ST_OPEN_SESSION_RESPONSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_status</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>i_session_id</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>i_session_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_LAST</name></expr></argument>, <argument><expr><name>p_response</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionOpen: couldn't send TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionOpen: couldn't recv TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name>i_resource_id</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>RI_RESOURCE_MANAGER</name></expr>:</case>

<expr_stmt><expr><call><name>ResourceManagerOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_APPLICATION_INFORMATION</name></expr>:</case>

<expr_stmt><expr><call><name>ApplicationInformationOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_CONDITIONAL_ACCESS_SUPPORT</name></expr>:</case>

<expr_stmt><expr><call><name>ConditionalAccessOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_DATE_TIME</name></expr>:</case>

<expr_stmt><expr><call><name>DateTimeOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_MMI</name></expr>:</case>

<expr_stmt><expr><call><name>MMIOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_HOST_CONTROL</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unknown resource id (0x%x)"</literal></expr></argument>, <argument><expr><name>i_resource_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void SessionCreate( cam_t * p_cam, int i_slot, int i_resource_id )

{

uint8_t p_response[16];

uint8_t i_tag;

int i_session_id;

for ( i_session_id = 1; i_session_id &lt;= MAX_SESSIONS; i_session_id++ )

{

if ( !p_cam-&gt;p_sessions[i_session_id - 1].i_resource_id )

break;

}

if ( i_session_id == MAX_SESSIONS )

{

msg_Err( p_cam-&gt;obj, "too many sessions !" );

return;

}

p_cam-&gt;p_sessions[i_session_id - 1].i_slot = i_slot;

p_cam-&gt;p_sessions[i_session_id - 1].i_resource_id = i_resource_id;

p_cam-&gt;p_sessions[i_session_id - 1].pf_close = NULL;

p_cam-&gt;p_sessions[i_session_id - 1].pf_manage = NULL;

p_cam-&gt;p_sessions[i_session_id - 1].p_sys = NULL;

p_response[0] = ST_CREATE_SESSION;

p_response[1] = 0x6;

SetDWBE( &amp;p_resource[2], i_resource_id );

SetWBE( &amp;p_response[6]. i_session_id);

if ( TPDUSend( p_cam, i_slot, T_DATA_LAST, p_response, 4 ) !=

VLC_SUCCESS )

{

msg_Err( p_cam-&gt;obj,

"SessionCreate: couldn't send TPDU on slot %d", i_slot );

return;

}

if ( TPDURecv( p_cam, i_slot, &amp;i_tag, NULL, NULL ) != VLC_SUCCESS )

{

msg_Err( p_cam-&gt;obj,

"SessionCreate: couldn't recv TPDU on slot %d", i_slot );

return;

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SessionCreateResponse</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_slot</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_spdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_resource_id</name> <init>= <expr><call><name>ResourceIdToInt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_spdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_session_id</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_spdu</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_status</name> <operator>!=</operator> <name>SS_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"SessionCreateResponse: failed to open session %d"</literal>

<literal type="string">" resource=0x%x status=0x%x"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>i_resource_id</name></expr></argument>,

<argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name>i_resource_id</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>RI_RESOURCE_MANAGER</name></expr>:</case>

<expr_stmt><expr><call><name>ResourceManagerOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_APPLICATION_INFORMATION</name></expr>:</case>

<expr_stmt><expr><call><name>ApplicationInformationOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_CONDITIONAL_ACCESS_SUPPORT</name></expr>:</case>

<expr_stmt><expr><call><name>ConditionalAccessOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_DATE_TIME</name></expr>:</case>

<expr_stmt><expr><call><name>DateTimeOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_MMI</name></expr>:</case>

<expr_stmt><expr><call><name>MMIOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RI_HOST_CONTROL</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unknown resource id (0x%x)"</literal></expr></argument>, <argument><expr><name>i_resource_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SessionSendClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_response</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ST_CLOSE_SESSION_REQUEST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_LAST</name></expr></argument>, <argument><expr><name>p_response</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionSendClose: couldn't send TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionSendClose: couldn't recv TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SessionClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_response</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_close</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ST_CLOSE_SESSION_RESPONSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>SS_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>i_session_id</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>i_session_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_LAST</name></expr></argument>, <argument><expr><name>p_response</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionClose: couldn't send TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"SessionClose: couldn't recv TPDU on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SPDUHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_slot</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_spdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_session_id</name></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>p_spdu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ST_SESSION_NUMBER</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_session_id</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_handle</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>,

<argument><expr><name>p_spdu</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST_OPEN_SESSION_REQUEST</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>!=</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SessionOpen</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>p_spdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST_CREATE_SESSION_RESPONSE</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>!=</operator> <literal type="number">9</literal> <operator>||</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x7</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SessionCreateResponse</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>p_spdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST_CLOSE_SESSION_REQUEST</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_session_id</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SessionClose</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST_CLOSE_SESSION_RESPONSE</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_session_id</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_spdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_spdu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_spdu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"closing a session which is not allocated (%d)"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_close</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected tag in SPDUHandle (%x)"</literal></expr></argument>, <argument><expr><name><name>p_spdu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_NONE</name></cpp:macro> <cpp:value>0x000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_PROFILE_ENQ</name></cpp:macro> <cpp:value>0x9F8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_PROFILE</name></cpp:macro> <cpp:value>0x9F8011</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_PROFILE_CHANGE</name></cpp:macro> <cpp:value>0x9F8012</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_APPLICATION_INFO_ENQ</name></cpp:macro> <cpp:value>0x9F8020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_APPLICATION_INFO</name></cpp:macro> <cpp:value>0x9F8021</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_ENTER_MENU</name></cpp:macro> <cpp:value>0x9F8022</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CA_INFO_ENQ</name></cpp:macro> <cpp:value>0x9F8030</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CA_INFO</name></cpp:macro> <cpp:value>0x9F8031</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CA_PMT</name></cpp:macro> <cpp:value>0x9F8032</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CA_PMT_REPLY</name></cpp:macro> <cpp:value>0x9F8033</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_TUNE</name></cpp:macro> <cpp:value>0x9F8400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_REPLACE</name></cpp:macro> <cpp:value>0x9F8401</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CLEAR_REPLACE</name></cpp:macro> <cpp:value>0x9F8402</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_ASK_RELEASE</name></cpp:macro> <cpp:value>0x9F8403</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DATE_TIME_ENQ</name></cpp:macro> <cpp:value>0x9F8440</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DATE_TIME</name></cpp:macro> <cpp:value>0x9F8441</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CLOSE_MMI</name></cpp:macro> <cpp:value>0x9F8800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DISPLAY_CONTROL</name></cpp:macro> <cpp:value>0x9F8801</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DISPLAY_REPLY</name></cpp:macro> <cpp:value>0x9F8802</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_TEXT_LAST</name></cpp:macro> <cpp:value>0x9F8803</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_TEXT_MORE</name></cpp:macro> <cpp:value>0x9F8804</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_KEYPAD_CONTROL</name></cpp:macro> <cpp:value>0x9F8805</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_KEYPRESS</name></cpp:macro> <cpp:value>0x9F8806</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_ENQ</name></cpp:macro> <cpp:value>0x9F8807</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_ANSW</name></cpp:macro> <cpp:value>0x9F8808</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_MENU_LAST</name></cpp:macro> <cpp:value>0x9F8809</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_MENU_MORE</name></cpp:macro> <cpp:value>0x9F880A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_MENU_ANSW</name></cpp:macro> <cpp:value>0x9F880B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_LIST_LAST</name></cpp:macro> <cpp:value>0x9F880C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_LIST_MORE</name></cpp:macro> <cpp:value>0x9F880D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SUBTITLE_SEGMENT_LAST</name></cpp:macro> <cpp:value>0x9F880E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SUBTITLE_SEGMENT_MORE</name></cpp:macro> <cpp:value>0x9F880F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DISPLAY_MESSAGE</name></cpp:macro> <cpp:value>0x9F8810</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SCENE_END_MARK</name></cpp:macro> <cpp:value>0x9F8811</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SCENE_DONE</name></cpp:macro> <cpp:value>0x9F8812</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SCENE_CONTROL</name></cpp:macro> <cpp:value>0x9F8813</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SUBTITLE_DOWNLOAD_LAST</name></cpp:macro> <cpp:value>0x9F8814</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_SUBTITLE_DOWNLOAD_MORE</name></cpp:macro> <cpp:value>0x9F8815</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_FLUSH_DOWNLOAD</name></cpp:macro> <cpp:value>0x9F8816</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_DOWNLOAD_REPLY</name></cpp:macro> <cpp:value>0x9F8817</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_CMD</name></cpp:macro> <cpp:value>0x9F8C00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_CONNECTION_DESCRIPTOR</name></cpp:macro> <cpp:value>0x9F8C01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_REPLY</name></cpp:macro> <cpp:value>0x9F8C02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_SEND_LAST</name></cpp:macro> <cpp:value>0x9F8C03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_SEND_MORE</name></cpp:macro> <cpp:value>0x9F8C04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_RCV_LAST</name></cpp:macro> <cpp:value>0x9F8C05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_COMMS_RCV_MORE</name></cpp:macro> <cpp:value>0x9F8C06</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>APDUGetTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>p_apdu</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>AOT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>APDUGetLength</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GetLength</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_apdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pi_size</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>APDUSend</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_tag</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_apdu</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ca_msg_t</name></type> <name>ca_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_tag</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>i_tag</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>i_tag</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>SetLength</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name> <operator>==</operator> <name>CA_CI_LINK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>SPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <name>p</name> <operator>-</operator> <name>p_apdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>+</operator> <name>p</name> <operator>-</operator> <name>p_apdu</name> <operator>&gt;</operator> <literal type="number">256</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"CAM: apdu overflow"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>i_size</name> <operator>+</operator> <name>p</name> <operator>-</operator> <name>p_apdu</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>length</name></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ca_msg</name><operator>.</operator><name>msg</name></name></expr></argument>, <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <name>p</name> <operator>-</operator> <name>p_apdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_SEND_MSG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Error sending to CAM: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResourceManagerHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOT_PROFILE_ENQ</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>resources</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>htonl</name><argument_list>(<argument><expr><name>RI_RESOURCE_MANAGER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>htonl</name><argument_list>(<argument><expr><name>RI_APPLICATION_INFORMATION</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>htonl</name><argument_list>(<argument><expr><name>RI_CONDITIONAL_ACCESS_SUPPORT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>htonl</name><argument_list>(<argument><expr><name>RI_DATE_TIME</name></expr></argument>)</argument_list></call></expr>,

<macro><name>htonl</name><argument_list>(<argument>RI_MMI</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_PROFILE</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>resources</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AOT_PROFILE</name></expr>:</case>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_PROFILE_CHANGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected tag in ResourceManagerHandle (0x%x)"</literal></expr></argument>,

<argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResourceManagerOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"opening ResourceManager session (%u)"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_handle</name> <operator>=</operator> <name>ResourceManagerHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_PROFILE_ENQ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_HTTPD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HTTPExtractValue</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_value_max</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_uri</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p</name> <operator>==</operator> <name>psz_uri</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument> )</argument_list></call> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><name>i_len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_value_max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_value</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>i_value_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>i_value_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplicationInformationEnterMenu</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"entering MMI menus on session %d"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_ENTER_MENU</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplicationInformationHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_session_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOT_APPLICATION_INFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>, <decl><type ref="prev"/><name>i_manufacturer</name></decl>, <decl><type ref="prev"/><name>i_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_apdu</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <operator>*</operator><name>d</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_manufacturer</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>GetLength</name><argument_list>( <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"CAM: %s, %02X, %04X, %04X"</literal></expr></argument>,

<argument><expr><name>d</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>i_manufacturer</name></expr></argument>, <argument><expr><name>i_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"unexpected tag in ApplicationInformationHandle (0x%x)"</literal></expr></argument>,

<argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplicationInformationOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"opening ApplicationInformation session (%u)"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_handle</name> <operator>=</operator>

<name>ApplicationInformationHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_APPLICATION_INFO_ENQ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CASYSTEM_IDS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>pi_system_ids</name><index>[<expr><name>MAX_CASYSTEM_IDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>system_ids_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckSystemID</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ids</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<while>while <condition>( <expr><name><name>p_ids</name><operator>-&gt;</operator><name>pi_system_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_ids</name><operator>-&gt;</operator><name>pi_system_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CAPMTNeedsDescrambling</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_info</name><operator>-&gt;</operator><name>p_program_descriptors</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_es_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_info</name><operator>-&gt;</operator><name>p_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_descriptors</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>CopyDescriptors</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_drdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_drdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_drdata</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_drdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x09</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dr_len</name> <init>= <expr><name><name>p_drdata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_sysid</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_drdata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CheckSystemID</name><argument_list>( <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><name>i_sysid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_dest</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[<expr><name>i_total</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_drdata</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i_dr_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_dr_len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_drdata</name> <operator>=</operator> <name>i_drdata</name> <operator>-</operator> <name>i_dr_len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_drdata</name> <operator>+=</operator> <name>i_dr_len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i_total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>GetCADSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_drdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_drdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>CopyDescriptors</name><argument_list>( <argument><expr><name>p_drdata</name></expr></argument>, <argument><expr><name>i_drdata</name></expr></argument>, <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>CAPMTHeader</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_list_mgt</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><literal type="number">7</literal> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_list_mgt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_version</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>i_cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyDescriptors</name><argument_list>( <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>p_program_descriptors</name></name></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_descriptors</name></name></expr></argument>,

<argument><expr><name>p_ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>CAPMTES</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_capmt_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_cmd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>&amp;</operator><name><name>p_data</name><index>[ <expr><name>i_capmt_size</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_es_pid</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_es_pid</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>i_cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyDescriptors</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_descriptors</name></name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_descriptors</name></name></expr></argument>,

<argument><expr><name>p_ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>CAPMTBuild</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_list_mgt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pi_capmt_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name> <init>=

<expr><operator>(</operator><name>system_ids_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_cad_size</name></decl>, <decl><type ref="prev"/><name>i_cad_program_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_cad_size</name> <operator>=</operator> <name>i_cad_program_size</name> <operator>=</operator> <call><name>GetCADSize</name><argument_list>( <argument><expr><name>p_ids</name></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>p_program_descriptors</name></name></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_descriptors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_es_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_info</name><operator>-&gt;</operator><name>p_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_cad_size</name> <operator>+=</operator> <call><name>GetCADSize</name><argument_list>( <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_descriptors</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_descriptors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_cad_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"no compatible scrambling system for SID %d on session %d"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTHeader</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><name>i_list_mgt</name></expr></argument>,

<argument><expr><name>i_cad_program_size</name></expr></argument>, <argument><expr><name>i_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_cad_program_size</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_capmt_size</name> <operator>=</operator> <literal type="number">7</literal> <operator>+</operator> <name>i_cad_program_size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_capmt_size</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_es_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_info</name><operator>-&gt;</operator><name>p_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_cad_size</name> <operator>=</operator> <call><name>GetCADSize</name><argument_list>( <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_descriptors</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_descriptors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_cad_size</name> <operator>||</operator> <name>i_cad_program_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTES</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_ids</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_capmt_size</name></expr></argument>, <argument><expr><name>i_cad_size</name></expr></argument>,

<argument><expr><name>i_cmd</name></expr></argument>, <argument><expr><name>p_capmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_cad_size</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_capmt_size</name> <operator>+=</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_cad_size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_capmt_size</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_capmt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CAPMTFirst</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_capmt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"adding first CAPMT for SID %d on session %d"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTBuild</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>,

<argument><expr><literal type="number">0x3</literal></expr></argument> , <argument><expr><literal type="number">0x1</literal></expr></argument> ,

<argument><expr><operator>&amp;</operator><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_capmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CA_PMT</name></expr></argument>, <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CAPMTAdd</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_capmt_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_selected_programs</name></name> <operator>&gt;=</operator> <name>CAM_PROG_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Not adding CAPMT for SID %d, too many programs"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_selected_programs</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_selected_programs</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CAPMTFirst</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAPMT_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>CAPMT_WAIT</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"adding CAPMT for SID %d on session %d"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTBuild</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>,

<argument><expr><literal type="number">0x4</literal></expr></argument> , <argument><expr><literal type="number">0x1</literal></expr></argument> ,

<argument><expr><operator>&amp;</operator><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_capmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CA_PMT</name></expr></argument>, <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CAPMTUpdate</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_capmt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"updating CAPMT for SID %d on session %d"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTBuild</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>,

<argument><expr><literal type="number">0x5</literal></expr></argument> , <argument><expr><literal type="number">0x1</literal></expr></argument> ,

<argument><expr><operator>&amp;</operator><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_capmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CA_PMT</name></expr></argument>, <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CAPMTDelete</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_capmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_capmt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_selected_programs</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"deleting CAPMT for SID %d on session %d"</literal></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_capmt</name> <operator>=</operator> <call><name>CAPMTBuild</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>,

<argument><expr><literal type="number">0x5</literal></expr></argument> , <argument><expr><literal type="number">0x4</literal></expr></argument> ,

<argument><expr><operator>&amp;</operator><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_capmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CA_PMT</name></expr></argument>, <argument><expr><name>p_capmt</name></expr></argument>, <argument><expr><name>i_capmt_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_capmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ConditionalAccessHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>system_ids_t</name> <modifier>*</modifier></type><name>p_ids</name> <init>=

<expr><operator>(</operator><name>system_ids_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOT_CA_INFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"CA system IDs supported by the application :"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ids</name><operator>-&gt;</operator><name>pi_system_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"- 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_ids</name><operator>-&gt;</operator><name>pi_system_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ids</name><operator>-&gt;</operator><name>pi_system_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROGRAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CAPMTAdd</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>,

<argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"unexpected tag in ConditionalAccessHandle (0x%x)"</literal></expr></argument>,

<argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ConditionalAccessClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"closing ConditionalAccess session (%d)"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ConditionalAccessOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"opening ConditionalAccess session (%u)"</literal></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_handle</name> <operator>=</operator> <name>ConditionalAccessHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>=</operator> <name>ConditionalAccessClose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>system_ids_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CA_INFO_ENQ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last</name></decl>;</decl_stmt>

}</block></struct></type> <name>date_time_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeSend</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>date_time_t</name> <modifier>*</modifier></type><name>p_date</name> <init>=

<expr><operator>(</operator><name>date_time_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm_gmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm_loc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm_gmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm_loc</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><name><name>tm_gmt</name><operator>.</operator><name>tm_year</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><name><name>tm_gmt</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>D</name> <init>= <expr><name><name>tm_gmt</name><operator>.</operator><name>tm_mday</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>M</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>MJD</name> <init>= <expr><literal type="number">14956</literal> <operator>+</operator> <name>D</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Y</name> <operator>-</operator> <name>L</name><operator>)</operator> <operator>*</operator> <literal type="number">365.25</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>M</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>L</name> <operator>*</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">30.6001</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_response</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC2BCD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((d / 10) &lt;&lt; 4) + (d % 10))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MJD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DEC2BCD</name><argument_list>(<argument><expr><name><name>tm_gmt</name><operator>.</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DEC2BCD</name><argument_list>(<argument><expr><name><name>tm_gmt</name><operator>.</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DEC2BCD</name><argument_list>(<argument><expr><name><name>tm_gmt</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_response</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm_loc</name><operator>.</operator><name>tm_gmtoff</name></name> <operator>/</operator> <literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_DATE_TIME</name></expr></argument>, <argument><expr><name>p_response</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_last</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>date_time_t</name> <modifier>*</modifier></type><name>p_date</name> <init>=

<expr><operator>(</operator><name>date_time_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOT_DATE_TIME_ENQ</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_interval</name></name> <operator>=</operator> <operator>*</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"DateTimeHandle : interval set to %d"</literal></expr></argument>,

<argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_interval</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_interval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DateTimeSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected tag in DateTimeHandle (0x%x)"</literal></expr></argument>,

<argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeManage</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>date_time_t</name> <modifier>*</modifier></type><name>p_date</name> <init>=

<expr><operator>(</operator><name>date_time_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_date</name><operator>-&gt;</operator><name>i_interval</name></name>

<operator>&amp;&amp;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>p_date</name><operator>-&gt;</operator><name>i_last</name></name> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>p_date</name><operator>-&gt;</operator><name>i_interval</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DateTimeSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"closing DateTime session (%d)"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DateTimeOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"opening DateTime session (%u)"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_handle</name> <operator>=</operator> <name>DateTimeHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_manage</name> <operator>=</operator> <name>DateTimeManage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>=</operator> <name>DateTimeClose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DateTimeSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCC_SET_MMI_MODE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCC_DISPLAY_CHARACTER_TABLE_LIST</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCC_INPUT_CHARACTER_TABLE_LIST</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCC_OVERLAY_GRAPHICS_CHARACTERISTICS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCC_FULL_SCREEN_GRAPHICS_CHARACTERISTICS</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_HIGH_LEVEL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_LOW_LEVEL_OVERLAY_GRAPHICS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_LOW_LEVEL_FULL_SCREEN_GRAPHICS</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_MMI_MODE_ACK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_LIST_DISPLAY_CHARACTER_TABLES</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_LIST_INPUT_CHARACTER_TABLES</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_LIST_GRAPHIC_OVERLAY_CHARACTERISTICS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_LIST_FULL_SCREEN_GRAPHIC_CHARACTERISTICS</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_UNKNOWN_DISPLAY_CONTROL_CMD</name></cpp:macro> <cpp:value>0xF0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_UNKNOWN_MMI_MODE</name></cpp:macro> <cpp:value>0xF1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRI_UNKNOWN_CHARACTER_TABLE</name></cpp:macro> <cpp:value>0xF2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EF_BLIND</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_CANCEL</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_ANSWER</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIFree</name><parameter_list>( <parameter><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch <condition>( <expr><name><name>p_object</name><operator>-&gt;</operator><name>i_object_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EN50221_MMI_ENQ</name></expr>:</case>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EN50221_MMI_ANSW</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>b_ok</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>psz_answ</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EN50221_MMI_MENU</name></expr>:</case>

<case>case <expr><name>EN50221_MMI_LIST</name></expr>:</case>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_subtitle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>i_choices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_HTTPD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MMISendObject</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_tag</name></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>p_object</name><operator>-&gt;</operator><name>i_object_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EN50221_MMI_ANSW</name></expr>:</case>

<expr_stmt><expr><name>i_tag</name> <operator>=</operator> <name>AOT_ANSW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>psz_answ</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>b_ok</name></name></expr> ?</condition><then> <expr><literal type="number">0x1</literal></expr> </then><else>: <expr><literal type="number">0x0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>psz_answ</name></name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EN50221_MMI_MENU_ANSW</name></expr>:</case>

<expr_stmt><expr><name>i_tag</name> <operator>=</operator> <name>AOT_MENU_ANSW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu_answ</name><operator>.</operator><name>i_choice</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unknown MMI object %d"</literal></expr></argument>, <argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>i_object_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMISendClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_CLOSE_MMI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIDisplayReply</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_response</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DRI_MMI_MODE_ACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_response</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MM_HIGH_LEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>AOT_DISPLAY_REPLY</name></expr></argument>, <argument><expr><name>p_response</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"sending DisplayReply on session (%d)"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>MMIGetText</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><operator>*</operator><name>pp_apdu</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_tag</name> <operator>!=</operator> <name>AOT_TEXT_LAST</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected text tag: %06x"</literal></expr></argument>, <argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>APDUGetLength</name><argument_list>( <argument><expr><operator>*</operator><name>pp_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_apdu</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>-=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_from_EIT</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIHandleEnq</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_mmi</name> <init>= <expr><operator>(</operator><name>mmi_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MMIFree</name><argument_list>( <argument><expr><name>p_mmi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>=</operator> <name>EN50221_MMI_ENQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>b_blind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>d</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>d</name></expr></argument>, <argument><expr><name>l</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"MMI enq: %s%s"</literal></expr></argument>, <argument><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>b_blind</name></name></expr> ?</condition><then> <expr><literal type="string">" (blind)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIHandleMenu</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_tag</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_mmi</name> <init>= <expr><operator>(</operator><name>mmi_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MMIFree</name><argument_list>( <argument><expr><name>p_mmi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_tag</name> <operator>==</operator> <name>AOT_MENU_LAST</name><operator>)</operator></expr> ?</condition><then>

<expr><name>EN50221_MMI_MENU</name></expr> </then><else>: <expr><name>EN50221_MMI_LIST</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>i_choices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FIELD</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( l &gt; 0 ) { p_mmi-&gt;u.menu.psz_##x = MMIGetText( p_cam, &amp;d, &amp;l ); msg_Dbg( p_cam-&gt;obj, "MMI " STRINGIFY( x ) ": %s", p_mmi-&gt;u.menu.psz_##x ); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GET_FIELD</name><argument_list>( <argument><expr><name>title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_FIELD</name><argument_list>( <argument><expr><name>subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_FIELD</name><argument_list>( <argument><expr><name>bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_FIELD</name></cpp:undef>

<while>while <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>MMIGetText</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>i_choices</name></name></expr></argument>,

<argument><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name></name></expr></argument>,

<argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"MMI choice: %s"</literal></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIHandle</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_apdu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>APDUGetTag</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOT_DISPLAY_CONTROL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>APDUGetLength</name><argument_list>( <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch <condition>( <expr><operator>*</operator><name>d</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DCC_SET_MMI_MODE</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MM_HIGH_LEVEL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MMIDisplayReply</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unsupported MMI mode %02x"</literal></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unsupported display control command %02x"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AOT_ENQ</name></expr>:</case>

<expr_stmt><expr><call><name>MMIHandleEnq</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOT_LIST_LAST</name></expr>:</case>

<case>case <expr><name>AOT_MENU_LAST</name></expr>:</case>

<expr_stmt><expr><call><name>MMIHandleMenu</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><name>p_apdu</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOT_CLOSE_MMI</name></expr>:</case>

<expr_stmt><expr><call><name>SessionSendClose</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unexpected tag in MMIHandle (0x%x)"</literal></expr></argument>, <argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIClose</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name> <init>= <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_mmi</name> <init>= <expr><operator>(</operator><name>mmi_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MMIFree</name><argument_list>( <argument><expr><name>p_mmi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"closing MMI session (%d)"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMIOpen</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_mmi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"opening MMI session (%u)"</literal></expr></argument>, <argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_handle</name> <operator>=</operator> <name>MMIHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>=</operator> <name>MMIClose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mmi_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mmi</name> <operator>=</operator> <operator>(</operator><name>mmi_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mmi</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>=</operator> <name>EN50221_MMI_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TC_RETRIES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitSlot</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_slot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_CREATE_TC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Init: couldn't send TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TC_RETRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name>

<operator>&amp;&amp;</operator> <name>i_tag</name> <operator>==</operator> <name>T_CTC_REPLY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_CREATE_TC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Init: couldn't send TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>cam_t</name> <modifier>*</modifier></type><name>en50221_Init</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ca_caps_t</name></type> <name>caps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>caps</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>CA_GET_CAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CAMInit: ioctl() error getting CAM capabilities"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CA interface with %d slot(s)"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>slot_num</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_CI</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" CI high level interface type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_CI_LINK</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" CI link layer level interface type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_CI_PHYS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" CI physical layer level interface type (not supported) "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_DESCR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" built-in descrambler detected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_SC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" simple smart card interface"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%d available descrambler(s) (keys)"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>descr_num</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>descr_type</name></name> <operator>&amp;</operator> <name>CA_ECD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" ECD scrambling system supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>descr_type</name></name> <operator>&amp;</operator> <name>CA_NDS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" NDS scrambling system supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>descr_type</name></name> <operator>&amp;</operator> <name>CA_DSS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" DSS scrambling system supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CAM module without slots"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_cam</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_cam</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name> <operator>=</operator> <name><name>caps</name><operator>.</operator><name>slot_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_CI_LINK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name> <operator>=</operator> <name>CA_CI_LINK</name></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_slot</name> <operator>&lt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name></expr>;</condition> <incr><expr><name>i_slot</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_RESET</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_slot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Init: couldn't reset slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_next_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><name><name>caps</name><operator>.</operator><name>slot_type</name></name> <operator>&amp;</operator> <name>CA_CI</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name> <operator>=</operator> <name>CA_CI</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ca_slot_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>CA_GET_SLOT_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get slot info: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>info</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no CAM inserted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <name>RI_CONDITIONAL_ACCESS_SUPPORT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ca_msg_t</name></type> <name>ca_msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>length</name></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>AOT_APPLICATION_INFO</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>AOT_APPLICATION_INFO</name> <operator>&amp;</operator> <literal type="number">0x00FF00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>AOT_APPLICATION_INFO</name> <operator>&amp;</operator> <literal type="number">0x0000FF</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">253</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AOT_APPLICATION_INFO_ENQ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>CA_GET_MSG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca_msg</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"en50221_Init: failed getting message"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CAM returns garbage as application info!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"found CAM %s using id 0x%x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>ca_msg</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CAM interface incompatible"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_cam</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>en50221_Poll</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CA_CI_LINK</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_next_event</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><name>CA_CI</name></expr>:</case>

<return>return;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_slot</name> <operator>&lt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name></expr>;</condition> <incr><expr><name>i_slot</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ca_slot_info_t</name></type> <name>sinfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>i_slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_GET_SLOT_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinfo</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Poll: couldn't get info on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>sinfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CA_CI_MODULE_READY</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Poll: slot %d has been removed"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_close</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitSlot</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_cam</name><operator>-&gt;</operator><name>pb_active_slot</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Poll: resetting slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_RESET</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_slot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Poll: couldn't reset slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"en50221_Poll: slot %d is active"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_cam</name><operator>-&gt;</operator><name>pb_tc_has_data</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_DATA_LAST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Poll: couldn't send TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Poll: couldn't recv TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_tc_has_data</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_tpdu</name><index>[<expr><name>MAX_TPDU_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_session_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_session</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDUSend</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>T_RCV</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Poll: couldn't send TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>TPDURecv</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>p_tpdu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Poll: couldn't recv TPDU on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_session</name> <operator>=</operator> <call><name>GetLength</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_tpdu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_session_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_session_size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_session</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_session_size</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_tag</name> <operator>!=</operator> <name>T_DATA_LAST</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"en50221_Poll: fragmented TPDU not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SPDUHandle</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>p_session</name></expr></argument>, <argument><expr><name>i_session_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i_session_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_session_id</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i_session_id</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_manage</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i_session_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_manage</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>,

<argument><expr><name>i_session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_next_event</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_timeout</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>en50221_SetCAPMT</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_needs_descrambling</name> <init>= <expr><call><name>CAPMTNeedsDescrambling</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROGRAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_program_number</name>

<operator>==</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_program_number</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_needs_descrambling</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_capmt_Delete</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_info</name> <operator>=</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>p_info</name> <operator>!=</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_capmt_Delete</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p_info</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_update</name> <operator>&amp;&amp;</operator> <name>b_needs_descrambling</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROGRAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p_info</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_update</name> <operator>||</operator> <name>b_needs_descrambling</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name>

<operator>==</operator> <name>RI_CONDITIONAL_ACCESS_SUPPORT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>b_update</name> <operator>&amp;&amp;</operator> <name>b_needs_descrambling</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CAPMTUpdate</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>b_update</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CAPMTDelete</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CAPMTAdd</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_needs_descrambling</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_capmt_Delete</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_HTTPD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>en50221_OpenMMI</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_slot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name> <operator>&amp;</operator> <name>CA_CI_LINK</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>==</operator> <name>RI_MMI</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"MMI menu is already opened on slot %d (session=%u)"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name>

<operator>==</operator> <name>RI_APPLICATION_INFORMATION</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ApplicationInformationEnterMenu</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"no application information on slot %d"</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"MMI menu not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>en50221_CloseMMI</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_slot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>i_ca_type</name></name> <operator>&amp;</operator> <name>CA_CI_LINK</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>==</operator> <name>RI_MMI</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MMISendClose</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"closing a non-existing MMI session on slot %d"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"MMI menu not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mmi_t</name> <modifier>*</modifier></type><name>en50221_GetMMIObject</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_slot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>==</operator> <name>RI_MMI</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_mmi</name> <init>=

<expr><operator>(</operator><name>mmi_t</name> <operator>*</operator><operator>)</operator><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_mmi</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>p_mmi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>en50221_SendMMIObject</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_slot</name></decl></parameter>,

<parameter><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name> <operator>==</operator> <name>RI_MMI</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_slot</name> <operator>==</operator> <name>i_slot</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MMISendObject</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"SendMMIObject when no MMI session is opened !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>en50221_Status</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>p_cam</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_request</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_request</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_request</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_slot</name> <operator>&lt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name></expr>;</condition> <incr><expr><name>i_slot</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_request</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"ignoring user request because of a new MMI object"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_request</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_request</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mmi_t</name></type> <name>mmi_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_value</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"slot"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"invalid request parameter\n"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_slot</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_OpenMMI</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_CloseMMI</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"cancel"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"invalid request parameter\n"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"enq"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>i_object_type</name></name> <operator>=</operator> <name>EN50221_MMI_ANSW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>b_ok</name></name> <operator>=</operator> <name>b_ok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_ok</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>psz_answ</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"answ"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"invalid request parameter\n"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>answ</name><operator>.</operator><name>psz_answ</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>i_object_type</name></name> <operator>=</operator> <name>EN50221_MMI_MENU_ANSW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_ok</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>menu_answ</name><operator>.</operator><name>i_choice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>HTTPExtractValue</name><argument_list>( <argument><expr><name>psz_request</name></expr></argument>, <argument><expr><literal type="string">"choice"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>menu_answ</name><operator>.</operator><name>i_choice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mmi_object</name><operator>.</operator><name>u</name><operator>.</operator><name>menu_answ</name><operator>.</operator><name>i_choice</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>en50221_SendMMIObject</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mmi_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_slot</name> <operator>&lt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name></expr>;</condition> <incr><expr><name>i_slot</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_expected</name><index>[<expr><name>i_slot</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>open_memstream</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ca_caps_t</name></type> <name>caps</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_GET_CAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ioctl(CA_GET_CAP) failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CA interface with %d %s, type:\n&lt;table&gt;"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>slot_num</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>caps</name><operator>.</operator><name>slot_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"slot"</literal></expr> </then><else>: <expr><literal type="string">"slots"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CAPS</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( caps.slot_type &amp; (CA_##x) ) fprintf( p, "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n", s )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_CAPS</name><argument_list>( <argument><expr><name>CI</name></expr></argument>, <argument><expr><literal type="string">"CI high level interface"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CAPS</name><argument_list>( <argument><expr><name>CI_LINK</name></expr></argument>, <argument><expr><literal type="string">"CI link layer level interface"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CAPS</name><argument_list>( <argument><expr><name>CI_PHYS</name></expr></argument>, <argument><expr><literal type="string">"CI physical layer level interface (not supported)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CAPS</name><argument_list>( <argument><expr><name>DESCR</name></expr></argument>, <argument><expr><literal type="string">"built-in descrambler"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CAPS</name><argument_list>( <argument><expr><name>SC</name></expr></argument>, <argument><expr><literal type="string">"simple smartcard interface"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_CAPS</name></cpp:undef>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;/table&gt;%d available %s\n&lt;table&gt;"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>descr_num</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>caps</name><operator>.</operator><name>descr_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"descrambler (key)"</literal></expr> </then><else>: <expr><literal type="string">"descramblers (keys)"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DESC</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( caps.descr_type &amp; (CA_##x) ) fprintf( p, "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;", STRINGIFY(x) )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_DESC</name><argument_list>( <argument><expr><name>ECD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_DESC</name><argument_list>( <argument><expr><name>NDS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_DESC</name><argument_list>( <argument><expr><name>DSS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_DESC</name></cpp:undef>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;/table&gt;"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_slot</name> <operator>&lt;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>i_nb_slots</name></name></expr>;</condition> <incr><expr><name>i_slot</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ca_slot_info_t</name></type> <name>sinfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pb_slot_mmi_undisplayed</name><index>[<expr><name>i_slot</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;p&gt;CA slot #%d: "</literal></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>i_slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>CA_GET_SLOT_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinfo</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ioctl(CA_GET_SLOT_INFO) failed: %s&lt;br&gt;\n"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TYPE</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( sinfo.type &amp; (CA_##x) ) fputs( s, p )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>( <argument><expr><name>CI</name></expr></argument>, <argument><expr><literal type="string">"high level, "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>( <argument><expr><name>CI_LINK</name></expr></argument>, <argument><expr><literal type="string">"link layer level, "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>( <argument><expr><name>CI_PHYS</name></expr></argument>, <argument><expr><literal type="string">"physical layer level, "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_TYPE</name></cpp:undef>

<if_stmt><if>if <condition>( <expr><name><name>sinfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CA_CI_MODULE_READY</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mmi_t</name> <modifier>*</modifier></type><name>p_object</name> <init>= <expr><call><name>en50221_GetMMIObject</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"module present and ready&lt;p&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;form action=index.html method=get&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;input type=hidden name=slot value=\"%d\"&gt;\n"</literal></expr></argument>,

<argument><expr><name>i_slot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_object</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=submit name=open"</literal>

<literal type="string">" value=\"Open session\"&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch <condition>( <expr><name><name>p_object</name><operator>-&gt;</operator><name>i_object_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EN50221_MMI_ENQ</name></expr>:</case>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=hidden name=type value=enq&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;%s&lt;/th&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;tr&gt;&lt;td&gt;&lt;input type=%s name=answ&gt;"</literal>

<literal type="string">"&lt;/td&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>enq</name><operator>.</operator><name>b_blind</name></name></expr> ?</condition><then> <expr><literal type="string">"password"</literal></expr> </then><else>: <expr><literal type="string">"text"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EN50221_MMI_MENU</name></expr>:</case>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=hidden name=type value=menu&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;%s&lt;/th&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_subtitle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>i_choices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;input type=radio name=choice"</literal>

<literal type="string">" value=\"%d\"&gt;%s&lt;br&gt;\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EN50221_MMI_LIST</name></expr>:</case>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=hidden name=type value=menu&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=hidden name=choice value=0&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;%s&lt;/th&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_subtitle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>i_choices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s&lt;br&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>ppsz_choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</literal></expr></argument>,

<argument><expr><name><name>p_object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>menu</name><operator>.</operator><name>psz_bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;table&gt;&lt;tr&gt;&lt;th&gt;Unknown MMI object type&lt;/th&gt;&lt;/tr&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;/table&gt;&lt;p&gt;&lt;input type=submit name=ok value=\"OK\"&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=submit name=cancel value=\"Cancel\"&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;input type=submit name=close value=\"Close Session\"&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;/form&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>sinfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CA_CI_MODULE_PRESENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"module present, not ready&lt;br&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"module not present&lt;br&gt;\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>en50221_End</name><parameter_list>( <parameter><decl><type><name>cam_t</name> <modifier>*</modifier></type> <name>p_cam</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PROGRAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_capmt_Delete</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>pp_selected_programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SESSIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_resource_id</name>

<operator>&amp;&amp;</operator> <name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_close</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cam</name><operator>-&gt;</operator><name>p_sessions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pf_close</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_cam</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cam</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
