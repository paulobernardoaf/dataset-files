<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dtv\bdadefs.h"><decl_stmt><decl><type><name>class</name></type> <name>IDigitalCableTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDigitalCableLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IATSCChannelTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IATSCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_DeviceControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_FrequencyFilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_SignalStatistics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_Topology</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IChannelTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponentType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponentTypes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBSLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBSTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTLocator2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuningSpace2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumComponents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumComponentTypes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumTuningSpaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ILocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISampleGrabber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISampleGrabberCB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IScanningTuner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITunerCap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpaceContainer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IMpeg2Data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideDataEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISectionList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumTuneRequests</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumGuideDataProperties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideDataProperty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IMpeg2Stream</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>BinaryConvolutionCodeRate</name>

<block>{

<decl><name>BDA_BCC_RATE_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_BCC_RATE_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_BCC_RATE_1_2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_BCC_RATE_2_3</name></decl>,

<decl><name>BDA_BCC_RATE_3_4</name></decl>,

<decl><name>BDA_BCC_RATE_3_5</name></decl>,

<decl><name>BDA_BCC_RATE_4_5</name></decl>,

<decl><name>BDA_BCC_RATE_5_6</name></decl>,

<decl><name>BDA_BCC_RATE_5_11</name></decl>,

<decl><name>BDA_BCC_RATE_7_8</name></decl>,

<decl><name>BDA_BCC_RATE_MAX</name></decl>,

}</block></enum></type> <name>BinaryConvolutionCodeRate</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ComponentCategory</name>

<block>{

<decl><name>CategoryNotSet</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>CategoryOther</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CategoryVideo</name></decl>,

<decl><name>CategoryAudio</name></decl>,

<decl><name>CategoryText</name></decl>,

<decl><name>CategoryData</name></decl>,

}</block></enum></type> <name>ComponentCategory</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ComponentStatus</name>

<block>{

<decl><name>StatusActive</name></decl>,

<decl><name>StatusInactive</name></decl>,

<decl><name>StatusUnavailable</name></decl>,

}</block></enum></type> <name>ComponentStatus</name>;</typedef>

<typedef>typedef <type><enum>enum <name>DVBSystemType</name>

<block>{

<decl><name>DVB_Cable</name></decl>,

<decl><name>DVB_Terrestrial</name></decl>,

<decl><name>DVB_Satellite</name></decl>,

}</block></enum></type> <name>DVBSystemType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>FECMethod</name>

<block>{

<decl><name>BDA_FEC_METHOD_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_FEC_METHOD_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_FEC_VITERBI</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_FEC_RS_204_188</name></decl>,

<decl><name>BDA_FEC_MAX</name></decl>,

}</block></enum></type> <name>FECMethod</name>;</typedef>

<typedef>typedef <type><enum>enum <name>GuardInterval</name>

<block>{

<decl><name>BDA_GUARD_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_GUARD_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_GUARD_1_32</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_GUARD_1_16</name></decl>,

<decl><name>BDA_GUARD_1_8</name></decl>,

<decl><name>BDA_GUARD_1_4</name></decl>,

<decl><name>BDA_GUARD_MAX</name></decl>,

}</block></enum></type> <name>GuardInterval</name>;</typedef>

<typedef>typedef <type><enum>enum <name>HierarchyAlpha</name>

<block>{

<decl><name>BDA_HALPHA_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_HALPHA_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_HALPHA_1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_HALPHA_2</name></decl>,

<decl><name>BDA_HALPHA_4</name></decl>,

<decl><name>BDA_HALPHA_MAX</name></decl>,

}</block></enum></type> <name>HierarchyAlpha</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ModulationType</name>

<block>{

<decl><name>BDA_MOD_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_MOD_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_MOD_16QAM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_MOD_32QAM</name></decl>,

<decl><name>BDA_MOD_64QAM</name></decl>,

<decl><name>BDA_MOD_80QAM</name></decl>,

<decl><name>BDA_MOD_96QAM</name></decl>,

<decl><name>BDA_MOD_112QAM</name></decl>,

<decl><name>BDA_MOD_128QAM</name></decl>,

<decl><name>BDA_MOD_160QAM</name></decl>,

<decl><name>BDA_MOD_192QAM</name></decl>,

<decl><name>BDA_MOD_224QAM</name></decl>,

<decl><name>BDA_MOD_256QAM</name></decl>,

<decl><name>BDA_MOD_320QAM</name></decl>,

<decl><name>BDA_MOD_384QAM</name></decl>,

<decl><name>BDA_MOD_448QAM</name></decl>,

<decl><name>BDA_MOD_512QAM</name></decl>,

<decl><name>BDA_MOD_640QAM</name></decl>,

<decl><name>BDA_MOD_768QAM</name></decl>,

<decl><name>BDA_MOD_896QAM</name></decl>,

<decl><name>BDA_MOD_1024QAM</name></decl>,

<decl><name>BDA_MOD_QPSK</name></decl>,

<decl><name>BDA_MOD_BPSK</name></decl>,

<decl><name>BDA_MOD_OQPSK</name></decl>,

<decl><name>BDA_MOD_8VSB</name></decl>,

<decl><name>BDA_MOD_16VSB</name></decl>,

<decl><name>BDA_MOD_ANALOG_AMPLITUDE</name></decl>,

<decl><name>BDA_MOD_ANALOG_FREQUENCY</name></decl>,

<decl><name>BDA_MOD_MAX</name></decl>,

}</block></enum></type> <name>ModulationType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>Polarisation</name>

<block>{

<decl><name>BDA_POLARISATION_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_NOT_DEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_LINEAR_H</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_LINEAR_V</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_CIRCULAR_L</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_CIRCULAR_R</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>BDA_POLARISATION_MAX</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>

}</block></enum></type> <name>Polarisation</name>;</typedef>

<typedef>typedef <type><enum>enum <name>SpectralInversion</name>

<block>{

<decl><name>BDA_SPECTRAL_INVERSION_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_SPECTRAL_INVERSION_NOT_DEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_SPECTRAL_INVERSION_AUTOMATIC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_SPECTRAL_INVERSION_NORMAL</name></decl>,

<decl><name>BDA_SPECTRAL_INVERSION_INVERTED</name></decl>,

<decl><name>BDA_SPECTRAL_INVERSION_MAX</name></decl>

}</block></enum></type> <name>SpectralInversion</name>;</typedef>

<typedef>typedef <type><enum>enum <name>TransmissionMode</name>

<block>{

<decl><name>BDA_XMIT_MODE_NOT_SET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_XMIT_MODE_NOT_DEFINED</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BDA_XMIT_MODE_2K</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>BDA_XMIT_MODE_8K</name></decl>,

<decl><name>BDA_XMIT_MODE_MAX</name></decl>,

}</block></enum></type> <name>TransmissionMode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_BDANODE_DESCRIPTOR</name>

<block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>ulBdaNodeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidFunction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guidName</name></decl>;</decl_stmt>

}</block></struct></type> <name>BDANODE_DESCRIPTOR</name><operator>,</operator> *<name>PBDANODE_DESCRIPTOR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_BDA_TEMPLATE_CONNECTION</name>

<block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>FromNodeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>FromNodePinType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ToNodeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ToNodePinType</name></decl>;</decl_stmt>

}</block></struct></type> <name>BDA_TEMPLATE_CONNECTION</name><operator>,</operator> *<name>PBDA_TEMPLATE_CONNECTION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_BDA_TEMPLATE_PIN_JOINT</name>

<block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>uliTemplateConnection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ulcInstancesMax</name></decl>;</decl_stmt>

}</block></struct></type> <name>BDA_TEMPLATE_PIN_JOINT</name><operator>,</operator> *<name>PBDA_TEMPLATE_PIN_JOINT</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>IComponent</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Type</name><argument_list>( <argument><expr><name>IComponentType</name><operator>*</operator><operator>*</operator> <name>p_p_cpt_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_Type</name><argument_list>( <argument><expr><name>IComponentType</name><operator>*</operator> <name>p_cpt_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_DescLangID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_l_language</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_DescLangID</name><argument_list>( <argument>long l_language</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Status</name><argument_list>( <argument><expr><name>ComponentStatus</name><operator>*</operator> <name>p_status</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Status</name><argument_list>( <argument>ComponentStatus status</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Description</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_desc</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Description</name><argument_list>( <argument>BSTR bstr_desc</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IComponent</name><operator>*</operator><operator>*</operator> <name>p_p_component</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponents</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Count</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_count</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__NewEnum</name><argument_list>( <argument><expr><name>IEnumVARIANT</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>EnumComponents</name><argument_list>( <argument><expr><name>IEnumComponents</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>get_Item</name><argument_list>( <argument>VARIANT Index</argument>,

<argument>IComponent** p_p_component</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Add</name><argument_list>( <argument><expr><name>IComponent</name><operator>*</operator> <name>p_component</name></expr></argument>,

<argument><expr><name>VARIANT</name><operator>*</operator> <name>v_index</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Remove</name><argument_list>( <argument>VARIANT v_index</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IComponents</name><operator>*</operator><operator>*</operator> <name>p_p_cpts</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponentType</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Category</name><argument_list>( <argument><expr><name>ComponentCategory</name><operator>*</operator> <name>p_category</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Category</name><argument_list>( <argument>ComponentCategory category</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MediaMajorType</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_major_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MediaMajorType</name><argument_list>( <argument>BSTR bstr_major_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__MediaMajorType</name><argument_list>( <argument><expr><name>GUID</name><operator>*</operator> <name>p_guid_major_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put__MediaMajorType</name><argument_list>( <argument>REFCLSID guid_major_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MediaSubType</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_sub_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MediaSubType</name><argument_list>( <argument>BSTR bstr_sub_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__MediaSubType</name><argument_list>( <argument><expr><name>GUID</name><operator>*</operator> <name>p_guid_sub_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put__MediaSubType</name><argument_list>( <argument>REFCLSID guid_sub_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MediaFormatType</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_format_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MediaFormatType</name><argument_list>( <argument>BSTR bstr_format_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__MediaFormatType</name><argument_list>(

<argument><expr><name>GUID</name><operator>*</operator> <name>p_guid_format_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put__MediaFormatType</name><argument_list>(

<argument>REFCLSID guid_format_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MediaType</name><argument_list>( <argument><expr><name>AM_MEDIA_TYPE</name><operator>*</operator> <name>p_media_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_MediaType</name><argument_list>( <argument><expr><name>AM_MEDIA_TYPE</name><operator>*</operator> <name>p_media_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IComponentType</name><operator>*</operator><operator>*</operator> <name>p_p_cpt_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IComponentTypes</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Count</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>l_count</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__NewEnum</name><argument_list>( <argument><expr><name>IEnumVARIANT</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>EnumComponentTypes</name><argument_list>(

<argument><expr><name>IEnumComponentTypes</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>get_Item</name><argument_list>( <argument>VARIANT v_index</argument>,

<argument>IComponentType** p_p_cpt_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Item</name><argument_list>( <argument>VARIANT v_index</argument>,

<argument>IComponentType* p_cpt_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Add</name><argument_list>( <argument><expr><name>IComponentType</name><operator>*</operator> <name>p_cpt_type</name></expr></argument>,

<argument><expr><name>VARIANT</name><operator>*</operator> <name>v_index</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Remove</name><argument_list>( <argument>VARIANT v_index</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IComponentTypes</name><operator>*</operator><operator>*</operator> <name>p_p_cpt_types</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumComponents</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Next</name><argument_list>( <argument>ULONG num_elem</argument>, <argument>IComponent** p_p_elem</argument>,

<argument>ULONG* p_num_elem_fetch</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Skip</name><argument_list>( <argument>ULONG num_elem</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Reset</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumComponents</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumComponentTypes</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Next</name><argument_list>( <argument>ULONG num_elem</argument>, <argument>IComponentType** p_p_elem</argument>,

<argument>ULONG* p_num_elem_fetch</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Skip</name><argument_list>( <argument>ULONG num_elem</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Reset</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumComponentTypes</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumTuningSpaces</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Next</name><argument_list>( <argument>ULONG l_num_elem</argument>,

<argument>ITuningSpace** p_p_tuning_space</argument>, <argument>ULONG* pl_num_elem_fetched</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Skip</name><argument_list>( <argument>ULONG l_num_elem</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Reset</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumTuningSpaces</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITunerCap</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_AuxInputCount</name><argument_list>( <argument><expr><name>ULONG</name><operator>*</operator> <name>pulCompositeCount</name></expr></argument>,

<argument><expr><name>ULONG</name><operator>*</operator> <name>pulSvideoCount</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>get_SupportedNetworkTypes</name><argument_list>(

<argument>ULONG ulcNetworkTypesMax</argument>, <argument>ULONG* pulcNetworkTypes</argument>,

<argument>GUID* pguidNetworkTypes</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SupportedVideoFormats</name><argument_list>(

<argument><expr><name>ULONG</name><operator>*</operator> <name>pulAMTunerModeType</name></expr></argument>, <argument><expr><name>ULONG</name><operator>*</operator> <name>pulAnalogVideoStandard</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuner</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_TuningSpace</name><argument_list>(

<argument><expr><name>ITuningSpace</name><operator>*</operator><operator>*</operator> <name>p_p_tuning_space</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_TuningSpace</name><argument_list>( <argument><expr><name>ITuningSpace</name><operator>*</operator> <name>p_tuning_space</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>EnumTuningSpaces</name><argument_list>(

<argument><expr><name>IEnumTuningSpaces</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_TuneRequest</name><argument_list>(

<argument><expr><name>ITuneRequest</name><operator>*</operator><operator>*</operator> <name>p_p_tune_request</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_TuneRequest</name><argument_list>( <argument><expr><name>ITuneRequest</name><operator>*</operator> <name>p_tune_request</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Validate</name><argument_list>( <argument><expr><name>ITuneRequest</name><operator>*</operator> <name>p_tune_request</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_PreferredComponentTypes</name><argument_list>(

<argument><expr><name>IComponentTypes</name><operator>*</operator><operator>*</operator> <name>p_p_cpt_types</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_PreferredComponentTypes</name><argument_list>(

<argument><expr><name>IComponentTypes</name><operator>*</operator> <name>p_cpt_types</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalStrength</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>l_sig_strength</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>TriggerSignalEvents</name><argument_list>( <argument>long l_interval</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISampleGrabber</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SetOneShot</name><argument_list>( <argument>BOOL b_one_shot</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>SetMediaType</name><argument_list>(

<argument><expr><specifier>const</specifier> <name>AM_MEDIA_TYPE</name><operator>*</operator> <name>p_media_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetConnectedMediaType</name><argument_list>(

<argument><expr><name>AM_MEDIA_TYPE</name><operator>*</operator> <name>p_media_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SetBufferSamples</name><argument_list>( <argument>BOOL b_buffer_samples</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetCurrentBuffer</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_buff_size</name></expr></argument>,

<argument><expr><name>long</name><operator>*</operator> <name>p_buffer</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetCurrentSample</name><argument_list>( <argument><expr><name>IMediaSample</name><operator>*</operator><operator>*</operator> <name>p_p_sample</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SetCallback</name><argument_list>( <argument>ISampleGrabberCB* pf_callback</argument>,

<argument>long l_callback_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISampleGrabberCB</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SampleCB</name><argument_list>( <argument>double d_sample_time</argument>,

<argument>IMediaSample* p_sample</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>BufferCB</name><argument_list>( <argument>double d_sample_time</argument>, <argument>BYTE *p_buffer</argument>,

<argument>long l_bufferLen</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IScanningTuner</name> <range>: <expr><name>public</name> <name>ITuner</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>SeekUp</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>SeekDown</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ScanDown</name><argument_list>( <argument>long l_pause</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ScanUp</name><argument_list>( <argument>long l_pause</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>AutoProgram</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuneRequest</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_TuningSpace</name><argument_list>(

<argument><expr><name>ITuningSpace</name><operator>*</operator><operator>*</operator> <name>p_p_tuning_space</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Components</name><argument_list>( <argument><expr><name>IComponents</name><operator>*</operator><operator>*</operator> <name>p_p_components</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>ITuneRequest</name><operator>*</operator><operator>*</operator> <name>p_p_tune_request</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Locator</name><argument_list>( <argument><expr><name>ILocator</name><operator>*</operator><operator>*</operator> <name>p_p_locator</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_Locator</name><argument_list>( <argument><expr><name>ILocator</name><operator>*</operator> <name>p_locator</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IChannelTuneRequest</name> <range>: <expr><name>public</name> <name>ITuneRequest</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Channel</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_channel</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Channel</name><argument_list>( <argument>long l_channel</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IATSCChannelTuneRequest</name> <range>: <expr><name>public</name> <name>IChannelTuneRequest</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MinorChannel</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_minor_channel</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MinorChannel</name><argument_list>( <argument>long l_minor_channel</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDigitalCableTuneRequest</name> <range>: <expr><name>public</name> <name>IATSCChannelTuneRequest</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MajorChannel</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_major_channel</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MajorChannel</name><argument_list>( <argument>long l_major_channel</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SourceID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_source_id</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SourceID</name><argument_list>( <argument>long l_source_id</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuneRequest</name> <range>: <expr><name>public</name> <name>ITuneRequest</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_ONID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_onid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_ONID</name><argument_list>( <argument>long l_onid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_TSID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_tsid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_TSID</name><argument_list>( <argument>long l_tsid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_sid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SID</name><argument_list>( <argument>long l_sid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ILocator</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_CarrierFrequency</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_frequency</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_CarrierFrequency</name><argument_list>( <argument>long l_frequency</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_InnerFEC</name><argument_list>( <argument><expr><name>FECMethod</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_InnerFEC</name><argument_list>( <argument>FECMethod FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_InnerFECRate</name><argument_list>(

<argument><expr><name>BinaryConvolutionCodeRate</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_InnerFECRate</name><argument_list>(

<argument>BinaryConvolutionCodeRate FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_OuterFEC</name><argument_list>( <argument><expr><name>FECMethod</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_OuterFEC</name><argument_list>( <argument>FECMethod FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_OuterFECRate</name><argument_list>(

<argument><expr><name>BinaryConvolutionCodeRate</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_OuterFECRate</name><argument_list>(

<argument>BinaryConvolutionCodeRate FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Modulation</name><argument_list>( <argument><expr><name>ModulationType</name><operator>*</operator> <name>p_modulation</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Modulation</name><argument_list>( <argument>ModulationType modulation</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SymbolRate</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_rate</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SymbolRate</name><argument_list>( <argument>long l_rate</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>ILocator</name><operator>*</operator><operator>*</operator> <name>p_p_locator</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IATSCLocator</name> <range>: <expr><name>public</name> <name>ILocator</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_PhysicalChannel</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_phys_channel</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_PhysicalChannel</name><argument_list>( <argument>long l_phys_channel</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_TSID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_tsid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_TSID</name><argument_list>( <argument>long l_tsid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IATSCLocator2</name> <range>: <expr><name>public</name> <name>IATSCLocator</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_ProgramNumber</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_prog_number</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_ProgramNumber</name><argument_list>( <argument>long l_prog_number</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDigitalCableLocator</name> <range>: <expr><name>public</name> <name>IATSCLocator2</name>

<block>{

<expr><name>public</name><operator>:</operator></expr>

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBCLocator</name> <range>: <expr><name>public</name> <name>ILocator</name>

<block>{

<expr><name>public</name><operator>:</operator></expr>

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBSLocator</name> <range>: <expr><name>public</name> <name>ILocator</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalPolarisation</name><argument_list>(

<argument><expr><name>Polarisation</name><operator>*</operator> <name>p_polarisation</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SignalPolarisation</name><argument_list>(

<argument>Polarisation polarisation</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_WestPosition</name><argument_list>( <argument><expr><name>VARIANT_BOOL</name><operator>*</operator> <name>pb_west</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_WestPosition</name><argument_list>( <argument>VARIANT_BOOL b_west</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_OrbitalPosition</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_longitude</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_OrbitalPosition</name><argument_list>( <argument>long l_longitude</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Azimuth</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_azimuth</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Azimuth</name><argument_list>( <argument>long l_azimuth</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Elevation</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_elevation</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Elevation</name><argument_list>( <argument>long l_elevation</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTLocator</name> <range>: <expr><name>public</name> <name>ILocator</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Bandwidth</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_bandwidth</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Bandwidth</name><argument_list>( <argument>long l_bandwidth</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_LPInnerFEC</name><argument_list>( <argument><expr><name>FECMethod</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_LPInnerFEC</name><argument_list>( <argument>FECMethod FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_LPInnerFECRate</name><argument_list>(

<argument><expr><name>BinaryConvolutionCodeRate</name><operator>*</operator> <name>FEC</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_LPInnerFECRate</name><argument_list>(

<argument>BinaryConvolutionCodeRate FEC</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_HAlpha</name><argument_list>( <argument><expr><name>HierarchyAlpha</name><operator>*</operator> <name>Alpha</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_HAlpha</name><argument_list>( <argument>HierarchyAlpha Alpha</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Guard</name><argument_list>( <argument><expr><name>GuardInterval</name><operator>*</operator> <name>GI</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Guard</name><argument_list>( <argument>GuardInterval GI</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Mode</name><argument_list>( <argument><expr><name>TransmissionMode</name><operator>*</operator> <name>mode</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Mode</name><argument_list>( <argument>TransmissionMode mode</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_OtherFrequencyInUse</name><argument_list>(

<argument><expr><name>VARIANT_BOOL</name><operator>*</operator> <name>OtherFrequencyInUseVal</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_OtherFrequencyInUse</name><argument_list>(

<argument>VARIANT_BOOL OtherFrequencyInUseVal</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTLocator2</name> <range>: <expr><name>public</name> <name>IDVBTLocator</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_PhysicalLayerPipeId</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>pl_plp</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_PhysicalLayerPipeId</name><argument_list>( <argument>long l_plp</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpace</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_UniqueName</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_name</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_UniqueName</name><argument_list>( <argument>BSTR Name</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_FriendlyName</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_name</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_FriendlyName</name><argument_list>( <argument>BSTR bstr_name</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_CLSID</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>bstr_clsid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_NetworkType</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_network_guid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_NetworkType</name><argument_list>( <argument>BSTR bstr_network_guid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__NetworkType</name><argument_list>( <argument><expr><name>GUID</name><operator>*</operator> <name>p_guid_network_guid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put__NetworkType</name><argument_list>( <argument>REFCLSID clsid_network_guid</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>CreateTuneRequest</name><argument_list>(

<argument><expr><name>ITuneRequest</name><operator>*</operator><operator>*</operator> <name>p_p_tune_request</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>EnumCategoryGUIDs</name><argument_list>( <argument><expr><name>IEnumGUID</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>EnumDeviceMonikers</name><argument_list>( <argument><expr><name>IEnumMoniker</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_DefaultPreferredComponentTypes</name><argument_list>(

<argument><expr><name>IComponentTypes</name><operator>*</operator><operator>*</operator> <name>p_p_cpt_types</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_DefaultPreferredComponentTypes</name><argument_list>(

<argument><expr><name>IComponentTypes</name><operator>*</operator> <name>p_cpt_types</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_FrequencyMapping</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_mapping</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_FrequencyMapping</name><argument_list>( <argument>BSTR bstr_mapping</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_DefaultLocator</name><argument_list>( <argument><expr><name>ILocator</name><operator>*</operator><operator>*</operator> <name>p_p_locator</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>put_DefaultLocator</name><argument_list>( <argument><expr><name>ILocator</name><operator>*</operator> <name>p_locator</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>ITuningSpace</name><operator>*</operator><operator>*</operator> <name>p_p_tuning_space</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuningSpace</name> <range>: <expr><name>public</name> <name>ITuningSpace</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SystemType</name><argument_list>( <argument><expr><name>DVBSystemType</name><operator>*</operator> <name>p_sys_type</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SystemType</name><argument_list>( <argument>DVBSystemType sys_type</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBTuningSpace2</name> <range>: <expr><name>public</name> <name>IDVBTuningSpace</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_NetworkID</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_l_network_id</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_NetworkID</name><argument_list>( <argument>long l_network_id</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IDVBSTuningSpace</name> <range>: <expr><name>public</name> <name>IDVBTuningSpace2</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_LowOscillator</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_l_low_osc</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_LowOscillator</name><argument_list>( <argument>long l_low_osc</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_HighOscillator</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_l_high_osc</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_HighOscillator</name><argument_list>( <argument>long l_high_osc</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_LNBSwitch</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>p_l_lnb_switch</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_LNBSwitch</name><argument_list>( <argument>long l_lnb_switch</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_InputRange</name><argument_list>( <argument><expr><name>BSTR</name><operator>*</operator> <name>p_bstr_input_range</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_InputRange</name><argument_list>( <argument>BSTR bstr_input_range</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SpectralInversion</name><argument_list>(

<argument><expr><name>SpectralInversion</name><operator>*</operator> <name>p_spectral_inv</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SpectralInversion</name><argument_list>(

<argument>SpectralInversion spectral_inv</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpaceContainer</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Count</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>l_count</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__NewEnum</name><argument_list>( <argument><expr><name>IEnumVARIANT</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>get_Item</name><argument_list>( <argument>VARIANT v_index</argument>,

<argument>ITuningSpace** p_p_tuning_space</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Item</name><argument_list>( <argument>VARIANT v_index</argument>,

<argument>ITuningSpace* p_tuning_space</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>TuningSpacesForCLSID</name><argument_list>( <argument>BSTR bstr_clsid</argument>,

<argument>ITuningSpaces** p_p_tuning_spaces</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>_TuningSpacesForCLSID</name><argument_list>( <argument>REFCLSID clsid</argument>,

<argument>ITuningSpaces** p_p_tuning_spaces</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>TuningSpacesForName</name><argument_list>( <argument>BSTR bstr_name</argument>,

<argument>ITuningSpaces** p_p_tuning_spaces</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>FindID</name><argument_list>( <argument><expr><name>ITuningSpace</name><operator>*</operator> <name>p_tuning_space</name></expr></argument>,

<argument><expr><name>long</name><operator>*</operator> <name>l_id</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Add</name><argument_list>( <argument><expr><name>ITuningSpace</name><operator>*</operator> <name>p_tuning_space</name></expr></argument>,

<argument><expr><name>VARIANT</name><operator>*</operator> <name>v_index</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_EnumTuningSpaces</name><argument_list>(

<argument><expr><name>IEnumTuningSpaces</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Remove</name><argument_list>( <argument>VARIANT v_index</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_MaxCount</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>l_maxcount</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_MaxCount</name><argument_list>( <argument>long l_maxcount</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ITuningSpaces</name> <range>: <expr><name>public</name> <name>IDispatch</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Count</name><argument_list>( <argument><expr><name>long</name><operator>*</operator> <name>l_count</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get__NewEnum</name><argument_list>( <argument><expr><name>IEnumVARIANT</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>get_Item</name><argument_list>( <argument>VARIANT v_index</argument>,

<argument>ITuningSpace** p_p_tuning_space</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_EnumTuningSpaces</name><argument_list>(

<argument><expr><name>IEnumTuningSpaces</name><operator>*</operator><operator>*</operator> <name>p_p_enum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_DeviceControl</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>StartChanges</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>CheckChanges</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>CommitChanges</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetChangeState</name><argument_list>( <argument><expr><name>ULONG</name> <operator>*</operator><name>pState</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_FrequencyFilter</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Autotune</name><argument_list>( <argument>ULONG ulTransponder</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Autotune</name><argument_list>( <argument><expr><name>ULONG</name> <operator>*</operator><name>pulTransponder</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Frequency</name><argument_list>( <argument>ULONG ulFrequency</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Frequency</name><argument_list>( <argument><expr><name>ULONG</name> <operator>*</operator><name>pulFrequency</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Polarity</name><argument_list>( <argument>Polarisation Polarity</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Polarity</name><argument_list>( <argument><expr><name>Polarisation</name> <operator>*</operator><name>pPolarity</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Range</name><argument_list>( <argument>ULONG ulRange</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Range</name><argument_list>( <argument><expr><name>ULONG</name> <operator>*</operator><name>pulRange</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_Bandwidth</name><argument_list>( <argument>ULONG ulBandwidth</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Bandwidth</name><argument_list>( <argument><expr><name>ULONG</name> <operator>*</operator><name>pulBandwidth</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_FrequencyMultiplier</name><argument_list>( <argument>ULONG ulMultiplier</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_FrequencyMultiplier</name><argument_list>(

<argument><expr><name>ULONG</name> <operator>*</operator><name>pulMultiplier</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_SignalStatistics</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SignalStrength</name><argument_list>( <argument>LONG lDbStrength</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalStrength</name><argument_list>( <argument><expr><name>LONG</name> <operator>*</operator><name>plDbStrength</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SignalQuality</name><argument_list>( <argument>LONG lPercentQuality</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalQuality</name><argument_list>( <argument><expr><name>LONG</name> <operator>*</operator><name>plPercentQuality</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SignalPresent</name><argument_list>( <argument>BOOLEAN fPresent</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalPresent</name><argument_list>( <argument><expr><name>BOOLEAN</name> <operator>*</operator><name>pfPresent</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SignalLocked</name><argument_list>( <argument>BOOLEAN fLocked</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SignalLocked</name><argument_list>( <argument><expr><name>BOOLEAN</name> <operator>*</operator><name>pfLocked</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>put_SampleTime</name><argument_list>( <argument>LONG lmsSampleTime</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_SampleTime</name><argument_list>( <argument><expr><name>LONG</name> <operator>*</operator><name>plmsSampleTime</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IBDA_Topology</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetNodeTypes</name><argument_list>( <argument>ULONG *pulcNodeTypes</argument>,

<argument>ULONG ulcNodeTypesMax</argument>, <argument>ULONG rgulNodeTypes[]</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetNodeDescriptors</name><argument_list>( <argument>ULONG *ulcNodeDescriptors</argument>,

<argument>ULONG ulcNodeDescriptorsMax</argument>,

<argument>BDANODE_DESCRIPTOR rgNodeDescriptors[]</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetNodeInterfaces</name><argument_list>( <argument>ULONG ulNodeType</argument>,

<argument>ULONG *pulcInterfaces</argument>, <argument>ULONG ulcInterfacesMax</argument>,

<argument>GUID rgguidInterfaces[]</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetPinTypes</name><argument_list>( <argument>ULONG *pulcPinTypes</argument>,

<argument>ULONG ulcPinTypesMax</argument>, <argument>ULONG rgulPinTypes[]</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetTemplateConnections</name><argument_list>( <argument>ULONG *pulcConnections</argument>,

<argument>ULONG ulcConnectionsMax</argument>, <argument>BDA_TEMPLATE_CONNECTION rgConnections[]</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>CreatePin</name><argument_list>( <argument>ULONG ulPinType</argument>, <argument>ULONG *pulPinId</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>DeletePin</name><argument_list>( <argument>ULONG ulPinId</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SetMediaType</name><argument_list>( <argument>ULONG ulPinId</argument>,

<argument>AM_MEDIA_TYPE *pMediaType</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SetMedium</name><argument_list>( <argument>ULONG ulPinId</argument>,

<argument>REGPINMEDIUM *pMedium</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>CreateTopology</name><argument_list>( <argument>ULONG ulInputPinId</argument>,

<argument>ULONG ulOutputPinId</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetControlNode</name><argument_list>( <argument>ULONG ulInputPinId</argument>,

<argument>ULONG ulOutputPinId</argument>, <argument>ULONG ulNodeType</argument>, <argument>IUnknown **ppControlNode</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>_MPEG_HEADER_BITS_MIDL</name>

<block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Bits</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_HEADER_BITS_MIDL</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_HEADER_VERSION_BITS_MIDL</name>

<block>{

<decl_stmt><decl><type><name>BYTE</name></type> <name>Bits</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_HEADER_VERSION_BITS_MIDL</name>;</typedef>

<typedef>typedef <type><name>WORD</name></type> <name>PID</name>;</typedef>

<typedef>typedef <type><name>BYTE</name></type> <name>TID</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SECTION</name>

<block>{

<decl_stmt><decl><type><name>TID</name></type> <name>TableId</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>MPEG_HEADER_BITS_MIDL</name></type> <name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>W</name></decl>;</decl_stmt>

}</block> <decl><name>Header</name></decl>;</union>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>SectionData</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SECTION</name><operator>,</operator> *<name>PSECTION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_LONG_SECTION</name>

<block>{

<decl_stmt><decl><type><name>TID</name></type> <name>TableId</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>MPEG_HEADER_BITS_MIDL</name></type> <name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>W</name></decl>;</decl_stmt>

}</block> <decl><name>Header</name></decl>;</union>

<decl_stmt><decl><type><name>WORD</name></type> <name>TableIdExtension</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>MPEG_HEADER_VERSION_BITS_MIDL</name></type> <name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>B</name></decl>;</decl_stmt>

}</block> <decl><name>Version</name></decl>;</union>

<decl_stmt><decl><type><name>BYTE</name></type> <name>SectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>LastSectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>RemainingData</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>LONG_SECTION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_BCS_DEMUX</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>AVMGraphId</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_BCS_DEMUX</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_WINSOC</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>AVMGraphId</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_WINSOCK</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>MPEG_CONTEXT_BCS_DEMUX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MPEG_CONTEXT_WINSOCK</name> <init>= <expr><name>MPEG_CONTEXT_BCS_DEMUX</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>MPEG_CONTEXT_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_RQST_PACKET</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSECTION</name></type> <name>pSection</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_RQST_PACKET</name><operator>,</operator> *<name>PMPEG_RQST_PACKET</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_PACKET_LIST</name>

<block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>wPacketCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PMPEG_RQST_PACKET</name></type> <name><name>PacketList</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_PACKET_LIST</name><operator>,</operator> *<name>PMPEG_PACKET_LIST</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_DSMCC_FILTER_OPTIONS</name>

<block>{

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyProtocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>Protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyMessageId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MessageId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyTransactionId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fUseTrxIdMessageIdMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>TransactionId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyModuleVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>ModuleVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyBlockNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>BlockNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fGetModuleCall</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>NumberOfBlocksInModule</name></decl>;</decl_stmt>

}</block></struct></type> <name>DSMCC_FILTER_OPTIONS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_ATSC_FILTER_OPTIONS</name>

<block>{

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyEtmId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>EtmId</name></decl>;</decl_stmt>

}</block></struct></type> <name>ATSC_FILTER_OPTIONS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_STREAM_BUFFER</name>

<block>{

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDataBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeOfDataRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pDataBuffer</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_STREAM_BUFFER</name><operator>,</operator> *<name>PMPEG_STREAM_BUFFER</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_CONTEXT</name>

<block>{

<decl_stmt><decl><type><name>MPEG_CONTEXT_TYPE</name></type> <name>Type</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>MPEG_BCS_DEMUX</name></type> <name>Demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG_WINSOCK</name></type> <name>Winsock</name></decl>;</decl_stmt>

}</block> <decl><name>U</name></decl>;</union>

}</block></struct></type> <name>MPEG_CONTEXT</name><operator>,</operator> *<name>PMPEG_CONTEXT</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>MPEG_RQST_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_SECTION</name> <init>= <expr><name>MPEG_RQST_UNKNOWN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_SECTION_ASYNC</name> <init>= <expr><name>MPEG_RQST_GET_SECTION</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_TABLE</name> <init>= <expr><name>MPEG_RQST_GET_SECTION_ASYNC</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_TABLE_ASYNC</name> <init>= <expr><name>MPEG_RQST_GET_TABLE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_SECTIONS_STREAM</name> <init>= <expr><name>MPEG_RQST_GET_TABLE_ASYNC</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_PES_STREAM</name> <init>= <expr><name>MPEG_RQST_GET_SECTIONS_STREAM</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_GET_TS_STREAM</name> <init>= <expr><name>MPEG_RQST_GET_PES_STREAM</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>MPEG_RQST_START_MPE_STREAM</name> <init>= <expr><name>MPEG_RQST_GET_TS_STREAM</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>MPEG_REQUEST_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG2_FILTER</name>

<block>{

<decl_stmt><decl><type><name>BYTE</name></type> <name>bVersionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wFilterSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fUseRawFilteringBits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Filter</name><index>[ <expr><literal type="number">16</literal></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Mask</name><index>[ <expr><literal type="number">16</literal></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyTableIdExtension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>TableIdExtension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>Version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifySectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>SectionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyCurrentNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fNext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyDsmccOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DSMCC_FILTER_OPTIONS</name></type> <name>Dsmcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fSpecifyAtscOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSC_FILTER_OPTIONS</name></type> <name>Atsc</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG2_FILTER</name><operator>,</operator> *<name>PMPEG2_FILTER</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_HEADER_BITS</name>

<block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>SectionLength</name> <range>: <expr><literal type="number">12</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>Reserved</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>PrivateIndicator</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>SectionSyntaxIndicator</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_HEADER_BITS</name><operator>,</operator> *<name>PMPEG_HEADER_BITS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MPEG_HEADER_VERSION_BITS</name>

<block>{

<decl_stmt><decl><type><name>BYTE</name></type> <name>CurrentNextIndicator</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>VersionNumber</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>Reserved</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>MPEG_HEADER_VERSION_BITS</name><operator>,</operator> *<name>PMPEG_HEADER_VERSION_BITS</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>IMpeg2Data</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetSection</name><argument_list>( <argument>PID pid</argument>, <argument>TID tid</argument>,

<argument>PMPEG2_FILTER pFilter</argument>, <argument>DWORD dwTimeout</argument>,

<argument>ISectionList **ppSectionList</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetTable</name><argument_list>( <argument>PID pid</argument>, <argument>TID tid</argument>, <argument>PMPEG2_FILTER pFilter</argument>,

<argument>DWORD dwTimeout</argument>, <argument>ISectionList **ppSectionList</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetStreamOfSections</name><argument_list>( <argument>PID pid</argument>, <argument>TID tid</argument>,

<argument>PMPEG2_FILTER pFilter</argument>, <argument>HANDLE hDataReadyEvent</argument>,

<argument>IMpeg2Stream **ppMpegStream</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideData</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetServices</name><argument_list>(

<argument><expr><name>IEnumTuneRequests</name> <operator>*</operator><operator>*</operator><name>ppEnumTuneRequestslass</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetServiceProperties</name><argument_list>(

<argument><expr><name>ITuneRequest</name> <operator>*</operator><name>pTuneRequest</name></expr></argument>,

<argument><expr><name>IEnumGuideDataProperties</name> <operator>*</operator><operator>*</operator><name>ppEnumProperties</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetGuideProgramIDs</name><argument_list>(

<argument><expr><name>IEnumVARIANT</name> <operator>*</operator><operator>*</operator><name>pEnumPrograms</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetProgramProperties</name><argument_list>(

<argument>VARIANT varProgramDescriptionID</argument>,

<argument>IEnumGuideDataProperties **ppEnumProperties</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetScheduleEntryIDs</name><argument_list>(

<argument><expr><name>IEnumVARIANT</name> <operator>*</operator><operator>*</operator><name>pEnumScheduleEntries</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetScheduleEntryProperties</name><argument_list>(

<argument>VARIANT varScheduleEntryDescriptionID</argument>,

<argument>IEnumGuideDataProperties **ppEnumProperties</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideDataEvent</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GuideDataAcquired</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ProgramChanged</name><argument_list>(

<argument>VARIANT varProgramDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ServiceChanged</name><argument_list>(

<argument>VARIANT varServiceDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ScheduleEntryChanged</name><argument_list>(

<argument>VARIANT varScheduleEntryDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ProgramDeleted</name><argument_list>(

<argument>VARIANT varProgramDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ServiceDeleted</name><argument_list>(

<argument>VARIANT varServiceDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>ScheduleDeleted</name><argument_list>(

<argument>VARIANT varScheduleEntryDescriptionID</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IGuideDataProperty</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Name</name><argument_list>( <argument><expr><name>BSTR</name> <operator>*</operator><name>pbstrName</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Language</name><argument_list>( <argument><expr><name>long</name> <operator>*</operator><name>idLang</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>get_Value</name><argument_list>( <argument><expr><name>VARIANT</name> <operator>*</operator><name>pvar</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IMpeg2Stream</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Initialize</name><argument_list>( <argument>MPEG_REQUEST_TYPE requestType</argument>,

<argument>IMpeg2Data *pMpeg2Data</argument>, <argument>PMPEG_CONTEXT pContext</argument>, <argument>PID pid</argument>, <argument>TID tid</argument>,

<argument>PMPEG2_FILTER pFilter</argument>, <argument>HANDLE hDataReadyEvent</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>SupplyDataBuffer</name><argument_list>(

<argument>PMPEG_STREAM_BUFFER pStreamBuffer</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISectionList</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Initialize</name><argument_list>( <argument>MPEG_REQUEST_TYPE requestType</argument>,

<argument>IMpeg2Data *pMpeg2Data</argument>, <argument>PMPEG_CONTEXT pContext</argument>, <argument>PID pid</argument>, <argument>TID tid</argument>,

<argument>PMPEG2_FILTER pFilter</argument>, <argument>DWORD timeout</argument>, <argument>HANDLE hDoneEvent</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>InitializeWithRawSections</name><argument_list>(

<argument>PMPEG_PACKET_LIST pmplSections</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>CancelPendingRequest</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetNumberOfSections</name><argument_list>( <argument><expr><name>WORD</name> <operator>*</operator><name>pCount</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>GetSectionData</name><argument_list>( <argument>WORD sectionNumber</argument>,

<argument>DWORD *pdwRawPacketLength</argument>, <argument>PSECTION *ppSection</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetProgramIdentifier</name><argument_list>( <argument><expr><name>PID</name> <operator>*</operator><name>pPid</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>GetTableIdentifier</name><argument_list>( <argument><expr><name>TID</name> <operator>*</operator><name>pTableId</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumGuideDataProperties</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Next</name><argument_list>( <argument>unsigned long celt</argument>,

<argument>IGuideDataProperty **ppprop</argument>, <argument>unsigned long *pcelt</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Skip</name><argument_list>( <argument>unsigned long celt</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Reset</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumGuideDataProperties</name> <operator>*</operator><operator>*</operator><name>ppenum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IEnumTuneRequests</name> <range>: <expr><name>public</name> <name>IUnknown</name>

<block>{

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Next</name><argument_list>( <argument>unsigned long celt</argument>, <argument>ITuneRequest **ppprop</argument>,

<argument>unsigned long *pcelt</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <macro><name>Skip</name><argument_list>( <argument>unsigned long celt</argument> )</argument_list></macro><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Reset</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>HRESULT</name> <name>__stdcall</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumTuneRequests</name> <operator>*</operator><operator>*</operator><name>ppenum</name></expr></argument> )</argument_list></call><operator>=</operator><literal type="number">0</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_NetworkProvider</name> <init>=

<expr><block>{<expr><literal type="number">0xB2F3A67C</literal></expr>,<expr><literal type="number">0x29DA</literal></expr>,<expr><literal type="number">0x4C78</literal></expr>,<expr><block>{<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0x75</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DigitalCableTuningSpace</name> <init>=

<expr><block>{<expr><literal type="number">0xD9BB4CEE</literal></expr>,<expr><literal type="number">0xB87A</literal></expr>,<expr><literal type="number">0x47F1</literal></expr>,<expr><block>{<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0xFC</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DigitalCableLocator</name> <init>=

<expr><block>{<expr><literal type="number">0x03C06416</literal></expr>,<expr><literal type="number">0xD127</literal></expr>,<expr><literal type="number">0x407A</literal></expr>,<expr><block>{<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x5D</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DigitalCableNetworkType</name> <init>=

<expr><block>{<expr><literal type="number">0x143827AB</literal></expr>,<expr><literal type="number">0xF77B</literal></expr>,<expr><literal type="number">0x498d</literal></expr>,<expr><block>{<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0xBF</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IDigitalCableTuneRequest</name> <init>=

<expr><block>{<expr><literal type="number">0xBAD7753B</literal></expr>,<expr><literal type="number">0x6B37</literal></expr>,<expr><literal type="number">0x4810</literal></expr>,<expr><block>{<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xCB</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IDigitalCableLocator</name> <init>=

<expr><block>{<expr><literal type="number">0x48F66A11</literal></expr>,<expr><literal type="number">0x171A</literal></expr>,<expr><literal type="number">0x419A</literal></expr>,<expr><block>{<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0xEE</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x4C</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>KSCATEGORY_BDA_NETWORK_PROVIDER</name> <init>=

<expr><block>{<expr><literal type="number">0x71985F4B</literal></expr>,<expr><literal type="number">0x1CA1</literal></expr>,<expr><literal type="number">0x11d3</literal></expr>,<expr><block>{<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0xE0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>KSCATEGORY_BDA_TRANSPORT_INFORMATION</name> <init>=

<expr><block>{<expr><literal type="number">0xa2e3074f</literal></expr>,<expr><literal type="number">0x6c3d</literal></expr>,<expr><literal type="number">0x11d3</literal></expr>,<expr><block>{<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x8e</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>KSCATEGORY_BDA_RECEIVER_COMPONENT</name> <init>=

<expr><block>{<expr><literal type="number">0xFD0A5AF4</literal></expr>,<expr><literal type="number">0xB41D</literal></expr>,<expr><literal type="number">0x11d2</literal></expr>,<expr><block>{<expr><literal type="number">0x9c</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0xe0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>KSCATEGORY_BDA_NETWORK_TUNER</name> <init>=

<expr><block>{<expr><literal type="number">0x71985f48</literal></expr>,<expr><literal type="number">0x1ca1</literal></expr>,<expr><literal type="number">0x11d3</literal></expr>,<expr><block>{<expr><literal type="number">0x9c</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0xe0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT</name> <init>=

<expr><block>{<expr><literal type="number">0xF4AEB342</literal></expr>,<expr><literal type="number">0x0329</literal></expr>,<expr><literal type="number">0x4fdd</literal></expr>,<expr><block>{<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0x78</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_ATSCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_ATSCNetworkProvider</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_ATSCTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBCNetworkProvider</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBSLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBSNetworkProvider</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBSTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBTLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBTLocator2</name> <init>=

<expr><block>{<expr><literal type="number">0xEFE3FA02</literal></expr>,<expr><literal type="number">0x45D7</literal></expr>,<expr><literal type="number">0x4920</literal></expr>,<expr><block>{<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0xE6</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_DVBTNetworkProvider</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_FilterGraph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_InfTee</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_MPEG2Demultiplexer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_NullRenderer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_SampleGrabber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_SystemDeviceEnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_SystemTuningSpaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IATSCChannelTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IATSCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IBaseFilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IBDA_DeviceControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IBDA_FrequencyFilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IBDA_SignalStatistics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IBDA_Topology</name> <init>=

<expr><block>{<expr><literal type="number">0x79B56888</literal></expr>,<expr><literal type="number">0x7FEA</literal></expr>,<expr><literal type="number">0x4690</literal></expr>,<expr><block>{<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xBE</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ICreateDevEnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBTLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBTLocator2</name> <init>=

<expr><block>{<expr><literal type="number">0x448A2EDF</literal></expr>,<expr><literal type="number">0xAE95</literal></expr>,<expr><literal type="number">0x4b43</literal></expr>,<expr><block>{<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0xD4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBCLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBSLocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBSTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBTuneRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBTuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IDVBTuningSpace2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IGraphBuilder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IMediaControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IMpeg2Demultiplexer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISampleGrabber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IScanningTuner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ITuner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_ITunerCap</name> <init>=

<expr><block>{<expr><literal type="number">0xE60DFA45</literal></expr>,<expr><literal type="number">0x8D56</literal></expr>,<expr><literal type="number">0x4e65</literal></expr>,<expr><block>{<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xD6</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0x49</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ITuningSpace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ITuningSpaceContainer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IMpeg2Data</name> <init>=

<expr><block>{<expr><literal type="number">0x9B396D40</literal></expr>,<expr><literal type="number">0xF380</literal></expr>,<expr><literal type="number">0x4e3c</literal></expr>,<expr><block>{<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xE6</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IGuideData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_ISectionList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IEnumTuneRequests</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IEnumGuideDataProperties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IGuideDataProperty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IMpeg2Stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>IID</name></type> <name>IID_IGuideDataEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>MEDIATYPE_MPEG2_SECTIONS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_MPEG2_TRANSPORT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_None</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>FORMAT_None</name></decl>;</decl_stmt>

</block_content>}</block></extern><empty_stmt>;</empty_stmt>

</unit>
