<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\dtv\linux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dvb/version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dvb/frontend.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dvb/dmx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dtv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"en50221.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_SEARCH</name></cpp:macro> <cpp:value>O_RDONLY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBv5</name><parameter_list>(<parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DVB_API_VERSION &gt; 5 || (DVB_API_VERSION == 5 &amp;&amp; DVB_API_VERSION_MINOR &gt;= (minor)))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linux_</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvb_int_map_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvb_int_map_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>*</operator><name>key</name> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>vlc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_int</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvb_int_map_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvb_int_map_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>icmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>linux_</name></name></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct><specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>vlc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linux_</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvb_str_map_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvb_str_map_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_str</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvb_str_map_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvb_str_map_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>bsearch</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>scmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>def</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linux_</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>def</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_modulation</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_str_map_t</name></type> <name><name>mods</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"128QAM"</literal></expr>, <expr><name>QAM_128</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16APSK"</literal></expr>, <expr><name>APSK_16</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16QAM"</literal></expr>, <expr><name>QAM_16</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16VSB"</literal></expr>, <expr><name>VSB_16</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"256QAM"</literal></expr>, <expr><name>QAM_256</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"32APSK"</literal></expr>, <expr><name>APSK_32</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"32QAM"</literal></expr>, <expr><name>QAM_32</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"64QAM"</literal></expr>, <expr><name>QAM_64</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"8PSK"</literal></expr>, <expr><name>PSK_8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"8VSB"</literal></expr>, <expr><name>VSB_8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DQPSK"</literal></expr>, <expr><name>DQPSK</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"QAM"</literal></expr>, <expr><name>QAM_AUTO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"QPSK"</literal></expr>, <expr><name>QPSK</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_str</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mods</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_fec</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_int_map_t</name></type> <name><name>rates</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>FEC_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_1_2</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_2_3</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_3_4</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_3_5</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_4_5</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_5_6</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_6_7</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_7_8</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_8_9</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FEC_9_10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_FEC_AUTO</name></expr>, <expr><name>FEC_AUTO</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_int</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>, <argument><expr><name>rates</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>rates</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>FEC_AUTO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>dvb_device</name>

<block>{

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frontend</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PIDS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pid</name></decl>;</decl_stmt>

}</block> <decl><name><name>pids</name><index>[<expr><name>MAX_PIDS</name></expr>]</index></name></decl>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>cam_t</name> <modifier>*</modifier></type><name>cam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>budget</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_open_adapter</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>adapter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>dir</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/dvb/adapter%"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_open</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>O_SEARCH</name><operator>|</operator><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_open_node</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_openat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dvb_open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>d</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>adapter</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-adapter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>dvb_open_adapter</name> <argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot access adapter %"</literal><name>PRIu8</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>adapter</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name> <operator>=</operator> <call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-budget-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name> <operator>=</operator> <call><name>dvb_open_node</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"demux"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot access demultiplexer: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>, <argument><expr><name>DMX_SET_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot expand demultiplexing buffer: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dmx_pes_filter_params</name></name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr> ?</condition><then> <expr><literal type="number">0x2000</literal></expr> </then><else>: <expr><literal type="number">0x000</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>DMX_IN_FRONTEND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>DMX_OUT_TSDEMUX_TAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pes_type</name></name> <operator>=</operator> <name>DMX_PES_OTHER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DMX_IMMEDIATE_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>, <argument><expr><name>DMX_SET_PES_FILTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot setup TS demultiplexer: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name> <operator>=</operator> <call><name>dvb_open_node</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"dvr"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot access DVR: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ca</name> <init>= <expr><call><name>dvb_open_node</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"ca"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ca</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>=</operator> <call><name>en50221_Init</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"conditional access module not available: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>dvb_close</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>dvb_close</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>en50221_End</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvb_frontend_status</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>fe_status_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"frontend status:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s &amp; FE_ ##f) msg_Dbg(obj, "\t%s", #f);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>HAS_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>HAS_CARRIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>HAS_VITERBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>HAS_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>HAS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>TIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>REINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>dvb_read</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>en50221_Poll</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLPRI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vlc_poll_i11e</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dvb_frontend_event</name></name></type> <name>ev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_GET_EVENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOVERFLOW</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot dequeue events fast enough!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot dequeue frontend event: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvb_frontend_status</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>read</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOVERFLOW</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot demux data fast enough!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot demux: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_add_pid</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>, <argument><expr><name>DMX_ADD_PID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>dvb_open_node</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"demux"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dmx_pes_filter_params</name></name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>DMX_IN_FRONTEND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>DMX_OUT_TS_TAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pes_type</name></name> <operator>=</operator> <name>DMX_PES_OTHER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DMX_IMMEDIATE_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>DMX_SET_PES_FILTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt>

<label><name>error</name>:</label>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot add PID 0x%04"</literal><name>PRIu16</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>dvb_remove_pid</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>demux</name></name></expr></argument>, <argument><expr><name>DMX_REMOVE_PID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>dvb_get_pid_state</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>budget</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PIDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_open_frontend</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>dvb_open_node</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"frontend"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot access frontend: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dvb_find_frontend</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>sys</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dvb_open_frontend(d))</cpp:value></cpp:define>

<function><type><name>unsigned</name></type> <name>dvb_enum_systems</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>systems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_open_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_property</name></name></type> <name><name>prop</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>cmd</name> <operator>=</operator> <name>DTV_API_VERSION</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>cmd</name> <operator>=</operator> <name>DTV_ENUM_DELSYS</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_properties</name></name></type> <name>props</name> <init>= <expr><block>{

<expr><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>props</name> <operator>=</operator> <name>prop</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_GET_PROPERTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot enumerate frontend systems: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>legacy</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>systab</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>SYS_UNDEFINED</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><index>[<expr><name>SYS_DVBC_ANNEX_A</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_DVB_C</name></expr>,

<expr><index>[<expr><name>SYS_DVBC_ANNEX_B</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_CQAM</name></expr>,

<expr><index>[<expr><name>SYS_DVBT</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_DVB_T</name></expr>,

<expr><index>[<expr><name>SYS_DVBS</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_DVB_S</name></expr>,

<expr><index>[<expr><name>SYS_DVBS2</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_DVB_S2</name></expr>,

<expr><index>[<expr><name>SYS_ISDBT</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_ISDB_T</name></expr>,

<expr><index>[<expr><name>SYS_ISDBS</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_ISDB_S</name></expr>,

<expr><index>[<expr><name>SYS_ISDBC</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_ISDB_C</name></expr>, 

<expr><index>[<expr><name>SYS_ATSC</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_ATSC</name></expr>,

<expr><index>[<expr><name>SYS_DVBT2</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_DVB_T2</name></expr>,

<expr><index>[<expr><name>SYS_DVBC_ANNEX_C</name></expr>]</index> <operator>=</operator> <name>DTV_DELIVERY_ISDB_C</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"probing frontend (kernel API v%u.%u, user API v%u.%u)"</literal></expr></argument>,

<argument><expr><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>,

<argument><expr><name>DVB_API_VERSION</name></expr></argument>, <argument><expr><name>DVB_API_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prop</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sys</name> <init>= <expr><name><name>prop</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>buffer</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>systab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>systab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>systab</name><index>[<expr><name>sys</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unknown delivery system %u"</literal></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" system %u"</literal></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>systems</name> <operator>|=</operator> <name><name>systab</name><index>[<expr><name>sys</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>systems</name></expr>;</return>

<label><name>legacy</name>:</label>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_property</name></name></type> <name><name>prop</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>cmd</name> <operator>=</operator> <name>DTV_API_VERSION</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_properties</name></name></type> <name>props</name> <init>= <expr><block>{

<expr><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>props</name> <operator>=</operator> <name>prop</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_GET_PROPERTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unsupported kernel DVB version 3 or older (%s)"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"probing frontend (kernel API v%u.%u, user API v%u.%u)"</literal></expr></argument>,

<argument><expr><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>,

<argument><expr><name>DVB_API_VERSION</name></expr></argument>, <argument><expr><name>DVB_API_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">5</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>prop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>data</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"obsolete user API version running on a new kernel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"please recompile "</literal><name>PACKAGE_NAME</name><literal type="string">" "</literal><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>dvb_frontend_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_GET_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot get frontend info: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" name %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" type %u, capabilities 0x%08X"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>caps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" frequencies %10"</literal><name>PRIu32</name><literal type="string">" to %10"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>frequency_min</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>frequency_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" (%"</literal><name>PRIu32</name><literal type="string">" tolerance, %"</literal><name>PRIu32</name><literal type="string">" per step)"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>frequency_tolerance</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>frequency_stepsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" bauds rates %10"</literal><name>PRIu32</name><literal type="string">" to %10"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>symbol_rate_min</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>symbol_rate_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">" (%"</literal><name>PRIu32</name><literal type="string">" tolerance)"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>symbol_rate_tolerance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>FE_QPSK</name></expr>:</case> <expr_stmt><expr><name>systems</name> <operator>=</operator> <name>DTV_DELIVERY_DVB_S</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FE_QAM</name></expr>:</case> <expr_stmt><expr><name>systems</name> <operator>=</operator> <name>DTV_DELIVERY_DVB_C</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FE_OFDM</name></expr>:</case> <expr_stmt><expr><name>systems</name> <operator>=</operator> <name>DTV_DELIVERY_DVB_T</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FE_ATSC</name></expr>:</case> <expr_stmt><expr><name>systems</name> <operator>=</operator> <name>DTV_DELIVERY_ATSC</name> <operator>|</operator> <name>DTV_DELIVERY_CQAM</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"unknown frontend type %u"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>FE_QPSK</name></expr>:</case>

<case>case <expr><name>FE_QAM</name></expr>:</case>

<case>case <expr><name>FE_OFDM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>caps</name></name> <operator>&amp;</operator> <name>FE_CAN_2G_MODULATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>systems</name> <operator>|=</operator> <name>systems</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>FE_OFDM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>systems</name> <operator>|=</operator> <name>DTV_DELIVERY_ISDB_T</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>systems</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>dvb_get_signal_strength</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>strength</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_READ_SIGNAL_STRENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strength</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0.</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>strength</name> <operator>/</operator> <literal type="number">65535.</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>dvb_get_snr</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>snr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_READ_SNR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0.</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>snr</name> <operator>/</operator> <literal type="number">65535.</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>dvb_set_ca_pmt</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_capmtinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_SetCAPMT</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cam</name></name></expr></argument>, <argument><expr><name>p_capmtinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_vset_props</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name>DTV_IOCTL_MAX_MSGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_property</name></name></type> <name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prop</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dtv_properties</name></name></type> <name>props</name> <init>= <expr><block>{ <expr><operator>.</operator><name>num</name> <operator>=</operator> <name>n</name></expr>, <expr><operator>.</operator><name>props</name> <operator>=</operator> <name>buf</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"setting property %2"</literal><name>PRIu32</name><literal type="string">" to %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prop</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_SET_PROPERTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot set frontend tuning parameters: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_set_props</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dvb_vset_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_set_prop</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_inversion</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>v</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>INVERSION_OFF</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>INVERSION_ON</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>INVERSION_AUTO</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>dvb_set_prop</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_INVERSION</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_tune</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dvb_set_prop</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_TUNE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_fill_device_caps</name><parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>dvb_device_caps_t</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dvb_frontend_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_GET_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot get frontend info: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>frequency_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>frequency_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>symbolrate</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>symbol_rate_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>symbolrate</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>symbol_rate_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>b_can_cam_auto</name></name> <operator>=</operator> <operator>(</operator> <name><name>info</name><operator>.</operator><name>caps</name></name> <operator>&amp;</operator> <name>FE_CAN_QAM_AUTO</name> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_dvbc</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>srate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_DVB_C</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBC_ANNEX_A</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBC_ANNEX_AC</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_SYMBOL_RATE</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>dvb_parse_polarization</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>pol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_int_map_t</name></type> <name><name>tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>SEC_VOLTAGE_OFF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'H'</literal></expr>, <expr><name>SEC_VOLTAGE_18</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'L'</literal></expr>, <expr><name>SEC_VOLTAGE_18</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'R'</literal></expr>, <expr><name>SEC_VOLTAGE_13</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="char">'V'</literal></expr>, <expr><name>SEC_VOLTAGE_13</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_int</name> <argument_list>(<argument><expr><name>pol</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>SEC_VOLTAGE_OFF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_sec</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq_Hz</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>pol</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>lowf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>highf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>switchf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><name>freq_Hz</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"dvb-high-voltage"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_ENABLE_HIGH_LNB_VOLTAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot enable high LNB voltage: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lowf</name></expr>)</condition>

<block>{<block_content> 

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

}</block> <decl><name><name>tab</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><block>{ <expr><literal type="number">10700</literal></expr>, <expr><literal type="number">13250</literal></expr>, <expr><literal type="number">9750</literal></expr>, <expr><literal type="number">10600</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">4500</literal></expr>, <expr><literal type="number">4800</literal></expr>, <expr><literal type="number">5950</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3400</literal></expr>, <expr><literal type="number">4200</literal></expr>, <expr><literal type="number">5150</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2500</literal></expr>, <expr><literal type="number">2700</literal></expr>, <expr><literal type="number">3650</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">950</literal></expr>, <expr><literal type="number">2150</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>mHz</name> <init>= <expr><name>freq</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>mHz</name> <operator>&gt;=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min</name> <operator>&amp;&amp;</operator> <name>mHz</name> <operator>&lt;=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lowf</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>low</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>highf</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>high</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<goto>goto <name>known</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"no known band for frequency %u kHz"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>known</name>:</label>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"selected LNB low: %u kHz, LNB high: %u kHz"</literal></expr></argument>,

<argument><expr><name>lowf</name></expr></argument>, <argument><expr><name>highf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>high</name> <init>= <expr><name>highf</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&gt;</operator> <name>switchf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>freq</name> <operator>-=</operator> <ternary><condition><expr><name>high</name></expr> ?</condition><then> <expr><name>highf</name></expr> </then><else>: <expr><name>lowf</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>freq</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>freq</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>freq</name> <operator>&lt;</operator> <literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tone</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"dvb-tone"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>tone</name> <operator>=</operator> <name>SEC_TONE_OFF</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>tone</name> <operator>=</operator> <name>SEC_TONE_ON</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>tone</name> <operator>=</operator> <ternary><condition><expr><name>high</name></expr> ?</condition><then> <expr><name>SEC_TONE_ON</name></expr> </then><else>: <expr><name>SEC_TONE_OFF</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>unsigned</name></type> <name>voltage</name> <init>= <expr><call><name>dvb_parse_polarization</name> <argument_list>(<argument><expr><name>pol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DTV_TONE</name></expr></argument>, <argument><expr><name>SEC_TONE_OFF</name></expr></argument>, <argument><expr><name>DTV_VOLTAGE</name></expr></argument>, <argument><expr><name>voltage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>satno</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"dvb-satno"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>satno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_tick_sleep</name></cpp:undef> 

<decl_stmt><decl><type><name><name>struct</name> <name>dvb_diseqc_master_cmd</name></name></type> <name>uncmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dvb_diseqc_master_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>satno</name> <operator>=</operator> <operator>(</operator><name>satno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal> 

<operator>|</operator> <operator>(</operator><name>satno</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> 

<operator>|</operator> <operator>(</operator><operator>(</operator><name>voltage</name> <operator>==</operator> <name>SEC_VOLTAGE_18</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> 

<operator>|</operator> <operator>(</operator><name>tone</name> <operator>==</operator> <name>SEC_TONE_ON</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>msg_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_tick_sleep</name> <argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>uncommitted</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"dvb-uncommitted"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uncommitted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>uncommitted</name> <operator>=</operator> <operator>(</operator><name>uncommitted</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x39</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal> 

<operator>|</operator> <operator>(</operator><name>uncommitted</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> 

<operator>|</operator> <operator>(</operator><operator>(</operator><name>voltage</name> <operator>==</operator> <name>SEC_VOLTAGE_18</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> 

<operator>|</operator> <operator>(</operator><name>tone</name> <operator>==</operator> <name>SEC_TONE_ON</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_DISEQC_SEND_MASTER_CMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uncmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot send uncommitted DiSEqC command: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uncmd</name><operator>.</operator><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_DISEQC_SEND_MASTER_CMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uncmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><literal type="string">"cannot send repeated uncommitted DiSEqC command: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_DISEQC_SEND_MASTER_CMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot send committed DiSEqC command: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name> <argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">54</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>satno</name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>frontend</name></name></expr></argument>, <argument><expr><name>FE_DISEQC_SEND_BURST</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>satno</name></expr> ?</condition><then> <expr><name>SEC_MINI_B</name></expr> </then><else>: <expr><name>SEC_MINI_A</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot send Mini-DiSEqC tone burst: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name> <argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_TONE</name></expr></argument>, <argument><expr><name>tone</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_dvbs</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq_Hz</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>srate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><name>freq_Hz</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_DVB_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBS</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_SYMBOL_RATE</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>,

<argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_dvbs2</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq_Hz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>srate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pilot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rolloff</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>sid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><name>freq_Hz</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QPSK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>pilot</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>pilot</name> <operator>=</operator> <name>PILOT_OFF</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>pilot</name> <operator>=</operator> <name>PILOT_ON</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>pilot</name> <operator>=</operator> <name>PILOT_AUTO</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>rolloff</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>rolloff</name> <operator>=</operator> <name>ROLLOFF_20</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>rolloff</name> <operator>=</operator> <name>ROLLOFF_25</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>rolloff</name> <operator>=</operator> <name>ROLLOFF_35</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>rolloff</name> <operator>=</operator> <name>PILOT_AUTO</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_DVB_S2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBS2</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_SYMBOL_RATE</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>,

<argument><expr><name>DTV_PILOT</name></expr></argument>, <argument><expr><name>pilot</name></expr></argument>, <argument><expr><name>DTV_ROLLOFF</name></expr></argument>, <argument><expr><name>rolloff</name></expr></argument>,

<argument><expr><name>DTV_STREAM_ID</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>sid</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> DVB-S2 needs Linux DVB version 5.8 or later.</cpp:warning>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"DVB-S2 stream ID support not compiled-in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBS2</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_SYMBOL_RATE</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>,

<argument><expr><name>DTV_PILOT</name></expr></argument>, <argument><expr><name>pilot</name></expr></argument>, <argument><expr><name>DTV_ROLLOFF</name></expr></argument>, <argument><expr><name>rolloff</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>dvb_parse_bandwidth</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="number">1712000</literal></expr>;</return>

<default>default:</default> <return>return <expr><name>i</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_transmit_mode</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_int_map_t</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>TRANSMISSION_MODE_AUTO</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>TRANSMISSION_MODE_1K</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>TRANSMISSION_MODE_2K</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>TRANSMISSION_MODE_4K</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>TRANSMISSION_MODE_8K</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><name>TRANSMISSION_MODE_16K</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><name>TRANSMISSION_MODE_32K</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_int</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>TRANSMISSION_MODE_AUTO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_guard</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>guard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_int_map_t</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_1_4</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_1_8</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_1_16</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_1_32</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_1_128</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_19_128</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>, <expr><name>GUARD_INTERVAL_19_256</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_GUARD_AUTO</name></expr>, <expr><name>GUARD_INTERVAL_AUTO</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_int</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>GUARD_INTERVAL_AUTO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_parse_hierarchy</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dvb_int_map_t</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>HIERARCHY_AUTO</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>HIERARCHY_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>HIERARCHY_1</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>HIERARCHY_2</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>HIERARCHY_4</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_parse_int</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>HIERARCHY_AUTO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_dvbt</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>fec_hp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fec_lp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bandwidth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>transmit_mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guard</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hierarchy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec_hp</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec_hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fec_lp</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec_lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>dvb_parse_bandwidth</name> <argument_list>(<argument><expr><name>bandwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>transmit_mode</name> <operator>=</operator> <call><name>dvb_parse_transmit_mode</name> <argument_list>(<argument><expr><name>transmit_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guard</name> <operator>=</operator> <call><name>dvb_parse_guard</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hierarchy</name> <operator>=</operator> <call><name>dvb_parse_hierarchy</name> <argument_list>(<argument><expr><name>hierarchy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_DVB_T</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBT</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_CODE_RATE_HP</name></expr></argument>, <argument><expr><name>fec_hp</name></expr></argument>, <argument><expr><name>DTV_CODE_RATE_LP</name></expr></argument>, <argument><expr><name>fec_lp</name></expr></argument>,

<argument><expr><name>DTV_BANDWIDTH_HZ</name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>,

<argument><expr><name>DTV_TRANSMISSION_MODE</name></expr></argument>, <argument><expr><name>transmit_mode</name></expr></argument>,

<argument><expr><name>DTV_GUARD_INTERVAL</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>,

<argument><expr><name>DTV_HIERARCHY</name></expr></argument>, <argument><expr><name>hierarchy</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_dvbt2</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bandwidth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>transmit_mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guard</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>plp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>dvb_parse_bandwidth</name> <argument_list>(<argument><expr><name>bandwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>transmit_mode</name> <operator>=</operator> <call><name>dvb_parse_transmit_mode</name> <argument_list>(<argument><expr><name>transmit_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guard</name> <operator>=</operator> <call><name>dvb_parse_guard</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DVB_T2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBT2</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>, <argument><expr><name>DTV_BANDWIDTH_HZ</name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>,

<argument><expr><name>DTV_TRANSMISSION_MODE</name></expr></argument>, <argument><expr><name>transmit_mode</name></expr></argument>,

<argument><expr><name>DTV_GUARD_INTERVAL</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><name>DTV_STREAM_ID</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>DTV_DVBT2_PLP_ID</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>plp</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> DVB-T2 needs Linux DVB version 5.3 or later.</cpp:warning>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"DVB-T2 support not compiled-in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>freq</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>modstr</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fec</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>bandwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>transmit_mode</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>guard</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_isdbc</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>srate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fec</name> <operator>=</operator> <call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_ISDB_C</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBC_ANNEX_C</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:warning>#<cpp:directive>warning</cpp:directive> ISDB-C might need Linux DVB version 5.5 or later.</cpp:warning>

<argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBC_ANNEX_AC</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_SYMBOL_RATE</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>DTV_INNER_FEC</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_isdbs</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq_Hz</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ts_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><name>freq_Hz</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_ISDB_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_ISDBS</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>DVBv5</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><name>DTV_STREAM_ID</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>DTV_ISDBS_TS_ID</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ts_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvb_set_isdbt_layer</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>isdbt_layer_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>modulation</name></name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>dvb_parse_fec</name> <argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>code_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>segment_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ti</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>time_interleaving</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>*=</operator> <name>DTV_ISDBT_LAYERB_FEC</name> <operator>-</operator> <name>DTV_ISDBT_LAYERA_FEC</name></expr>;</expr_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_ISDBT</name></expr></argument>,

<argument><expr><name>DTV_ISDBT_LAYERA_FEC</name> <operator>+</operator> <name>num</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>,

<argument><expr><name>DTV_ISDBT_LAYERA_MODULATION</name> <operator>+</operator> <name>num</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>,

<argument><expr><name>DTV_ISDBT_LAYERA_SEGMENT_COUNT</name> <operator>+</operator> <name>num</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,

<argument><expr><name>DTV_ISDBT_LAYERA_TIME_INTERLEAVING</name> <operator>+</operator> <name>num</name></expr></argument>, <argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_isdbt</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bandwidth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>transmit_mode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>guard</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>isdbt_layer_t</name></type> <name><name>layers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>dvb_parse_bandwidth</name> <argument_list>(<argument><expr><name>bandwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>transmit_mode</name> <operator>=</operator> <call><name>dvb_parse_transmit_mode</name> <argument_list>(<argument><expr><name>transmit_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guard</name> <operator>=</operator> <call><name>dvb_parse_guard</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_ISDB_T</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_ISDBT</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_BANDWIDTH_HZ</name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>,

<argument><expr><name>DTV_GUARD_INTERVAL</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>,

<argument><expr><name>DTV_ISDBT_LAYER_ENABLED</name></expr></argument>, <argument><expr><literal type="number">0x7</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>dvb_set_isdbt_layer</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>layers</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_atsc</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>VSB_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_ATSC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_ATSC</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dvb_set_cqam</name> <parameter_list>(<parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mod</name> <init>= <expr><call><name>dvb_parse_modulation</name> <argument_list>(<argument><expr><name>modstr</name></expr></argument>, <argument><expr><name>QAM_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dvb_find_frontend</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DTV_DELIVERY_CQAM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvb_set_props</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>DTV_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>DTV_DELIVERY_SYSTEM</name></expr></argument>, <argument><expr><name>SYS_DVBC_ANNEX_B</name></expr></argument>,

<argument><expr><name>DTV_FREQUENCY</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>DTV_MODULATION</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
