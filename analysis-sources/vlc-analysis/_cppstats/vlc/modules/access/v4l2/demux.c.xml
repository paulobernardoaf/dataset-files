<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\v4l2\demux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANONYMOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANONYMOUS</name></cpp:macro> <cpp:value>MAP_ANON</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buffer_t</name></name> <modifier>*</modifier></type><name>bufv</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bufc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocksize</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_v4l2_ctrl_t</name> <modifier>*</modifier></type><name>controls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_v4l2_vbi_t</name> <modifier>*</modifier></type><name>vbi</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>UserPtrThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>MmapThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ReadThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InitVideo</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>caps</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>DemuxOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ParseMRL</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"dev"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>path</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>OpenDevice</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitVideo</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>v4l2_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>controls</name></name> <operator>=</operator> <call><name>ControlsInit</name><argument_list>(<argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>DemuxControl</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>red</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>green</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>blue</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_v4l2_fmt_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_v4l2_fmt_t</name></type> <name><name>v4l2_fmts</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>V4L2_PIX_FMT_YUV420</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YVU420</name></expr>, <expr><name>VLC_CODEC_YV12</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YUV422P</name></expr>, <expr><name>VLC_CODEC_I422</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YUYV</name></expr>, <expr><name>VLC_CODEC_YUYV</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_UYVY</name></expr>, <expr><name>VLC_CODEC_UYVY</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YVYU</name></expr>, <expr><name>VLC_CODEC_YVYU</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_VYUY</name></expr>, <expr><name>VLC_CODEC_VYUY</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YUV411P</name></expr>, <expr><name>VLC_CODEC_I411</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_YUV410</name></expr>, <expr><name>VLC_CODEC_I410</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_NV12</name></expr>, <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_NV21</name></expr>, <expr><name>VLC_CODEC_NV21</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB32</name></expr>, <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0xFF00</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0xFF000000</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_BGR32</name></expr>, <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0xFF00</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB24</name></expr>, <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_BGR24</name></expr>, <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB565X</name></expr>, <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">0x07E0</literal></expr>, <expr><literal type="number">0xF800</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB555X</name></expr>, <expr><name>VLC_CODEC_RGB15</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">0x03E0</literal></expr>, <expr><literal type="number">0x7C00</literal></expr> }</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB32</name></expr>, <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_BGR32</name></expr>, <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB24</name></expr>, <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_BGR24</name></expr>, <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB565</name></expr>, <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">0x07E0</literal></expr>, <expr><literal type="number">0xF800</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_RGB555</name></expr>, <expr><name>VLC_CODEC_RGB15</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">0x03E0</literal></expr>, <expr><literal type="number">0x7C00</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>V4L2_PIX_FMT_JPEG</name></expr>, <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_H264</name></expr>, <expr><name>VLC_CODEC_H264</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_MPEG4</name></expr>, <expr><name>VLC_CODEC_MP4V</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_XVID</name></expr>, <expr><name>VLC_CODEC_MP4V</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_H263</name></expr>, <expr><name>VLC_CODEC_H263</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_MPEG2</name></expr>, <expr><name>VLC_CODEC_MPGV</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_MPEG1</name></expr>, <expr><name>VLC_CODEC_MPGV</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_VC1_ANNEX_G</name></expr>, <expr><name>VLC_CODEC_VC1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_VC1_ANNEX_L</name></expr>, <expr><name>VLC_CODEC_VC1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_MJPEG</name></expr>, <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_Y16</name></expr>, <expr><name>VLC_CODEC_GREY_16L</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_Y12</name></expr>, <expr><name>VLC_CODEC_GREY_12L</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_Y10</name></expr>, <expr><name>VLC_CODEC_GREY_10L</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>V4L2_PIX_FMT_GREY</name></expr>, <expr><name>VLC_CODEC_GREY</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_v4l2_fmt_t</name> <modifier>*</modifier></type><name>vlc_from_v4l2_fourcc</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>v4l2_fmts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>v4l2_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>v4l2_fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2</name> <operator>==</operator> <name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>v4l2_fmts</name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>vlc_v4l2_fmt_rank</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_v4l2_fmt_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SIZE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>d</name> <init>= <expr><name>fmt</name> <operator>-</operator> <name>v4l2_fmts</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>d</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>v4l2_fmts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>v4l2_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>var_InheritFourCC</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><call><name>vlc_fourcc_GetCodecFromString</name> <argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fourcc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid codec %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fourcc</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritFourCC</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritFourCC(VLC_OBJECT(o), v)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetAR</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_cropcap</name></name></type> <name>cropcap</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_CROPCAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cropcap</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>*</operator><name>den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>cropcap</name><operator>.</operator><name>pixelaspect</name><operator>.</operator><name>numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <name><name>cropcap</name><operator>.</operator><name>pixelaspect</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitVideo</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>caps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>v4l2_std_id</name></type> <name>std</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>caps</name> <operator>&amp;</operator> <name>V4L2_CAP_VIDEO_CAPTURE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"not a video capture device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetupInput</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>std</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_v4l2_fmt_t</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>reqfourcc</name> <init>= <expr><call><name>var_InheritFourCC</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"chroma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>native</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>v4l2_fmtdesc</name></name></type> <name>codec</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr> }</block></expr></init></decl>;</init>

<condition><expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><name><name>codec</name><operator>.</operator><name>index</name></name><operator>++</operator></expr></incr>)</control>

<block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_v4l2_fmt_t</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><call><name>vlc_from_v4l2_fourcc</name> <argument_list>(<argument><expr><name><name>codec</name><operator>.</operator><name>pixelformat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">" %s %s format %4.4s (%4.4s): %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_FMT_FLAG_EMULATED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"emulates"</literal></expr> </then><else>: <expr><literal type="string">"supports"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>codec</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_FMT_FLAG_COMPRESSED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"compressed"</literal></expr> </then><else>: <expr><literal type="string">"raw"</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>codec</name><operator>.</operator><name>pixelformat</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>dsc</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dsc</name><operator>-&gt;</operator><name>vlc</name></name></expr> </then><else>: <expr><literal type="string">"N.A."</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>codec</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>vlc</name></name> <operator>==</operator> <name>reqfourcc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">" matches the requested format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>dsc</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_FMT_FLAG_EMULATED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>native</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>native</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_v4l2_fmt_rank</name> <argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>vlc_v4l2_fmt_rank</name> <argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>dsc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>selected</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot negotiate supported video format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"selected format %4.4s (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>selected</name><operator>-&gt;</operator><name>v4l2</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>selected</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_streamparm</name></name></type> <name>parm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetupFormat</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>selected</name><operator>-&gt;</operator><name>v4l2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"%d bytes maximum for complete image"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>sizeimage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>field</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>V4L2_FIELD_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: progressive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_TOP</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: top field only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name><operator>|</operator><name>BLOCK_FLAG_SINGLE_FIELD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: bottom field only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name><operator>|</operator><name>BLOCK_FLAG_SINGLE_FIELD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_INTERLACED</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: interleaved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_SEQ_TB</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: sequential top bottom (TODO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_SEQ_BT</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: sequential bottom top (TODO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_ALTERNATE</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: alternate fields (TODO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_INTERLACED_TB</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: interleaved top bottom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_FIELD_INTERLACED_BT</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: interleaved bottom top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Interlacing setting: unknown type (%d)"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>es_fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>selected</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>selected</name><operator>-&gt;</operator><name>vlc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>selected</name><operator>-&gt;</operator><name>red</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>selected</name><operator>-&gt;</operator><name>green</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>selected</name><operator>-&gt;</operator><name>blue</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>bytesperline</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>selected</name><operator>-&gt;</operator><name>bpp</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>bytesperline</name></name> <operator>/</operator> <name><name>selected</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>

<name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetAR</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"color primaries: %u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>V4L2_COLORSPACE_DEFAULT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_SMPTE170M</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_525</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_SMPTE240M</name></expr>:</case> 

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_REC709</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_M</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_470_SYSTEM_BG</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_625</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_JPEG</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_SRGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_SRGB</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_SRGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_UNDEF</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_ADOBERGB</name></expr>:</case> 

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_BT2020</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT2020</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT2020</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_RAW</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_LINEAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_COLORSPACE_DCI_P3</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_DCI_P3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_UNDEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown color space %u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"transfer function: %u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>xfer_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>xfer_func</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>V4L2_XFER_FUNC_DEFAULT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V4L2_XFER_FUNC_709</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_XFER_FUNC_SRGB</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_XFER_FUNC_ADOBERGB</name></expr>:</case>

<case>case <expr><name>V4L2_XFER_FUNC_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_UNDEF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_XFER_FUNC_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_LINEAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_XFER_FUNC_DCI_P3</name></expr>:</case>

<case>case <expr><name>V4L2_XFER_FUNC_SMPTE2084</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_UNDEF</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown transfer function %u"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>xfer_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"YCbCr encoding: %u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>V4L2_YCBCR_ENC_DEFAULT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V4L2_YCBCR_ENC_601</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_YCBCR_ENC_709</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_YCBCR_ENC_XV601</name></expr>:</case>

<case>case <expr><name>V4L2_YCBCR_ENC_XV709</name></expr>:</case>

<case>case <expr><name>V4L2_YCBCR_ENC_SYCC</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V4L2_YCBCR_ENC_BT2020</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_YCBCR_ENC_BT2020_CONST_LUM</name></expr>:</case>

<case>case <expr><name>V4L2_YCBCR_ENC_SMPTE240M</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown YCbCr encoding: %u"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>ycbcr_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"quantization: %u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>quantization</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>quantization</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>V4L2_QUANTIZATION_DEFAULT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V4L2_QUANTIZATION_FULL_RANGE</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V4L2_QUANTIZATION_LIM_RANGE</name></expr>:</case>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_LIMITED</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown quantization: %u"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>quantization</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"added new video ES %4.4s %ux%u (%ux%u)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">" frame rate: %u/%u"</literal></expr></argument>, <argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,

<argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">" aspect ratio: %u/%u"</literal></expr></argument>, <argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>caps</name> <operator>&amp;</operator> <name>V4L2_CAP_STREAMING</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>StartUserPtr</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>pagemask</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_PAGE_SIZE</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>sizeimage</name></name> <operator>+</operator> <name>pagemask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>pagemask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>UserPtrThread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"streaming with %"</literal><name>PRIu32</name><literal type="string">"-bytes user buffers"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>bufc</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>=</operator> <call><name>StartMmap</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>bufc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>MmapThread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"streaming with %"</literal><name>PRIu32</name><literal type="string">" memory-mapped buffers"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>caps</name> <operator>&amp;</operator> <name>V4L2_CAP_READWRITE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>sizeimage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>ReadThread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"reading %"</literal><name>PRIu32</name><literal type="string">" bytes at a time"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"no supported capture method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>std</name> <operator>&amp;</operator> <name>V4L2_STD_NTSC_M</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vbi_path</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"vbidev"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vbi_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <call><name>OpenVBI</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>vbi_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vbi_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseVBI</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>StopMmap</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DemuxClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>StopMmap</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ControlsDeinit</name><argument_list>(<argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>controls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v4l2_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseVBI</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>UserPtrQueue</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mmap</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,

<argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANONYMOUS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate %zu-bytes buffer: %s"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_mmap_Alloc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>munmap</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_USERPTR</name></expr>,

<expr><operator>.</operator><name>m</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>userptr</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>length</name> <operator>=</operator> <name>length</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot queue buffer: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>UserPtrThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfds_t</name></type> <name>numfds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_USERPTR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>UserPtrQueue</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_cleanup_push</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>poll</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>numfds</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"poll error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_DQBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot dequeue buffer: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>userptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>GetBufferPTS</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>MmapThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfds_t</name></type> <name>numfds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>GetFdVBI</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numfds</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>poll</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>numfds</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"poll error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>GrabVideo</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bufv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GrabVBI</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ReadThread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfds_t</name></type> <name>numfds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>GetFdVBI</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numfds</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>poll</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>numfds</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"poll error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"read error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v4l2_read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>sys</name><operator>-&gt;</operator><name>block_flags</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>v4l2_read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GrabVBI</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(

<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

</unit>
