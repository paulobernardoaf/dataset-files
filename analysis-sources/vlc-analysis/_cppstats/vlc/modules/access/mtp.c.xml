<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access\mtp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmtp.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MTP input"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"MTP"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mtp"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator> <name>stream_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_product_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LIBMTP_raw_device_t</name> <modifier>*</modifier></type><name>p_rawdevices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_numrawdevices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>fdp</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu32</name><literal type="string">":%"</literal><name>SCNu8</name><literal type="string">":%"</literal><name>SCNu16</name><literal type="string">":%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_bus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_product_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_track_id</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LIBMTP_Detect_Raw_Devices</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_rawdevices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_numrawdevices</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_numrawdevices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_bus</name> <operator>==</operator> <name><name>p_rawdevices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bus_location</name> <operator>&amp;&amp;</operator>

<name>i_dev</name> <operator>==</operator> <name><name>p_rawdevices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>devnum</name> <operator>&amp;&amp;</operator>

<name>i_product_id</name> <operator>==</operator> <name><name>p_rawdevices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>device_entry</name><operator>.</operator><name>product_id</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>LIBMTP_mtpdevice_t</name> <modifier>*</modifier></type><name>p_device</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_device</name> <operator>=</operator> <call><name>LIBMTP_Open_Raw_Device</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_rawdevices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_device</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>vlc_memfd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"copying to memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LIBMTP_Get_File_To_File_Descriptor</name><argument_list>( <argument><expr><name>p_device</name></expr></argument>, <argument><expr><name>i_track_id</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LIBMTP_Release_Device</name><argument_list>( <argument><expr><name>p_device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_rawdevices</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot find %s"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lseek</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fdp</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCESS_SET_CALLBACKS</name><argument_list>( <argument><expr><name>Read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Control</name></expr></argument>, <argument><expr><name>Seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator> <name>stream_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>( <argument><expr><operator>*</operator><name>fdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>*</operator><name>fdp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><call><name>read</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>errno</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EINTR</name></expr>:</case>

<case>case <expr><name>EAGAIN</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"read failed: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"File reading failed"</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"VLC could not read the file: %s"</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>vlc_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>*</operator><name>fdp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>*</operator><name>fdp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fstat</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"fstat error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"file-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
