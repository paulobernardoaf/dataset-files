<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\text\filesystem.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sort.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>vlc_fopen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rwflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>mode</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><name>rwflags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>rwflags</name> <operator>=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><name>rwflags</name> <operator>=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_EXCL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>rwflags</name> <operator>=</operator> <name>O_RDWR</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>oflags</name> <operator>=</operator> <operator>(</operator><name>oflags</name> <operator>&amp;</operator> <operator>~</operator><name>O_TEXT</name><operator>)</operator> <operator>|</operator> <name>O_BINARY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>oflags</name> <operator>=</operator> <operator>(</operator><name>oflags</name> <operator>&amp;</operator> <operator>~</operator><name>O_BINARY</name><operator>)</operator> <operator>|</operator> <name>O_TEXT</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_open</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>rwflags</name> <operator>|</operator> <name>oflags</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>fdopen</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>stream</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dummy_select</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>str</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compar_void</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>data</name></expr></init>;</function_decl>

<return>return <expr><call><name>cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_loaddir</name><parameter_list>( <parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>namelist</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>select</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>select</name> <operator>=</operator> <name>dummy_select</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rewinddir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>vlc_readdir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>select</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>size</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newtab</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newtab</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>newtab</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>num</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>compar</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_qsort</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compar_void</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>namelist</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>

<label><name>error</name>:</label>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_scandir</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>namelist</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>vlc_opendir</name> <argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_loaddir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>namelist</name></expr></argument>, <argument><expr><name>select</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>closedir</name> <argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<function><type><name>VLC_WEAK</name> <name>int</name></type> <name>vlc_mkstemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name> <init>=

<expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqstruvwxyz_-"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>nbytes</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"statistical bias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>template</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pattern</name> <operator>=</operator> <name>template</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"XXXXXX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_rand</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>( <argument><expr><name>pi_rand</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pi_rand</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>bytes</name><index>[<expr><name><name>pi_rand</name><index>[<expr><name>j</name></expr>]</index></name> <operator>%</operator> <name>nbytes</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_open</name><argument_list>( <argument><expr><name>template</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
