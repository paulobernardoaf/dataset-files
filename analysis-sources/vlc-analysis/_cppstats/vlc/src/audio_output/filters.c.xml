<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\audio_output\filters.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aout_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../video_output/vout_internal.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>CreateFilter</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>outfmt</name></decl></parameter>,

<parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>const_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>vlc_custom_create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <operator>*</operator><name>infmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>infmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <operator>*</operator><name>outfmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>infmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>infmt</name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>infmt</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>outfmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>outfmt</name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>const_fmt</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><name>infmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>FindConverter</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>outfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>CreateFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"audio converter"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>FindResampler</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>outfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modlist</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-resampler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>CreateFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"audio resampler"</literal></expr></argument>, <argument><expr><name>modlist</name></expr></argument>,

<argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>modlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_FiltersPipelineDestroy</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>TryFormat</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>,

<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>output</name> <init>= <expr><operator>*</operator><name>fmt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>codec</name> <operator>!=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>FindConverter</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aout_FiltersPipelineCreate</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>outfmt</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>headphones</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FormatsPrint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"conversion:"</literal></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>-=</operator> <operator>*</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filters</name> <operator>+=</operator> <operator>*</operator><name>count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>input</name> <init>= <expr><operator>*</operator><name>infmt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Can't convert non linear input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>infmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name>

<operator>||</operator> <name><name>infmt</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_chan_mode</name></name>

<operator>||</operator> <name><name>infmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>channel_type</name></name></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>TryFormat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>VLC_CODEC_FL32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find %s for conversion pipeline"</literal></expr></argument>,

<argument><expr><literal type="string">"pre-mix converter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>input</name><operator>.</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>input</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>channel_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_chan_mode</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_chan_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_type</name> <init>=

<expr><ternary><condition><expr><name><name>infmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>channel_type</name></name></expr> ?</condition><then>

<expr><literal type="string">"audio renderer"</literal></expr> </then><else>: <expr><literal type="string">"audio converter"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>headphones</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_ChainParseOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><literal type="string">"{headphones=true}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>CreateFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find %s for conversion pipeline"</literal></expr></argument>,

<argument><expr><literal type="string">"remixer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>output</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>FindConverter</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find %s for conversion pipeline"</literal></expr></argument>,

<argument><expr><literal type="string">"resampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>TryFormat</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>outfmt</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find %s for conversion pipeline"</literal></expr></argument>,

<argument><expr><literal type="string">"post-mix converter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"conversion pipeline complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>overflow</name>:</label>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"maximum of %u conversion filters reached"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio filtering failed"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The maximum number of filters (%u) was reached."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>aout_FiltersPipelineDestroy</name> <argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersPipelinePlay</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>count</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>block</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name><name>filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersPipelineDrain</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>filter_DrainAudio</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPipelinePlay</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>count</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chain</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>block_ChainGather</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_FiltersPipelineFlush</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_Flush</name> <argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_FiltersPipelineChangeViewpoint</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_ChangeViewpoint</name> <argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_FILTERS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>aout_filters</name>

<block>{

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>rate_filter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resampling</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name><name>tab</name><index>[<expr><name>AOUT_MAX_FILTERS</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VisualizationCallback</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"goom"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"projectm"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"vsxu"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"glspectrum"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"effect-list"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"effect-list"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"visual"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-visual"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_InputRequestRestart</name> <argument_list>(<argument><expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>var</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>aout_filter_GetVout</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vout_Create</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vout</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>adj_fmt</name> <init>= <expr><operator>*</operator><name>fmt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_configuration_t</name></type> <name>cfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>vout</name> <operator>=</operator> <name>vout</name></expr>, <expr><operator>.</operator><name>clock</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr>, <expr><operator>.</operator><name>fmt</name> <operator>=</operator> <operator>&amp;</operator><name>adj_fmt</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_AdjustColorSpace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_Request</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_Close</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AppendFilter</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>filters</name></decl></parameter>,

<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>outfmt</name></decl></parameter>,

<parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>max</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"maximum of %u filters reached"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>CreateFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot add user %s \"%s\" (skipped)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FiltersPipelineCreate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,

<argument><expr><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"cannot add user %s \"%s\" (skipped)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>infmt</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AppendRemapFilter</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>filters</name></decl></parameter>,

<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>outfmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>wg4_remap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wg4_to_remap</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>remap</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>needed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AOUT_CHAN_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wg4_remap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>remap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>wg4_remap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>wg4_to_remap</name><index>[<expr><name><name>wg4_remap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>needed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"remap{channel-left=%d,channel-right=%d,"</literal>

<literal type="string">"channel-middleleft=%d,channel-middleright=%d,"</literal>

<literal type="string">"channel-rearleft=%d,channel-rearright=%d,"</literal>

<literal type="string">"channel-rearcenter=%d,channel-center=%d,"</literal>

<literal type="string">"channel-lfe=%d,normalize=false}"</literal></expr></argument>,

<argument><expr><name><name>remap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>remap</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>remap</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>config_ChainCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AppendFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio filter"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>aout_FiltersNewWithClock</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>outfmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>aout_filters_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>filters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>filters</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clock</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <call><name>vlc_clock_CreateSlave</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>aout_FormatPrint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name>infmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>input_format</name> <init>= <expr><operator>*</operator><name>infmt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>output_format</name> <init>= <expr><operator>*</operator><name>outfmt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"visual"</literal></expr></argument>, <argument><expr><name>VisualizationCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>(<argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FormatsPrint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"pass-through:"</literal></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FindConverter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot setup pass-through"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>filters</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>outfmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"No output channel mask, cannot setup filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>output_format</name><operator>.</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_format</name><operator>.</operator><name>channel_type</name></name> <operator>!=</operator> <name><name>output_format</name><operator>.</operator><name>channel_type</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>output_format</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>input_format</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FiltersPipelineCreate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,

<argument><expr><name>AOUT_MAX_FILTERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>,

<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>headphones</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot setup audio renderer pipeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_format</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>input_format</name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown channel map, using the WAVE channel layout."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input_format</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>input_phys_format</name> <init>= <expr><name>input_format</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_SetWavePhysicalChannels</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_phys_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>FindConverter</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_phys_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find channel converter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_format</name> <operator>=</operator> <name>input_phys_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input_format</name><operator>.</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-time-stretch"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AppendFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio filter"</literal></expr></argument>, <argument><expr><literal type="string">"scaletempo"</literal></expr></argument>,

<argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name> <operator>=</operator> <name><name>filters</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendRemapFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>,

<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>remap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_format</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>headphones</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio filter"</literal></expr></argument>, <argument><expr><literal type="string">"binauralizer"</literal></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strsep</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">" :"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio filter"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>visual</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio-visual"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>visual</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendFilter</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"visualization"</literal></expr></argument>, <argument><expr><name>visual</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_format</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>input_format</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FiltersPipelineCreate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,

<argument><expr><name>AOUT_MAX_FILTERS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot setup filtering pipeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_format</name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_format</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <call><name>FindResampler</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_format</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>output_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>input_format</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>outfmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot setup a resampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name> <operator>=</operator> <name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>filters</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>aout_FiltersPipelineDestroy</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"visual"</literal></expr></argument>, <argument><expr><name>VisualizationCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_clock_Delete</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_FiltersResetClock</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_Reset</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_FiltersSetClockDelay</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>aout_FiltersNew</name></cpp:undef>

<function><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>aout_FiltersNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>infmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>outfmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>aout_filters_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>aout_FiltersNewWithClock</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>infmt</name></expr></argument>, <argument><expr><name>outfmt</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>aout_FiltersDelete</name></cpp:undef>

<function><type><name>void</name></type> <name>aout_FiltersDelete</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersPipelineDestroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_FiltersPipelineDestroy</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"visual"</literal></expr></argument>, <argument><expr><name>VisualizationCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_clock_Delete</name><argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>aout_FiltersCanResample</name> <parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>aout_FiltersAdjustResampling</name> <parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adjust</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adjust</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name> <operator>+=</operator> <name>adjust</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersPlay</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nominal_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>!=</operator> <literal type="number">1.f</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>rate_filter</name> <init>= <expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rate_filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>nominal_rate</name> <operator>=</operator> <name><name>rate_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rate_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><name>nominal_rate</name> <operator>*</operator> <name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPipelinePlay</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>+=</operator> <name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPipelinePlay</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>-=</operator> <name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nominal_rate</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>rate_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>nominal_rate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>block</name></expr>;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersDrain</name> <parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>aout_FiltersPipelineDrain</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>+=</operator> <name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPipelinePlay</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chain</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPipelineDrain</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>chain</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>-=</operator> <name><name>filters</name><operator>-&gt;</operator><name>resampling</name></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>chain</name></expr> ?</condition><then> <expr><call><name>block_ChainGather</name> <argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>block</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_FiltersFlush</name> <parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FiltersPipelineFlush</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersPipelineFlush</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_FiltersChangeViewpoint</name> <parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FiltersPipelineChangeViewpoint</name> <argument_list>(<argument><expr><name><name>filters</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>filters</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
