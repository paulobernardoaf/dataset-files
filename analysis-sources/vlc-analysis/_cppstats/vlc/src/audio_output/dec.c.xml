<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\audio_output\dec.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aout_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clock/clock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_Drain</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aout</name><operator>-&gt;</operator><name>drain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>drain</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>aout_DecNew</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>p_replay_gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_map_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>p_format</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_map_channels</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_format</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator>

<operator>||</operator> <name>i_map_channels</name> <operator>&gt;</operator> <name>AOUT_CHAN_MAX</name> <operator>||</operator> <name><name>p_format</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&gt;</operator> <name>INPUT_CHAN_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"invalid audio channels count"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&gt;</operator> <literal type="number">384000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"excessive audio sample frequency (%u)"</literal></expr></argument>,

<argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&lt;</operator> <literal type="number">4000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"too low audio sample frequency (%u)"</literal></expr></argument>,

<argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <call><name>aout_volume_New</name> <argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>p_replay_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>restart</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>input_profile</name></name> <operator>=</operator> <name>profile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filter_format</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>input_format</name></name> <operator>=</operator> <operator>*</operator><name>p_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters_cfg</name></name> <operator>=</operator> <name>AOUT_FILTERS_CFG_INIT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_OutputNew</name> <argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_volume_SetFormat</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <call><name>aout_FiltersNewWithClock</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clock</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>filter_format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>filters_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_OutputDelete</name> <argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>aout_volume_Delete</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>request_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_lost</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_played</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecDelete</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_DecFlush</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersDelete</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_OutputDelete</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_volume_Delete</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aout_CheckReady</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>AOUT_DEC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restart</name> <init>= <expr><call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>restart</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>restart</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FiltersDelete</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restart</name> <operator>&amp;</operator> <name>AOUT_RESTART_OUTPUT</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"restarting output..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_OutputDelete</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filter_format</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>input_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters_cfg</name></name> <operator>=</operator> <name>AOUT_FILTERS_CFG_INIT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_OutputNew</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_volume_SetFormat</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>,

<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart</name> <operator>==</operator> <name>AOUT_RESTART_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>AOUT_DEC_CHANGED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"restarting filters..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <call><name>aout_FiltersNewWithClock</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>filter_format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>filters_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_OutputDelete</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_FiltersSetClockDelay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>status</name></expr> </then><else>: <expr><name>AOUT_DEC_FAILED</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_RequestRestart</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_fetch_or_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>restart</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"restart requested (%u)"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_StopResampling</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FiltersAdjustResampling</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>aout_DecSynchronize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>dec_pts</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_DecSilence</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>frames</name> <init>= <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name>frames</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name>

<operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"inserting %zu zeroes"</literal></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>system_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>system_pts</name> <init>=

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>,

<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>play</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>system_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aout_DecSynchronize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>dec_pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>play_date</name> <init>=

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name> <operator>+</operator> <name>delay</name></expr></argument>,

<argument><expr><name>dec_pts</name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>jitter</name> <init>= <expr><name>play_date</name> <operator>-</operator> <name>system_now</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jitter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_DecSilence</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>jitter</name></expr></argument>, <argument><expr><name>dec_pts</name> <operator>-</operator> <name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_RequestRetiming</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>system_now</name> <operator>+</operator> <name>delay</name></expr></argument>, <argument><expr><name>dec_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_RequestRetiming</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_ts</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>audio_ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>drift</name> <init>=

<expr><operator>-</operator><call><name>vlc_clock_Update</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_ts</name></expr></argument>, <argument><expr><name>audio_ts</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>drift</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>owner</name><operator>-&gt;</operator><name>bitexact</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>drift</name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><call><name>lroundf</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">3</literal> <operator>*</operator> <name>AOUT_MAX_PTS_DELAY</name> <operator>/</operator> <name>rate</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"playback way too late (%"</literal><name>PRId64</name><literal type="string">"): "</literal>

<literal type="string">"flushing buffers"</literal></expr></argument>, <argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"playback too late (%"</literal><name>PRId64</name><literal type="string">"): "</literal>

<literal type="string">"flushing buffers"</literal></expr></argument>, <argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>aout_DecFlush</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_StopResampling</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drift</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><call><name>lroundf</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>AOUT_MAX_PTS_ADVANCE</name> <operator>/</operator> <name>rate</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"playback way too early (%"</literal><name>PRId64</name><literal type="string">"): "</literal>

<literal type="string">"playing silence"</literal></expr></argument>, <argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_DecSilence</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>-</operator><name>drift</name></expr></argument>, <argument><expr><name>audio_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_StopResampling</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aout_FiltersCanResample</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drift</name> <operator>&gt;</operator> <operator>+</operator><name>AOUT_MAX_PTS_DELAY</name>

<operator>&amp;&amp;</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>!=</operator> <name>AOUT_RESAMPLING_UP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"playback too late (%"</literal><name>PRId64</name><literal type="string">"): up-sampling"</literal></expr></argument>,

<argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_start_drift</name></name> <operator>=</operator> <operator>+</operator><name>drift</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drift</name> <operator>&lt;</operator> <operator>-</operator><name>AOUT_MAX_PTS_ADVANCE</name>

<operator>&amp;&amp;</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>!=</operator> <name>AOUT_RESAMPLING_DOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"playback too early (%"</literal><name>PRId64</name><literal type="string">"): down-sampling"</literal></expr></argument>,

<argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_start_drift</name></name> <operator>=</operator> <operator>-</operator><name>drift</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>==</operator> <name>AOUT_RESAMPLING_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>llabs</name> <argument_list>(<argument><expr><name>drift</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_start_drift</name></name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"timing screwed (drift: %"</literal><name>PRId64</name><literal type="string">" us): "</literal>

<literal type="string">"stopping resampling"</literal></expr></argument>, <argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_StopResampling</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adj</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>==</operator> <name>AOUT_RESAMPLING_UP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">2</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <call><name>llabs</name> <argument_list>(<argument><expr><name>drift</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_start_drift</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>adj</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aout_FiltersAdjustResampling</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>adj</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>resamp_type</name></name> <operator>=</operator> <name>AOUT_RESAMPLING_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"resampling stopped (drift: %"</literal><name>PRId64</name><literal type="string">" us)"</literal></expr></argument>, <argument><expr><name>drift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>aout_DecPlay</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>input_format</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>aout_CheckReady</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>AOUT_DEC_FAILED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FiltersChangeViewpoint</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>vp</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>aout_FiltersPlay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>original_pts</name> <init>= <expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_volume_Amplify</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>request_delay</name></name> <operator>!=</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>request_delay</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delta</name> <init>= <expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersSetClockDelay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_DecSilence</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_DecSynchronize</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>original_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>play_date</name> <init>=

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>original_pts</name></expr></argument>,

<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>play_date</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>play_date</name> <operator>=</operator> <name>system_now</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>play</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>play_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_played</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_lost</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecGetResetStats</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lost</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>played</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lost</name> <operator>=</operator> <call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_lost</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>played</name> <operator>=</operator> <call><name>atomic_exchange_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>buffers_played</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecChangePause</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>paused</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>paused</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecChangeRate</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecChangeDelay</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>request_delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecFlush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersFlush</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_Reset</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersResetClock</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersSetClockDelay</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>request_delay</name></name> <operator>=</operator> <name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>aout_DecDrain</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_owner_t</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>aout_owner</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>owner</name><operator>-&gt;</operator><name>mixer_format</name><operator>.</operator><name>i_format</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>aout_FiltersDrain</name> <argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>play</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_Drain</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_Reset</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersResetClock</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>original_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
