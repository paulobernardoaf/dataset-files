<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\es_out_source.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"es_out.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_t</name></type> <name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>parent_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>es_out_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>EsOutSourceAdd</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutSourceSend</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSourceDel</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EsOutSourceControl</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EsOutSourceDestroy</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>es_out_t</name> <modifier>*</modifier></type><name>input_EsOutSourceNew</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>parent_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent_out</name> <operator>&amp;&amp;</operator> <name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>es_out_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>add</name> <operator>=</operator> <name>EsOutSourceAdd</name></expr>,

<expr><operator>.</operator><name>send</name> <operator>=</operator> <name>EsOutSourceSend</name></expr>,

<expr><operator>.</operator><name>del</name> <operator>=</operator> <name>EsOutSourceDel</name></expr>,

<expr><operator>.</operator><name>control</name> <operator>=</operator> <name>EsOutSourceControl</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>EsOutSourceDestroy</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>es_out_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_out</name></name> <operator>=</operator> <name>parent_out</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
