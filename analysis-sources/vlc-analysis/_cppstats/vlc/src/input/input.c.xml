<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\input.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_decoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"es_out.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demux.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_renderer_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>

<enum>enum <name>input_create_option</name> <block>{

<decl><name>INPUT_CREATE_OPTION_NONE</name></decl>,

<decl><name>INPUT_CREATE_OPTION_PREPARSING</name></decl>,

<decl><name>INPUT_CREATE_OPTION_THUMBNAILING</name></decl>,

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Preparse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>input_thread_t</name> <modifier>*</modifier></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_thread_events_cb</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>input_create_option</name></name></type> <name>option</name></decl></parameter>,

<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Init</name> <parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>End</name> <parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MainLoop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_interactive</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ControlPop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_control_param_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_deadline</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_postpone_seek</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ControlRelease</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>input_control_param_t</name> <modifier>*</modifier></type><name>p_param</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ControlIsSeekRequest</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>input_control_param_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ControlPause</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>UpdateTitleSeekpointFromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGenericFromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTitleListfromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MRLSections</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>input_source_t</name> <modifier>*</modifier></type><name>InputSourceNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InputSourceInit</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_forced_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_in_can_fail</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InputSourceDestroy</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InputSourceMeta</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SlaveDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SlaveSeek</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InputMetaUser</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InputUpdateMeta</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InputGetExtraFiles</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AppendAttachment</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment_demux</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_new</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_ADD_NOFLAG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_ADD_FORCED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_ADD_CANFAIL</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_ADD_SET_TIME</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>input_SlaveSourceAdd</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>slave_type</name></name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>input_SubtitleFile2Uri</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>input_ChangeState</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_state</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>input_Create</name></cpp:undef>

<function><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,

<parameter><decl><type><name>input_thread_events_cb</name></type> <name>events_cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>events_data</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,

<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,

<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_renderer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Create</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>events_cb</name></expr></argument>, <argument><expr><name>events_data</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>,

<argument><expr><name>INPUT_CREATE_OPTION_NONE</name></expr></argument>, <argument><expr><name>p_resource</name></expr></argument>, <argument><expr><name>p_renderer</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_CreatePreparser</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>input_thread_events_cb</name></type> <name>events_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>events_data</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Create</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>events_cb</name></expr></argument>, <argument><expr><name>events_data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><name>INPUT_CREATE_OPTION_PREPARSING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_CreateThumbnailer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>input_thread_events_cb</name></type> <name>events_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>events_data</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Create</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>events_cb</name></expr></argument>, <argument><expr><name>events_data</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><name>INPUT_CREATE_OPTION_THUMBNAILING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_Start</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>Run</name></expr></init>;</function_decl>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name>Preparse</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>is_running</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>is_running</name></name> <operator>=</operator> <operator>!</operator><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>is_running</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot create input thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_Stop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_control_t</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ControlRelease</name><argument_list>( <argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>wait_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_kill</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_Close</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>is_running</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_deinit</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>interrupt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_SetTime</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>b_fast_seek</name></name> <operator>=</operator> <name>b_fast</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_SetPosition</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name> <operator>=</operator> <name>f_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>b_fast_seek</name></name> <operator>=</operator> <name>b_fast</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_POSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type><name>input_GetItem</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_input</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>input_thread_t</name> <modifier>*</modifier></type><name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,

<parameter><decl><type><name>input_thread_events_cb</name></type> <name>events_cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>events_data</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>input_create_option</name></name></type> <name>option</name></decl></parameter>,

<parameter><decl><type><name>input_resource_t</name> <modifier>*</modifier></type><name>p_resource</name></decl></parameter>,

<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_renderer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>priv</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <call><name>InputSourceNew</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>priv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_name</name> <init>= <expr><call><name>input_item_GetName</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option_str</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>option</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_CREATE_OPTION_PREPARSING</name></expr>:</case>

<expr_stmt><expr><name>option_str</name> <operator>=</operator> <literal type="string">"preparsing "</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CREATE_OPTION_THUMBNAILING</name></expr>:</case>

<expr_stmt><expr><name>option_str</name> <operator>=</operator> <literal type="string">"thumbnailing "</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>option_str</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Creating an input for %s'%s'"</literal></expr></argument>, <argument><expr><name>option_str</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_ApplyOptions</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>events_cb</name></name> <operator>=</operator> <name>events_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>events_data</name></name> <operator>=</operator> <name>events_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>=</operator> <name>option</name> <operator>==</operator> <name>INPUT_CREATE_OPTION_PREPARSING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_thumbnailing</name></name> <operator>=</operator> <name>option</name> <operator>==</operator> <name>INPUT_CREATE_OPTION_THUMBNAILING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_seekpoint_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>INIT_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>is_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>is_stopped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>normal_time</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_out_pace_control</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_thumbnailing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>=</operator> <ternary><condition><expr><name>p_renderer</name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>==</operator> <name>false</name></expr> ?</condition><then>

<expr><call><name>vlc_renderer_item_hold</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>p_viewpoint</name> <init>= <expr><call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_viewpoint</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name> <operator>=</operator> <operator>*</operator><name>p_viewpoint</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_viewpoint_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>||</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_thumbnailing</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rec</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"recursive"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_rec</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_rec</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_rec</name></expr></argument>, <argument><expr><literal type="string">"collapse"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"interact"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>b_preparse_interact</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_resource</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name> <operator>=</operator> <call><name>input_resource_Hold</name><argument_list>( <argument><expr><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name> <operator>=</operator> <call><name>input_resource_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>input_resource_SetInput</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>wait_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_control</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_ConfigVarInit</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_low_delay</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"low-delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetNowPlaying</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetESNowPlaying</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>&amp;&amp;</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"stats"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>input_stats_Create</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name> <operator>=</operator> <call><name>input_EsOutNew</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Destroy</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_input</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>input_item_GetName</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"destroying input for '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_resource_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_stats_Destroy</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_control</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_control_t</name> <modifier>*</modifier></type><name>ctrl</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>control</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ControlRelease</name><argument_list>(<argument><expr><name><name>ctrl</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctrl</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Init</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_out_pace_control</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_set_priority</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MainLoop</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>End</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_SendEventDead</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Preparse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Init</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_playlist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>input_item_ShouldPreparseSubItems</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_IS_PLAYLIST</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b_is_playlist</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_is_playlist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_is_playlist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MainLoop</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>End</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_SendEventDead</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_Stopped</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_stopped</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MainLoopDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_changed</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name><modifier>*</modifier></type> <name>p_priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>p_priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_DEMUXER_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>demux_Demux</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <ternary><condition><expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_DEMUXER_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator> <ternary><condition><expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_DEMUXER_EGENERIC</name></expr> </then><else>: <expr><name>VLC_DEMUXER_EOF</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>demux_TestAndClearFlags</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>INPUT_UPDATE_TITLE_LIST</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UpdateTitleListfromDemux</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_title_demux</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>UpdateTitleSeekpointFromDemux</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateGenericFromDemux</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_EOF</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"EOF reached"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Eos</name><argument_list>(<argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_EGENERIC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ERROR_S</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SlaveDemux</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MainLoopTryRepeat</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_repeat</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-repeat"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_repeat</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"repeating the same input (%d)"</literal></expr></argument>, <argument><expr><name>i_repeat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_repeat</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_repeat</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-repeat"</literal></expr></argument>, <argument><expr><name>i_repeat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title_start</name></name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&gt;=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>,

<argument><expr><name>INPUT_CONTROL_SET_TITLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_seekpoint_start</name></name> <operator>-</operator>

<name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>,

<argument><expr><name>INPUT_CONTROL_SET_SEEKPOINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_SetTime</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_SetPosition</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MainLoopStatistics</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_position</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_GET_POSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f_position</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_position</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_NORMAL_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>normal_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetTimes</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>normal_time</name></name></expr></argument>,

<argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats_t</name></name></type> <name>new_stats</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_stats_Compute</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_stats</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name> <operator>=</operator> <name>new_stats</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventStatistics</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_stats</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MainLoop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_interactive</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_intf_update</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_seek_mdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_interactive</name> <operator>&amp;&amp;</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"start-paused"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ControlPause</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_pause_after_eof</name> <init>= <expr><name>b_interactive</name> <operator>&amp;&amp;</operator>

<call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"play-and-pause"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_paused_at_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_can_demux</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name>input_Stopped</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_state</name> <operator>!=</operator> <name>ERROR_S</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_wakeup</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_state</name> <operator>==</operator> <name>PAUSE_S</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_paused</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_paused</name> <operator>=</operator> <operator>!</operator><call><name>es_out_GetBuffering</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call>

<operator>||</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>b_eof</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_paused</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_force_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MainLoopDemux</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_force_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_can_demux</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_wakeup</name> <operator>=</operator> <call><name>es_out_GetWakeup</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_force_update</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_intf_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_paused_at_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>es_out_GetEmpty</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"waiting decoder fifos to empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_wakeup</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name>INPUT_IDLE_SLEEP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>b_pause_after_eof</name> <operator>&amp;&amp;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pause</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_paused_at_eof</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>PAUSE_S</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"pausing at EOF (pause after each)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Control</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_STATE</name></expr></argument>, <argument><expr><name>param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_paused</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_paused_at_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MainLoopTryRepeat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>now</name> <operator>&gt;=</operator> <name>i_intf_update</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MainLoopStatistics</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_intf_update</name> <operator>=</operator> <name>now</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_deadline</name> <init>= <expr><name>i_wakeup</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_postpone</name> <init>= <expr><call><name>es_out_GetBuffering</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>b_eof</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_postpone</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>now</name> <operator>&lt;</operator> <name>i_last_seek_mdate</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>i_deadline</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i_deadline</name></expr></argument> &gt;</argument_list></name> <name>now</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_deadline</name> <operator>=</operator> <name>now</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b_postpone</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ControlPop</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>i_deadline</name></expr></argument>, <argument><expr><name>b_postpone</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_postpone</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"control type=%d"</literal></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>Control</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>param</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ControlIsSeekRequest</name><argument_list>( <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_seek_mdate</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_intf_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_wakeup</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_wakeup</name> <operator>=</operator> <call><name>es_out_GetWakeup</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>InitSout</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sout"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>keep_sout</name> <init>= <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_renderer_sout</name> <init>= <expr><call><name>vlc_renderer_item_sout</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"#%s"</literal></expr></argument>, <argument><expr><name>psz_renderer_sout</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>keep_sout</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sout-keep"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="string">"vlc:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>=</operator> <call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ERROR_S</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot start stream output instance, "</literal> \

<literal type="string">"aborting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitTitle</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>had_titles</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>p_master</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <name><name>p_master</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name> <operator>=</operator> <name><name>p_master</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>=</operator> <name><name>p_master</name><operator>-&gt;</operator><name>b_can_pace_control</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_can_pause</name></name> <operator>=</operator> <name><name>p_master</name><operator>-&gt;</operator><name>b_can_pause</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_can_rate_control</name></name> <operator>=</operator> <name><name>p_master</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_titles</name> <operator>||</operator> <name><name>p_master</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<macro><name>input_SendEventTitle</name><argument_list>( <argument>p_input</argument>, <argument>&amp;(struct vlc_input_event_title) {

.action = VLC_INPUT_TITLE_NEW_LIST</argument>,

<argument>.list = {

.array = p_master-&gt;title</argument>,

<argument>.count = p_master-&gt;i_title</argument>,

<argument>}</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StartTitle</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title_start</name></name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_TITLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_seekpoint_start</name></name> <operator>-</operator>

<name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_SEEKPOINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name>

<operator>*</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"start-time"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name>

<operator>*</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"stop-time"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name>

<operator>*</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"run-time"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"invalid run-time ignored"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>+=</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"starting at time: %"</literal><name>PRId64</name><literal type="string">"s"</literal></expr></argument>,

<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SetTime</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"invalid stop-time ignored"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SlaveCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave0</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>input_item_slave_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave1</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>input_item_slave_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_slave0</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_slave1</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>p_slave0</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>p_slave1</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slave0</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>&gt;</operator> <name><name>p_slave1</name><operator>-&gt;</operator><name>i_priority</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slave0</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>&lt;</operator> <name><name>p_slave1</name><operator>-&gt;</operator><name>i_priority</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SlaveExists</name><parameter_list>( <parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_slaves</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_slaves</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_uri</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RequestSubRate</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_slave_fps</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_fps</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>f_fps</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;</operator> <literal type="number">1.f</literal> <operator>&amp;&amp;</operator> <name>f_slave_fps</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name> <operator>=</operator> <name>f_fps</name> <operator>/</operator> <name>f_slave_fps</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetSubtitlesOptions</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_fps</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>f_fps</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument>, <argument><expr><name>f_fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RequestSubRate</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-fps"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetVarSlaves</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_slaves</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_slaves</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-slave"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name> <init>= <expr><operator>*</operator><name>ppp_slaves</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slaves</name> <init>= <expr><operator>*</operator><name>p_slaves</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_org</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_delim</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_delim</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_delim</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><ternary><condition><expr><call><name>strstr</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>psz_delim</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>uri</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>=

<expr><call><name>input_item_slave_New</name><argument_list>( <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>SLAVE_TYPE_AUDIO</name></expr></argument>, <argument><expr><name>SLAVE_PRIORITY_USER</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_slave</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_org</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_slaves</name> <operator>=</operator> <name>pp_slaves</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>p_slaves</name> <operator>=</operator> <name>i_slaves</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadSlaves</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_slaves</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name>pp_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-file"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_subtitle</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"forced subtitle: %s"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>input_SubtitleFile2Uri</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>=

<expr><call><name>input_item_slave_New</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>SLAVE_TYPE_SPU</name></expr></argument>,

<argument><expr><name>SLAVE_PRIORITY_USER</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_slave</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-autodetect-file"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_autopath</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-autodetect-path"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>subtitles_Detect</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_autopath</name></expr></argument>, <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pp_slaves</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_slaves</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_subtitle</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_slaves</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name><name>p_curr</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name>p_curr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_autopath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SlaveExists</name><argument_list>( <argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name>p_slave</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetVarSlaves</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_slaves</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_slaves</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>input_item_slave_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>SlaveCompare</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>p_forced</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>( <argument><expr><name>SLAVE_TYPE_AUDIO</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>SLAVE_TYPE_SPU</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"slave type size mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_slaves</name> <operator>&amp;&amp;</operator> <name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>= <expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_flags</name> <init>= <expr><ternary><condition><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>!=</operator> <name>SLAVE_PRIORITY_USER</name></expr>

?</condition><then> <expr><name>SLAVE_ADD_CANFAIL</name></expr> </then><else>: <expr><name>SLAVE_ADD_NOFLAG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_forced</name><index>[<expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_slave</name><operator>-&gt;</operator><name>b_forced</name></name> <operator>||</operator> <name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>==</operator> <name>SLAVE_PRIORITY_USER</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>SLAVE_ADD_FORCED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_SlaveSourceAdd</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>,

<argument><expr><name>i_flags</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddSlave</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_forced</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_forced</name><index>[<expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name>p_slave</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name>i_slaves</name></expr></argument>, <argument><expr><name>pp_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attachment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_attachment_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-srt"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_attachment</name></expr></argument>, <argument><expr><name>pp_attachment</name></expr></argument>,

<argument><expr><call><name>vlc_input_attachment_New</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_attachment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-description"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_attachment</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pp_attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>a</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"attachment://%s"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-description"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_SlaveSourceAdd</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>SLAVE_TYPE_SPU</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_forced</name><index>[ <expr><name>SLAVE_TYPE_SPU</name></expr> ]</index></name></expr> ?</condition><then>

<expr><name>SLAVE_ADD_NOFLAG</name></expr> </then><else>: <expr><name>SLAVE_ADD_FORCED</name></expr></else></ternary></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_forced</name><index>[ <expr><name>SLAVE_TYPE_SPU</name></expr> ]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_attachment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-description"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdatePtsDelay</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_slave</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts_delay</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_pts_delay</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>slave</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_pts_delay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i_pts_delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts_delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_cr_average</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cr-average"</literal></expr></argument> )</argument_list></call> <operator>*</operator> <name>i_pts_delay</name> <operator>/</operator> <name>DEFAULT_PTS_DELAY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_SetJitter</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument>, <argument><expr><name>i_pts_delay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_cr_average</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitPrograms</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_es_out_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UpdatePtsDelay</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_es_out_mode</name> <operator>=</operator> <name>ES_OUT_MODE_AUTO</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_renderer</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prgms</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>prgms</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"programs"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prgm</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>prgms</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>prgm</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>prgm</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_es_out_mode</name> <operator>=</operator> <name>ES_OUT_MODE_PARTIAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>prgms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sout-all"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_es_out_mode</name> <operator>=</operator> <name>ES_OUT_MODE_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_SetMode</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument>, <argument><expr><name>i_es_out_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_es_out_mode</name> <operator>==</operator> <name>ES_OUT_MODE_ALL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_GROUP_ALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_es_out_mode</name> <operator>==</operator> <name>ES_OUT_MODE_PARTIAL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_GROUP_LIST</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>tab</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>program</name> <init>= <expr><call><name>es_out_GetGroupForced</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>program</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_GROUP_LIST</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>program</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Init</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>OPENING_S</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventCache</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Type</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"meta-file"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Input is a meta file: disabling unneeded options"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sout-all"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-slave"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-repeat"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-file"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"sub-autodetect-file"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>InitSout</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name> <operator>=</operator> <call><name>input_EsOutTimeshiftNew</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>master</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>master</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>InputSourceInit</name><argument_list>( <argument><expr><name>master</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InputSourceDestroy</name><argument_list>( <argument><expr><name>master</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>InitTitle</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>input_item_GetDuration</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_SendEventTimes</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>normal_time</name></name></expr></argument>,

<argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>StartTitle</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetSubtitlesOptions</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LoadSlaves</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitPrograms</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_rate</name> <init>= <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_rate</name> <operator>!=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>f_rate</name> <operator>!=</operator> <literal type="number">1.0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f_float</name> <operator>=</operator> <name>f_rate</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_RATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_out_pace_control</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>p_sout</name><operator>-&gt;</operator><name>i_out_pace_nocontrol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"starting in %ssync mode"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>priv</name><operator>-&gt;</operator><name>b_out_pace_control</name></name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>input_item_IsPreparsed</name><argument_list>(<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_meta</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InputMetaUser</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InputSourceMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>master</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InputSourceMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>es_out_ControlSetMeta</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"`%s' successfully opened"</literal></expr></argument>,

<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>PLAYING_S</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ERROR_S</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_SetMode</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out_display</name></expr></argument>, <argument><expr><name>ES_OUT_MODE_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>,

<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_resource_SetInput</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_resource_Release</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>End</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>END_S</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetMode</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_MODE_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>InputSourceDestroy</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InputSourceDestroy</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_SetMode</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name>ES_OUT_MODE_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_stats_Compute</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment_demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>,

<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_resource_SetInput</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_resource_Release</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ControlGetReducedIndexLocked</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>input_control_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_control_t</name> <modifier>*</modifier></type><name>prev_control</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_lt</name> <init>= <expr><name><name>prev_control</name><operator>-&gt;</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_ct</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_lt</name> <operator>==</operator> <name>i_ct</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_STATE</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_RATE</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_POSITION</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_TIME</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_PROGRAM</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_TITLE</name> <operator>||</operator>

<name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_SET_SEEKPOINT</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_JUMP_TIME</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name> <operator>+=</operator> <name><name>prev_control</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_ct</name> <operator>==</operator> <name>INPUT_CONTROL_JUMP_POSITION</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name> <operator>+=</operator> <name><name>prev_control</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_ControlPush</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>input_control_param_t</name> <modifier>*</modifier></type><name>p_param</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_control_t</name></type> <name>c</name> <init>= <expr><block>{

<expr><operator>.</operator><name>i_type</name> <operator>=</operator> <name>i_type</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_param</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>param</name></name> <operator>=</operator> <operator>*</operator><name>p_param</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_next_control_idx</name> <init>= <expr><call><name>ControlGetReducedIndexLocked</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>is_stopped</name></name> <operator>||</operator> <name>i_next_control_idx</name> <operator>&gt;=</operator> <name>INPUT_CONTROL_FIFO_SIZE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>is_stopped</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input control stopped, trashing type=%d"</literal></expr></argument>,

<argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input control fifo overflow, trashing type=%d"</literal></expr></argument>,

<argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_param</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ControlRelease</name><argument_list>( <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>p_param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><name>i_next_control_idx</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>=</operator> <name>i_next_control_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>wait_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ControlPop</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_type</name></decl></parameter>, <parameter><decl><type><name>input_control_param_t</name> <modifier>*</modifier></type><name>p_param</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_deadline</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_postpone_seek</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator> <name>b_postpone_seek</name> <operator>&amp;&amp;</operator> <call><name>ControlIsSeekRequest</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_type</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_stopped</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_deadline</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_cond_timedwait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument>,

<argument><expr><name>i_deadline</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_param</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>param</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_control</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>control</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ControlIsSeekRequest</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_CONTROL_SET_POSITION</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_JUMP_POSITION</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TIME</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_JUMP_TIME</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE_NEXT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE_PREV</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT_NEXT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT_PREV</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_ACTIVATE</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_UP</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_DOWN</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_LEFT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_RIGHT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_POPUP</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_MENU</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlRelease</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>input_control_param_t</name> <modifier>*</modifier></type><name>p_param</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_param</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_CONTROL_ADD_SLAVE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_param</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name><name>p_param</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_RENDERER</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_param</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name><name>p_param</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_UNSET_ES</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_RESTART_ES</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>( <argument><expr><name><name>p_param</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES_LIST</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><name><name>p_param</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>es_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_param</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_ES_CAT_IDS</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_param</name><operator>-&gt;</operator><name>cat_ids</name><operator>.</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlPause</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_control_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_state</name> <init>= <expr><name>PAUSE_S</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pause</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_PAUSE_STATE</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot set pause state"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>es_out_SetPauseState</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument>, <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pause</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot set pause state at es_out level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_state</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlUnpause</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_control_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pause</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_PAUSE_STATE</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot resume"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>ERROR_S</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_ChangeState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>PLAYING_S</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPauseState</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ViewpointApply</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_viewpoint_clip</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_vout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_resource_HoldVouts</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_vout</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>var_Change</name><argument_list>( <argument>pp_vout[i]</argument>, <argument><literal type="string">"viewpoint"</literal></argument>, <argument>VLC_VAR_SETVALUE</argument>,

<argument>(vlc_value_t) { .p_address = NULL }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>input_resource_HoldAout</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>var_Change</name><argument_list>( <argument>p_aout</argument>, <argument><literal type="string">"viewpoint"</literal></argument>, <argument>VLC_VAR_SETVALUE</argument>,

<argument>(vlc_value_t) { .p_address = NULL }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlNav</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>i_type</name>

<operator>-</operator> <name>INPUT_CONTROL_NAV_ACTIVATE</name> <operator>+</operator> <name>DEMUX_NAV_ACTIVATE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>vp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vol_direction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_direction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_CONTROL_NAV_UP</name></expr>:</case>

<expr_stmt><expr><name>vol_direction</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_NAV_DOWN</name></expr>:</case>

<expr_stmt><expr><name>vol_direction</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_NAV_LEFT</name></expr>:</case>

<expr_stmt><expr><name>seek_direction</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>.</operator><name>yaw</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_NAV_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>seek_direction</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>.</operator><name>yaw</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_NAV_ACTIVATE</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_POPUP</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_MENU</name></expr>:</case>

<return>return;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_viewpoint_ch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_resource_HoldVouts</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_vout</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_viewpoint_ch</name>

<operator>&amp;&amp;</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"viewpoint-changeable"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_viewpoint_ch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_viewpoint_ch</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>yaw</name></name> <operator>+=</operator> <name><name>vp</name><operator>.</operator><name>yaw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>pitch</name></name> <operator>+=</operator> <name><name>vp</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>roll</name></name> <operator>+=</operator> <name><name>vp</name><operator>.</operator><name>roll</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>fov</name></name> <operator>+=</operator> <name><name>vp</name><operator>.</operator><name>fov</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ViewpointApply</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>seek_direction</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>it</name> <init>= <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>seek_direction</name> <operator>*</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"short-jump-size"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>Control</name><argument_list>( <argument>p_input</argument>, <argument>INPUT_CONTROL_JUMP_TIME</argument>, <argument>(input_control_param_t) {

.time.b_fast_seek = false</argument>,

<argument>.time.i_val = it

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>vol_direction</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>input_resource_HoldAout</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_resource</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_VolumeUpdate</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>vol_direction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlUpdateRenderer</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_enable</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_enable</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>InitSout</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Failed to start sout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>input_resource_RequestSout</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_resource</name></expr></argument>,

<argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_sout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlInsertDemuxFilter</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name><modifier>*</modifier></type> <name>p_input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_demux_chain</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>p_inputSource</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>master</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_filtered_demux</name> <init>= <expr><call><name>demux_FilterChainNew</name><argument_list>( <argument><expr><name><name>p_inputSource</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>psz_demux_chain</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_filtered_demux</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_inputSource</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>=</operator> <name>p_filtered_demux</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>psz_demux_chain</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Failed to create demux filter %s"</literal></expr></argument>, <argument><expr><name>psz_demux_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_SetEsCatIds</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>is_running</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>is_stopped</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetEsCatIds</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>str_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{

<expr><operator>.</operator><name>cat_ids</name> <operator>=</operator> <block>{ <expr><name>cat</name></expr>, <expr><name>str_ids</name> <operator>?</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str_ids</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_ES_CAT_IDS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ControlSetEsList</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>es_out_SetEsList</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>vlc_es_id_GetSource</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_ES</name></expr></argument>,

<argument><expr><call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ids</name><index>[<expr><name>count</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr> </then><else>: <expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>set_es_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ids_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ids_idx</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>ids_idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>ids</name><index>[<expr><name>ids_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_es_id_GetSource</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>set_es_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>set_es_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>set_es_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_ES</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_ES_LIST</name></expr></argument>, <argument><expr><name>set_es_idx</name></expr></argument>,

<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>input_control_param_t</name></type> <name>param</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_control_date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_force_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_CONTROL_SET_POSITION</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_JUMP_POSITION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>absolute</name> <init>= <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_POSITION</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_POSITION ignored while recording"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_SetPosition</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name></expr></argument>,

<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>b_fast_seek</name></name></expr></argument>, <argument><expr><name>absolute</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_POSITION "</literal>

<literal type="string">"%s%2.1f%% failed"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>absolute</name></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>pos</name><operator>.</operator><name>f_val</name></name> <operator>*</operator> <literal type="number">100.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SlaveSeek</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_TIME</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_JUMP_TIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>absolute</name> <init>= <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_TIME</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_TIME ignored while recording"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>demux_SetTime</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name></expr></argument>,

<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>b_fast_seek</name></name></expr></argument>, <argument><expr><name>absolute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_GET_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_pos</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_length</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>demux_SetPosition</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>f_pos</name></expr></argument>,

<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>b_fast_seek</name></name></expr></argument>,

<argument><expr><name>absolute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_TIME %s%"</literal><name>PRId64</name>

<literal type="string">" failed or not possible"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>absolute</name></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>time</name><operator>.</operator><name>i_val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SlaveSeek</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_STATE</name></expr>:</case>

<switch>switch<condition>( <expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>PLAYING_S</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>PAUSE_S</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ControlUnpause</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>PAUSE_S</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>PLAYING_S</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ControlPause</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"invalid INPUT_CONTROL_SET_STATE"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_RATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>fabsf</name><argument_list>( <argument><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rate_sign</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>f_float</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>rate</name> <operator>&gt;</operator> <name>INPUT_RATE_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot set rate faster"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name>INPUT_RATE_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>rate</name> <operator>&lt;</operator> <name>INPUT_RATE_MIN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot set rate slower"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name>INPUT_RATE_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_rate_sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_rescale_ts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot set negative rate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>rate</name> <operator>*=</operator> <name>i_rate_sign</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rate</name> <operator>!=</operator> <literal type="number">1.f</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator> <operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_can_rate_control</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_rescale_ts</name></name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>priv</name><operator>-&gt;</operator><name>p_sout</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_out_pace_control</name></name> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"cannot change rate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rate</name> <operator>!=</operator> <name><name>priv</name><operator>-&gt;</operator><name>rate</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_rescale_ts</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_RATE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rate</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"ACCESS/DEMUX_SET_RATE failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rate</name> <operator>!=</operator> <name><name>priv</name><operator>-&gt;</operator><name>rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventRate</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_rescale_ts</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rate_source</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>||</operator> <name><name>priv</name><operator>-&gt;</operator><name>b_can_rate_control</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>rate</name></expr> </then><else>: <expr><literal type="number">1.f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_SetRate</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>rate_source</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_PROGRAM</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>,

<argument><expr><name>ES_OUT_SET_GROUP</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<macro><name>demux_Control</name><argument_list>( <argument>priv-&gt;master-&gt;p_demux</argument>,

<argument>DEMUX_SET_GROUP_LIST</argument>,

<argument>(size_t)<literal type="number">1</literal></argument>, <argument>&amp;(const int){ param.val.i_int }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>es_out_SetEs</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_source_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>vlc_es_id_GetSource</name><argument_list>( <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_ES</name></expr></argument>,

<argument><expr><call><name>vlc_es_id_GetInputId</name><argument_list>( <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES_LIST</name></expr>:</case>

<expr_stmt><expr><call><name>ControlSetEsList</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>list</name><operator>.</operator><name>cat</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>list</name><operator>.</operator><name>ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_UNSET_ES</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_UnsetEs</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_RESTART_ES</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_RestartEs</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES_CAT_IDS</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_SetEsCatIds</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>cat_ids</name><operator>.</operator><name>cat</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>cat_ids</name><operator>.</operator><name>str_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_VIEWPOINT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_INITIAL_VIEWPOINT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_UPDATE_VIEWPOINT</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_INITIAL_VIEWPOINT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>viewpoint_changed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_VIEWPOINT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>yaw</name></name> <operator>+=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name><operator>.</operator><name>yaw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>pitch</name></name> <operator>+=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>roll</name></name> <operator>+=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name><operator>.</operator><name>roll</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>viewpoint</name><operator>.</operator><name>fov</name></name> <operator>+=</operator> <name><name>param</name><operator>.</operator><name>viewpoint</name><operator>.</operator><name>fov</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ViewpointApply</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_CATEGORY_DELAY</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>cat_delay</name><operator>.</operator><name>cat</name></name> <operator>==</operator> <name>AUDIO_ES</name>

<operator>||</operator> <name><name>param</name><operator>.</operator><name>cat_delay</name><operator>.</operator><name>cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetDelay</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>cat_delay</name><operator>.</operator><name>cat</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>cat_delay</name><operator>.</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_ES_DELAY</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>es_delay</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetEsDelay</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>es_delay</name><operator>.</operator><name>id</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>es_delay</name><operator>.</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE_NEXT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_TITLE_PREV</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_TITLE(*) ignored while recording"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title</name> <init>= <expr><call><name>demux_GetTitle</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_TITLE_PREV</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_title</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_TITLE_NEXT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_title</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_title</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_title</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_title</name> <operator>&gt;=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_TITLE</name></expr></argument>, <argument><expr><name>i_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT_NEXT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_SET_SEEKPOINT_PREV</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"INPUT_CONTROL_SET_SEEKPOINT(*) ignored while recording"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title</name> <init>= <expr><call><name>demux_GetTitle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint</name> <init>= <expr><call><name>demux_GetSeekpoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_SEEKPOINT_PREV</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_seekpoint_time</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>-&gt;</operator><name><name>seekpoint</name><index>[<expr><name>i_seekpoint</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_input_time</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_seekpoint_time</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_input_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_input_time</name> <operator>&lt;</operator> <name>i_seekpoint_time</name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_seekpoint</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_seekpoint</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>INPUT_CONTROL_SET_SEEKPOINT_NEXT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_seekpoint</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_seekpoint</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_seekpoint</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name>i_seekpoint</name> <operator>&gt;=</operator> <name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>-&gt;</operator><name>i_seekpoint</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_SEEKPOINT</name></expr></argument>, <argument><expr><name>i_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventSeekpoint</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_title</name></expr></argument>, <argument><expr><name>i_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SlaveSeek</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_ADD_SLAVE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_item_slave</name> <init>= <expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_flags</name> <init>= <expr><name>SLAVE_ADD_CANFAIL</name> <operator>|</operator> <name>SLAVE_ADD_SET_TIME</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>b_forced</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>SLAVE_ADD_FORCED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_SlaveSourceAdd</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddSlave</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>p_item_slave</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_SUBS_FPS</name></expr>:</case>

<expr_stmt><expr><call><name>RequestSubRate</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventSubsFPS</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_RECORD_STATE</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name> <operator>!=</operator> <operator>!</operator><operator>!</operator><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>b_can_stream_record</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_RECORD_STATE</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>es_out_SetRecordState</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>b_recording</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SendEventRecord</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_FRAME_NEXT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>PAUSE_S</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetFrameNext</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>PLAYING_S</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ControlPause</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_control_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"invalid state for frame next"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>b_force_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_RENDERER</name></expr>:</case>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name><name>param</name><operator>.</operator><name>val</name><operator>.</operator><name>p_address</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>input_priv</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_item</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>es_out_StopAllEs</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ControlUpdateRenderer</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_FilterDisable</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><call><name>vlc_renderer_item_demux_filter</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>=</operator> <call><name>vlc_renderer_item_hold</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ControlUpdateRenderer</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_FilterEnable</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><call><name>vlc_renderer_item_demux_filter</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ControlInsertDemuxFilter</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>,

<argument><expr><call><name>vlc_renderer_item_demux_filter</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_StartAllEs</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_CONTROL_SET_VBI_PAGE</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_SetVbiPage</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>vbi_page</name><operator>.</operator><name>id</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>vbi_page</name><operator>.</operator><name>page</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_SET_VBI_TRANSPARENCY</name></expr>:</case>

<expr_stmt><expr><call><name>es_out_SetVbiTransparency</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out_display</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>vbi_transparency</name><operator>.</operator><name>id</name></name></expr></argument>,

<argument><expr><name><name>param</name><operator>.</operator><name>vbi_transparency</name><operator>.</operator><name>enabled</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_CONTROL_NAV_ACTIVATE</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_UP</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_DOWN</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_LEFT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_RIGHT</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_POPUP</name></expr>:</case>

<case>case <expr><name>INPUT_CONTROL_NAV_MENU</name></expr>:</case>

<expr_stmt><expr><call><name>ControlNav</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"not yet implemented"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ControlRelease</name><argument_list>( <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_force_update</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>UpdateTitleSeekpoint</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_seekpoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_title_end</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>i_title_end</name></name> <operator>-</operator>

<call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint_end</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>i_seekpoint_end</name></name> <operator>-</operator>

<call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_title_end</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_seekpoint_end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_title</name> <operator>&gt;</operator> <name>i_title_end</name> <operator>||</operator>

<operator>(</operator> <name>i_title</name> <operator>==</operator> <name>i_title_end</name> <operator>&amp;&amp;</operator> <name>i_seekpoint</name> <operator>&gt;</operator> <name>i_seekpoint_end</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_seekpoint_end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_seekpoint</name> <operator>&gt;</operator> <name>i_seekpoint_end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_title_end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_title</name> <operator>&gt;</operator> <name>i_title_end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>UpdateTitleSeekpointFromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_TestAndClearFlags</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>INPUT_UPDATE_TITLE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<macro><name>input_SendEventTitle</name><argument_list>( <argument>p_input</argument>, <argument>&amp;(struct vlc_input_event_title) {

.action = VLC_INPUT_TITLE_SELECTED</argument>,

<argument>.selected_idx = demux_GetTitle( p_demux )</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_TestAndClearFlags</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>INPUT_UPDATE_SEEKPOINT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_SendEventSeekpoint</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>demux_GetTitle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>demux_GetSeekpoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>UpdateTitleSeekpoint</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>,

<argument><expr><call><name>demux_GetTitle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>demux_GetSeekpoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGenericFromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_TestAndClearFlags</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>INPUT_UPDATE_META</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InputUpdateMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>strength</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_SIGNAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quality</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strength</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_SendEventSignal</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>strength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTitleListfromDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>had_titles</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>had_titles</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TITLE_INFO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_title_demux</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>InitTitle</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>had_titles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>InputStreamHandleAnchor</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>anchor</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>extra</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>stream_extractor_AttachParsed</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"unable to attach stream-extractors for %s"</literal></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>stream</name><operator>)</operator><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_directory_Attach</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"attachment of directory-extractor failed for %s"</literal></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>stream</name><operator>)</operator><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MRLSections</name><argument_list>( <argument><expr><ternary><condition><expr><name>extra</name></expr> ?</condition><then> <expr><name>extra</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>i_title_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>i_title_end</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>i_seekpoint_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>i_seekpoint_end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>demux_t</name> <modifier>*</modifier></type><name>InputDemuxNew</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_es_out</name></decl></parameter>,

<parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_anchor</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>stream_AccessNew</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_es_out</name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_stream</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>stream_FilterAutoNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>MRLSections</name><argument_list>( <argument><expr><name>psz_anchor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_title_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_title_end</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_seekpoint_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_seekpoint_end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_stream</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filters</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"stream-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_filters</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>stream_FilterChainNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_filters</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filters</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>InputStreamHandleAnchor</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stream</name></expr></argument>, <argument><expr><name>psz_anchor</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-record-native"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>stream_FilterChainNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"record"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><call><name>demux_NewAdvanced</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><name>p_es_out</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>demux</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>demux</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>input_SplitMRL</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>input_source_t</name> <modifier>*</modifier></type><name>InputSourceNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>in</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_mrl</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>str_id</name></name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>str_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>in</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InputSourceInit</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_forced_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_in_can_fail</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_access</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_demux</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_anchor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>master</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>master</name></name> <operator>==</operator> <name>in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_demux_var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_dup</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_SplitMRL</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_anchor</name></expr></argument>, <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_demux</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>psz_demux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_demux</name> <operator>=</operator> <name>psz_demux_var</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"demux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_forced_demux</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_demux</name> <operator>=</operator> <name>psz_forced_demux</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_demux</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_demux</name> <operator>=</operator> <literal type="string">"any"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"`%s' gives access `%s' demux `%s' path `%s'"</literal></expr></argument>,

<argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>master</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-list"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"concat-list"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="string">"%s://%s,%s"</literal></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>,

<argument><expr><name>str</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"concat-list"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <literal type="string">"concat"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"concat"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><name>tab</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InputGetExtraFiles</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_access</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>list</name></expr> ?</condition><then> <expr><name>list</name></expr> </then><else>: <expr><name>psz_mrl</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"concat-list"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"concat-list"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><name>tab</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"%s://%s"</literal></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>es_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>es_out</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name> <operator>=</operator>

<call><name>input_EsOutSourceNew</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>es_out</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>es_out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>=</operator> <call><name>InputDemuxNew</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,

<argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>psz_anchor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_demux_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_in_can_fail</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_Stopped</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your input can't be opened"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC is unable to open the MRL '%s'."</literal>

<literal type="string">" Check the log for details."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_demux_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_renderer_demux</name> <init>= <expr><call><name>vlc_renderer_item_demux_filter</name><argument_list>(

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_renderer_demux</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_demux_chain</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_renderer_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_demux_chain</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_demux_chain</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"demux-filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_demux_chain</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>=</operator> <call><name>demux_FilterChainNew</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>psz_demux_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_demux_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Failed to create demux filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capabilites</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_can_seek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_can_seek</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_can_seek</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_can_seek</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_SEEKABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_CAN_CONTROL_PACE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_CAN_CONTROL_RATE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_rescale_ts</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_rescale_ts</name></name> <operator>=</operator> <operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_rescale_ts</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_CAN_PAUSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pause</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>b_can_pause</name></name> <operator>||</operator> <operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_PAUSEABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_CHANGE_RATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_rescale_ts</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_REWINDABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_CAN_RECORD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>b_can_stream_record</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_stream_record</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-record-native"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_stream_record</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_RECORDABLE</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>b_can_stream_record</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capabilites</name> <operator>|=</operator> <name>VLC_INPUT_CAPABILITIES_RECORDABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>input_SendEventCapabilities</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>capabilites</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_preparsing</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TITLE_INFO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_title_demux</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_PTS_DELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>&gt;</operator> <name>INPUT_PTS_DELAY_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>=</operator> <name>INPUT_PTS_DELAY_MAX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachment</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_ATTACHMENTS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_attachment</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendAttachment</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment_demux</name></expr></argument>,

<argument><expr><name>i_attachment</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_FPS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>f_fps</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"clock-synchro"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_can_pace_control</name></name> <operator>=</operator> <operator>!</operator><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"clock-synchro"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_source_t</name> <modifier>*</modifier></type><name>input_source_Hold</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>in</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_source_Release</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_atomic_rc_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>str_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_source_GetStrId</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>in</name><operator>-&gt;</operator><name>str_id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_source_GetNewAutoId</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>in</name><operator>-&gt;</operator><name>auto_id</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_source_IsCatAutoselected</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>in</name><operator>-&gt;</operator><name>autoselect_cats</name><index>[<expr><name>cat</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputSourceDestroy</name><parameter_list>( <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_slave_es_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_title</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputSourceMeta</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_meta</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_META</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_meta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_unsupported</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_unsupported</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_unsupported</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>has_meta</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_unsupported</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_meta_t</name> <modifier>*</modifier></type><name>p_demux_meta</name> <init>=

<expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_demux_meta</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"demux meta"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_demux_meta</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_id3</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>p_demux_meta</name></expr></argument>, <argument><expr><literal type="string">"meta reader"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_id3</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>i_attachments</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendAttachment</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment_demux</name></expr></argument>,

<argument><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_id3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_demux_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SlaveDemux</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"demux doesn't like DEMUX_GET_TIME"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_slave</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>slave</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>sub_rate</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>b_slave_sub</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>b_can_rate_control</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>sub_rate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>new_rate</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_RATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>sub_rate</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>slave_subs_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stime</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stime</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"slave[%d] doesn't like "</literal>

<literal type="string">"DEMUX_GET_TIME -&gt; EOF"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stime</name> <operator>&gt;=</operator> <name>i_time</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>demux_Demux</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>demux_Demux</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"slave %d EOF"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SlaveSeek</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"demux doesn't like DEMUX_GET_TIME"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_slave</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>slave</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"seek failed for slave %d -&gt; EOF"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputMetaUser</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>i_meta</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> }</block> <decl><name><name>p_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>vlc_meta_Title</name></expr>, <expr><literal type="string">"meta-title"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_Artist</name></expr>, <expr><literal type="string">"meta-artist"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_Genre</name></expr>, <expr><literal type="string">"meta-genre"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_Copyright</name></expr>, <expr><literal type="string">"meta-copyright"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_Description</name></expr>, <expr><literal type="string">"meta-description"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_Date</name></expr>, <expr><literal type="string">"meta-date"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>vlc_meta_URL</name></expr>, <expr><literal type="string">"meta-url"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_meta</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AppendAttachment</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment_demux</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_new</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachment</name> <init>= <expr><operator>*</operator><name>pi_attachment</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_attachment</name> <operator>+</operator> <name>i_new</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_att</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>ppp_attachment</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_att</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator> <name>i_attachment</name> <operator>+</operator> <name>i_new</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>pp_att</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppp_attachment</name> <operator>=</operator> <name>pp_att</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>demux_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attdmx</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>ppp_attachment_demux</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_attdmx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator> <name>i_attachment</name> <operator>+</operator> <name>i_new</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>pp_attdmx</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppp_attachment_demux</name> <operator>=</operator> <name>pp_attdmx</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_new</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pp_att</name><index>[<expr><name>i_attachment</name></expr>]</index></name> <operator>=</operator> <name><name>pp_new</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_attdmx</name><index>[<expr><name>i_attachment</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_demux</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_attachment</name> <operator>=</operator> <name>i_attachment</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_new</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>pp_new</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputUpdateMeta</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_meta</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_META</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachment</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_ATTACHMENTS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_attachment</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment_demux</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p_demux</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment_demux</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>attachment_demux</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AppendAttachment</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attachment_demux</name></expr></argument>,

<argument><expr><name>i_attachment</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_ControlSetMeta</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_es_out</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputGetExtraFilesPattern</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_match</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_stop</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name>i_list</name></expr></argument>, <argument><expr><name>ppsz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_base</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_base</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><operator>&amp;</operator><name><name>psz_base</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_base</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>psz_match</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_end</name> <operator>&gt;=</operator> <name>psz_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_stop</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_probe</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_probe</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>psz_base</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><call><name>get_path</name><argument_list>( <argument><expr><name>psz_probe</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>filepath</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name>vlc_stat</name><argument_list>( <argument><expr><name>filepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>filepath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_probe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"Detected extra file `%s'"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_uri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_list</name></expr></argument>, <argument><expr><name>ppsz_list</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>filepath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_probe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pi_list</name> <operator>=</operator> <name>i_list</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pppsz_list</name> <operator>=</operator> <name>ppsz_list</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InputGetExtraFiles</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>pattern</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_access_force</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stop</name></decl>;</decl_stmt>

}</block> <decl><name><name>patterns</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"concat"</literal></expr>, <expr><literal type="string">".001"</literal></expr>, <expr><literal type="string">"%s.%.3d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">999</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">".part1.rar"</literal></expr>,<expr><literal type="string">"%s.part%.1d.rar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">".part01.rar"</literal></expr>,<expr><literal type="string">"%s.part%.2d.rar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">99</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">".part001.rar"</literal></expr>, <expr><literal type="string">"%s.part%.3d.rar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">999</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">".rar"</literal></expr>, <expr><literal type="string">"%s.r%.2d"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"concat"</literal></expr>, <expr><literal type="string">".mts"</literal></expr>, <expr><literal type="string">"%s.mts%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">999</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><operator>*</operator><name>pi_list</name></expr></argument>, <argument><expr><operator>*</operator><name>pppsz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><operator>*</operator><name>ppsz_access</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_access</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator> <operator>!</operator><name>psz_path</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_path</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>patterns</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pattern</name></name><modifier>*</modifier></type> <name>pat</name> <init>= <expr><operator>&amp;</operator><name><name>patterns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_ext</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>psz_match</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_path</name> <operator>&lt;</operator> <name>i_ext</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_path</name><index>[<expr><name>i_path</name><operator>-</operator><name>i_ext</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>psz_match</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InputGetExtraFilesPattern</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>pi_list</name></expr></argument>, <argument><expr><name>pppsz_list</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>psz_match</name></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>psz_format</name></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>i_stop</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_list</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><operator>-&gt;</operator><name>psz_access_force</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_access</name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>psz_access_force</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_ChangeState</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_state</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>state_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_state</name> <operator>==</operator> <name>i_state</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_state</name> <operator>=</operator> <name>i_state</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_state</name> <operator>==</operator> <name>ERROR_S</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetErrorWhenReading</name><argument_list>( <argument><expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_item</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_SendEventState</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_state</name></expr></argument>, <argument><expr><name>state_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_SplitMRL</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>anchor</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>anchor</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>anchor</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s(\"%s\") probably not a valid URI!\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>demux</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>demux</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>access</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MRLSeekPoint</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>chapter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strtoul</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>title</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>str</name> <operator>==</operator> <name>end</name> <operator>||</operator> <name>u</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>u</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strtoul</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>chapter</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>str</name> <operator>==</operator> <name>end</name> <operator>||</operator> <name>u</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>u</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>chapter</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MRLSections</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_end</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_chapter_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_chapter_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_title_start</name> <operator>=</operator> <operator>*</operator><name>pi_title_end</name> <operator>=</operator> <operator>*</operator><name>pi_chapter_start</name> <operator>=</operator> <operator>*</operator><name>pi_chapter_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>title_start</name></decl>, <decl><type ref="prev"/><name>chapter_start</name></decl>, <decl><type ref="prev"/><name>title_end</name></decl>, <decl><type ref="prev"/><name>chapter_end</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>MRLSeekPoint</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>title_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chapter_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>title_start</name> <operator>=</operator> <name>chapter_start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>MRLSeekPoint</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>title_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chapter_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>title_end</name> <operator>=</operator> <name>chapter_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_title_start</name> <operator>=</operator> <name>title_start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_title_end</name> <operator>=</operator> <name>title_end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_chapter_start</name> <operator>=</operator> <name>chapter_start</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_chapter_end</name> <operator>=</operator> <name>chapter_end</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>input_SlaveSourceAdd</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_forced_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_can_fail</name> <init>= <expr><name>i_flags</name> <operator>&amp;</operator> <name>SLAVE_ADD_CANFAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_forced</name> <init>= <expr><name>i_flags</name> <operator>&amp;</operator> <name>SLAVE_ADD_FORCED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_set_time</name> <init>= <expr><name>i_flags</name> <operator>&amp;</operator> <name>SLAVE_ADD_SET_TIME</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SLAVE_TYPE_SPU</name></expr>:</case>

<expr_stmt><expr><name>psz_forced_demux</name> <operator>=</operator> <literal type="string">"subtitle"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>psz_forced_demux</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"loading %s slave: %s (forced: %d)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>i_cat</name> <operator>==</operator> <name>SPU_ES</name></expr> ?</condition><then> <expr><literal type="string">"spu"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>b_forced</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>p_source</name> <init>= <expr><call><name>InputSourceNew</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_source</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_forced</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_source</name><operator>-&gt;</operator><name>autoselect_cats</name><index>[<expr><name>i_cat</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>InputSourceInit</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>,

<argument><expr><name>psz_forced_demux</name></expr></argument>,

<argument><expr><name>b_can_fail</name> <operator>||</operator> <name>psz_forced_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_forced_demux</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InputSourceInit</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>b_can_fail</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"failed to add %s as slave"</literal></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>SLAVE_TYPE_AUDIO</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_set_time</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"demux doesn't like DEMUX_GET_TIME"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InputSourceDestroy</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name><name>p_source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>,

<argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"seek failed for new slave"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InputSourceDestroy</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>InputUpdateMeta</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_source</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_source</name><operator>-&gt;</operator><name>b_slave_sub</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>i_slave</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>slave</name></name></expr></argument>, <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>input_SubtitleFile2Uri</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_idxpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_extension</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_extension</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_extension</name></expr></argument>, <argument><expr><literal type="string">".sub"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_idxpath</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_idxpath</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_extension</name> <operator>=</operator> <name>psz_extension</name> <operator>-</operator> <name>psz_subtitle</name> <operator>+</operator> <name>psz_idxpath</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_extension</name></expr></argument>, <argument><expr><literal type="string">".idx"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_stat</name><argument_list>( <argument><expr><name>psz_idxpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"using %s as subtitle file instead of %s"</literal></expr></argument>,

<argument><expr><name>psz_idxpath</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name>psz_idxpath</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_uri</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_GetAttachments</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attachments_count</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attachments_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>attachments</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>attachments</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>attachments_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>attachments</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attachments_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>attachments</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>vlc_input_attachment_Duplicate</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>attachments_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>input_GetAttachment</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>i_attachment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>attachment</name> <init>=

<expr><call><name>vlc_input_attachment_Duplicate</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>attachment</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
