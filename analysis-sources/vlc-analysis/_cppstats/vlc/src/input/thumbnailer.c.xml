<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\thumbnailer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_thumbnailer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/background_worker.h"</cpp:file></cpp:include>

<struct>struct <name>vlc_thumbnailer_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>vlc_thumbnailer_params_t</name>

<block>{

<union>union

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name></decl>;</decl_stmt>

}</block>;</union>

<enum>enum

<block>{

<decl><name>VLC_THUMBNAILER_SEEK_TIME</name></decl>,

<decl><name>VLC_THUMBNAILER_SEEK_POS</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>bool</name></type> <name>fast_seek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>input_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_cb</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_thumbnailer_params_t</name>;</typedef>

<struct>struct <name>vlc_thumbnailer_request_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>thumbnailer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_params_t</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_thumbnailer_input_event</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>INPUT_EVENT_THUMBNAIL_READY</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>INPUT_EVENT_STATE</name> <operator>||</operator> <operator>(</operator> <name><name>event</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>value</name></name> <operator>!=</operator> <name>ERROR_S</name> <operator>&amp;&amp;</operator>

<name><name>event</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>value</name></name> <operator>!=</operator> <name>END_S</name> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>request</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>INPUT_EVENT_THUMBNAIL_READY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_Stop</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>thumbnail</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_worker_RequestProbe</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thumbnailer_request_Hold</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thumbnailer_request_Release</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>request</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_Close</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>request</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thumbnailer_request_Start</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_t</name><modifier>*</modifier></type> <name>thumbnailer</name> <init>= <expr><name>owner</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>request</name> <init>= <expr><name>entity</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_t</name><modifier>*</modifier></type> <name>input</name> <init>= <expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name> <operator>=</operator>

<call><name>input_CreateThumbnailer</name><argument_list>( <argument><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,

<argument><expr><name>on_thumbnailer_input_event</name></expr></argument>, <argument><expr><name>request</name></expr></argument>,

<argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>input_item</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>input</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>VLC_THUMBNAILER_SEEK_TIME</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_SetTime</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>time</name></name></expr></argument>,

<argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>fast_seek</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>VLC_THUMBNAILER_SEEK_POS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_SetPosition</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>pos</name></name></expr></argument>,

<argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>fast_seek</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>input_Start</name><argument_list>( <argument><expr><name>input</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>request</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thumbnailer_request_Stop</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_Stop</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thumbnailer_request_Probe</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name><name>request</name><operator>-&gt;</operator><name>done</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type>

<name>thumbnailer_RequestCommon</name><parameter_list>( <parameter><decl><type><name>vlc_thumbnailer_t</name><modifier>*</modifier></type> <name>thumbnailer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_thumbnailer_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>request</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>request</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>thumbnailer</name></name> <operator>=</operator> <name>thumbnailer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>input_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>vlc_thumbnailer_params_t</name><operator>*</operator><operator>)</operator><name>params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name><name>request</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><ternary><condition><expr><name><name>params</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>params</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>background_worker_Push</name><argument_list>( <argument><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>request</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>thumbnailer_request_Release</name><argument_list>( <argument><expr><name>request</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>request</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type>

<name>vlc_thumbnailer_RequestByTime</name><parameter_list>( <parameter><decl><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>thumbnailer</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_thumbnailer_seek_speed</name></name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>input_item</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>timeout</name></decl></parameter>,

<parameter><decl><type><name>vlc_thumbnailer_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <macro><name>thumbnailer_RequestCommon</name><argument_list>( <argument>thumbnailer</argument>,

<argument>&amp;(const vlc_thumbnailer_params_t){

.time = time</argument>,

<argument>.type = VLC_THUMBNAILER_SEEK_TIME</argument>,

<argument>.fast_seek = speed == VLC_THUMBNAILER_SEEK_FAST</argument>,

<argument>.input_item = input_item</argument>,

<argument>.timeout = timeout</argument>,

<argument>.cb = cb</argument>,

<argument>.user_data = user_data</argument>,

<argument>}</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<function><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type>

<name>vlc_thumbnailer_RequestByPos</name><parameter_list>( <parameter><decl><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>thumbnailer</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_thumbnailer_seek_speed</name></name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>input_item</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>timeout</name></decl></parameter>,

<parameter><decl><type><name>vlc_thumbnailer_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <macro><name>thumbnailer_RequestCommon</name><argument_list>( <argument>thumbnailer</argument>,

<argument>&amp;(const vlc_thumbnailer_params_t){

.pos = pos</argument>,

<argument>.type = VLC_THUMBNAILER_SEEK_POS</argument>,

<argument>.fast_seek = speed == VLC_THUMBNAILER_SEEK_FAST</argument>,

<argument>.input_item = input_item</argument>,

<argument>.timeout = timeout</argument>,

<argument>.cb = cb</argument>,

<argument>.user_data = user_data</argument>,

<argument>}</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_thumbnailer_Cancel</name><parameter_list>( <parameter><decl><type><name>vlc_thumbnailer_t</name><modifier>*</modifier></type> <name>thumbnailer</name></decl></parameter>,

<parameter><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_worker_Cancel</name><argument_list>( <argument><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>vlc_thumbnailer_Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>thumbnailer</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>thumbnailer</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>thumbnailer</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker_config</name></name></type> <name>cfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>default_timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>max_threads</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pf_release</name> <operator>=</operator> <name>thumbnailer_request_Release</name></expr>,

<expr><operator>.</operator><name>pf_hold</name> <operator>=</operator> <name>thumbnailer_request_Hold</name></expr>,

<expr><operator>.</operator><name>pf_start</name> <operator>=</operator> <name>thumbnailer_request_Start</name></expr>,

<expr><operator>.</operator><name>pf_probe</name> <operator>=</operator> <name>thumbnailer_request_Probe</name></expr>,

<expr><operator>.</operator><name>pf_stop</name> <operator>=</operator> <name>thumbnailer_request_Stop</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name> <operator>=</operator> <call><name>background_worker_New</name><argument_list>( <argument><expr><name>thumbnailer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>thumbnailer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>thumbnailer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_thumbnailer_Release</name><parameter_list>( <parameter><decl><type><name>vlc_thumbnailer_t</name> <modifier>*</modifier></type><name>thumbnailer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>thumbnailer</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>thumbnailer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
