<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\event.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEvent</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>events_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>events_cb</name></name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>events_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventDead</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_DEAD</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventCapabilities</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_capabilities</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_CAPABILITIES</argument>,

<argument>.capabilities = i_capabilities

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventTimes</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_normal_time</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_TIMES</argument>,

<argument>.times = { f_position</argument>, <argument>i_time</argument>, <argument>i_normal_time</argument>, <argument>i_length }

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventOutputClock</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>master</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_ts</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>frame_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>frame_rate_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_OUTPUT_CLOCK</argument>,

<argument>.output_clock = { id</argument>, <argument>master</argument>, <argument>system_ts</argument>, <argument>ts</argument>, <argument>rate</argument>,

<argument>frame_rate</argument>, <argument>frame_rate_base }

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventStatistics</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_stats_t</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_STATISTICS</argument>,

<argument>.stats = stats</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventRate</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_RATE</argument>,

<argument>.rate = rate</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventRecord</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_recording</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_RECORD</argument>,

<argument>.record = b_recording

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventTitle</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_TITLE</argument>,

<argument>.title = *title

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventSeekpoint</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_seekpoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_CHAPTER</argument>,

<argument>.chapter = { i_title</argument>, <argument>i_seekpoint }

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventSignal</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>f_quality</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f_strength</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_SIGNAL</argument>,

<argument>.signal = { f_quality</argument>, <argument>f_strength }

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventState</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_state</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>state_date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_STATE</argument>,

<argument>.state = { i_state</argument>, <argument>state_date</argument>, <argument>}</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventCache</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_CACHE</argument>,

<argument>.cache = f_level

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventMeta</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_ITEM_META</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventMetaInfo</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_ITEM_INFO</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventMetaEpg</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_ITEM_EPG</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventSubsFPS</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_SUBS_FPS</argument>,

<argument>.subs_fps = fps</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventProgramAdd</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_PROGRAM</argument>,

<argument>.program = {

.action = VLC_INPUT_PROGRAM_ADDED</argument>,

<argument>.id = i_program</argument>,

<argument>.title = psz_text

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventProgramUpdated</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_PROGRAM</argument>,

<argument>.program = {

.action = VLC_INPUT_PROGRAM_UPDATED</argument>,

<argument>.id = i_program</argument>,

<argument>.title = psz_text

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventProgramDel</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_PROGRAM</argument>,

<argument>.program = {

.action = VLC_INPUT_PROGRAM_DELETED</argument>,

<argument>.id = i_program

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventProgramSelect</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_PROGRAM</argument>,

<argument>.program = {

.action = VLC_INPUT_PROGRAM_SELECTED</argument>,

<argument>.id = i_program

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventProgramScrambled</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_group</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_scrambled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_PROGRAM</argument>,

<argument>.program = {

.action = VLC_INPUT_PROGRAM_SCRAMBLED</argument>,

<argument>.id = i_group</argument>,

<argument>.scrambled = b_scrambled 

}

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventEs</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_es</name></name> <modifier>*</modifier></type><name>es_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_ES</argument>,

<argument>.es = *es_event</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventParsing</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_SUBITEMS</argument>,

<argument>.subitems = p_root</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventVbiPage</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_VBI_PAGE</argument>,

<argument>.vbi_page = page</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventVbiTransparency</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>transparent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_VBI_TRANSPARENCY</argument>,

<argument>.vbi_transparent = transparent</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventVout</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_vout</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_VOUT</argument>,

<argument>.vout = *event</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>input_SendEventBookmark</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>input_SendEvent</name><argument_list>(<argument>p_input</argument>, <argument>&amp;(struct vlc_input_event) {

.type = INPUT_EVENT_BOOKMARK

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

</unit>
