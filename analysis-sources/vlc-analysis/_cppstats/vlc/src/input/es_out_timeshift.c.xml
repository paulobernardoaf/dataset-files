<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\es_out_timeshift.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"es_out.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATTRIBUTE_PACKED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attribute_packed</name></cpp:macro> <cpp:value>__attribute__((__packed__))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attribute_packed</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum

<block>{

<decl><name>C_ADD</name></decl>,

<decl><name>C_SEND</name></decl>,

<decl><name>C_DEL</name></decl>,

<decl><name>C_CONTROL</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl>;</decl_stmt>

}</block></struct></type> <name>ts_cmd_add_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

}</block></struct></type> <name>ts_cmd_del_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_offset</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ts_cmd_send_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_query</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_i64</name></decl>;</decl_stmt>

}</block> <decl><name>int_i64</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

}</block> <decl><name>int_meta</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl>;</decl_stmt>

}</block> <decl><name>int_epg</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name></decl>;</decl_stmt>

}</block> <decl><name>int_epg_evt</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>

}</block> <decl><name>es_bool</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl>;</decl_stmt>

}</block> <decl><name>es_fmt</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_policy</name></decl>;</decl_stmt>

}</block> <decl><name>es_policy</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

}</block></struct></type> <name>ts_cmd_control_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_query</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_jitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cr_average</name></decl>;</decl_stmt>

}</block> <decl><name>jitter</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>f_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_normal_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

}</block> <decl><name>times</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

}</block></struct></type> <name>ts_cmd_privcontrol_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>attribute_packed</name>

<block>{

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>ts_cmd_add_t</name></type> <name>add</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_del_t</name></type> <name>del</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_send_t</name></type> <name>send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_control_t</name></type> <name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_privcontrol_t</name></type> <name>privcontrol</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

}</block></struct></type> <name>ts_cmd_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ts_storage_t</name></name></type> <name>ts_storage_t</name>;</typedef>

<struct>struct <name>ts_storage_t</name>

<block>{

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_file_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_file_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_filew</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_filer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_cmd_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cmd_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cmd_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_tmp_size_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tmp_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pause_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_rate_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_rate_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cmd_delay</name></decl>;</decl_stmt>

}</block></struct></type> <name>ts_thread_t</name>;</typedef>

<struct>struct <name>es_out_id_t</name>

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_tmp_size_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp_path</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_delayed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_input_paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_input_paused_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>input_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>input_rate_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_t</name></type> <name>out</name></decl>;</decl_stmt>

}</block></struct></type> <name>es_out_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name> <parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TsStart</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsAutoStop</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsStop</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsPushCmd</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TsPopCmdLocked</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TsHasCmd</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TsIsUnused</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TsChangePause</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_source_paused</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TsChangeRate</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>src_rate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>TsRun</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ts_storage_t</name> <modifier>*</modifier></type><name>TsStorageNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_tmp_size_max</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsStorageDelete</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePack</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TsStorageIsFull</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TsStorageIsEmpty</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePushCmd</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePopCmd</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdClean</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_cleanup_routine</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>CmdClean</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitAdd</name> <parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdInitSend</name> <parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitDel</name> <parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitPrivControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanAdd</name> <parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanSend</name> <parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdExecuteAdd</name> <parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecuteSend</name> <parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CmdExecuteDel</name> <parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecuteControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecutePrivControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetTmpFile</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>es_out_timeshift_cbs</name></decl>;</decl_stmt>

<function><type><name>es_out_t</name> <modifier>*</modifier></type><name>input_EsOutTimeshiftNew</name><parameter_list>( <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_next_out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>es_out_timeshift_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused_source</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_rate_source</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <name>p_next_out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init_recursive</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_tmp_size_max</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-timeshift-granularity"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tmp_size_max</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name> <operator>=</operator> <literal type="number">50</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_tmp_size_max</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"using timeshift granularity of %d MiB"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"input-timeshift-path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>count</name> <init>= <expr><call><name>GetTempPath</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><call><name>GetTempPath</name><argument_list>( <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <name>count</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>_wgetcwd</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>wpath</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name>wpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>wpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"C:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DIR_SEP_CHAR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"using timeshift path: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"using default timeshift path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>msg_Err( p_input, "SIZEOF("#t")=%d", sizeof(t) )</cpp:value></cpp:define>

S(ts_cmd_t);

S(ts_cmd_control_t);

S(ts_cmd_send_t);

S(ts_cmd_del_t);

S(ts_cmd_add_t);

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsStop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Del</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_es</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_es</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsAutoStop</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CmdInitAdd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsPushCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CmdExecuteAdd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsAutoStop</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdInitSend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsPushCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CmdExecuteSend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsAutoStop</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdInitDel</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsPushCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CmdExecuteDel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>es_out_in_vaControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>p_out</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>control</name></name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>es_out_in_Control</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>es_out_in_vaControl</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedGetEmpty</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_empty</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>&amp;&amp;</operator> <call><name>TsHasCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_GET_EMPTY</name></expr></argument>, <argument><expr><name>pb_empty</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedGetWakeup</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_wakeup</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pace_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_wakeup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_wakeup</name> <operator>=</operator> <call><name>es_out_GetWakeup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedGetBuffering</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_buffering</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_buffering</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_buffering</name> <operator>=</operator> <call><name>es_out_GetBuffering</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedSetPauseState</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_source_paused</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_source_paused</name> <operator>==</operator> <operator>!</operator><name>b_paused</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_SetPauseState</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>b_source_paused</name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pace_control</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsStart</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>TsChangePause</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><name>b_source_paused</name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"EsOutTimeshift does not work with streams that have pace control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused_source</name></name> <operator>=</operator> <name>b_source_paused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused</name></name> <operator>=</operator> <name>b_paused</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedSetRate</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>src_rate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>&amp;&amp;</operator> <name>src_rate</name> <operator>==</operator> <name>rate</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_SetRate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>input_priv</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_can_pace_control</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsStart</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>TsChangeRate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"EsOutTimeshift does not work with streams that have pace control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_rate_source</name></name> <operator>=</operator> <name>src_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLockedSetFrameNext</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_SetFrameNext</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_SET_GROUP</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_PCR</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_GROUP_PCR</name></expr>:</case>

<case>case <expr><name>ES_OUT_RESET_PCR</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_GROUP_META</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG_EVENT</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_EPG_TIME</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_SCRAMBLED_STATE</name></expr>:</case>

<case>case <expr><name>ES_OUT_DEL_GROUP</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_META</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_UNSET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_RESTART_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_DEFAULT</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_STATE</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_CAT_POLICY</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CmdInitControl</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsPushCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CmdExecuteControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_ES_STATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_enabled</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pb_enabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>pb_enabled</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_VOUT_SET_MOUSE_EVENT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mouse_event</name></type> <name>cb</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_mouse_event</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_SET_MOUSE_EVENT</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_VOUT_ADD_OVERLAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>subpicture_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_ADD_OVERLAY</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_VOUT_DEL_OVERLAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>channel</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_VOUT_DEL_OVERLAY</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_SPU_SET_HIGHLIGHT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>p_hl</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ES_OUT_SPU_SET_HIGHLIGHT</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_hl</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_EMPTY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_empty</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ControlLockedGetEmpty</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>pb_empty</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_GET_PCR_SYSTEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>ES_OUT_POST_SUBNODE</name></expr>:</case>

<return>return <expr><call><name>es_out_in_vaControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_MODIFY_PCR_SYSTEM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_absolute</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_system</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_absolute</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>b_absolute</name></expr></argument>,

<argument><expr><name>i_system</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsAutoStop</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ControlLocked</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PrivControlLocked</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_PRIV_SET_MODE</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_TIMES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_JITTER</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_EOS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CmdInitPrivControl</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsPushCmd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CmdExecutePrivControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_GET_WAKE_UP</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_wakeup</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ControlLockedGetWakeup</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>pi_wakeup</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_GET_BUFFERING</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_buffering</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ControlLockedGetBuffering</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>pb_buffering</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_SET_PAUSE_STATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_source_paused</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_paused</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_date</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ControlLockedSetPauseState</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>b_source_paused</name></expr></argument>, <argument><expr><name>b_paused</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_SET_RATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>src_rate</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>rate</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ControlLockedSetRate</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_SET_FRAME_NEXT</name></expr>:</case>

<block>{<block_content>

<return>return <expr><call><name>ControlLockedSetFrameNext</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_GET_GROUP_FORCED</name></expr>:</case>

<return>return <expr><call><name>es_out_vaPrivControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_PRIV_SET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_UNSET_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_RESTART_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_ES_CAT_IDS</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_ES_LIST</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_STOP_ALL_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_START_ALL_ES</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_ES_DELAY</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_DELAY</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_RECORD_STATE</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_VBI_PAGE</name></expr>:</case>

<case>case <expr><name>ES_OUT_PRIV_SET_VBI_TRANSPARENCY</name></expr>:</case>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PrivControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsAutoStop</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>PrivControlLocked</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>es_out_timeshift_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>add</name> <operator>=</operator> <name>Add</name></expr>,

<expr><operator>.</operator><name>send</name> <operator>=</operator> <name>Send</name></expr>,

<expr><operator>.</operator><name>del</name> <operator>=</operator> <name>Del</name></expr>,

<expr><operator>.</operator><name>control</name> <operator>=</operator> <name>Control</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>Destroy</name></expr>,

<expr><operator>.</operator><name>priv_control</name> <operator>=</operator> <name>PrivControl</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsDestroy</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TsStart</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name> <operator>=</operator> <name>p_ts</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ts</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>psz_tmp_path</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_tmp_path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_paused_source</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_ts</name><operator>-&gt;</operator><name>b_paused</name></name></expr> ?</condition><then> <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>input_rate_source</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>input_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_buffering_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>TsRun</name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"cannot create timeshift thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsDestroy</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsAutoStop</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>es_out_sys_t</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>||</operator> <operator>!</operator><call><name>TsIsUnused</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"es out timeshift: auto stop"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsStop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delayed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsStop</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TsPopCmdLocked</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CmdClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name> <operator>||</operator> <operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TsStorageDelete</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TsDestroy</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsPushCmd</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name> <operator>||</operator> <call><name>TsStorageIsFull</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name></expr></argument>, <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name> <init>= <expr><call><name>TsStorageNew</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>psz_tmp_path</name></name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_tmp_size_max</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_storage</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CmdClean</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name> <operator>=</operator> <name>p_storage</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>TsStoragePack</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_storage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name> <operator>=</operator> <name>p_storage</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TsStoragePushCmd</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name></expr></argument>, <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name> <operator>==</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_w</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TsPopCmdLocked</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TsStorageIsEmpty</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TsStoragePopCmd</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument>, <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>b_flush</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>TsStorageIsEmpty</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_next</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TsStorageDelete</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>TsHasCmd</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_cmd</name> <operator>=</operator> <operator>!</operator><call><name>TsStorageIsEmpty</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_cmd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>TsIsUnused</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_unused</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_unused</name> <operator>=</operator> <operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>&amp;&amp;</operator>

<name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>==</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name> <operator>&amp;&amp;</operator>

<call><name>TsStorageIsEmpty</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_storage_r</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_unused</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TsChangePause</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_source_paused</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_paused</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>b_source_paused</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_SetPauseState</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_SetPauseState</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_paused</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>+=</operator> <name>i_date</name> <operator>-</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_pause_date</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>b_paused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TsChangeRate</name><parameter_list>( <parameter><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>src_rate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>+=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name> <operator>=</operator> <name>src_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>es_out_SetRate</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>TsRun</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_thread_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_date</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_deadline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_buffering</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_buffering</name> <operator>=</operator> <call><name>es_out_GetBuffering</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>||</operator> <name>b_buffering</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TsPopCmdLocked</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_buffering</name> <operator>&amp;&amp;</operator> <name>i_buffering_date</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_buffering_date</name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>i_date</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_buffering_date</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_buffering_delay</name></name> <operator>+=</operator> <name>i_buffering_date</name> <operator>-</operator> <name><name>cmd</name><operator>.</operator><name>i_date</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>b_buffering</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_buffering_date</name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>i_date</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_buffering_date</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>i_date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name> <operator>!=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><name><name>cmd</name><operator>.</operator><name>i_date</name></name> <operator>-</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>=</operator> <name>i_duration</name> <operator>*</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name> <operator>/</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>-</operator> <name>i_duration</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>+</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>+</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_buffering_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>!=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><literal type="string">"es out timeshift: auto reset rate to %f"</literal></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_buffering_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_date</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_out_SetRate</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate_source</name></name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f_float</name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>rate</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_RATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_deadline</name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>i_date</name></name> <operator>+</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_cmd_delay</name></name> <operator>+</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_rate_delay</name></name> <operator>+</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_buffering_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>( <argument><expr><name>cmd_cleanup_routine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>( <argument><expr><name>i_deadline</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>cmd</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>C_ADD</name></expr>:</case>

<expr_stmt><expr><call><name>CmdExecuteAdd</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdCleanAdd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_SEND</name></expr>:</case>

<expr_stmt><expr><call><name>CmdExecuteSend</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdCleanSend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_CONTROL</name></expr>:</case>

<expr_stmt><expr><call><name>CmdExecuteControl</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdCleanControl</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_DEL</name></expr>:</case>

<expr_stmt><expr><call><name>CmdExecuteDel</name><argument_list>( <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ts_storage_t</name> <modifier>*</modifier></type><name>TsStorageNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tmp_path</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_tmp_size_max</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_storage</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_storage</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>GetTmpFile</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_file</name></expr></argument>, <argument><expr><name>psz_tmp_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w+b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>psz_file</name></name> <operator>=</operator> <name>psz_file</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_file_max</name></name> <operator>=</operator> <name>i_tmp_size_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_r</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsStorageDelete</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_storage</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsStorageDelete</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_r</name></name> <operator>&lt;</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TsStoragePopCmd</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CmdClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePack</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name> <operator>&gt;=</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument>, <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_new</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>TsStorageIsFull</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_cmd</name> <operator>&amp;&amp;</operator> <name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>C_SEND</name> <operator>&amp;&amp;</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>+</operator> <name>i_size</name> <operator>&gt;=</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_file_max</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name> <operator>&gt;=</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_max</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>TsStorageIsEmpty</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><name>p_storage</name> <operator>||</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_r</name></name> <operator>&gt;=</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePushCmd</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_cmd_t</name></type> <name>cmd</name> <init>= <expr><operator>*</operator><name>p_cmd</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>TsStorageIsFull</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cmd</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>C_SEND</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>cmd</name><operator>.</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>i_offset</name></name> <operator>=</operator> <call><name>ftell</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_block</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_flush</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fflush</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filew</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name><index>[<expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_w</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TsStoragePopCmd</name><parameter_list>( <parameter><decl><type><name>ts_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>TsStorageIsEmpty</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_cmd</name> <operator>=</operator> <name><name>p_storage</name><operator>-&gt;</operator><name>p_cmd</name><index>[<expr><name><name>p_storage</name><operator>-&gt;</operator><name>i_cmd_r</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>C_SEND</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name></type> <name>block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_flush</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>fseek</name><argument_list>( <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>i_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>fread</name><argument_list>( <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>block</name><operator>.</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_storage</name><operator>-&gt;</operator><name>p_filer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdClean</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>C_ADD</name></expr>:</case>

<expr_stmt><expr><call><name>CmdCleanAdd</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_SEND</name></expr>:</case>

<expr_stmt><expr><call><name>CmdCleanSend</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_CONTROL</name></expr>:</case>

<expr_stmt><expr><call><name>CmdCleanControl</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>C_DEL</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitAdd</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>C_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>in</name></name> <operator>=</operator> <ternary><condition><expr><name>in</name></expr> ?</condition><then> <expr><call><name>input_source_Hold</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <operator>(</operator><name>es_format_t</name><operator>*</operator><operator>)</operator><name>p_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdExecuteAdd</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name><name>p_out</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>add</name></name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>in</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanAdd</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>in</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>add</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdInitSend</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>C_SEND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecuteSend</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanSend</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>send</name><operator>.</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitDel</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>C_DEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>del</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdExecuteDel</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>del</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>del</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>del</name><operator>.</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>C_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>i_query</name></name> <operator>=</operator> <name>i_query</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>in</name></name> <operator>=</operator> <ternary><condition><expr><name>in</name></expr> ?</condition><then> <expr><call><name>input_source_Hold</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_SET_GROUP</name></expr>:</case> 

<case>case <expr><name>ES_OUT_DEL_GROUP</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_PCR</name></expr>:</case> 

<case>case <expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_i64</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_GROUP_PCR</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_i64</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_i64</name><operator>.</operator><name>i_i64</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES_SCRAMBLED_STATE</name></expr>:</case>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_RESET_PCR</name></expr>:</case> 

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_META</name></expr>:</case> 

<case>case <expr><name>ES_OUT_SET_GROUP_META</name></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_SET_GROUP_META</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name> <operator>=</operator> <operator>(</operator><name>vlc_meta_t</name><operator>*</operator><operator>)</operator><name>p_meta</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_epg_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name> <operator>=</operator> <call><name>vlc_epg_Duplicate</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name> <operator>=</operator> <operator>(</operator><name>vlc_epg_t</name><operator>*</operator><operator>)</operator><name>p_epg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG_EVENT</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_epg_event_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name> <operator>=</operator> <call><name>vlc_epg_event_Duplicate</name><argument_list>( <argument><expr><name>p_evt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name> <operator>=</operator> <operator>(</operator><name>vlc_epg_event_t</name><operator>*</operator><operator>)</operator><name>p_evt</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_SET_EPG_TIME</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_i64</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_UNSET_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_RESTART_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_SET_ES_DEFAULT</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES_CAT_POLICY</name></expr>:</case>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_policy</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_policy</name><operator>.</operator><name>i_policy</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES_STATE</name></expr>:</case>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_es</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>es_format_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <name>p_fmt</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecuteControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_query</name> <init>= <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>i_query</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_SET_GROUP</name></expr>:</case> 

<case>case <expr><name>ES_OUT_DEL_GROUP</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_PCR</name></expr>:</case> 

<case>case <expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_i64</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_GROUP_PCR</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_i64</name><operator>.</operator><name>i_int</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_i64</name><operator>.</operator><name>i_i64</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_RESET_PCR</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_GROUP_META</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>i_int</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>i_int</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG_EVENT</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>i_int</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_EPG_TIME</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>i_i64</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_ES_SCRAMBLED_STATE</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_META</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_UNSET_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_RESTART_ES</name></expr>:</case> 

<case>case <expr><name>ES_OUT_SET_ES_DEFAULT</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>p_es</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:

<expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_ES_STATE</name></expr>:</case>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_bool</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_ES_CAT_POLICY</name></expr>:</case>

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_policy</name><operator>.</operator><name>i_cat</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_policy</name><operator>.</operator><name>i_policy</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case> 

<return>return <expr><call><name>es_out_in_Control</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_es</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmdCleanControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>in</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_source_Release</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>i_query</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_SET_GROUP_META</name></expr>:</case>

<case>case <expr><name>ES_OUT_SET_META</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_meta</name><operator>.</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg</name><operator>.</operator><name>p_epg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_GROUP_EPG_EVENT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>int_epg_evt</name><operator>.</operator><name>p_evt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>control</name><operator>.</operator><name>u</name><operator>.</operator><name>es_fmt</name><operator>.</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdInitPrivControl</name><parameter_list>( <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>b_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>C_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>i_date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>i_query</name></name> <operator>=</operator> <name>i_query</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_PRIV_SET_MODE</name></expr>:</case> 

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ES_OUT_PRIV_SET_JITTER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_jitter</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cr_average</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_pts_delay</name></name> <operator>=</operator> <name>i_pts_delay</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_pts_jitter</name></name> <operator>=</operator> <name>i_pts_jitter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_cr_average</name></name> <operator>=</operator> <name>i_cr_average</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_SET_TIMES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_position</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_normal_time</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>f_position</name></name> <operator>=</operator> <name>f_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_time</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_normal_time</name></name> <operator>=</operator> <name>i_normal_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ES_OUT_PRIV_SET_EOS</name></expr>:</case> 

<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmdExecutePrivControl</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>ts_cmd_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_query</name> <init>= <expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>i_query</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ES_OUT_PRIV_SET_MODE</name></expr>:</case> 

<return>return <expr><call><name>es_out_PrivControl</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_PRIV_SET_JITTER</name></expr>:</case>

<return>return <expr><call><name>es_out_PrivControl</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_pts_delay</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_pts_jitter</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>jitter</name><operator>.</operator><name>i_cr_average</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_PRIV_SET_TIMES</name></expr>:</case>

<return>return <expr><call><name>es_out_PrivControl</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>f_position</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_time</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_normal_time</name></name></expr></argument>,

<argument><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>privcontrol</name><operator>.</operator><name>u</name><operator>.</operator><name>times</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ES_OUT_PRIV_SET_EOS</name></expr>:</case> 

<return>return <expr><call><name>es_out_PrivControl</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetTmpFile</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>dirname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <macro><name>asprintf</name><argument_list>( <argument>filename</argument>, <argument><literal type="string">"%s"</literal>DIR_SEP PACKAGE_NAME<literal type="string">"-timeshift.XXXXXX"</literal></argument>,

<argument>dirname</argument> )</argument_list></macro> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mkdir</name><argument_list>( <argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_mkstemp</name><argument_list>( <argument><expr><operator>*</operator><name>filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>filename</name> <operator>=</operator> <macro><name>strdup</name><argument_list>( <argument>DIR_SEP<literal type="string">"tmp"</literal>DIR_SEP PACKAGE_NAME<literal type="string">"-timeshift.XXXXXX"</literal></argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>filename</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_mkstemp</name><argument_list>( <argument><expr><operator>*</operator><name>filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
