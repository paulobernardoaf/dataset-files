<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\vlmshell.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vlm.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../stream_output/stream_output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_Show</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>vlm_ScheduleSearch</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>Save</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Load</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>vlm_ScheduleNew</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ScheduleSetup</name><parameter_list>( <parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>schedule</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>vlm_MediaSearch</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>quotes</name><index>[]</index></name> <init>= <expr><literal type="string">"\"'"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FindCommandEnd</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>psz_sent</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>quote</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>(<argument><expr><name>quotes</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>psz_sent</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_sent</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_sent</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>psz_sent</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <name>quote</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name>quote</name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_sent</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_sent</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_sent</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>quote</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>psz_sent</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Unescape</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>param</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>c</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quote</name> <operator>)</operator> <operator>||</operator> <name>param</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>quote</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>quotes</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <name>quote</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>quote</name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteSyntaxError</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"Wrong command syntax"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ExecuteIsMedia</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_GET_MEDIA_ID</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ExecuteIsSchedule</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><call><name>vlm_ScheduleSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteDel</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_schedule</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_media</name> <operator>=</operator> <call><name>vlm_MediaSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_schedule</name> <operator>=</operator> <call><name>vlm_ScheduleSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_schedule</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_ScheduleDelete</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_schedule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>p_media</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_DEL_MEDIA</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_MEDIAS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_SCHEDULES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_MEDIAS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_SCHEDULES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"del"</literal></expr></argument>, <argument><expr><literal type="string">"%s: media unknown"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"del"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteShow</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_schedule</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_Show</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_media</name> <operator>=</operator> <call><name>vlm_MediaSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_schedule</name> <operator>=</operator> <call><name>vlm_ScheduleSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_schedule</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_Show</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>p_media</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_Show</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_Show</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteHelp</name><parameter_list>( <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>message_child</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MessageAdd</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlm_MessageAdd( *pp_status, vlm_MessageSimpleNew( a ) );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MessageAddChild</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlm_MessageAdd( message_child, vlm_MessageSimpleNew( a ) );</cpp:value></cpp:define>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"help"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message_child</name> <operator>=</operator> <call><name>MessageAdd</name><argument_list>( <argument><expr><literal type="string">"Commands Syntax:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"new (name) broadcast|schedule [properties]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"setup (name) (properties)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"show [(name)|media|schedule]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"del (name)|all|media|schedule"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"control (name) [instance_name] (command)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"save (config_file)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"export"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"load (config_file)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message_child</name> <operator>=</operator> <call><name>MessageAdd</name><argument_list>( <argument><expr><literal type="string">"Media Proprieties Syntax:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"input (input_name)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"inputdel (input_name)|all"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"inputdeln input_number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"output (output_name)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"option (option_name)[=value]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"enabled|disabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"loop|unloop (broadcast only)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"mux (mux_name)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message_child</name> <operator>=</operator> <call><name>MessageAdd</name><argument_list>( <argument><expr><literal type="string">"Schedule Proprieties Syntax:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"enabled|disabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"append (command_until_rest_of_the_line)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"date (year)/(month)/(day)-(hour):(minutes):"</literal>

<literal type="string">"(seconds)|now"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"period (years_aka_12_months)/(months_aka_30_days)/"</literal>

<literal type="string">"(days)-(hours):(minutes):(seconds)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"repeat (number_of_repetitions)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message_child</name> <operator>=</operator> <call><name>MessageAdd</name><argument_list>( <argument><expr><literal type="string">"Control Commands Syntax:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"play [input_number]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"pause"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"stop"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MessageAddChild</name><argument_list>( <argument><expr><literal type="string">"seek [+-](percentage) | [+-](seconds)s | [+-](milliseconds)ms"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteControl</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_arg</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_control</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_argument</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ExecuteIsMedia</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><literal type="string">"%s: media unknown"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_arg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS</name><parameter_list>(<parameter><type><name>txt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( !strcmp( ppsz_arg[i_index], (txt) ) )</cpp:value></cpp:define>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"play"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"pause"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"seek"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_instance</name> <operator>=</operator> <name><name>ppsz_arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <name>i_arg</name> <operator>||</operator> <operator>(</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"play"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"pause"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"seek"</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ExecuteSyntaxError</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IS</name></cpp:undef>

<expr_stmt><expr><name>psz_control</name> <operator>=</operator> <name><name>ppsz_arg</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>i_arg</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_argument</name> <operator>=</operator> <name><name>ppsz_arg</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_media</name> <operator>=</operator> <call><name>vlm_MediaSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument>, <argument><expr><literal type="string">"play"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_input_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>psz_argument</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>psz_argument</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_input</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_input_index</name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>psz_argument</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_argument</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_input_index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_START_MEDIA_BROADCAST_INSTANCE</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument>, <argument><expr><name>i_input_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument>, <argument><expr><literal type="string">"seek"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_argument</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_relative</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_argument</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>psz_argument</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_relative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b_relative</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument>, <argument><expr><literal type="string">"ms"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_new_time</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument>, <argument><expr><literal type="string">"ms"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_time</name> <operator>=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_time</name> <operator>=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_relative</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_GET_MEDIA_INSTANCE_TIME</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_new_time</name> <operator>+=</operator> <name>i_time</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_new_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_SET_MEDIA_INSTANCE_TIME</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument>, <argument><expr><name>i_new_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d_new_position</name> <init>= <expr><call><name>us_atof</name><argument_list>( <argument><expr><name>psz_argument</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_relative</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d_position</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_GET_MEDIA_INSTANCE_POSITION</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_position</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d_new_position</name> <operator>+=</operator> <name>d_position</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>d_new_position</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d_new_position</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>d_new_position</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d_new_position</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_SET_MEDIA_INSTANCE_POSITION</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument>, <argument><expr><name>d_new_position</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_STOP_MEDIA_INSTANCE</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument>, <argument><expr><literal type="string">"pause"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_PAUSE_MEDIA_INSTANCE</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>psz_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><literal type="string">"unknown error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteExport</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_export</name> <init>= <expr><call><name>Save</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"export"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_export</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_export</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteSave</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_save</name> <operator>=</operator> <call><name>Save</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_save</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fputs</name><argument_list>( <argument><expr><name>psz_save</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>EOF</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_save</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"save"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_save</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>f</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"save"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to save to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteLoad</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_open</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to load from file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fstat</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call>

<operator>||</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&gt;=</operator> <name>SSIZE_MAX</name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>psz_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <call><name>read</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><literal type="string">"Read file error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_buffer</name><index>[<expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Load</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><literal type="string">"Error while loading file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"load"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteScheduleProperty</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_schedule</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_property</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_property</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name> <init>= <expr><ternary><condition><expr><name>b_new</name></expr> ?</condition><then> <expr><literal type="string">"new"</literal></expr> </then><else>: <expr><literal type="string">"setup"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_property</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"disabled"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>vlm_ScheduleSetup</name><argument_list>( <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_realloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>i_property</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_line</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz_line</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_property</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>psz_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_property</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>psz_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_line</name> <operator>=</operator> <name>psz_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name><name>ppsz_property</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlm_ScheduleSetup</name><argument_list>( <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>i_property</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_new</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ScheduleDelete</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_schedule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ExecuteSyntaxError</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlm_ScheduleSetup</name><argument_list>( <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>input_state_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"Error while setting the property '%s' to the schedule"</literal></expr></argument>,

<argument><expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteMediaProperty</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_property</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_property</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name> <init>= <expr><ternary><condition><expr><name>b_new</name></expr> ?</condition><then> <expr><literal type="string">"new"</literal></expr> </then><else>: <expr><literal type="string">"setup"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERROR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MISSING</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR</name><parameter_list>( <parameter><type><name>txt</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { *pp_status = vlm_MessageNew( psz_cmd, txt); goto error; } while(0)</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_GET_MEDIA</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cfg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR</name><argument_list>( <argument><expr><literal type="string">"unknown media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MISSING</name><parameter_list>(<parameter><type><name>cmd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if( !psz_value ) ERROR( "missing argument for " cmd ); } while(0)</cpp:value></cpp:define>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_property</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option</name> <init>= <expr><name><name>ppsz_property</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><ternary><condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>i_property</name></expr> ?</condition><then> <expr><name><name>ppsz_property</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"disabled"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MISSING</name><argument_list>( <argument><expr><literal type="string">"input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"inputdel"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"inputdel"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MISSING</name><argument_list>( <argument><expr><literal type="string">"inputdel"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"inputdeln"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MISSING</name><argument_list>( <argument><expr><literal type="string">"inputdeln"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MISSING</name><argument_list>( <argument><expr><literal type="string">"output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>psz_value</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MISSING</name><argument_list>( <argument><expr><literal type="string">"option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_option</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_option</name></name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"loop"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"unloop"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PROP: name=%s unknown\n"</literal></expr></argument>, <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR</name><argument_list>( <argument><expr><literal type="string">"Wrong command syntax"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MISSING</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERROR</name></cpp:undef>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CHANGE_MEDIA</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_media_Delete</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_cfg</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_new</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_DEL_MEDIA</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_media_Delete</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteNew</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_property</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_property</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"\"all\", \"media\" and \"schedule\" are reserved names"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ExecuteIsMedia</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>ExecuteIsSchedule</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"%s: Name already in use"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_type</name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_schedule</name> <init>= <expr><call><name>vlm_ScheduleNew</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_schedule</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"could not create schedule"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ExecuteScheduleProperty</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_property</name></expr></argument>, <argument><expr><name>ppsz_property</name></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_type</name></expr></argument>, <argument><expr><literal type="string">"broadcast"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_media_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_ADD_MEDIA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_media_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"could not create media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_media_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ExecuteMediaProperty</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_property</name></expr></argument>, <argument><expr><name>ppsz_property</name></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"%s: Choose between broadcast or schedule"</literal></expr></argument>, <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExecuteSetup</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_property</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_property</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ExecuteIsSchedule</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_schedule</name> <init>= <expr><call><name>vlm_ScheduleSearch</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ExecuteScheduleProperty</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_schedule</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_property</name></expr></argument>, <argument><expr><name>ppsz_property</name></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>ExecuteIsMedia</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_GET_MEDIA_ID</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><call><name>ExecuteMediaProperty</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_property</name></expr></argument>, <argument><expr><name>ppsz_property</name></expr></argument>, <argument><expr><name>pp_status</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pp_status</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"setup"</literal></expr></argument>, <argument><expr><literal type="string">"%s unknown"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ExecuteCommand</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>,

<parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_message</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_command</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_command_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_command</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_command_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_ppsz_command_len</name> <init>= <expr><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>i_command_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_command</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_ppsz_command_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_buf</name> <operator>||</operator> <operator>!</operator><name>ppsz_command</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_message</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"Memory error"</literal></expr></argument>,

<argument><expr><literal type="string">"allocation failed for command of length %zu"</literal></expr></argument>,

<argument><expr><name>i_command_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_command</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_command</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_command</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_command</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_message</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>success</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_temp</name> <operator>=</operator> <call><name>FindCommandEnd</name><argument_list>( <argument><expr><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_temp</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_message</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"Incomplete command"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>i_command</name> <operator>&lt;</operator> <name>i_ppsz_command_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_command</name><index>[<expr><name>i_command</name></expr>]</index></name> <operator>=</operator> <name>psz_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><name>psz_command</name></expr></argument>, <argument><expr><name>psz_temp</name> <operator>-</operator> <name>psz_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_buf</name><index>[<expr><name>psz_temp</name> <operator>-</operator> <name>psz_command</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Unescape</name> <argument_list>(<argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><name>psz_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_command</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_buf</name> <operator>+=</operator> <name>psz_temp</name> <operator>-</operator> <name>psz_command</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_command</name> <operator>=</operator> <name>psz_temp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i_command_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>psz_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_EXECUTE</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>check</name></type></parameter>, <parameter><type><name>cmd</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp(ppsz_command[0], name ) ) { if( (check) ) goto syntax_error; if( (cmd) ) goto error; goto success; }</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><name>i_command</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_message</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>success</name>;</goto>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"del"</literal></argument>, <argument>(i_command != <literal type="number">2</literal>)</argument>, <argument>ExecuteDel(p_vlm, ppsz_command[<literal type="number">1</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"show"</literal></argument>, <argument>(i_command &gt; <literal type="number">2</literal>)</argument>, <argument>ExecuteShow(p_vlm, i_command &gt; <literal type="number">1</literal> ? ppsz_command[<literal type="number">1</literal>] : NULL, &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"help"</literal></argument>, <argument>(i_command != <literal type="number">1</literal>)</argument>, <argument>ExecuteHelp( &amp;p_message )</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"control"</literal></argument>, <argument>(i_command &lt; <literal type="number">3</literal>)</argument>, <argument>ExecuteControl(p_vlm, ppsz_command[<literal type="number">1</literal>], i_command - <literal type="number">2</literal>, &amp;ppsz_command[<literal type="number">2</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"save"</literal></argument>, <argument>(i_command != <literal type="number">2</literal>)</argument>, <argument>ExecuteSave(p_vlm, ppsz_command[<literal type="number">1</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"export"</literal></argument>, <argument>(i_command != <literal type="number">1</literal>)</argument>, <argument>ExecuteExport(p_vlm, &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"load"</literal></argument>, <argument>(i_command != <literal type="number">2</literal>)</argument>, <argument>ExecuteLoad(p_vlm, ppsz_command[<literal type="number">1</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"new"</literal></argument>, <argument>(i_command &lt; <literal type="number">3</literal>)</argument>, <argument>ExecuteNew(p_vlm, ppsz_command[<literal type="number">1</literal>], ppsz_command[<literal type="number">2</literal>], i_command-<literal type="number">3</literal>, &amp;ppsz_command[<literal type="number">3</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXECUTE</name><argument_list>( <argument><literal type="string">"setup"</literal></argument>, <argument>(i_command &lt; <literal type="number">2</literal>)</argument>, <argument>ExecuteSetup(p_vlm, ppsz_command[<literal type="number">1</literal>], i_command-<literal type="number">2</literal>, &amp;ppsz_command[<literal type="number">2</literal>], &amp;p_message)</argument> )</argument_list></macro>

<if_stmt><else>else

<block>{<block_content>

<expr_stmt><expr><name>p_message</name> <operator>=</operator> <call><name>vlm_MessageNew</name><argument_list>( <argument><expr><name><name>ppsz_command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Unknown VLM command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IF_EXECUTE</name></cpp:undef>

<label><name>success</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pp_message</name> <operator>=</operator> <name>p_message</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>syntax_error</name>:</label>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ExecuteSyntaxError</name><argument_list>( <argument><expr><name><name>ppsz_command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pp_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pp_message</name> <operator>=</operator> <name>p_message</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>vlm_MediaSearch</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>vlm_ScheduleNew</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>p_sched</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlm_schedule_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sched</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sched</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr></argument>, <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument>, <argument><expr><name>p_sched</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_sched</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlm_ScheduleDelete</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>sched</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr></argument>, <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument>, <argument><expr><name>sched</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>i_command</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>command</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sched</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>vlm_ScheduleSearch</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ScheduleSetup</name><parameter_list>( <parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>schedule</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"disabled"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_wday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"%d/%d/%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"period"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_time</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_date</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_wday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_date</name> <operator>=</operator> <name>psz_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_time</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_time</name> <operator>=</operator> <name>psz_value</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_time</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>psz_date</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_date</name></expr></argument>, <argument><expr><literal type="string">"%u/%u/%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>time</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>period</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>time</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>time</name><operator>.</operator><name>tm_mon</name></name><operator>)</operator> <operator>*</operator> <literal type="number">30</literal>

<operator>+</operator> <name><name>time</name><operator>.</operator><name>tm_mday</name></name><operator>)</operator> <operator>*</operator> <literal type="number">24</literal> <operator>+</operator> <name><name>time</name><operator>.</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>time</name><operator>.</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal>

<operator>+</operator> <name><name>time</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"repeat"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>schedule</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"append"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>i_command</name></name></expr></argument>, <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_MessageSimpleNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_message</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_message</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_message</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_message</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_message</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_message</name><operator>-&gt;</operator><name>i_child</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_message</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_message</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_MessageNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name> <init>= <expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_message</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vasprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_message</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_message</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_message</name><operator>-&gt;</operator><name>psz_value</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>p_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_message</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlm_MessageDelete</name><parameter_list>( <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_message</name><operator>-&gt;</operator><name>i_child</name></name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>child</name><index>[<expr><name><name>p_message</name><operator>-&gt;</operator><name>i_child</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_MessageAdd</name><parameter_list>( <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name></decl></parameter>,

<parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_message</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>i_child</name></name></expr></argument>, <argument><expr><name><name>p_message</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_child</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_ShowMedia</name><parameter_list>( <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg_sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_msg</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">"broadcast"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"loop"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_msg_sub</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"inputs"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_sub</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_msg_sub</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"options"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_option</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_sub</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_option</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p_msg_sub</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"instances"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg_instance</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>position</name> <init>= <expr><call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name> <init>= <expr><call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>chapter</name> <init>= <expr><call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_seek</name> <init>= <expr><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_msg_instance</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_sub</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"instance"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_instance</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"name"</literal></expr></argument> , <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_instance</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"state"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>state</name> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr> ?</condition><then> <expr><literal type="string">"playing"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>state</name> <operator>==</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr> ?</condition><then> <expr><literal type="string">"paused"</literal></expr> </then><else>:

<expr><literal type="string">"stopped"</literal></expr></else></ternary></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_INPUT_INFO</name><parameter_list>( <parameter><type><name>key</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><name>value</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlm_MessageAdd( p_msg_instance, vlm_MessageNew( key, format, value ) )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"rate"</literal></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="string">"%zd"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"chapter"</literal></expr></argument>, <argument><expr><literal type="string">"%zd"</literal></expr></argument>, <argument><expr><name>chapter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPEND_INPUT_INFO</name><argument_list>( <argument><expr><literal type="string">"can-seek"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>can_seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPEND_INPUT_INFO</name></cpp:undef>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_instance</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"playlistindex"</literal></expr></argument>,

<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_msg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_message_t</name> <modifier>*</modifier></type><name>vlm_Show</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>schedule</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg</name> <init>= <expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"show"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_msg</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><call><name>vlm_ShowMedia</name><argument_list>( <argument><expr><name>media</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_msg</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>schedule</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg_schedule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"show"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_schedule</name> <operator>=</operator>

<call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>schedule</name><operator>-&gt;</operator><name>b_enabled</name></name></expr> ?</condition><then>

<expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>schedule</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>date</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>schedule</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><literal type="string">"%d/%d/%d-%d:%d:%d"</literal></expr></argument>,

<argument><expr><name><name>date</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>date</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_min</name></name></expr></argument>,

<argument><expr><name><name>date</name><operator>.</operator><name>tm_sec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>schedule</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>div_t</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>date</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>period</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d/%d/%d-%d:%d:%d"</literal></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_mon</name></name></expr></argument>,

<argument><expr><name><name>date</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>(<argument><expr><literal type="string">"period"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>(<argument><expr><literal type="string">"period"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>i_repeat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"repeat"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_child</name> <operator>=</operator>

<call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>(<argument><expr><literal type="string">"commands"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>schedule</name><operator>-&gt;</operator><name>i_command</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_child</name></expr></argument>,

<argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>msg</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>psz_filter</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_filter</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_msg_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_broadcast</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_msg</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"show"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_msg_child</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"media"</literal></expr></argument>,

<argument><expr><literal type="string">"( %d broadcast )"</literal></expr></argument>, <argument><expr><name>i_broadcast</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>p_msg_child</name></expr></argument>, <argument><expr><call><name>vlm_ShowMedia</name><argument_list>( <argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>p_msg</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>psz_filter</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_filter</name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg_child</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"show"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_child</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>msg_schedule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>next_date</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg_schedule</name> <operator>=</operator> <call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_child</name></expr></argument>,

<argument><expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>b_enabled</name></name></expr> ?</condition><then>

<expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_date</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>date</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>period</name></name><operator>)</operator> <operator>&lt;=</operator> <name>now</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>&gt;</operator> <name>j</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>next_date</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>date</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>period</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>next_date</name> <operator>&gt;</operator> <name>now</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_date</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strftime</name><argument_list>( <argument><expr><name>psz_date</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S (%a)"</literal></expr></argument>,

<argument><expr><call><name>localtime_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>next_date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>msg_schedule</name></expr></argument>,

<argument><expr><call><name>vlm_MessageNew</name><argument_list>( <argument><expr><literal type="string">"next launch"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_date</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>msg</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>psz_filter</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>media</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>schedule</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>show1</name> <init>= <expr><call><name>vlm_Show</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>show2</name> <init>= <expr><call><name>vlm_Show</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_MessageAdd</name><argument_list>( <argument><expr><name>show1</name></expr></argument>, <argument><expr><name><name>show2</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>show2</name><operator>-&gt;</operator><name>child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>show2</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>show2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>show1</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><call><name>vlm_MessageSimpleNew</name><argument_list>( <argument><expr><literal type="string">"show"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Load</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pf</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_end</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_end</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pf</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pf</name> <operator>&amp;&amp;</operator> <call><name>ExecuteCommand</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>message</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>message</name><operator>-&gt;</operator><name>psz_value</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><literal type="string">"Load error on line %d: %s: %s"</literal></expr></argument>,

<argument><expr><name>i_line</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>message</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pf</name> <operator>+=</operator> <name>i_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_line</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>Save</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_header</name> <init>= <expr><literal type="string">"\n"</literal>

<literal type="string">"#VLC media player VLM command batch\n"</literal>

<literal type="string">"#http://www.videolan.org/vlc/\n\n"</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>psz_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"new %s broadcast %sabled"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"en"</literal></expr> </then><else>: <expr><literal type="string">"dis"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">" loop"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s input \"%s\"\n"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s output %s\n"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_option</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s option %s\n"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_option</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_schedule_sys_t</name> <modifier>*</modifier></type><name>schedule</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>schedule</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"new %s schedule date "</literal>

<literal type="string">"%d/%d/%d-%d:%d:%d %sabled\n"</literal></expr></argument>,

<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>schedule</name><operator>-&gt;</operator><name>b_enabled</name></name></expr> ?</condition><then> <expr><literal type="string">"en"</literal></expr> </then><else>: <expr><literal type="string">"dis"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>schedule</name><operator>-&gt;</operator><name>period</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>div_t</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>period</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s "</literal>

<literal type="string">"period %d/%d/%d-%d:%d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>schedule</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s repeat %d"</literal></expr></argument>,

<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>i_repeat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>schedule</name><operator>-&gt;</operator><name>i_command</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"setup %s append %s\n"</literal></expr></argument>,

<argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>schedule</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
