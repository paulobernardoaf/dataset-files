<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\stream_extractor.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STREAM_EXTRACTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_EXTRACTOR_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mrl_helpers.h"</cpp:file></cpp:include>

<struct>struct <name>stream_extractor_private</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name>stream_extractor_t</name></type> <name>extractor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_directory_t</name></type> <name>directory</name></decl>;</decl_stmt>

}</block>;</union>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_init</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_clean</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>wrapper</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>module_t</name><modifier>*</modifier></type> <name>module</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>object</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>

<name>StreamExtractorCreateMRL</name><parameter_list>( <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>subentry</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>escaped</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mrl_EscapeFragmentIdentifier</name><argument_list>( <argument><expr><operator>&amp;</operator><name>escaped</name></expr></argument>, <argument><expr><name>subentry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>escaped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strstr</name><argument_list>( <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"!/%s"</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>escaped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>se_Release</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>pf_clean</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>pf_clean</name></name><argument_list>( <argument><expr><name>priv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>source</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>se_StreamDelete</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>se_Release</name><argument_list>( <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>se_StreamRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>pf_read</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name><modifier>*</modifier></type>

<name>se_StreamBlock</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>eof</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>pf_block</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name></name></expr></argument>, <argument><expr><name>eof</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_StreamSeek</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>pf_seek</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>directory</name><operator>.</operator><name>pf_readdir</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>directory</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_StreamControl</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>pf_control</name></name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_DirControl</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>args</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_InitStream</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>pf_read</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>se_StreamRead</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>se_StreamBlock</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>se_StreamSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>se_StreamControl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>StreamExtractorCreateMRL</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>source</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>identifier</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>se_CleanStream</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>identifier</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_InitDirectory</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_directory_t</name><modifier>*</modifier></type> <name>directory</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>directory</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>se_ReadDir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>se_DirControl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>directory</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>se_AttachWrapper</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>vlc_stream_CommonNew</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>se_StreamDelete</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>priv</name><operator>-&gt;</operator><name>pf_init</name></name><argument_list>( <argument><expr><name>priv</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stream_CommonDelete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>wrapper</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>p_input_item</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>wrapper</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>wrapper</name></name> <operator>=</operator> <call><name>stream_FilterChainNew</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>wrapper</name></name></expr></argument>, <argument><expr><literal type="string">"cache"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>StreamExtractorAttach</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>identifier</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>module_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>extractor</name> <init>= <expr><name>identifier</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>capability</name> <init>= <expr><ternary><condition><expr><name>extractor</name></expr> ?</condition><then> <expr><literal type="string">"stream_extractor"</literal></expr>

</then><else>: <expr><literal type="string">"stream_directory"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_extractor_private</name></name><modifier>*</modifier></type> <name>priv</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(

<argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><operator>*</operator><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>priv</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>capability</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>priv</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>extractor</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pf_init</name></name> <operator>=</operator> <name>se_InitStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pf_clean</name></name> <operator>=</operator> <name>se_CleanStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>source</name></name> <operator>=</operator> <operator>*</operator><name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>identifier</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>extractor</name><operator>.</operator><name>identifier</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>directory</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pf_init</name></name> <operator>=</operator> <name>se_InitDirectory</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pf_clean</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>directory</name><operator>.</operator><name>source</name></name> <operator>=</operator> <operator>*</operator><name>source</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>capability</name></expr></argument>, <argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>||</operator> <call><name>se_AttachWrapper</name><argument_list>( <argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>*</operator><name>source</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>source</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>wrapper</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>se_Release</name><argument_list>( <argument><expr><name>priv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_stream_directory_Attach</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>module_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>StreamExtractorAttach</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module_name</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_stream_extractor_Attach</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>identifier</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>module_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>StreamExtractorAttach</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>module_name</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>stream_extractor_AttachParsed</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>out_extra</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>identifiers</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mrl_FragmentSplit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>identifiers</name></expr></argument>, <argument><expr><name>out_extra</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name>identifiers</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>idx</name> <operator>&lt;</operator> <name>count</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name>identifiers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_extractor_Attach</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name>identifiers</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>identifiers</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>idx</name> <operator>==</operator> <name>count</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type>

<name>vlc_stream_extractor_CreateMRL</name><parameter_list>( <parameter><decl><type><name>stream_directory_t</name><modifier>*</modifier></type> <name>directory</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>subentry</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>StreamExtractorCreateMRL</name><argument_list>( <argument><expr><name><name>directory</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name>subentry</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
