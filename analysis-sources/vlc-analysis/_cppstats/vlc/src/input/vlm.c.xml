<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\vlm.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vlm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlm_event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../stream_output/stream_output.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>Manage</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>new_state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_media</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>p_vlm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_instance_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>player</name> <operator>==</operator> <name>player</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_instance_name</name> <operator>=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_instance_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlm_state_e</name></name></type> <name>vlm_state</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>new_state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>

<expr_stmt><expr><name>vlm_state</name> <operator>=</operator> <ternary><condition><expr><call><name>vlc_player_GetError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VLM_ERROR_S</name></expr> </then><else>: <expr><name>VLM_INIT_S</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>

<expr_stmt><expr><name>vlm_state</name> <operator>=</operator> <name>VLM_OPENING_S</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>

<expr_stmt><expr><name>vlm_state</name> <operator>=</operator> <name>VLM_PLAYING_S</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>

<expr_stmt><expr><name>vlm_state</name> <operator>=</operator> <name>VLM_PAUSE_S</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>

<expr_stmt><expr><name>vlm_state</name> <operator>=</operator> <ternary><condition><expr><call><name>vlc_player_GetError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VLM_ERROR_S</name></expr> </then><else>: <expr><name>VLM_END_S</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlm_SendEventMediaInstanceState</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_instance_name</name></expr></argument>, <argument><expr><name>vlm_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>input_state_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>vlm_mutex</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<function><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm_New</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_vlmconf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp_vlm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_vlm</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlm</name> <operator>=</operator> <operator>*</operator><name>pp_vlm</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vlm</name></expr> )</condition>

<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>users</name></name> <operator>&lt;</operator> <name>UINT_MAX</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>users</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_vlm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_vlm</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"creating VLM"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlm</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_vlm</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"vlm daemon"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vlm</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>users</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>input_state_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>exiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><literal type="string">"intf-event"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Manage</name></expr></argument>, <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_vlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_vlm</name> <operator>=</operator> <name>p_vlm</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_vlmconf</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>p_message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"loading VLM configuration"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_buffer</name></expr></argument>, <argument><expr><literal type="string">"load %s"</literal></expr></argument>, <argument><expr><name>psz_vlmconf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlm_ExecuteCommand</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_message</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"error while loading the configuration file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>p_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_vlm</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlm_Delete</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>users</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>--</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>users</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_vlm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_vlm</name> <operator>==</operator> <name>p_vlm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_vlm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vlm</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_MEDIAS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_CLEAR_SCHEDULES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>exiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_vlm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_vlm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vlm_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_vlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlm_ExecuteCommand</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>,

<parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>ExecuteCommand</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_command</name></expr></argument>, <argument><expr><name>pp_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>Manage</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_object</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>vlm</name> <init>= <expr><operator>(</operator><name>vlm_t</name><operator>*</operator><operator>)</operator><name>p_object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>lastcheck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>exiting</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastcheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_scheduled_commands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_scheduled_commands</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_new_input_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_new_input_index</name> <operator>=</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name> <operator>&amp;&amp;</operator> <name>i_new_input_index</name> <operator>&gt;=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_input_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_new_input_index</name> <operator>&gt;=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>VLM_STOP_MEDIA_INSTANCE</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>VLM_START_MEDIA_BROADCAST_INSTANCE</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>i_new_input_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>nextschedule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>i_schedule</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>real_date</name> <init>= <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_enabled</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_now</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>real_date</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_now</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>period</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><operator>(</operator><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>+</operator> <name>j</name> <operator>*</operator>

<name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>period</name><operator>)</operator> <operator>&lt;=</operator> <name>lastcheck</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_repeat</name> <operator>&gt;</operator> <name>j</name> <operator>||</operator>

<name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_repeat</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>real_date</name> <operator>=</operator> <name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>+</operator> <name>j</name> <operator>*</operator>

<name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>period</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>real_date</name> <operator>&lt;=</operator> <name>now</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>real_date</name> <operator>&gt;</operator> <name>lastcheck</name> <operator>||</operator> <name>b_now</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_command</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_scheduled_commands</name></expr></argument>,

<argument><expr><name>ppsz_scheduled_commands</name></expr></argument>,

<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>command</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>nextschedule</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>real_date</name> <operator>&lt;</operator> <name>nextschedule</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>nextschedule</name> <operator>=</operator> <name>real_date</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while<condition>( <expr><name>i_scheduled_commands</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name> <init>= <expr><name><name>ppsz_scheduled_commands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExecuteCommand</name><argument_list>( <argument><expr><name>vlm</name></expr></argument>, <argument><expr><name>psz_command</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name>i_scheduled_commands</name></expr></argument>,

<argument><expr><name>ppsz_scheduled_commands</name></expr></argument>,

<argument><expr><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>lastcheck</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><name><name>vlm</name><operator>-&gt;</operator><name>input_state_changed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>exiting</name> <operator>=</operator> <name><name>vlm</name><operator>-&gt;</operator><name>exiting</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>nextschedule</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_cond_timedwait_daytime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument>,

<argument><expr><name>nextschedule</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>wait_manage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>vlm</name><operator>-&gt;</operator><name>input_state_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vlm</name><operator>-&gt;</operator><name>lock_manage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while<condition>( <expr><operator>!</operator><name>exiting</name></expr> )</condition>;</do>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>vlm_ControlMediaGetById</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>vlm_ControlMediaGetByName</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_MediaDescriptionCheck</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cfg</name> <operator>||</operator> <operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"schedule"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_OnMediaUpdate</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_SendEventMediaChanged</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaChange</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name> <operator>||</operator> <call><name>vlm_MediaDescriptionCheck</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_media_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_media_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_OnMediaUpdate</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaAdd</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlm_MediaDescriptionCheck</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>vlm_ControlMediaGetByName</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><literal type="string">"invalid media description"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_media</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_vlm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_media</name></expr></argument> )</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Media: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <call><name>vlc_LogHeaderCreate</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_media</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_media_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>p_vlm</name><operator>-&gt;</operator><name>i_id</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_id</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_SendEventMediaAdded</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_OnMediaUpdate</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaDel</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>VLM_STOP_MEDIA_INSTANCE</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlm_SendEventMediaRemoved</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_media_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name></name></expr></argument>, <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_LogDestroy</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaGets</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_dsc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_dsc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dsc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name>i_dsc</name></expr></argument>, <argument><expr><name>pp_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_dsc</name> <init>= <expr><call><name>vlm_media_Duplicate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_dsc</name></expr></argument>, <argument><expr><name>pp_dsc</name></expr></argument>, <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ppp_dsc</name> <operator>=</operator> <name>pp_dsc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_dsc</name> <operator>=</operator> <name>i_dsc</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaClear</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_media</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlMediaDel</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>media</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>cfg</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaGet</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dsc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dsc</name> <operator>=</operator> <call><name>vlm_media_Duplicate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaGetId</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetByName</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>vlm_ControlMediaInstanceGetByName</name><parameter_list>( <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>psz</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_id</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>psz</name> <operator>&amp;&amp;</operator> <name>psz_id</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>vlm_MediaInstanceNew</name><parameter_list>( <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_instance_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <call><name>input_item_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vlc_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <call><name>vlc_player_New</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LOCK_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name></type> <name>cbs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>on_state_changed</name> <operator>=</operator> <name>player_on_state_changed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator>

<call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><name>p_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_instance</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>p_instance</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlm_MediaInstanceDelete</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>had_media</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_media</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_SendEventMediaInstanceStopped</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceStart</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_input_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name> <operator>||</operator> <operator>!</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>b_enabled</name></name> <operator>||</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_input</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_input_index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_input_index</name> <operator>&gt;=</operator> <name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_ControlMediaInstanceGetByName</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_MediaInstanceNew</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_buffer</name></expr></argument>, <argument><expr><literal type="string">"sout=%s"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_output</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_option</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>ppsz_option</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name> <operator>==</operator> <name>i_input_index</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_IsPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_SendEventMediaInstanceStopped</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name> <operator>=</operator> <name>i_input_index</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>ppsz_input</name><index>[<expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>(

<argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>ppsz_input</name><index>[<expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>ppsz_input</name><index>[<expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_index</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_SendEventMediaInstanceStarted</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceStop</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_ControlMediaInstanceGetByName</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlm_MediaInstanceDelete</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstancePause</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_ControlMediaInstanceGetByName</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_TogglePause</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceGetTimePosition</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pi_time</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pd_position</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_ControlMediaInstanceGetByName</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_time</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>pd_position</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pd_position</name> <operator>=</operator> <call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceSetTimePosition</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d_position</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_instance</name> <operator>=</operator> <call><name>vlm_ControlMediaInstanceGetByName</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>i_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>d_position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d_position</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetPosition</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>d_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceGets</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_idsc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_idsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_idsc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name>i_idsc</name></expr></argument>, <argument><expr><name>pp_idsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_instance_sys_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>p_idsc</name> <init>= <expr><call><name>vlm_media_instance_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>d_position</name></name> <operator>=</operator> <call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <call><name>vlc_player_IsPaused</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idsc</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>=</operator> <call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name>i_idsc</name></expr></argument>, <argument><expr><name>pp_idsc</name></expr></argument>, <argument><expr><name>p_idsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ppp_idsc</name> <operator>=</operator> <name>pp_idsc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_instance</name> <operator>=</operator> <name>i_idsc</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlMediaInstanceClear</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_sys_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><call><name>vlm_ControlMediaGetById</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_media</name><operator>-&gt;</operator><name>i_instance</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ControlMediaInstanceStop</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_ControlScheduleClear</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name><name>p_vlm</name><operator>-&gt;</operator><name>i_schedule</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlm_ScheduleDelete</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name><name>p_vlm</name><operator>-&gt;</operator><name>schedule</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlm_vaControlInternal</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_idsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pi_i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pd_double</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_double</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLM_GET_MEDIAS</name></expr>:</case>

<expr_stmt><expr><name>ppp_dsc</name> <operator>=</operator> <operator>(</operator><name>vlm_media_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlm_media_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_int</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaGets</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>ppp_dsc</name></expr></argument>, <argument><expr><name>pi_int</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_CLEAR_MEDIAS</name></expr>:</case>

<return>return <expr><call><name>vlm_ControlMediaClear</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_CHANGE_MEDIA</name></expr>:</case>

<expr_stmt><expr><name>p_dsc</name> <operator>=</operator> <operator>(</operator><name>vlm_media_t</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlm_media_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaChange</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_ADD_MEDIA</name></expr>:</case>

<expr_stmt><expr><name>p_dsc</name> <operator>=</operator> <operator>(</operator><name>vlm_media_t</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlm_media_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaAdd</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>p_dsc</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_DEL_MEDIA</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaDel</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_GET_MEDIA</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_dsc</name> <operator>=</operator> <operator>(</operator><name>vlm_media_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlm_media_t</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaGet</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>pp_dsc</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_GET_MEDIA_ID</name></expr>:</case>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaGetId</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_GET_MEDIA_INSTANCES</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppp_idsc</name> <operator>=</operator> <operator>(</operator><name>vlm_media_instance_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlm_media_instance_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_int</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceGets</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>ppp_idsc</name></expr></argument>, <argument><expr><name>pi_int</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_CLEAR_MEDIA_INSTANCES</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceClear</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_START_MEDIA_BROADCAST_INSTANCE</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_int</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceStart</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>i_int</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_STOP_MEDIA_INSTANCE</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceStop</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_PAUSE_MEDIA_INSTANCE</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstancePause</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_GET_MEDIA_INSTANCE_TIME</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceGetTimePosition</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>pi_i64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_GET_MEDIA_INSTANCE_POSITION</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pd_double</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceGetTimePosition</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pd_double</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_SET_MEDIA_INSTANCE_TIME</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceSetTimePosition</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>i_i64</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_SET_MEDIA_INSTANCE_POSITION</name></expr>:</case>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d_double</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlm_ControlMediaInstanceSetTimePosition</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>d_double</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLM_CLEAR_SCHEDULES</name></expr>:</case>

<return>return <expr><call><name>vlm_ControlScheduleClear</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><literal type="string">"unknown VLM query"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlm_ControlInternal</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_vaControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlm_Control</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>vlm_vaControlInternal</name><argument_list>( <argument><expr><name>p_vlm</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vlm</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

</unit>
