<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\demux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"demux.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct><specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_mapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>demux_mapping_cmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_mapping</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_ascii_strcasecmp</name><argument_list>( <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>demux_mapping</name><modifier>*</modifier></type> <name>demux_lookup</name><parameter_list>( <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>key</name></decl></parameter>,

<parameter><decl><type><name>demux_mapping</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bsearch</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>data</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>demux_mapping_cmp</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>demux_NameFromMimeType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>demux_mapping</name></type> <name><name>types</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><block>{ <expr><literal type="string">"audio/aac"</literal></expr>, <expr><literal type="string">"m4a"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"audio/aacp"</literal></expr>, <expr><literal type="string">"m4a"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"audio/mpeg"</literal></expr>, <expr><literal type="string">"mp3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video/dv"</literal></expr>, <expr><literal type="string">"rawdv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video/MP2P"</literal></expr>, <expr><literal type="string">"ps"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video/MP2T"</literal></expr>, <expr><literal type="string">"ts"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video/nsa"</literal></expr>, <expr><literal type="string">"nsv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video/nsv"</literal></expr>, <expr><literal type="string">"nsv"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_mapping</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>demux_lookup</name><argument_list>( <argument><expr><name>mime</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>types</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"any"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>DemuxNameFromExtension</name><parameter_list>( <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>ext</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_preparsing</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>demux_mapping</name></type> <name><name>strong</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><block>{ <expr><literal type="string">"aiff"</literal></expr>, <expr><literal type="string">"aiff"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"asf"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"au"</literal></expr>, <expr><literal type="string">"au"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"avi"</literal></expr>, <expr><literal type="string">"avi"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"drc"</literal></expr>, <expr><literal type="string">"dirac"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dv"</literal></expr>, <expr><literal type="string">"dv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flac"</literal></expr>, <expr><literal type="string">"flac"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"h264"</literal></expr>, <expr><literal type="string">"h264"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"kar"</literal></expr>, <expr><literal type="string">"smf"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m3u"</literal></expr>, <expr><literal type="string">"m3u"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m4a"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m4v"</literal></expr>, <expr><literal type="string">"m4v"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mid"</literal></expr>, <expr><literal type="string">"smf"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mka"</literal></expr>, <expr><literal type="string">"mkv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mks"</literal></expr>, <expr><literal type="string">"mkv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mkv"</literal></expr>, <expr><literal type="string">"mkv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"moov"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mp4"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nsv"</literal></expr>, <expr><literal type="string">"nsv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"oga"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ogg"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ogm"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ogv"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ogx"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"opus"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"pva"</literal></expr>, <expr><literal type="string">"pva"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rm"</literal></expr>, <expr><literal type="string">"avformat"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rmi"</literal></expr>, <expr><literal type="string">"smf"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"spx"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"voc"</literal></expr>, <expr><literal type="string">"voc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wma"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wmv"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>demux_mapping</name></type> <name><name>quick</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><block>{ <expr><literal type="string">"mp3"</literal></expr>, <expr><literal type="string">"mpga"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ogg"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wma"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>demux_mapping</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block> <decl><name>lookup</name> <init>= <expr><block>{

<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>b_preparsing</name> <operator>?</operator> <name>quick</name> <operator>:</operator> <name>strong</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>b_preparsing</name> <operator>?</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>quick</name></expr></argument> )</argument_list></call> <operator>:</operator> <macro><name>ARRAY_SIZE</name><argument_list>( <argument>strong</argument> )</argument_list></macro></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>demux_mapping</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>demux_lookup</name><argument_list>( <argument><expr><name>ext</name></expr></argument>, <argument><expr><name><name>lookup</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lookup</name><operator>.</operator><name>size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name><name>result</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>demux_t</name> <modifier>*</modifier></type><name>demux_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,

<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>demux_NewAdvanced</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>vlc_demux_private</name>

<block>{

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demux_DestroyDemux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_demux_private</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_stream_Private</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>demux_Probe</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>probe</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>func</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>demux_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"seek failure before probing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>=</operator> <name>forced</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>probe</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_objres_clear</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>demux_t</name> <modifier>*</modifier></type><name>demux_NewAdvanced</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,

<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_preparsing</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_demux_private</name></name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>vlc_stream_CustomNew</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>demux_DestroyDemux</name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"demux"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_demux</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>vlc_stream_Private</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>psz_demux</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>stream_MimeType</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_demux</name> <operator>=</operator> <call><name>demux_NameFromMimeType</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <ternary><condition><expr><name>p_input</name></expr> ?</condition><then> <expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name> <operator>=</operator> <call><name>get_path</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_preparsing</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"creating demux \"%s\", URL: %s, path: %s"</literal></expr></argument>,

<argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>=</operator> <name>b_preparsing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_ext</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_module</name> <operator>=</operator> <call><name>DemuxNameFromExtension</name><argument_list>( <argument><expr><name>psz_ext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b_preparsing</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_module</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_module</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>vlc_module_load</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"demux"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument>,

<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_module</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>demux_Probe</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_demux</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_CommonDelete</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>static_control_match</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert((unsigned) DEMUX_##foo == STREAM_##foo, "Mismatch")</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>demux_vaControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name><argument_list>( <argument><expr><name>demux</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>demux_vaControlHelper</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_end</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_bitrate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_tell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_end</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_align</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_align</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_tell</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>CAN_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>CAN_CONTROL_PACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>GET_PTS_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>GET_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>GET_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_control_match</name><argument_list>(<argument><expr><name>SET_PAUSE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_bitrate</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_start</name> <operator>&gt;=</operator> <name>i_end</name><operator>)</operator>

<operator>||</operator> <call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_SIGNAL</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_bitrate</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_end</name> <operator>&gt;</operator> <name>i_start</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">8000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>i_end</name> <operator>-</operator> <name>i_start</name><operator>)</operator> <operator>/</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_bitrate</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_tell</name> <operator>&gt;=</operator> <name>i_start</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">8000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>i_tell</name> <operator>-</operator> <name>i_start</name><operator>)</operator> <operator>/</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <name>i_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name>i_tell</name> <operator>-</operator> <name>i_start</name> <operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name>i_end</name> <operator>-</operator> <name>i_start</name> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_NORMAL_TIME</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <name>i_end</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>f</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_block</name> <init>= <expr><operator>(</operator><name>f</name> <operator>*</operator> <operator>(</operator> <name>i_end</name> <operator>-</operator> <name>i_start</name> <operator>)</operator><operator>)</operator> <operator>/</operator> <name>i_align</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_start</name> <operator>+</operator> <name>i_block</name> <operator>*</operator> <name>i_align</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bitrate</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i64</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_block</name> <init>= <expr><name>i64</name> <operator>*</operator> <name>i_bitrate</name> <operator>/</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">8000000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>i_align</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_start</name> <operator>+</operator> <name>i_block</name> <operator>*</operator> <name>i_align</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_IS_PLAYLIST</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_ALL</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_GROUP_LIST</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_ES</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_ES_LIST</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_ACTIVATE</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_UP</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_DOWN</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_LEFT</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_RIGHT</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_POPUP</name></expr>:</case>

<case>case <expr><name>DEMUX_NAV_MENU</name></expr>:</case>

<case>case <expr><name>DEMUX_FILTER_ENABLE</name></expr>:</case>

<case>case <expr><name>DEMUX_FILTER_DISABLE</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_RECORD_STATE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown query 0x%x in %s"</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>decoder_t</name> <modifier>*</modifier></type><name>demux_PacketizerNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_msg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_packetizer</name> <operator>=</operator> <call><name>vlc_custom_create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_packetizer</name></expr></argument> )</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"demux packetizer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_packetizer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_in</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find packetizer for %s"</literal></expr></argument>, <argument><expr><name>psz_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_packetizer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>demux_PacketizerDestroy</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument>, <argument><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>demux_TestAndClearFlags</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>update</name> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>update</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>demux_GetTitle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>title</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>demux_Control</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_TITLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>title</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>demux_GetSeekpoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seekpoint</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>demux_Control</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_SEEKPOINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seekpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seekpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>seekpoint</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>demux_t</name> <modifier>*</modifier></type><name>demux_FilterNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_next</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_demux_private</name></name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><call><name>vlc_stream_CustomNew</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>demux_DestroyDemux</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"demux filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_demux</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>vlc_stream_Private</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"demux_filter"</literal></expr></argument>, <argument><expr><name>p_name</name></expr></argument>,

<argument><expr><name>p_name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>p_demux</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>stream_CommonDelete</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>demux_t</name> <modifier>*</modifier></type><name>demux_FilterChainNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_chain</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_chain</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_parser</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>psz_parser</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rest_chain</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cfg</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_rest_chain</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>demux_FilterNew</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_demux</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name>p_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_demux</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>demux_filter_enable_disable</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_demux_private</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>vlc_stream_Private</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_demux</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>module_get_name</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>module_get_name</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>b_enable</name></expr> ?</condition><then> <expr><name>DEMUX_FILTER_ENABLE</name></expr> </then><else>: <expr><name>DEMUX_FILTER_DISABLE</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>demux_FilterEnable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux_chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>demux_filter_enable_disable</name><argument_list>( <argument><expr><name>p_demux_chain</name></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>demux_FilterDisable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux_chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>demux_filter_enable_disable</name><argument_list>( <argument><expr><name>p_demux_chain</name></expr></argument>, <argument><expr><name>psz_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
