<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\input\stats.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/input_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_rate_Init</name><parameter_list>(<parameter><decl><type><name>input_rate_t</name> <modifier>*</modifier></type><name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rate</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rate</name><operator>-&gt;</operator><name>updates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rate</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stats_GetRate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>input_rate_t</name> <modifier>*</modifier></type><name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0.</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>-</operator> <name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name><operator>)</operator>

<operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>-</operator> <name><name>rate</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>date</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>input_stats_Create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>stats</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_rate_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_rate_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_corrupted</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_discontinuity</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_audio</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_video</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>played_abuffers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_abuffers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>displayed_pictures</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_pictures</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stats</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_stats_Destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_stats_Compute</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_stats</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>input_stats_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_read_packets</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name><operator>.</operator><name>updates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_read_bytes</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>f_input_bitrate</name></name> <operator>=</operator> <call><name>stats_GetRate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>input_bitrate</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_demux_read_bytes</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>f_demux_bitrate</name></name> <operator>=</operator> <call><name>stats_GetRate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_bitrate</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_demux_corrupted</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_corrupted</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_demux_discontinuity</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>demux_discontinuity</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_decoded_audio</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_audio</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_played_abuffers</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>played_abuffers</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_lost_abuffers</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_abuffers</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_decoded_video</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>decoded_video</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>displayed_pictures</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_lost_pictures</name></name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>lost_pictures</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_rate_Add</name><parameter_list>(<parameter><decl><type><name>input_rate_t</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counter</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>updates</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>counter</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>date</name><operator>)</operator> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counter</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>date</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counter</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
