<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\misc\picture_fifo.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_fifo.h&gt;</cpp:file></cpp:include>

<struct>struct <name>picture_fifo_t</name> <block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>last_ptr</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureFifoReset</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureFifoPush</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>fifo</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>PictureFifoPop</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>picture_fifo_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fifo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fifo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PictureFifoReset</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fifo</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_fifo_Push</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PictureFifoPush</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_fifo_Pop</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>PictureFifoPop</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_fifo_Peek</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_fifo_Flush</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush_before</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PictureFifoReset</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_fifo_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PictureFifoReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>picture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>date</name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>flush_before</name> <operator>&amp;&amp;</operator> <name><name>picture</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;=</operator> <name>date</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>flush_before</name> <operator>&amp;&amp;</operator> <name><name>picture</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;=</operator> <name>date</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PictureFifoPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PictureFifoPush</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>picture</name> <operator>=</operator> <call><name>PictureFifoPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_fifo_OffsetDate</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>picture</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>date</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_fifo_Delete</name><parameter_list>(<parameter><decl><type><name>picture_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_fifo_Flush</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
