<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\misc\block.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>block_Check</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bufstart</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bufend</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>start</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>bufstart</name> <operator>&lt;=</operator> <name>bufend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>bufstart</name> <operator>&gt;=</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>bufend</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>block_Check</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_Init</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_start</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_generic_Release</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>block_generic_cbs</name> <init>=

<expr><block>{

<expr><name>block_generic_Release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockMetaCopy</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_ALIGN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_PADDING</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_Alloc</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOBUFS</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>block_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>BLOCK_ALIGN</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>BLOCK_PADDING</name><operator>)</operator>

<operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>alloc</name> <operator>&lt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>b</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Init</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_generic_cbs</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><name>BLOCK_PADDING</name> <operator>%</operator> <name>BLOCK_ALIGN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"BLOCK_PADDING must be a multiple of BLOCK_ALIGN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>BLOCK_PADDING</name> <operator>+</operator> <name>BLOCK_ALIGN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>BLOCK_ALIGN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>block_Release</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Check</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>block</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_TryRealloc</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>i_prebody</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_body</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Check</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_prebody</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_body</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>i_prebody</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_prebody</name> <operator>=</operator> <name>i_body</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name> <operator>&lt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name>

<operator>&gt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_prebody</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><name>i_prebody</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>-=</operator> <name>i_prebody</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_prebody</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i_body</name> <operator>+=</operator> <name>i_prebody</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_prebody</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_body</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_body</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>requested</name> <init>= <expr><name>i_prebody</name> <operator>+</operator> <name>i_body</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><name>requested</name> <operator>&lt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>extra</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>requested</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <operator>(</operator><name>extra</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>requested</name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_rea</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>requested</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_rea</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BlockMetaCopy</name><argument_list>( <argument><expr><name>p_rea</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_rea</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_start</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_start</name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_prebody</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>-</operator> <name>p_start</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_prebody</name>

<operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p_end</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>&lt;</operator> <name>i_body</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_rea</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>requested</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_rea</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_rea</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_prebody</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BlockMetaCopy</name><argument_list>( <argument><expr><name>p_rea</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_rea</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_prebody</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>-=</operator> <name>i_prebody</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_prebody</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_body</name> <operator>+=</operator> <name>i_prebody</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_prebody</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_body</name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_Realloc</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>prebody</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>body</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>rea</name> <init>= <expr><call><name>block_TryRealloc</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>prebody</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rea</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rea</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_heap_Release</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>block_heap_cbs</name> <init>=

<expr><block>{

<expr><name>block_heap_Release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_heap_Alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>block_Init</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_heap_cbs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_mmap_Release</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>munmap</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>block_mmap_cbs</name> <init>=

<expr><block>{

<expr><name>block_mmap_Release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_mmap_Alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>page_mask</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name><operator>)</operator> <operator>&amp;</operator> <name>page_mask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>right</name> <init>= <expr><operator>(</operator><operator>-</operator><name>length</name><operator>)</operator> <operator>&amp;</operator> <name>page_mask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>munmap</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Init</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_mmap_cbs</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>-</operator> <name>left</name></expr></argument>, <argument><expr><name>left</name> <operator>+</operator> <name>length</name> <operator>+</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_mmap_Alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>addr</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>length</name></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_shm_Release</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>shmdt</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>block_shm_cbs</name> <init>=

<expr><block>{

<expr><name>block_shm_Release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_shm_Alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>shmdt</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>block_Init</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block_shm_cbs</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_shm_Alloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>addr</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier>

<name>ssize_t</name></type> <name>pread</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>_get_osfhandle</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>olap</name> <init>= <expr><block>{<expr><operator>.</operator><name>Offset</name> <operator>=</operator> <name>offset</name></expr>, <expr><operator>.</operator><name>OffsetHigh</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadFile</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>written</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_File</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_TYPEISSHM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_TYPEISSHM</name><parameter_list>( <parameter><type><name>buf</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_TYPEISSHM</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESPIPE</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&gt;=</operator> <name>SIZE_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prot</name> <init>= <expr><name>PROT_READ</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><name>PROT_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><name>MAP_PRIVATE</name></expr> </then><else>: <expr><name>MAP_SHARED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>block_mmap_Alloc</name> <argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>write</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_cleanup_push</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>pread</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>block_FilePath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_open</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_File</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

</unit>
