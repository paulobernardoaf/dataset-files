<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\misc\picture_pool.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"picture.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_MAX</name></cpp:macro> <cpp:value>(CHAR_BIT * sizeof (unsigned long long))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><name>POOL_MAX</name> <operator>&amp;</operator> <operator>(</operator><name>POOL_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Not a power of two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>picture_pool_t</name> <block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>canceled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>available</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_ushort</name></type> <name>refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>picture_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>picture</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>picture_pool_Destroy</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_thread_fence</name><argument_list>(<argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aligned_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_pool_Release</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>picture_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>picture_pool_Destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>picture_pool_ReleasePicture</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>picture_priv_t</name> <operator>*</operator><operator>)</operator><name>clone</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>sys</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>priv</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>sys</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>POOL_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><name>sys</name> <operator>&amp;</operator> <operator>(</operator><name>POOL_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>offset</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>|=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_pool_Destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>picture_pool_ClonePicture</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>sys</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>pool</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>picture_InternalClone</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>picture_pool_ReleasePicture</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>sys</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>picture_pool_New</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <name>POOL_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>pool</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>picture_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><operator>-</operator><name>size</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>POOL_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>aligned_alloc</name><argument_list>(<argument><expr><name>POOL_MAX</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>POOL_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0ULL</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>picture_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>picture_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>pool</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>picture_pool_NewFromFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>picture</name><index>[<expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>picture_pool_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>pool</name></expr>;</return>

<label><name>error</name>:</label>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>picture</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>picture_pool_Reserve</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>picture</name><index>[<expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>picture_pool_Get</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>picture_pool_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>pool</name></expr>;</return>

<label><name>error</name>:</label>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>picture</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_pool_Get</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>available</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>available</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>available</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name>available</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>canceled</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>available</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>picture_pool_ClonePicture</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>clone</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>clone</name></expr>;</return>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>picture_pool_Wait</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>available</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>picture_pool_ClonePicture</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>clone</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>clone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>picture_pool_Cancel</name><parameter_list>(<parameter><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canceled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <name>canceled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>canceled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>picture_pool_GetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>picture_count</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
