<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\misc\actions.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>key_descriptor</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_code</name></decl>;</decl_stmt>

}</block> <decl><name><name>s_keys</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Backspace"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BACKSPACE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Brightness Down"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BRIGHTNESS_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Brightness Up"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BRIGHTNESS_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Back"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_BACK</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Favorites"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_FAVORITES</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Forward"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_FORWARD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Home"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_HOME</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Refresh"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_REFRESH</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Search"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_SEARCH</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Browser Stop"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_BROWSER_STOP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Delete"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_DELETE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Down"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"End"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_END</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Enter"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_ENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Esc"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_ESC</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F1"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F1</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F10"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F10</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F11"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F11</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F12"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F12</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F2"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F2</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F3</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F4"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F4</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F5"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F5</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F6"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F6</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F7"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F7</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F8"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F8</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"F9"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_F9</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Home"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_HOME</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Insert"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_INSERT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_LEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Angle"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_ANGLE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Audio Track"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_AUDIO</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Forward"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_FORWARD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Menu"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_MENU</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Next Frame"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_FRAME_NEXT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Next Track"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_NEXT_TRACK</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Play Pause"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_PLAY_PAUSE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Prev Frame"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_FRAME_PREV</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Prev Track"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_PREV_TRACK</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Record"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_RECORD</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Repeat"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_REPEAT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Rewind"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_REWIND</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Select"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_SELECT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Shuffle"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_SHUFFLE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Stop"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_STOP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Subtitle"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_SUBTITLE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media Time"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_TIME</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Media View"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MEDIA_VIEW</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Menu"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MENU</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mouse Wheel Down"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MOUSEWHEELDOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mouse Wheel Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MOUSEWHEELLEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mouse Wheel Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MOUSEWHEELRIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mouse Wheel Up"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_MOUSEWHEELUP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Page Down"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_PAGEDOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Page Up"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_PAGEUP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Pause"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_PAUSE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Print"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_PRINT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_RIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Space"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Tab"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_TAB</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unset"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_UNSET</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Up"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Volume Down"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_VOLUME_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Volume Mute"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_VOLUME_MUTE</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Volume Up"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_VOLUME_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Zoom In"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_ZOOM_IN</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Zoom Out"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>KEY_ZOOM_OUT</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keystrcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name>key</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb</name> <init>= <expr><name>elem</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_cp</name> <parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint_fast32_t</name></type> <name>vlc_str2keycode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>mods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"-+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Ctrl"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>KEY_MODIFIER_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Alt"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>KEY_MODIFIER_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Shift"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>KEY_MODIFIER_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Meta"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>KEY_MODIFIER_META</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Command"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mods</name> <operator>|=</operator> <name>KEY_MODIFIER_COMMAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>key_descriptor</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>bsearch</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s_keys</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_keys</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>s_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>keystrcmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>i_code</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>vlc_towc</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KEY_UNSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>KEY_UNSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <name>mods</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nooptext</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>txt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_keycode2str</name> <parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>locale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>tr</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>locale</name></expr> ?</condition><then> <expr><name>vlc_gettext</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>nooptext</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>key</name> <init>= <expr><name>code</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_MODIFIER</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_code</name> <operator>==</operator> <name>key</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>s_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>utf8_cp</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<label><name>found</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <name>KEY_MODIFIER_CTRL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ctrl+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <name>KEY_MODIFIER_ALT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Alt+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <name>KEY_MODIFIER_SHIFT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Shift+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <name>KEY_MODIFIER_META</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Meta+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <name>KEY_MODIFIER_COMMAND</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Command+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXACTION</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>name2action</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>psz</name><index>[<expr><name>MAXACTION</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>id</name></decl>;</decl_stmt>

}</block> <decl><name><name>s_names2actions</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"aspect-ratio"</literal></expr>, <expr><name>ACTIONID_ASPECT_RATIO</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"audio-track"</literal></expr>, <expr><name>ACTIONID_AUDIO_TRACK</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"audiodelay-down"</literal></expr>, <expr><name>ACTIONID_AUDIODELAY_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"audiodelay-up"</literal></expr>, <expr><name>ACTIONID_AUDIODELAY_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"audiodevice-cycle"</literal></expr>, <expr><name>ACTIONID_AUDIODEVICE_CYCLE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"chapter-next"</literal></expr>, <expr><name>ACTIONID_CHAPTER_NEXT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"chapter-prev"</literal></expr>, <expr><name>ACTIONID_CHAPTER_PREV</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"clear-playlist"</literal></expr>, <expr><name>ACTIONID_PLAY_CLEAR</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop"</literal></expr>, <expr><name>ACTIONID_CROP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop-bottom"</literal></expr>, <expr><name>ACTIONID_CROP_BOTTOM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop-left"</literal></expr>, <expr><name>ACTIONID_CROP_LEFT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop-right"</literal></expr>, <expr><name>ACTIONID_CROP_RIGHT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"crop-top"</literal></expr>, <expr><name>ACTIONID_CROP_TOP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"decr-scalefactor"</literal></expr>, <expr><name>ACTIONID_SCALE_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"deinterlace"</literal></expr>, <expr><name>ACTIONID_DEINTERLACE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"deinterlace-mode"</literal></expr>, <expr><name>ACTIONID_DEINTERLACE_MODE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"disc-menu"</literal></expr>, <expr><name>ACTIONID_DISC_MENU</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"faster"</literal></expr>, <expr><name>ACTIONID_RATE_FASTER</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"frame-next"</literal></expr>, <expr><name>ACTIONID_FRAME_NEXT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"incr-scalefactor"</literal></expr>, <expr><name>ACTIONID_SCALE_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"intf-boss"</literal></expr>, <expr><name>ACTIONID_INTF_BOSS</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"intf-popup-menu"</literal></expr>, <expr><name>ACTIONID_INTF_POPUP_MENU</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"intf-show"</literal></expr>, <expr><name>ACTIONID_INTF_TOGGLE_FSC</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump+extrashort"</literal></expr>, <expr><name>ACTIONID_JUMP_FORWARD_EXTRASHORT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump+long"</literal></expr>, <expr><name>ACTIONID_JUMP_FORWARD_LONG</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump+medium"</literal></expr>, <expr><name>ACTIONID_JUMP_FORWARD_MEDIUM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump+short"</literal></expr>, <expr><name>ACTIONID_JUMP_FORWARD_SHORT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump-extrashort"</literal></expr>, <expr><name>ACTIONID_JUMP_BACKWARD_EXTRASHORT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump-long"</literal></expr>, <expr><name>ACTIONID_JUMP_BACKWARD_LONG</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump-medium"</literal></expr>, <expr><name>ACTIONID_JUMP_BACKWARD_MEDIUM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"jump-short"</literal></expr>, <expr><name>ACTIONID_JUMP_BACKWARD_SHORT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"leave-fullscreen"</literal></expr>, <expr><name>ACTIONID_LEAVE_FULLSCREEN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"loop"</literal></expr>, <expr><name>ACTIONID_LOOP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"nav-activate"</literal></expr>, <expr><name>ACTIONID_NAV_ACTIVATE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"nav-down"</literal></expr>, <expr><name>ACTIONID_NAV_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"nav-left"</literal></expr>, <expr><name>ACTIONID_NAV_LEFT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"nav-right"</literal></expr>, <expr><name>ACTIONID_NAV_RIGHT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"nav-up"</literal></expr>, <expr><name>ACTIONID_NAV_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"next"</literal></expr>, <expr><name>ACTIONID_NEXT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"pause"</literal></expr>, <expr><name>ACTIONID_PAUSE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play"</literal></expr>, <expr><name>ACTIONID_PLAY</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark1"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK1</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark10"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK10</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark2"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK2</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark3"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK3</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark4"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK4</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark5"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK5</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark6"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK6</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark7"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK7</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark8"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK8</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-bookmark9"</literal></expr>, <expr><name>ACTIONID_PLAY_BOOKMARK9</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"play-pause"</literal></expr>, <expr><name>ACTIONID_PLAY_PAUSE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"position"</literal></expr>, <expr><name>ACTIONID_POSITION</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"prev"</literal></expr>, <expr><name>ACTIONID_PREV</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"program-sid-next"</literal></expr>, <expr><name>ACTIONID_PROGRAM_SID_NEXT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"program-sid-prev"</literal></expr>, <expr><name>ACTIONID_PROGRAM_SID_PREV</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"quit"</literal></expr>, <expr><name>ACTIONID_QUIT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"random"</literal></expr>, <expr><name>ACTIONID_RANDOM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"rate-faster-fine"</literal></expr>, <expr><name>ACTIONID_RATE_FASTER_FINE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"rate-normal"</literal></expr>, <expr><name>ACTIONID_RATE_NORMAL</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"rate-slower-fine"</literal></expr>, <expr><name>ACTIONID_RATE_SLOWER_FINE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"record"</literal></expr>, <expr><name>ACTIONID_RECORD</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark1"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK1</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark10"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK10</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark2"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK2</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark3"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK3</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark4"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK4</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark5"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK5</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark6"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK6</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark7"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK7</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark8"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK8</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"set-bookmark9"</literal></expr>, <expr><name>ACTIONID_SET_BOOKMARK9</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"slower"</literal></expr>, <expr><name>ACTIONID_RATE_SLOWER</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"snapshot"</literal></expr>, <expr><name>ACTIONID_SNAPSHOT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><name>ACTIONID_STOP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subdelay-down"</literal></expr>, <expr><name>ACTIONID_SUBDELAY_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subdelay-up"</literal></expr>, <expr><name>ACTIONID_SUBDELAY_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subpos-down"</literal></expr>, <expr><name>ACTIONID_SUBPOS_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subpos-up"</literal></expr>, <expr><name>ACTIONID_SUBPOS_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subsync-apply"</literal></expr>, <expr><name>ACTIONID_SUBSYNC_APPLY</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subsync-markaudio"</literal></expr>, <expr><name>ACTIONID_SUBSYNC_MARKAUDIO</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subsync-marksub"</literal></expr>, <expr><name>ACTIONID_SUBSYNC_MARKSUB</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subsync-reset"</literal></expr>, <expr><name>ACTIONID_SUBSYNC_RESET</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-control-secondary"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_CONTROL_SECONDARY</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-revtrack"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_REVERSE_TRACK</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-text-scale-down"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_TEXT_SCALE_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-text-scale-normal"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_TEXT_SCALE_NORMAL</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-text-scale-up"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_TEXT_SCALE_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-toggle"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_TOGGLE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitle-track"</literal></expr>, <expr><name>ACTIONID_SUBTITLE_TRACK</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"title-next"</literal></expr>, <expr><name>ACTIONID_TITLE_NEXT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"title-prev"</literal></expr>, <expr><name>ACTIONID_TITLE_PREV</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"toggle-autoscale"</literal></expr>, <expr><name>ACTIONID_TOGGLE_AUTOSCALE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"toggle-fullscreen"</literal></expr>, <expr><name>ACTIONID_TOGGLE_FULLSCREEN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"uncrop-bottom"</literal></expr>, <expr><name>ACTIONID_UNCROP_BOTTOM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"uncrop-left"</literal></expr>, <expr><name>ACTIONID_UNCROP_LEFT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"uncrop-right"</literal></expr>, <expr><name>ACTIONID_UNCROP_RIGHT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"uncrop-top"</literal></expr>, <expr><name>ACTIONID_UNCROP_TOP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"unzoom"</literal></expr>, <expr><name>ACTIONID_UNZOOM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"viewpoint-fov-in"</literal></expr>, <expr><name>ACTIONID_VIEWPOINT_FOV_IN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"viewpoint-fov-out"</literal></expr>, <expr><name>ACTIONID_VIEWPOINT_FOV_OUT</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"viewpoint-roll-anticlock"</literal></expr>, <expr><name>ACTIONID_VIEWPOINT_ROLL_ANTICLOCK</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"viewpoint-roll-clock"</literal></expr>, <expr><name>ACTIONID_VIEWPOINT_ROLL_CLOCK</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"vol-down"</literal></expr>, <expr><name>ACTIONID_VOL_DOWN</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"vol-mute"</literal></expr>, <expr><name>ACTIONID_VOL_MUTE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"vol-up"</literal></expr>, <expr><name>ACTIONID_VOL_UP</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"wallpaper"</literal></expr>, <expr><name>ACTIONID_WALLPAPER</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"zoom"</literal></expr>, <expr><name>ACTIONID_ZOOM</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"zoom-double"</literal></expr>, <expr><name>ACTIONID_ZOOM_DOUBLE</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"zoom-half"</literal></expr>, <expr><name>ACTIONID_ZOOM_HALF</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"zoom-original"</literal></expr>, <expr><name>ACTIONID_ZOOM_ORIGINAL</name></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"zoom-quarter"</literal></expr>, <expr><name>ACTIONID_ZOOM_QUARTER</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct>struct <name>mapping</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>action</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keycmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mapping</name></name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ka</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>ka</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>vlc_actions_t</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>global_map</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_keys</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_key_to_action</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>prevkey</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>curkey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>keycode</name> <init>= <expr><name><name>curkey</name><operator>.</operator><name>i_int</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pent</name> <operator>=</operator> <call><name>tfind</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>keycode</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>keycmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mapping</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>*</operator><name>pent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>varname</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prevkey</name></expr>;</expr_stmt>

<return>return <expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_mapping</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>keycode</name></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mapping</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>keycode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pent</name> <init>= <expr><call><name>tsearch</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>keycmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pent</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pent</name> <operator>!=</operator> <name>entry</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EEXIST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_wheel_mapping</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>kmore</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>kless</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>amore</name> <init>= <expr><name>ACTIONID_NONE</name></expr></init></decl>, <decl><type ref="prev"/><name>aless</name> <init>= <expr><name>ACTIONID_NONE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>amore</name> <operator>=</operator> <name>ACTIONID_COMBO_VOL_FOV_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aless</name> <operator>=</operator> <name>ACTIONID_COMBO_VOL_FOV_DOWN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name>amore</name> <operator>=</operator> <name>ACTIONID_JUMP_FORWARD_EXTRASHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aless</name> <operator>=</operator> <name>ACTIONID_JUMP_BACKWARD_EXTRASHORT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name>amore</name> <operator>=</operator> <name>ACTIONID_JUMP_BACKWARD_EXTRASHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aless</name> <operator>=</operator> <name>ACTIONID_JUMP_FORWARD_EXTRASHORT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>amore</name> <operator>!=</operator> <name>ACTIONID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_mapping</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>kmore</name></expr></argument>, <argument><expr><name>amore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aless</name> <operator>!=</operator> <name>ACTIONID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_mapping</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>kless</name></expr></argument>, <argument><expr><name>aless</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_action</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>confname</name></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>confname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>strtok_r</name> <argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>key</name> <operator>=</operator> <call><name>strtok_r</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><call><name>vlc_str2keycode</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>KEY_UNSET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key \"%s\" unrecognized"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_mapping</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key \"%s\" bound to multiple actions"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_InternalActionsInit</name> <parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_actions_t</name> <modifier>*</modifier></type><name>as</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>as</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_names2actions</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>as</name><operator>-&gt;</operator><name>ppsz_keys</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>as</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>global_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key-pressed"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"global-key-pressed"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_names2actions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>, <argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><literal type="string">"key-%s and key-%s are not ordered properly"</literal></expr></argument>,

<argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>, <argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>MAXACTION</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"global-key-%s"</literal></expr></argument>, <argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_action</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_action</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>global_map</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>s_names2actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>ppsz_keys</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_names2actions</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_wheel_mapping</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>KEY_MOUSEWHEELRIGHT</name></expr></argument>, <argument><expr><name>KEY_MOUSEWHEELLEFT</name></expr></argument>,

<argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"hotkeys-x-wheel-mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_wheel_mapping</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>KEY_MOUSEWHEELUP</name></expr></argument>, <argument><expr><name>KEY_MOUSEWHEELDOWN</name></expr></argument>,

<argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"hotkeys-y-wheel-mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>actions</name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key-pressed"</literal></expr></argument>, <argument><expr><name>vlc_key_to_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"global-key-pressed"</literal></expr></argument>, <argument><expr><name>vlc_key_to_action</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>global_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_InternalActionsClean</name> <parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_actions_t</name> <modifier>*</modifier></type><name>as</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>actions</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>as</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name> <argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><literal type="string">"global-key-pressed"</literal></expr></argument>, <argument><expr><name>vlc_key_to_action</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>global_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name> <argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><literal type="string">"key-pressed"</literal></expr></argument>, <argument><expr><name>vlc_key_to_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tdestroy</name> <argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>global_map</name></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tdestroy</name> <argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>actions</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>actcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name2action</name></name> <modifier>*</modifier></type><name>act</name> <init>= <expr><name>ent</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>act</name><operator>-&gt;</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_action_id_t</name></type>

<name>vlc_actions_get_id</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name2action</name></name> <modifier>*</modifier></type><name>act</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"key-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ACTIONID_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>act</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s_names2actions</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s_names2actions</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>act</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>actcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>act</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>act</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><name>ACTIONID_NONE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_actions_get_keycodes</name></cpp:undef>

<function><type><name>size_t</name></type>

<name>vlc_actions_get_keycodes</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key_name</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_global</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_keycodes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>varname</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_key_name</name></expr></argument> )</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"%skey-%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_global</name></expr> ?</condition><then> <expr><literal type="string">"global-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>psz_key_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_keycodes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_keys</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_keys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_keycodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_it</name> <init>= <expr><name>psz_keys</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>psz_it</name></expr>;</condition> <incr><expr><operator>++</operator><name>psz_it</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_it</name> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i_nb_keycodes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>++</operator><name>i_nb_keycodes</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_keycodes</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_nb_keycodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><operator>*</operator><name>pp_keycodes</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><operator>*</operator><name>pp_keycodes</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>psz_keys</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>key</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp_keycodes</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>vlc_str2keycode</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>==</operator> <name>i_nb_keycodes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_nb_keycodes</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_actions_get_key_names</name></cpp:undef>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type>

<name>vlc_actions_get_key_names</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_actions_t</name> <modifier>*</modifier></type><name>as</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>actions</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>as</name><operator>-&gt;</operator><name>ppsz_keys</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
