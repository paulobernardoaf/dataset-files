<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\misc\keystore.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>vlc_keystore</name> <modifier>*</modifier></type>

<name>keystore_create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_keystore</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"keystore"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_keystore</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"keystore"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_find</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_keystore</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_keystore_create</name></cpp:undef>

<function><type><name>vlc_keystore</name> <modifier>*</modifier></type>

<name>vlc_keystore_create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modlist</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"keystore"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><call><name>keystore_create</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>modlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>modlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_keystore</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_keystore_release</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_keystore_store</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_secret</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>i_secret_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_keystore</name> <operator>&amp;&amp;</operator> <name>ppsz_values</name> <operator>&amp;&amp;</operator> <name>p_secret</name> <operator>&amp;&amp;</operator> <name>i_secret_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"invalid store request: "</literal>

<literal type="string">"protocol and server should be valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>i_port</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_port</name> <operator>==</operator> <name>LONG_MIN</name> <operator>||</operator> <name>i_port</name> <operator>==</operator> <name>LONG_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"invalid store request: "</literal>

<literal type="string">"port is not valid number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_secret_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_secret_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_secret</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_store</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>p_secret</name></expr></argument>, <argument><expr><name>i_secret_len</name></expr></argument>,

<argument><expr><name>psz_label</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>

<name>vlc_keystore_find</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_entries</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_keystore</name> <operator>&amp;&amp;</operator> <name>ppsz_values</name> <operator>&amp;&amp;</operator> <name>pp_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_find</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>pp_entries</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>

<name>vlc_keystore_remove</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_keystore</name> <operator>&amp;&amp;</operator> <name>ppsz_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_remove</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_keystore_release_entries</name><parameter_list>(<parameter><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_InternalKeystoreInit</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_memory_keystore</name></name> <operator>=</operator> <call><name>keystore_create</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_memory_keystore</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_InternalKeystoreClean</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_memory_keystore</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_keystore_release</name><argument_list>(<argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_memory_keystore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_memory_keystore</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_keystore</name> <modifier>*</modifier></type>

<name>get_memory_keystore</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_memory_keystore</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_keystore_entry</name> <modifier>*</modifier></type>

<name>find_closest_path</name><parameter_list>(<parameter><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_match_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_last_pathlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_decoded_path</name> <init>= <expr><call><name>vlc_uri_decode_duplicate</name><argument_list>(<argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_decoded_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_entry_path</name> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_entry_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_match_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_match_entry</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_entry_pathlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_entry_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_decoded_path</name></expr></argument>, <argument><expr><name>psz_entry_path</name></expr></argument>, <argument><expr><name>i_entry_pathlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>i_entry_pathlen</name> <operator>&gt;</operator> <name>i_last_pathlen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_last_pathlen</name> <operator>=</operator> <name>i_entry_pathlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_match_entry</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_decoded_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_match_entry</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>is_credential_valid</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>!=</operator> <literal type="char">'\0'</literal>

<operator>&amp;&amp;</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>is_url_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>p_url</name> <operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name> <operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port</name></decl>;</decl_stmt>

}</block> <decl><name><name>protocol_default_ports</name> <index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"rtsp"</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"http"</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"https"</literal></expr>, <expr><literal type="number">443</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><literal type="number">445</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>protocol_set_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_url</name><operator>-&gt;</operator><name>i_port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>i_port</name></name> <operator>&lt;=</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>i_port</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>protocol_default_ports</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>,

<argument><expr><name><name>protocol_default_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_protocol</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name><name>protocol_default_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_port</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_port</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz_port</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu16</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>i_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>protocol_is_smb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"smb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>protocol_store_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>protocol_is_smb</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>smb_split_domain</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_delim</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_delim</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><name>psz_delim</name> <operator>-</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_split_domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_split_domain</name></name> <operator>=</operator>

<call><name>strndup</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_split_domain</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name>psz_delim</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>credential_find_keystore</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>, <parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name> <init>= <expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_url</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_realm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_authtype</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_port</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_set_port</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>, <argument><expr><name>psz_port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name> <operator>=</operator> <name>psz_port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entries_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_entries_count</name> <operator>=</operator> <call><name>vlc_keystore_find</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>,

<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>p_entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name> <operator>=</operator> <name>i_entries_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_store_path</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>find_closest_path</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>,

<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name></expr></argument>,

<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_entry</name> <operator>||</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name><index>[<expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>,

<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_authtype</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>b_from_keystore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_credential_init</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_credential</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name> <operator>=</operator> <name>GET_FROM_URL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_url</name></name> <operator>=</operator> <name>p_url</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_credential_clean</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>,

<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_entries_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_keystore_release</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_split_domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_credential_get</name></cpp:undef>

<function><type><name>bool</name></type>

<name>vlc_credential_get</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option_username</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option_password</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dialog_title</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dialog_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_credential</name> <operator>&amp;&amp;</operator> <name>p_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name> <init>= <expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_url</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_url_valid</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"vlc_credential_get: invalid url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>b_from_keystore</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>is_credential_valid</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GET_FROM_URL</name></expr>:</case>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_username</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_password</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"Password in a URI is DEPRECATED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>&amp;&amp;</operator> <call><name>protocol_is_smb</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smb_split_domain</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GET_FROM_OPTION</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name> <operator>=</operator>

<name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_option_username</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name> <operator>=</operator>

<call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>psz_option_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_option_password</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name> <operator>=</operator>

<call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>psz_option_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_username</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_var_password</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GET_FROM_MEMORY_KEYSTORE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><call><name>get_memory_keystore</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_keystore</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>credential_find_keystore</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>, <argument><expr><name>p_keystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>GET_FROM_KEYSTORE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_dialog_title</name> <operator>||</operator> <operator>!</operator><name>psz_dialog_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name> <operator>=</operator> <call><name>vlc_keystore_create</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>credential_find_keystore</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>, <argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>i_get_order</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><name>GET_FROM_DIALOG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_dialog_title</name> <operator>||</operator> <operator>!</operator><name>psz_dialog_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dialog_username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dialog_password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>psz_dialog_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_store</name> <init>= <expr><ternary><condition><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>p_credential</name><operator>-&gt;</operator><name>b_store</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>=

<expr><call><name>vlc_dialog_wait_login_va</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_dialog_username</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_dialog_password</name></expr></argument>, <argument><expr><name>p_store</name></expr></argument>,

<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>,

<argument><expr><name>psz_dialog_title</name></expr></argument>, <argument><expr><name>psz_dialog_fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_username</name></name> <operator>=</operator> <name>psz_dialog_username</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_password</name></name> <operator>=</operator> <name>psz_dialog_password</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_username</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_dialog_password</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_is_smb</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smb_split_domain</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><call><name>is_credential_valid</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_credential_store</name></cpp:undef>

<function><type><name>bool</name></type>

<name>vlc_credential_store</name><parameter_list>(<parameter><decl><type><name>vlc_credential</name> <modifier>*</modifier></type><name>p_credential</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_credential_valid</name><argument_list>(<argument><expr><name>p_credential</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>b_from_keystore</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_credential</name><operator>-&gt;</operator><name>b_from_keystore</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_credential</name><operator>-&gt;</operator><name>b_store</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_keystore</name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>p_keystore</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_keystore</name> <operator>=</operator> <call><name>get_memory_keystore</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_keystore</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name> <init>= <expr><name><name>p_credential</name><operator>-&gt;</operator><name>p_url</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_store_path</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>psz_path</name> <operator>=</operator> <call><name>vlc_uri_decode_duplicate</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_is_smb</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>psz_path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_slash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>psz_path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_slash</name> <operator>&amp;&amp;</operator> <name>psz_path</name> <operator>!=</operator> <name>p_slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name> <operator>=</operator> <name>psz_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_realm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name> <operator>=</operator> <name><name>p_credential</name><operator>-&gt;</operator><name>psz_authtype</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_port</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>protocol_set_port</name><argument_list>(<argument><expr><name>p_url</name></expr></argument>, <argument><expr><name>psz_port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name> <operator>=</operator> <name>psz_port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_label</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_label</name></expr></argument>, <argument><expr><literal type="string">"LibVLC password for %s://%s%s"</literal></expr></argument>,

<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_path</name></expr> ?</condition><then> <expr><name>psz_path</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_password</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator>

<operator>(</operator><ternary><condition><expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>p_credential</name><operator>-&gt;</operator><name>psz_password</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><call><name>vlc_keystore_store</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>p_password</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_label</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
