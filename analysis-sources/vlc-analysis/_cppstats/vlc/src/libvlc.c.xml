<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\libvlc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preparser/preparser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_source/media_source.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/vlc_getopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_media_library.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_thumbnailer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vlm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetFilenames</name> <parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> []</type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>libvlc_int_t</name> <modifier>*</modifier></type> <name>libvlc_InternalCreate</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_libvlc</name> <operator>=</operator> <operator>(</operator><name>vlc_custom_create</name><operator>)</operator><operator>(</operator> <name>NULL</name><operator>,</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof><operator>,</operator> <literal type="string">"libvlc"</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_libvlc</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>libvlc_priv</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>interfaces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>main_playlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_vlm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>media_source_provider</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ExitInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>exit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_libvlc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_InternalInit</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_modules</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_parser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_control</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>vlc_LogPreinit</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>system_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_InitBank</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>config_LoadCmdLine</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><name>ppsz_argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>module_EndBank</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_threads_setup</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_LoadPlugins</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"ignore-config"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"reset-config"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_SaveConfigFile</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_LoadConfigFile</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlc_optind</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>config_LoadCmdLine</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><name>ppsz_argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_optind</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_LogInit</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>ENABLE_NLS</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>defined</name><argument_list>( <argument><expr><name>HAVE_GETTEXT</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>HAVE_INCLUDED_GETTEXT</name></expr></argument> )</argument_list></call> <operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>vlc_bindtextdomain</name> <argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"translation test: code is \"%s\""</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>config_PrintHelp</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_InternalCleanup</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>libvlc_InternalDialogInit</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>libvlc_InternalKeystoreInit</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"memory keystore init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_CPU_dump</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"media-library"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_media_library</name></name> <operator>=</operator> <call><name>libvlc_MlCreate</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_media_library</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"Media library initialization failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name> <operator>=</operator> <call><name>vlc_thumbnailer_Create</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"Failed to instantiate VLC thumbnailer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>libvlc_InternalActionsInit</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <call><name>input_preparser_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>media_source_provider</name></name> <operator>=</operator> <call><name>vlc_media_source_provider_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>media_source_provider</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"snapshot-file"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"record-file"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-type"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"user-agent"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"user-agent"</literal></expr></argument>,

<argument><expr><literal type="string">"VLC media player (LibVLC "</literal><name>VERSION</name><literal type="string">")"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"http-user-agent"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"http-user-agent"</literal></expr></argument>,

<argument><expr><literal type="string">"VLC/"</literal><name>PACKAGE_VERSION</name><literal type="string">" LibVLC/"</literal><name>PACKAGE_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-icon-name"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-icon-name"</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-id"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-id"</literal></expr></argument>, <argument><expr><literal type="string">"org.VideoLAN.VLC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-version"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-version"</literal></expr></argument>, <argument><expr><name>PACKAGE_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>system_Configure</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>i_argc</name> <operator>-</operator> <name>vlc_optind</name></expr></argument>, <argument><expr><name>ppsz_argv</name> <operator>+</operator> <name>vlc_optind</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"vlm-conf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>p_vlm</name></name> <operator>=</operator> <call><name>vlm_New</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>p_vlm</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"VLM initialization failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>psz_modules</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_control</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_modules</name> <operator>&amp;&amp;</operator> <name>psz_control</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>psz_modules</name></expr></argument>, <argument><expr><name>psz_control</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_modules</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_modules</name> <operator>=</operator> <name>psz_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>psz_control</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_modules</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_modules</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_modules</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_module</name> <operator>=</operator> <name>psz_parser</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_module</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_parser</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_temp</name></expr></argument>, <argument><expr><literal type="string">"%s,none"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_InternalAddIntf</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_modules</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"network-synchronisation"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_InternalAddIntf</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"netsync,none"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-view-top"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-view-left"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-view-bottom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-view-right"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-clip-top"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-clip-left"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-clip-bottom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-clip-right"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"drawable-nsobject"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetFilenames</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>i_argc</name> <operator>-</operator> <name>vlc_optind</name></expr></argument>, <argument><expr><name>ppsz_argv</name> <operator>+</operator> <name>vlc_optind</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_val</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>intf_InsertItem</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"intf-popupmenu"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"intf-toggle-fscontrol"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"intf-boss"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"intf-show"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>libvlc_InternalCleanup</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_InternalCleanup</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_preparser_Deactivate</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"removing all interfaces"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>intf_DestroyAll</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_thumbnailer_Release</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>media_source_provider</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_media_source_provider_Delete</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>media_source_provider</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_InternalDialogClean</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_InternalKeystoreClean</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_vlm</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlm_Delete</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_vlm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidfile</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"pidfile"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pidfile</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"removing PID file %s"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlink</name><argument_list>( <argument><expr><name>pidfile</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"cannot remove PID file %s: %s"</literal></expr></argument>,

<argument><expr><name>pidfile</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pidfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_preparser_Delete</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>main_playlist</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_Delete</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>main_playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>priv</name><operator>-&gt;</operator><name>p_media_library</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_MlRelease</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_media_library</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_InternalActionsClean</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"ignore-config"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_AutoSaveConfigFile</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_LogDestroy</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_EndBank</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>system_End</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_InternalDestroy</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetFilenames</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>args</name><index>[]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>args</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_options</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><literal type="string">"options %s without item"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>mrl</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>( <argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>mrl</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>intf_InsertItem</name><argument_list>( <argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>mrl</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>mrl</name></expr> </then><else>: <expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr></argument>, <argument><expr><name>i_options</name></expr></argument>,

<argument><expr><operator>(</operator> <ternary><condition><expr><name>i_options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary> <operator>)</operator></expr></argument>,

<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_MetadataRequest</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>i_options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_preparser_Push</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>i_options</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_MetadataRequest</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>i_options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_SCOPE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>i_preparse_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_MetadataRequest</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>i_options</name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_ArtRequest</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>i_options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_fetcher_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_preparser_fetcher_Push</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>i_options</name></expr></argument>,

<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>cbs_userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_MetadataCancel</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_preparser_Cancel</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
