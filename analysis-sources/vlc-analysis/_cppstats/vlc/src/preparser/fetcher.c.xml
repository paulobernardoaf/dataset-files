<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\preparser\fetcher.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta_fetcher.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"art.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetcher.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/input_interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/background_worker.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc/interrupt.h"</cpp:file></cpp:include>

<struct>struct <name>input_fetcher_t</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>local</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>network</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>downloader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>album_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>owner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>fetcher_request</name> <block>{

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_fetcher_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>fetcher_thread</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_worker</name>)<parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_interrupt_t</name></type> <name>interrupt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_bool</name></type> <name>active</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>CreateCacheKey</name><parameter_list>( <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>artist</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>album</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Album</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>date</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Date</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>artist</name> <operator>||</operator> <operator>!</operator><name>album</name> <operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="string">"%s:%zu:%s:%zu:%s"</literal></expr></argument>,

<argument><expr><name>artist</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>artist</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>album</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>album</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>date</name></expr> ?</condition><then> <expr><name>date</name></expr> </then><else>: <expr><literal type="string">"0000"</literal></expr></else></ternary></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeCacheEntry</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadAlbumCache</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>CreateCacheKey</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>key</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>art</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>album_cache</name></name></expr></argument>,

<argument><expr><name>key</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>art</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>( <argument><expr><name>item</name></expr></argument>, <argument><expr><name>art</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>art</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddAlbumCache</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>overwrite</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>art</name> <init>= <expr><call><name>input_item_GetArtURL</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>CreateCacheKey</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>key</name> <operator>&amp;&amp;</operator> <name>art</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>( <argument><expr><name>art</name></expr></argument>, <argument><expr><literal type="string">"attachment://"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>overwrite</name> <operator>||</operator> <operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>album_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>album_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>art</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>art</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>art</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InvokeModule</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>meta_fetcher_t</name><modifier>*</modifier></type> <name>mf</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>mf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>mf</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>e_scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module_t</name><modifier>*</modifier></type> <name>mf_module</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>mf_module</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>mf</name></expr></argument>, <argument><expr><name>mf_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CheckMeta</name><parameter_list>( <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>||</operator>

<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Artist</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_Album</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CheckArt</name><parameter_list>( <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>||</operator>

<operator>!</operator><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SearchArt</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InvokeModule</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><literal type="string">"art finder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CheckArt</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SearchByScope</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CheckMeta</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>InvokeModule</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><literal type="string">"meta fetcher"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>CheckArt</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator> <call><name>ReadAlbumCache</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>item</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator> <call><name>input_FindArtInCacheUsingItemUID</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator> <call><name>input_FindArtInCache</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator> <call><name>SearchArt</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>scope</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddAlbumCache</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>background_worker_Push</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NotifyArtFetchEnded</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fetched</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_art_fetch_ended</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>on_art_fetch_ended</name></name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>fetched</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Downloader</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ReadAlbumCache</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arturl</name> <init>= <expr><call><name>input_item_GetArtURL</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_arturl</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument>, <argument><expr><literal type="string">"file://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument>, <argument><expr><literal type="string">"attachment://"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>source</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>output_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>output_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>output_stream</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>read</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>read</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>output_stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>output_stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_SaveArt</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name><name>output_stream</name><operator>.</operator><name>ptr</name></name></expr></argument>,

<argument><expr><name><name>output_stream</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>output_stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddAlbumCache</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"item-change"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetArtFetched</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NotifyArtFetchEnded</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>psz_arturl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SearchLocal</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>SearchByScope</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>FETCHER_SCOPE_LOCAL</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"metadata-network-access"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>req</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_NETWORK</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>background_worker_Push</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>NotifyArtFetchEnded</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_SetArtNotFound</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NotifyArtFetchEnded</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SearchNetwork</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>SearchByScope</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>FETCHER_SCOPE_NETWORK</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_SetArtNotFound</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NotifyArtFetchEnded</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RequestRelease</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>req_</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name> <init>= <expr><name>req_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RequestHold</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>req_</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name> <init>= <expr><name>req_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>FetcherThread</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_thread</name></name><modifier>*</modifier></type> <name>th</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>th</name><operator>-&gt;</operator><name>pf_worker</name></name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>req</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_worker_RequestProbe</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>worker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>StartWorker</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type>( <modifier>*</modifier><name>pf_worker</name> )<parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>bg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_thread</name></name><modifier>*</modifier></type> <name>th</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <name/></sizeof>*<name>th</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>th</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>worker</name></name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <name>fetcher</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pf_worker</name></name> <operator>=</operator> <name>pf_worker</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>FetcherThread</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_deinit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>th</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeWorker</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>fetcher_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>th_</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>fetcher_thread</name><operator>*</operator><operator>)</operator><name>th_</name><operator>)</operator><operator>-&gt;</operator><name>active</name></expr></argument> )</argument_list></call></expr>;</return>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>fetcher_</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseWorker</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>fetcher_</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>th_</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_thread</name></name><modifier>*</modifier></type> <name>th</name> <init>= <expr><name>th_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>fetcher_</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_kill</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>th</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_deinit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>th</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_STARTER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>worker</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int Start ##name( void* fetcher_, void* req_, void** out ) { input_fetcher_t* fetcher = fetcher_; return StartWorker( fetcher, name, worker, req_, out ); }</cpp:value></cpp:define>

<macro><name>DEF_STARTER</name><argument_list>( <argument>SearchLocal</argument>, <argument>fetcher-&gt;local</argument> )</argument_list></macro>

<macro><name>DEF_STARTER</name><argument_list>(<argument>SearchNetwork</argument>, <argument>fetcher-&gt;network</argument> )</argument_list></macro>

<macro><name>DEF_STARTER</name><argument_list>( <argument>Downloader</argument>, <argument>fetcher-&gt;downloader</argument> )</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WorkerInit</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>worker</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type>( <modifier>*</modifier><name>starter</name> )<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker_config</name></name></type> <name>conf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>default_timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>max_threads</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"fetch-art-threads"</literal></expr></argument> )</argument_list></call></expr>,

<expr><operator>.</operator><name>pf_start</name> <operator>=</operator> <name>starter</name></expr>,

<expr><operator>.</operator><name>pf_probe</name> <operator>=</operator> <name>ProbeWorker</name></expr>,

<expr><operator>.</operator><name>pf_stop</name> <operator>=</operator> <name>CloseWorker</name></expr>,

<expr><operator>.</operator><name>pf_release</name> <operator>=</operator> <name>RequestRelease</name></expr>,

<expr><operator>.</operator><name>pf_hold</name> <operator>=</operator> <name>RequestHold</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>worker</name> <operator>=</operator> <call><name>background_worker_New</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>input_fetcher_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>owner</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>fetcher</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>fetcher</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>owner</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WorkerInit</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name>StartSearchLocal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WorkerInit</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr></argument>, <argument><expr><name>StartSearchNetwork</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WorkerInit</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr></argument>, <argument><expr><name>StartDownloader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name> <operator>||</operator> <operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name> <operator>||</operator> <operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>album_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fetcher</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_fetcher_Push</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_fetcher_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fetcher_request</name></name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <name/></sizeof>*<name>req</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>req</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <name>cbs_userdata</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>background_worker</name></name><modifier>*</modifier></type> <name>worker</name> <init>=

<expr><ternary><condition><expr><name>options</name> <operator>&amp;</operator> <name>META_REQUEST_OPTION_FETCH_LOCAL</name></expr> ?</condition><then> <expr><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name></expr> </then><else>: <expr><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>background_worker_Push</name><argument_list>( <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>NotifyArtFetchEnded</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RequestRelease</name><argument_list>( <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_fetcher_Delete</name><parameter_list>( <parameter><decl><type><name>input_fetcher_t</name><modifier>*</modifier></type> <name>fetcher</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>local</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>network</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>background_worker_Delete</name><argument_list>( <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>downloader</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>album_cache</name></name></expr></argument>, <argument><expr><name>FreeCacheEntry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>fetcher</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
