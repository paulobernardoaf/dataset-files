<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\playlist\content.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"control.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preparse.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>

<name>vlc_playlist_ClearItems</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>item</argument>, <argument>&amp;playlist-&gt;items</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>vlc_playlist_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_ItemsReset</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>randomizer_Clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_reset</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_ItemsInserted</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name> <init>= <expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_added</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_AutoPreparse</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_ItemsMoved</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>current</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>target</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>index</name> <operator>&amp;&amp;</operator> <name>current</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <name>target</name> <operator>-</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>index</name> <operator>+</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>current</name> <operator>&lt;</operator> <name>target</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>index</name> <operator>&amp;&amp;</operator> <name>current</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>-=</operator> <name>index</name> <operator>-</operator> <name>target</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>target</name> <operator>&amp;&amp;</operator> <name>current</name> <operator>&lt;</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_moved</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_ItemsRemoving</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>randomizer_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>vlc_playlist_ItemsRemoved</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>current_media_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>current</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>index</name> <operator>&amp;&amp;</operator> <name>current</name> <operator>&lt;</operator> <name>index</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>+</operator> <name>count</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current_media_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>index</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_removed</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>current_media_changed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_ItemReplaced</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_updated</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_AutoPreparse</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type>

<name>vlc_playlist_Count</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type>

<name>vlc_playlist_Get</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_playlist_IndexOf</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_index_of</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_playlist_IndexOfMedia</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>playlist_item_vector_t</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>items</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>media</name> <operator>==</operator> <name>media</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_playlist_IndexOfId</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>playlist_item_vector_t</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>items</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_playlist_Clear</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_playlist_ClearItems</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemsReset</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vlc_playlist_MediaToItems</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>media</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name><name>items</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_playlist_item_New</name><argument_list>(<argument><expr><name><name>media</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_item_Release</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_Insert</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>media</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;=</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_insert_hole</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_MediaToItems</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>media</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_vector_remove_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemsInserted</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_playlist_Move</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <name>count</name> <operator>&lt;=</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>target</name> <operator>+</operator> <name>count</name> <operator>&lt;=</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_move_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemsMoved</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_playlist_Remove</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemsRemoving</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_item_Release</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vector_remove_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>current_media_changed</name> <init>= <expr><call><name>vlc_playlist_ItemsRemoved</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_media_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_SetCurrentMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vlc_playlist_Replace</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_item_New</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>randomizer_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_item_Release</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemReplaced</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_Expand</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>media</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_RemoveOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_Replace</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>media</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_insert_hole</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_playlist_MediaToItems</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>media</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_vector_remove_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_ItemsInserted</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>index</name> <operator>==</operator> <name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_SetCurrentMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
