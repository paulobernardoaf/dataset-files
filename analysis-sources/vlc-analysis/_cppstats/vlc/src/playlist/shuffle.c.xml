<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\playlist\shuffle.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"control.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>

<name>vlc_playlist_Shuffle</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><ternary><condition><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>

?</condition><then> <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>xsubi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name>xsubi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xsubi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>selected</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><call><name>nrand48</name><argument_list>(<argument><expr><name>xsubi</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>selected</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>selected</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>vlc_playlist_IndexOf</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_items_reset</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
