<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\playlist\control.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"control.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"item.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_PlaybackOrderChanged</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>randomizer_Count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomizer_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>loop</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>randomizer_Clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_playback_order_changed</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>state_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>:</case>

<expr_stmt><expr><name>state_text</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>:</case>

<expr_stmt><expr><name>state_text</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"On"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Random: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>state_text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>state_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_PlaybackRepeatChanged</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>loop</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomizer_SetLoop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Notify</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>on_playback_repeat_changed</name></expr></argument>, <argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>state_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>

<expr_stmt><expr><name>state_text</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>

<expr_stmt><expr><name>state_text</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"All"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>

<expr_stmt><expr><name>state_text</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"One"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Loop: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>state_text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>state_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type>

<name>vlc_playlist_GetPlaybackRepeat</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type>

<name>vlc_playlist_GetPlaybackOrder</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_playlist_SetPlaybackRepeat</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>repeat</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>=</operator> <name>repeat</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_PlaybackRepeatChanged</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_playlist_SetPlaybackOrder</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>order</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_PlaybackOrderChanged</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_SetCurrentMedia</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>

?</condition><then> <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>media</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_playlist_NormalOrderHasPrev</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_playlist_NormalOrderGetPrevIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_playlist_NormalOrderHasNext</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_playlist_NormalOrderGetNextIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_playlist_RandomOrderHasPrev</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>randomizer_HasPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_playlist_RandomOrderGetPrevIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>randomizer_PeekPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_IndexOf</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_playlist_RandomOrderHasNext</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>randomizer_HasNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_playlist_RandomOrderGetNextIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>randomizer_PeekNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_IndexOf</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>vlc_playlist_GetPrevIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_NormalOrderGetPrevIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_RandomOrderGetPrevIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>vlc_playlist_GetNextIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_NormalOrderGetNextIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_RandomOrderGetNextIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_playlist_ComputeHasPrev</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_NormalOrderHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_RandomOrderHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_playlist_ComputeHasNext</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_NormalOrderHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>:</case>

<return>return <expr><call><name>vlc_playlist_RandomOrderHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_playlist_GetCurrentIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_playlist_SetCurrentIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_Save</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name> <operator>=</operator> <call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_state_NotifyChanges</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_playlist_HasPrev</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>has_prev</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_playlist_HasNext</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>has_next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_Prev</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_playlist_ComputeHasPrev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetPrevIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_SetCurrentMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><call><name>randomizer_Prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected</name> <operator>==</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Previous"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_Next</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetNextIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_SetCurrentMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><call><name>randomizer_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected</name> <operator>==</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name><name>playlist</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_playlist_GoTo</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>index</name> <operator>&lt;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_SetCurrentMedia</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>playlist</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomizer_Select</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>playlist</name><operator>-&gt;</operator><name>randomizer</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>vlc_playlist_GetNextMediaIndex</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>playlist</name><operator>-&gt;</operator><name>repeat</name></name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>playlist</name><operator>-&gt;</operator><name>current</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_playlist_ComputeHasNext</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_playlist_GetNextIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type>

<name>vlc_playlist_GetNextMedia</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_AssertLocked</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetNextMediaIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><name><name>playlist</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>media</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>media</name></expr>;</return>

</block_content>}</block></function>

</unit>
