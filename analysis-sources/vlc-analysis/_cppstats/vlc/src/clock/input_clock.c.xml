<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\clock\input_clock.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input_clock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clock_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR_MAX_GAP</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(60)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR_MEAN_PTS_GAP</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(300)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR_BUFFERING_RATE</name></cpp:macro> <cpp:value>(48)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR_BUFFERING_TARGET</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_CLOCK_LATE_COUNT</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<struct>struct <name>input_clock_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>clock_point_t</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_ts_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buffering_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_drift_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>average_t</name></type> <name>drift</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name><name>pi_value</name><index>[<expr><name>INPUT_CLOCK_LATE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name></decl>;</decl_stmt>

}</block> <decl><name>late</name></decl>;</struct>

<decl_stmt><decl><type><name>clock_point_t</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_reference</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_external_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_external_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pause_date</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockStreamToSystem</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stream</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockSystemToStream</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_system</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockGetTsOffset</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>input_clock_t</name> <modifier>*</modifier></type><name>input_clock_New</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cl</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>cl</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>( <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_external_clock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>( <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_next_drift_update</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AvgInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<return>return <expr><name>cl</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_Delete</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AvgClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>cl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>input_clock_Update</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_log</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_can_pace_control</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_buffering_allowed</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ck_stream</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ck_system</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_reset_reference</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ck_stream</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name>i_ck_system</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_reset_reference</name><operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name> <operator>-</operator> <name>i_ck_stream</name><operator>)</operator> <operator>&gt;</operator> <name>CR_MAX_GAP</name> <operator>||</operator>

<operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name> <operator>-</operator> <name>i_ck_stream</name><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><name>CR_MAX_GAP</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_log</name></expr></argument>, <argument><expr><literal type="string">"clock gap, unexpected stream discontinuity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_log</name></expr></argument>, <argument><expr><literal type="string">"feeding synchro with a new reference point trying to recover from clock gap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_reset_reference</name><operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_reset_reference</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_next_drift_update</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AvgReset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name> <operator>+</operator> <name>CR_MEAN_PTS_GAP</name></expr></argument>, <argument><expr><name>i_ck_system</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name>i_ck_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_external_clock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_can_pace_control</name> <operator>&amp;&amp;</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_next_drift_update</name></name> <operator>&lt;</operator> <name>i_ck_system</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_converted</name> <init>= <expr><call><name>ClockSystemToStream</name><argument_list>( <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>i_ck_system</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AvgUpdate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument>, <argument><expr><name>i_converted</name> <operator>-</operator> <name>i_ck_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_next_drift_update</name></name> <operator>=</operator> <name>i_ck_system</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_can_pace_control</name> <operator>||</operator> <name>b_reset_reference</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>b_buffering_allowed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><name>i_ck_stream</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>+=</operator> <operator>(</operator> <name>i_duration</name> <operator>*</operator> <name>CR_BUFFERING_RATE</name> <operator>+</operator> <literal type="number">255</literal> <operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>&gt;</operator> <name>CR_BUFFERING_TARGET</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>=</operator> <name>CR_BUFFERING_TARGET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>( <argument><expr><name>i_ck_system</name></expr></argument>, <argument><expr><name>i_ck_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_system_expected</name> <init>= <expr><call><name>ClockStreamToSystem</name><argument_list>( <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>i_ck_stream</name> <operator>+</operator> <call><name>AvgGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_late</name> <init>= <expr><operator>(</operator> <name>i_ck_system</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>)</operator> <operator>-</operator> <name>i_system_expected</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_late</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name></expr>]</index></name> <operator>=</operator> <name>i_late</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <operator>(</operator> <name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>i_late</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_late</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_Reset</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>clock_point_Create</name><argument_list>( <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_external_clock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_ChangeRate</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>-</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name><operator>)</operator> <operator>/</operator> <name>rate</name> <operator>*</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_ChangePause</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_paused</name></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>!</operator><name>b_paused</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>b_paused</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><name>i_date</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_pause_date</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name> <operator>&amp;&amp;</operator> <name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>i_duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>i_duration</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_pause_date</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>b_paused</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>input_clock_GetWakeup</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_wakeup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_wakeup</name> <operator>=</operator> <call><name>ClockStreamToSystem</name><argument_list>( <argument><expr><name>cl</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name> <operator>+</operator> <call><name>AvgGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_wakeup</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_clock_ConvertTS</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_rate</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_ts0</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_ts1</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts_bound</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pi_ts0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_rate</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_rate</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">"Timestamp conversion failed for %"</literal><name>PRId64</name><literal type="string">": "</literal>

<literal type="string">"no reference clock"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pi_ts0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_ts0</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_ts1</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_ts1</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_ts_buffering</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>i_buffering_duration</name></name> <operator>/</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_ts_delay</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>+</operator> <call><name>ClockGetTsOffset</name><argument_list>( <argument><expr><name>cl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_ts0</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_ts0</name> <operator>=</operator> <call><name>ClockStreamToSystem</name><argument_list>( <argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_ts0</name> <operator>+</operator> <call><name>AvgGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_ts0</name> <operator>&gt;</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_ts_max</name></name> <operator>=</operator> <operator>*</operator><name>pi_ts0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_ts0</name> <operator>+=</operator> <name>i_ts_delay</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_ts1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_ts1</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_ts1</name> <operator>=</operator> <call><name>ClockStreamToSystem</name><argument_list>( <argument><expr><name>cl</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_ts1</name> <operator>+</operator> <call><name>AvgGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>+</operator>

<name>i_ts_delay</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ts_bound</name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_ts0</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pi_ts0</name> <operator>&gt;=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name>i_ts_delay</name> <operator>+</operator> <name>i_ts_buffering</name> <operator>+</operator> <name>i_ts_bound</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_object</name></expr></argument>,

<argument><expr><literal type="string">"Timestamp conversion failed (delay %"</literal><name>PRId64</name><literal type="string">", buffering "</literal>

<literal type="string">"%"</literal><name>PRId64</name><literal type="string">", bound %"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name>i_ts_delay</name></expr></argument>, <argument><expr><name>i_ts_buffering</name></expr></argument>, <argument><expr><name>i_ts_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>input_clock_GetRate</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>rate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_clock_GetState</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_stream_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_system_start</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_stream_duration</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_system_duration</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_stream_start</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_system_start</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_stream_duration</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>stream</name></name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_system_duration</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_ChangeSystemOrigin</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_absolute</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_system</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_absolute</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name>i_system</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name> <operator>-</operator> <call><name>ClockGetTsOffset</name><argument_list>( <argument><expr><name>cl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_has_external_clock</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_external_clock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_external_clock</name></name> <operator>=</operator> <name>i_system</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name>i_system</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_external_clock</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>system</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_clock_GetSystemOrigin</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_system</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_delay</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_system</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_delay</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_delay</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:warning>#<cpp:directive>warning</cpp:directive> <cpp:literal>"input_clock_SetJitter needs more work"</cpp:literal></cpp:warning>

<function><type><name>void</name></type> <name>input_clock_SetJitter</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cr_average</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_delay_delta</name> <init>= <expr><name>i_pts_delay</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name><name>pi_late</name><index>[<expr><name>INPUT_CLOCK_LATE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pi_late</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name><index>[<expr><operator>(</operator><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>%</operator><name>INPUT_CLOCK_LATE_COUNT</name></expr>]</index></name> <operator>-</operator> <name>i_delay_delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pi_late</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name><index>[<expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name></expr>]</index></name> <operator>=</operator> <name><name>pi_late</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <operator>(</operator> <name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>i_index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <name>INPUT_CLOCK_LATE_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>&lt;</operator> <name>i_pts_delay</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>=</operator> <name>i_pts_delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cr_average</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_cr_average</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cl</name><operator>-&gt;</operator><name>drift</name><operator>.</operator><name>range</name></name> <operator>!=</operator> <name>i_cr_average</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AvgRescale</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>drift</name></name></expr></argument>, <argument><expr><name>i_cr_average</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>input_clock_GetJitter</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INPUT_CLOCK_LATE_COUNT</name> <operator>!=</operator> <literal type="number">3</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unsupported INPUT_CLOCK_LATE_COUNT"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>late</name><operator>.</operator><name>pi_value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_late_median</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>__MAX</name><argument_list>(<argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delay</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_pts_delay</name> <operator>+</operator> <name>i_late_median</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockStreamToSystem</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator> <operator>(</operator><operator>(</operator> <name>i_stream</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>stream</name></name> <operator>)</operator> <operator>/</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name><operator>)</operator> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockSystemToStream</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_system</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>b_has_reference</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator> <operator>(</operator><operator>(</operator> <name>i_system</name> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>system</name></name> <operator>)</operator> <operator>*</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name><operator>)</operator> <operator>+</operator> <name><name>cl</name><operator>-&gt;</operator><name>ref</name><operator>.</operator><name>stream</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ClockGetTsOffset</name><parameter_list>( <parameter><decl><type><name>input_clock_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cl</name><operator>-&gt;</operator><name>i_pts_delay</name></name> <operator>*</operator> <operator>(</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>cl</name><operator>-&gt;</operator><name>rate</name></name> <operator>-</operator> <literal type="number">1.0f</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
