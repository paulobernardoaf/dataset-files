<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\clock\clock_internal.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clock_internal.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>AvgInit</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type><name>avg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AvgReset</name><argument_list>(<argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AvgClean</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type> <name>avg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AvgReset</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type><name>avg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AvgUpdate</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type><name>avg</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_value_weight</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>average_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>divider</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avg</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>avg</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>average_weight</name> <operator>=</operator> <name><name>avg</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>divider</name> <operator>=</operator> <name><name>avg</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>average_weight</name> <operator>=</operator> <name><name>avg</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>divider</name> <operator>=</operator> <name><name>avg</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>tmp</name> <init>= <expr><name>average_weight</name> <operator>*</operator> <name><name>avg</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>new_value_weight</name> <operator>*</operator> <name>value</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <name>divider</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>AvgGet</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type><name>avg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>avg</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AvgRescale</name><parameter_list>(<parameter><decl><type><name>average_t</name> <modifier>*</modifier></type><name>avg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>tmp</name> <init>= <expr><name><name>avg</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <name><name>avg</name><operator>-&gt;</operator><name>range</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avg</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <name><name>avg</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
