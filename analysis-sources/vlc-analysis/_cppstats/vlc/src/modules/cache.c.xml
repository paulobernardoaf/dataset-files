<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\modules\cache.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DYNAMIC_PLUGINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SUBVERSION_NUM</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_NAME</name></cpp:macro> <cpp:value>"plugins.dat"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_STRING</name></cpp:macro> <cpp:value>"cache "PACKAGE_NAME" "PACKAGE_VERSION</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_immediate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_bool</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <name>n</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <name><name>str</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_align</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>align</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name> <init>= <expr><operator>(</operator><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>%</operator> <name>align</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>skip</name> <operator>&lt;</operator> <name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>%</operator> <name>align</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_IMMEDIATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (vlc_cache_load_immediate(&amp;(a), file, sizeof (a))) goto error</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FLAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool b; if (vlc_cache_load_bool(&amp;b, file)) goto error; (a) = b; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ARRAY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const void *base; if (vlc_cache_load_array(&amp;base, sizeof (*(a)), (n), file)) goto error; (a) = base; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_STRING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (vlc_cache_load_string(&amp;(a), file)) goto error</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ALIGNOF</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (vlc_cache_load_align(alignof(t), file)) goto error</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_config</name><parameter_list>(<parameter><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_short</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_unsaveable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_safe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_removed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_longtext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>psz</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>psz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>psz</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>psz</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name></name> <operator>=</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> 

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>orig</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOAD_ALIGNOF</name><argument_list>(<argument><expr><operator>*</operator><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD_ARRAY</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name></name> <operator>=</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>LOAD_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> 

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_plugin_config</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>lines</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>module_config_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_config</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CONFIG_ITEM</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>CONFIG_ITEM_BOOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>booleans</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>plugin</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_cache_load_module</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>vlc_module_create</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>module</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_shortname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name> <operator>&gt;</operator> <name>MODULE_SHORTCUT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>pp_shortcuts</name></name> <operator>=</operator>

<call><name>xmalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>module</name><operator>-&gt;</operator><name>pp_shortcuts</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>activate_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>deactivate_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_capability</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>i_score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>vlc_cache_load_plugin</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>vlc_plugin_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>plugin</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>modules</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modules</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_module</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_plugin_config</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>textdomain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD_STRING</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD_FLAG</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>unloadable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_IMMEDIATE</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>-&gt;</operator><name>textdomain</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_bindtextdomain</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>textdomain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>plugin</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_plugin_destroy</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>vlc_cache_load</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>backingp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><macro><name>asprintf</name><argument_list>( <argument>&amp;psz_filename</argument>, <argument><literal type="string">"%s"</literal>DIR_SEP CACHE_NAME</argument>, <argument>dir</argument> )</argument_list></macro> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"loading plugins cache file %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>block_FilePath</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot read %s: %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cachestr</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>CACHE_STRING</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><name>cachestr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cachestr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>cachestr</name></expr></argument>, <argument><expr><name>CACHE_STRING</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cachestr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"This doesn't look like a valid plugins cache"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISTRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>distrostr</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>DISTRO_VERSION</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><name>distrostr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>distrostr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>distrostr</name></expr></argument>, <argument><expr><name>DISTRO_VERSION</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>distrostr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"This doesn't look like a valid plugins cache"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>marker</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>marker</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <name>marker</name> <operator>!=</operator> <name>CACHE_SUBVERSION_NUM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"This doesn't look like a valid plugins cache "</literal>

<literal type="string">"(corrupted header)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cache_load_immediate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>marker</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISTRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>marker</name> <operator>!=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>cachestr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>distrostr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></sizeof><operator>)</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>||</operator> <name>marker</name> <operator>!=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>cachestr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"This doesn't look like a valid plugins cache "</literal>

<literal type="string">"(corrupted header)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>vlc_cache_load_plugin</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>,

<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>abspath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_plugin_destroy</name><argument_list>(<argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <name>plugin</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>backingp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>backingp</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<return>return <expr><name>cache</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"plugins cache not loaded (corrupted)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_IMMEDIATE</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (fwrite (&amp;(a), sizeof(a), 1, file) != 1) goto error</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_FLAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char b = (a); SAVE_IMMEDIATE(b); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveString</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>str</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition>

<block>{<block_content>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_STRING</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (CacheSaveString (file, (a))) goto error</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveAlign</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>align</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name> <init>= <expr><operator>(</operator><operator>-</operator><call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>align</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>skip</name><operator>)</operator> <operator>%</operator> <name>align</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_ALIGNOF</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (CacheSaveAlign(file, alignof (t))) goto error</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveConfig</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_short</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_unsaveable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_safe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_FLAG</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>b_removed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_longtext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsConfigStringType</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SAVE_ALIGNOF</name><argument_list>(<argument><expr><operator>*</operator><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SAVE_STRING</name> <argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveModuleConfig</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>lines</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name> <argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CacheSaveConfig</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveModule</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>module</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_shortname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>module</name><operator>-&gt;</operator><name>i_shortcuts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>pp_shortcuts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>activate_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>deactivate_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_capability</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name><argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>i_score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CacheSaveBank</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name> <argument_list>(<argument><expr><name>CACHE_STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISTRO_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>( <argument><expr><name>DISTRO_VERSION</name></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_file_size</name> <operator>=</operator> <name>CACHE_SUBVERSION_NUM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i_file_size</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>i_file_size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_file_size</name> <operator>=</operator> <call><name>ftell</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i_file_size</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>i_file_size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_plugin_t</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>modules_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name><name>plugin</name><operator>-&gt;</operator><name>module</name></name></expr></init></decl>;</init>

<condition><expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>module</name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CacheSaveModule</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>CacheSaveModuleConfig</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>textdomain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_STRING</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_FLAG</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>unloadable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAVE_IMMEDIATE</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

<label><name>error</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CacheSave</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>asprintf</name> <argument_list>(<argument>&amp;filename</argument>, <argument><literal type="string">"%s"</literal>DIR_SEP CACHE_NAME</argument>, <argument>dir</argument> )</argument_list></macro> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmpname</name></expr></argument>, <argument><expr><literal type="string">"%s.%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"saving plugins cache %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>vlc_fopen</name> <argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EACCES</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot create %s: %s"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CacheSaveBank</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot write %s: %s"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearerr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_unlink</name> <argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vlc_rename</name> <argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vlc_unlink</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rename</name> <argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_plugin_t</name> <modifier>*</modifier></type><name>vlc_cache_lookup</name><parameter_list>(<parameter><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_plugin_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><name>cache</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plugin</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>plugin</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>plugin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>plugin</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
