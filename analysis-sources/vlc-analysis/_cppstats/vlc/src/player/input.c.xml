<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\player\input.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type>

<name>vlc_player_input_FindTrackById</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>vec</name></expr> ?</condition><then> <expr><call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleAtoBLoop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>!=</operator> <name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>

<operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>

<operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>

<name>vlc_player_input_GetTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name><name>player</name><operator>-&gt;</operator><name>input</name></name>

<operator>&amp;&amp;</operator> <call><name>vlc_player_GetTimerPoint</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ts</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>time</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type>

<name>vlc_player_input_GetPos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name><name>player</name><operator>-&gt;</operator><name>input</name></name>

<operator>&amp;&amp;</operator> <call><name>vlc_player_GetTimerPoint</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_UpdateTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_HandleAtoBLoop</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>vlc_player_input_GetTime</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vlc_player_input_GetPos</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_input_Start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_Start</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>vlc_player_WaitRetryDelay</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETRY_TIMEOUT_BASE</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETRY_TIMEOUT_MAX</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(3200)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><name>RETRY_TIMEOUT_BASE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>player</name><operator>-&gt;</operator><name>error_count</name></name>

<operator>&amp;&amp;</operator> <name>delay</name> <operator>&lt;</operator> <name>RETRY_TIMEOUT_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>delay</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><name>delay</name> <operator>+=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>start_delay_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,

<argument><expr><name>delay</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_input_HandleState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>state_date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_STOPPING</name>

<operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>send_event</name> <init>= <expr><name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>!=</operator> <name>state</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>input</name> <operator>!=</operator> <name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_title_list_Release</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_titles_changed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_ResetTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>VLC_PLAYER_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_WaitRetryDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>deleting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_OpenNextMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>media_stopped_action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_MEDIA_STOPPED_EXIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>&amp;&amp;</operator> <name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_Start</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_MEDIA_STOPPED_CONTINUE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>&amp;&amp;</operator> <name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_Start</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>send_event</name> <operator>=</operator> <operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateTimerState</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_TIMER_STATE_DISCONTINUITY</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_PrepareNextMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>send_event</name> <operator>=</operator> <operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>&amp;&amp;</operator>

<name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>send_event</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>state_date</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>state_date</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateTimerState</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_TIMER_STATE_PAUSED</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>pause_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>send_event</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_state_changed</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>global_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleStateEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>input_state_e</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>state_date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OPENING_S</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PLAYING_S</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_PLAYING</name></expr></argument>,

<argument><expr><name>state_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PAUSE_S</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_PAUSED</name></expr></argument>,

<argument><expr><name>state_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>END_S</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPING</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_destructor_AddStoppingInput</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_S</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VLC_PLAYER_ERROR_GENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>on_error_changed</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleProgramEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_program</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_program_vector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>program_vector</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_INPUT_PROGRAM_ADDED</name></expr>:</case>

<expr_stmt><expr><name>prgm</name> <operator>=</operator> <call><name>vlc_player_program_New</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prgm</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_push</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_program_Delete</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_program_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>, <argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_PROGRAM_DELETED</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prgm</name> <operator>=</operator> <call><name>vlc_player_program_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prgm</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_program_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_REMOVED</name></expr></argument>, <argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_program_Delete</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_INPUT_PROGRAM_UPDATED</name></expr>:</case>

<case>case <expr><name>VLC_INPUT_PROGRAM_SCRAMBLED</name></expr>:</case>

<expr_stmt><expr><name>prgm</name> <operator>=</operator> <call><name>vlc_player_program_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prgm</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>VLC_INPUT_PROGRAM_UPDATED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_program_Update</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>scrambled</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>scrambled</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_program_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_UPDATED</name></expr></argument>, <argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_PROGRAM_SELECTED</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>unselected_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>selected_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>prgm</argument>, <argument>vec</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selected_id</name> <operator>=</operator> <name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unselected_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unselected_id</name> <operator>=</operator> <name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>unselected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>selected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_program_selection_changed</name></expr></argument>,

<argument><expr><name>unselected_id</name></expr></argument>, <argument><expr><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleTeletextMenu</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_es</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_INPUT_ES_ADDED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"Can't handle more than one teletext menu "</literal>

<literal type="string">"track. Using the last one."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_track_priv_Delete</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name> <operator>=</operator> <call><name>vlc_player_track_priv_New</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,

<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_teletext_menu_changed</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_ES_DELETED</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>teletext_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_track_priv_Delete</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_teletext_menu_changed</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_INPUT_ES_UPDATED</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_ES_SELECTED</name></expr>:</case>

<case>case <expr><name>VLC_INPUT_ES_UNSELECTED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_enabled</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>VLC_INPUT_ES_SELECTED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_teletext_enabled_changed</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleEsEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_es</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>title</name></name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TELETEXT</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_input_HandleTeletextMenu</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_INPUT_ES_ADDED</name></expr>:</case>

<expr_stmt><expr><name>trackpriv</name> <operator>=</operator> <call><name>vlc_player_track_priv_New</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trackpriv</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_push</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>trackpriv</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_track_priv_Delete</name><argument_list>(<argument><expr><name>trackpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_ES_DELETED</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>trackpriv</name> <operator>=</operator> <call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trackpriv</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_REMOVED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_track_priv_Delete</name><argument_list>(<argument><expr><name>trackpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_INPUT_ES_UPDATED</name></expr>:</case>

<expr_stmt><expr><name>trackpriv</name> <operator>=</operator> <call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trackpriv</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_track_priv_Update</name><argument_list>(<argument><expr><name>trackpriv</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_list_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_LIST_UPDATED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_ES_SELECTED</name></expr>:</case>

<expr_stmt><expr><name>trackpriv</name> <operator>=</operator> <call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trackpriv</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>selected_by_user</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>forced</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_selection_changed</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_ES_UNSELECTED</name></expr>:</case>

<expr_stmt><expr><name>trackpriv</name> <operator>=</operator> <call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trackpriv</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_RemoveTimerSource</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>selected_by_user</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_selection_changed</name></expr></argument>,

<argument><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleTitleEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_title</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_INPUT_TITLE_NEW_LIST</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>input_thread_private_t</name> <modifier>*</modifier></type><name>input_th</name> <init>= <expr><call><name>input_priv</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>title_offset</name> <init>= <expr><name><name>input_th</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chapter_offset</name> <init>= <expr><name><name>input_th</name><operator>-&gt;</operator><name>i_seekpoint_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_title_list_Release</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>chapter_selected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name> <operator>=</operator>

<call><name>vlc_player_title_list_Create</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><name>title_offset</name></expr></argument>, <argument><expr><name>chapter_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_titles_changed</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_title_selection_changed</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>==</operator> <name>VLC_RESTOREPOINT_TITLE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>=</operator> <name>VLC_RESTOREPOINT_POSITION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>=</operator> <name>VLC_RESTOREPOINT_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_INPUT_TITLE_SELECTED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>selected_idx</name></name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>selected_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_title_selection_changed</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>==</operator> <name>VLC_RESTOREPOINT_POSITION</name> <operator>&amp;&amp;</operator>

<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>selected_idx</name></name> <operator>&amp;&amp;</operator>

<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>&gt;</operator> <literal type="number">.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_SetPosition</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>=</operator> <name>VLC_RESTOREPOINT_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleChapterEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_chapter</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name></name> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>title</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>title</name></name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>= <expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>chapter_selected</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>seekpoint</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name> <init>= <expr><operator>&amp;</operator><name><name>title</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>seekpoint</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_chapter_selection_changed</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,

<argument><expr><name>chapter</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_input_HandleVoutEvent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event_vout</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=

<expr><call><name>vlc_player_input_FindTrackById</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trackpriv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_video_es</name> <init>= <expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_INPUT_EVENT_VOUT_STARTED</name></expr>:</case>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_vout_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_VOUT_STARTED</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>,

<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_video_es</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_vout_AddCallbacks</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_INPUT_EVENT_VOUT_STOPPED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>is_video_es</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_vout_DelCallbacks</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_vout_changed</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_VOUT_STOPPED</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>,

<argument><expr><name>VLC_VOUT_ORDER_NONE</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>input_thread_Events</name><parameter_list>(<parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input_thread</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_input_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>input_thread</name> <operator>==</operator> <name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>INPUT_EVENT_OUTPUT_CLOCK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>system_ts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name></type> <name>point</name> <init>= <expr><block>{

<expr><operator>.</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>rate</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>rate</name></name></expr>,

<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>ts</name></name></expr>,

<expr><operator>.</operator><name>length</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>,

<expr><operator>.</operator><name>system_date</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>system_ts</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>id</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>master</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>frame_rate</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_UpdateTimerState</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>output_clock</name><operator>.</operator><name>id</name></name></expr></argument>,

<argument><expr><name>VLC_PLAYER_TIMER_STATE_DISCONTINUITY</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>INPUT_EVENT_STATE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleStateEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>value</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_RATE</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_rate_changed</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_CAPABILITIES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_caps</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>capabilities</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_capabilities_changed</name></expr></argument>,

<argument><expr><name>old_caps</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_EVENT_TIMES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_date</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>ms</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>ms</name></name>

<operator>||</operator> <name><name>input</name><operator>-&gt;</operator><name>position</name></name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>percentage</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>ms</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>percentage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>system_date</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_position_changed</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_input_UpdateTime</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>length</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetDuration</name><argument_list>(<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_length_changed</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>normal_time</name></name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>normal_time</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>normal_time</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>normal_time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>normal_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name></type> <name>point</name> <init>= <expr><block>{

<expr><operator>.</operator><name>position</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>position</name></name></expr>,

<expr><operator>.</operator><name>rate</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>rate</name></name></expr>,

<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>+</operator> <name><name>input</name><operator>-&gt;</operator><name>normal_time</name></name></expr>,

<expr><operator>.</operator><name>length</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr>,

<expr><operator>.</operator><name>system_date</name> <operator>=</operator> <name>system_date</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>normal_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>INPUT_EVENT_PROGRAM</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleProgramEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_ES</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleEsEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_TITLE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleTitleEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_CHAPTER</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleChapterEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>chapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_RECORD</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>recording</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>record</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_recording_changed</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>recording</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_STATISTICS</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <operator>*</operator><name><name>event</name><operator>-&gt;</operator><name>stats</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_statistics_changed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_SIGNAL</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>signal_quality</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>signal</name><operator>.</operator><name>quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>signal_strength</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>signal</name><operator>.</operator><name>strength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_signal_changed</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>signal_quality</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>signal_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_CACHE</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_buffering_changed</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_VOUT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_input_HandleVoutEvent</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_ITEM_META</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_media_meta_changed</name></expr></argument>,

<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_ITEM_EPG</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_media_epg_changed</name></expr></argument>,

<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_SUBITEMS</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_media_subitems_changed</name></expr></argument>,

<argument><expr><call><name>input_GetItem</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>subitems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_DEAD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPING</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_destructor_AddJoinableInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_VBI_PAGE</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_page</name></name> <operator>=</operator> <ternary><condition><expr><name><name>event</name><operator>-&gt;</operator><name>vbi_page</name></name> <operator>&lt;</operator> <literal type="number">999</literal></expr> ?</condition><then> <expr><name><name>event</name><operator>-&gt;</operator><name>vbi_page</name></name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_teletext_page_changed</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INPUT_EVENT_VBI_TRANSPARENCY</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_transparent</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>vbi_transparent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_teletext_transparency_changed</name></expr></argument>,

<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_transparent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_input_SelectTracksByStringIds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>input_SetEsCatIds</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>str_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>vlc_player_input_GetSelectedTrackStringIds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_track</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name><modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>t</argument>, <argument>vec</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>selected_by_user</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_es_id_IsStrIdStable</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_track</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_id</name> <init>= <expr><call><name>vlc_es_id_GetStrId</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_track</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>str_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_track</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><ternary><condition><expr><operator>!</operator><name>first_track</name> <operator>&amp;&amp;</operator> <call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type>

<name>vlc_player_input_New</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <name>player</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VLC_PLAYER_ERROR_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>normal_time</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>pause_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>recording</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>signal_quality</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>signal_strength</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>program_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>video_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>audio_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>spu_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>chapter_selected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_enabled</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>teletext_transparent</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_page</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>aspect_ratio</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>crop</name></name> <operator>=</operator>

<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>deinterlace</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>video_filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_title</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_video_track</name></name> <operator>=</operator>

<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_audio_track</name></name> <operator>=</operator>

<name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>current_subtitle_track</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>states</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore</name></name> <operator>=</operator> <name>VLC_RESTOREPOINT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>restore_states</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>delay_restore</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>input_Create</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input_thread_Events</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_input_RestoreMlStates</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>,

<argument><expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>,

<argument><expr><name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>,

<argument><expr><name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name><name>cat_delays</name><index>[<expr><name>DATA_ES</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"audio-desync"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-delay"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i</name> <init>= <expr><name>UNKNOWN_ES</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATA_ES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>cat_delays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cat_delays</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cat_delays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{

<expr><operator>.</operator><name>cat_delay</name> <operator>=</operator> <block>{ <expr><name>i</name></expr>, <expr><name><name>cat_delays</name><index>[<expr><name>i</name></expr>]</index></name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>,

<argument><expr><name>INPUT_CONTROL_SET_CATEGORY_DELAY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_category_delay_changed</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>cat_delays</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>input</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_input_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>program_vector</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>video_track_vector</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>audio_track_vector</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>spu_track_vector</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>program_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>video_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>audio_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>spu_track_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_Close</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
