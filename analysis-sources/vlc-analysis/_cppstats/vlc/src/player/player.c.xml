<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\player\player.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"player.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_renderer_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_decoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input/resource.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/aout_internal.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_PLAYER_CAP_SEEK</name> <operator>==</operator> <name>VLC_INPUT_CAPABILITIES_SEEKABLE</name> <operator>&amp;&amp;</operator>

<name>VLC_PLAYER_CAP_PAUSE</name> <operator>==</operator> <name>VLC_INPUT_CAPABILITIES_PAUSEABLE</name> <operator>&amp;&amp;</operator>

<name>VLC_PLAYER_CAP_CHANGE_RATE</name> <operator>==</operator> <name>VLC_INPUT_CAPABILITIES_CHANGE_RATE</name> <operator>&amp;&amp;</operator>

<name>VLC_PLAYER_CAP_REWIND</name> <operator>==</operator> <name>VLC_INPUT_CAPABILITIES_REWINDABLE</name></expr></argument>,

<argument><expr><literal type="string">"player/input capabilities mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_PLAYER_TITLE_MENU</name> <operator>==</operator> <name>INPUT_TITLE_MENU</name> <operator>&amp;&amp;</operator>

<name>VLC_PLAYER_TITLE_INTERACTIVE</name> <operator>==</operator> <name>INPUT_TITLE_INTERACTIVE</name></expr></argument>,

<argument><expr><literal type="string">"player/input title flag mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_player_foreach_inputs</name><parameter_list>(<parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (struct vlc_player_input *it = player-&gt;input; it != NULL; it = NULL)</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>vlc_player_PrepareNextMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>media_provider</name></name>

<operator>||</operator> <name><name>player</name><operator>-&gt;</operator><name>media_stopped_action</name></name> <operator>==</operator> <name>VLC_PLAYER_MEDIA_STOPPED_STOP</name>

<operator>||</operator> <name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>=</operator>

<call><name><name>player</name><operator>-&gt;</operator><name>media_provider</name><operator>-&gt;</operator><name>get_next</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>media_provider_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_OpenNextMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name> <operator>=</operator>

<name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>releasing_media</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>releasing_media</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator>

<call><name>vlc_player_input_New</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_current_media_changed</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>&amp;&amp;</operator> <name><name>player</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>delay_restore</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_playback_restore_queried</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>ml</name><operator>.</operator><name>delay_restore</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_CancelWaitError</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>start_delay_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>vlc_list_HasInput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>other_input</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>other_input</argument>, <argument>list</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>other_input</name> <operator>==</operator> <name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_destructor_AddInput</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_destructor_AddStoppingInput</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_destructor_AddJoinableInput</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_HasInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_destructor_AddInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_player_destructor_IsEmpty</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>vlc_player_destructor_Thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>deleting</name></name>

<operator>||</operator> <operator>!</operator><call><name>vlc_player_destructor_IsEmpty</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>input</argument>, <argument>&amp;player-&gt;destructor.inputs</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPING</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_destructor_AddStoppingInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateMLStates</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_Stop</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>keep_sout</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>inputs_changed</name> <init>=

<expr><operator>!</operator><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>input</argument>, <argument>&amp;player-&gt;destructor.joinable_inputs</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>keep_sout</name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="string">"sout-keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_STOPPING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_HandleState</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_input_Delete</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>inputs_changed</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>started</name> <init>= <expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>started</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_resource_StopFreeVout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_sout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_resource_TerminateSout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type>

<name>vlc_player_GetProgramCount</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>program_vector</name><operator>.</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetProgramAt</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>program_vector</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>program_vector</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetProgram</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>=

<expr><call><name>vlc_player_program_vector_FindById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>program_vector</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>prgm</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectProgram</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>=

<expr><call><name>vlc_player_program_vector_FindById</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>program_vector</name></name></expr></argument>,

<argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prgm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>,

<argument>INPUT_CONTROL_SET_PROGRAM</argument>,

<argument>&amp;(vlc_value_t) { .i_int = id }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Program</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>prgm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_CycleProgram</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetProgramCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>selected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>=

<expr><call><name>vlc_player_GetProgramAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prgm</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name> <init>=

<expr><call><name>vlc_player_GetProgramAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectNextProgram</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_CycleProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectPrevProgram</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_CycleProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type>

<name>vlc_player_GetTrackCount</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetTrackAt</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetPrivTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_player_track_vector_FindById</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=

<expr><call><name>vlc_player_GetPrivTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>trackpriv</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetEsIdVout</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=

<expr><call><name>vlc_player_GetPrivTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trackpriv</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <name><name>trackpriv</name><operator>-&gt;</operator><name>vout_order</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_es_id_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetEsIdFromVout</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name><name>cats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VIDEO_ES</name></expr>, <expr><name>SPU_ES</name></expr>, <expr><name>AUDIO_ES</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><name><name>cats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_track_vector</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><call><name>vlc_player_input_GetTrackVector</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trackpriv</name><operator>-&gt;</operator><name>vout</name></name> <operator>==</operator> <name>vout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type>

<name>vlc_player_SelectEsIdList</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>es_id_list</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>max_tracks_by_cat</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>UNKNOWN_ES</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <name>UINT_MAX</name></expr>,

<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <literal type="number">2</literal></expr>,

<expr><index>[<expr><name>DATA_ES</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_tracks</name> <init>= <expr><name><name>max_tracks_by_cat</name><index>[<expr><name>cat</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_tracks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>track_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>track_count</name> <operator>&lt;</operator> <name>max_tracks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>track_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_es_id_t</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>allocated_ids</name> <init>=

<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>track_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_es_id_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>allocated_ids</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>track_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>track_count</name> <operator>&lt;</operator> <name>max_tracks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cat</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>allocated_ids</name><index>[<expr><name>track_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>es_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>allocated_ids</name><index>[<expr><name>track_count</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPush</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_ES_LIST</argument>,

<argument>&amp;(input_control_param_t) {

.list.cat = cat</argument>,

<argument>.list.ids = allocated_ids</argument>,

<argument>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cat_name</name> <init>= <expr><call><name>es_format_category_to_string</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>track_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s track: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>track_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Track</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>es_id_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>track_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>es_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s tracks: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_name</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>track_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>vlc_player_GetEsIdList</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>track_count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>track_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>selected_track_count</name> <init>= <expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>track_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selected_track_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>es_id_list</name> <init>=

<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>selected_track_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_es_id_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>es_id_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>es_id_list_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>es_id_list</name><index>[<expr><name>es_id_list_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>track_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>es_id_list</name><index>[<expr><name>es_id_list_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>es_id_list</name><index>[<expr><name>selected_track_count</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>es_id_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type>

<name>vlc_player_SelectEsId</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_select_policy</name></name></type> <name>policy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>policy</name> <operator>==</operator> <name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>input_ControlPushEsHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_ES</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Track</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>es_id_list</name> <init>= <expr><call><name>vlc_player_GetEsIdList</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>es_id_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SelectEsIdList</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>es_id_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>es_id_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectTracksByStringIds</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_ids</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cat_str_ids</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case> <expr_stmt><expr><name>cat_str_ids</name> <operator>=</operator> <operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case> <expr_stmt><expr><name>cat_str_ids</name> <operator>=</operator> <operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case> <expr_stmt><expr><name>cat_str_ids</name> <operator>=</operator> <operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>cat_str_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cat_str_ids</name> <operator>=</operator> <ternary><condition><expr><name>str_ids</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str_ids</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_input_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>str_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_CycleTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>selected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selected</name></expr>)</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selected</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>count</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selected</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_UnselectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectNextTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_CycleTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectPrevTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_CycleTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_UnselectEsId</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPushEsHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_UNSET_ES</name></expr></argument>,

<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Track</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_RestartEsId</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPushEsHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_RESTART_ES</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectCategoryLanguage</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"audio-language"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-language"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>vlc_player_GetCategoryLanguage</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<return>return <expr><call><name>var_GetString</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"audio-language"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<return>return <expr><call><name>var_GetString</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-language"</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetTeletextEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectEsId</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>,

<argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_UnselectEsId</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectTeletextPage</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>page</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>input_ControlPush</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_VBI_PAGE</argument>,

<argument>&amp;(input_control_param_t) {

.vbi_page.id = input-&gt;teletext_menu-&gt;t.es_id</argument>,

<argument>.vbi_page.page = page</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetTeletextTransparency</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>input_ControlPush</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_VBI_TRANSPARENCY</argument>,

<argument>&amp;(input_control_param_t) {

.vbi_transparency.id = input-&gt;teletext_menu-&gt;t.es_id</argument>,

<argument>.vbi_transparency.enabled = enabled</argument>,

<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_player_HasTeletextMenu</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>input</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_player_IsTeletextEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>teletext_enabled</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>teletext_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type>

<name>vlc_player_GetTeletextPage</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>vlc_player_IsTeletextEnabled</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>teletext_page</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_player_IsTeletextTransparent</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_player_IsTeletextEnabled</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>teletext_transparent</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetTitleList</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_player_GetSelectedTitleIdx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>title_selected</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>vlc_player_GetTitleIdx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>titles</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>titles</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>title</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectTitleIdx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_TITLE</argument>,

<argument>&amp;(vlc_value_t){ .i_int = index }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectTitle</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>idx</name> <init>= <expr><call><name>vlc_player_GetTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectChapter</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>chapter_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>idx</name> <init>= <expr><call><name>vlc_player_GetTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>chapter_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectNextTitle</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_TITLE_NEXT</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Next title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectPrevTitle</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_TITLE_PREV</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Previous title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type>

<name>vlc_player_GetSelectedChapterIdx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>chapter_selected</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectChapterIdx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_SEEKPOINT</argument>,

<argument>&amp;(vlc_value_t){ .i_int = index }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Chapter %ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectNextChapter</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_SEEKPOINT_NEXT</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Next chapter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SelectPrevChapter</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_SEEKPOINT_PREV</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Previous chapter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Lock</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_mutex_held</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_mutex_held</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>aout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>vlc_mutex_held</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>timer</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Unlock</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_CondWait</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type>

<name>vlc_player_AddListener</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>listener</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>listener</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>cbs_data</name></name> <operator>=</operator> <name>cbs_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listener</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>listener</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_RemoveListener</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_SetCurrentMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_CancelWaitError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>media</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>=</operator> <call><name>input_item_Hold</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>releasing_media</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>releasing_media</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_destructor_AddInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name> <operator>==</operator> <name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_player_destructor_IsEmpty</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vlc_player_OpenNextMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetCurrentMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_AddAssociatedMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>check_ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name>uri</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SLAVE_TYPE_AUDIO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SLAVE_TYPE_SPU</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>check_ext</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>SLAVE_TYPE_SPU</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>subtitles_Filter</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>slave</name> <init>=

<expr><call><name>input_item_slave_New</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>SLAVE_PRIORITY_USER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slave</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>b_forced</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>p_address</name> <operator>=</operator> <name>slave</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPushHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_ADD_SLAVE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>notify</name></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SLAVE_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><literal type="string">"Audio track added"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_TYPE_SPU</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><literal type="string">"Subtitle track added"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetAssociatedSubsFPS</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-fps"</literal></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_SUBS_FPS</argument>,

<argument>&amp;(vlc_value_t) { .f_float = fps }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_associated_subs_fps_changed</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>float</name></type>

<name>vlc_player_GetAssociatedSubsFPS</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-fps"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_InvalidateNextMedia</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_Start</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_CancelWaitError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_player_destructor_IsEmpty</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>vlc_player_input_New</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>start_paused</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="string">"start-paused"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="string">"start-paused"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_input_Start</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Icon</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>OSD_PLAY_ICON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_Stop</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_CancelWaitError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InvalidateNextMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_destructor_AddInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetMediaStoppedAction</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_media_stopped_action</name></name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media_stopped_action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"play-and-pause"</literal></expr></argument>,

<argument><expr><name>action</name> <operator>==</operator> <name>VLC_PLAYER_MEDIA_STOPPED_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_media_stopped_action_changed</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetStartPaused</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>start_paused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>start_paused</name></name> <operator>=</operator> <name>start_paused</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_SetPause</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>i_int</name> <operator>=</operator> <name>pause</name> <operator>?</operator> <name>PAUSE_S</name> <operator>:</operator> <name>PLAYING_S</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPushHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_STATE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Icon</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pause</name></expr> ?</condition><then> <expr><name>OSD_PAUSE_ICON</name></expr> </then><else>: <expr><name>OSD_PLAY_ICON</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Pause</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SetPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Resume</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SetPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_NextVideoFrame</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPushHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>,

<argument><expr><name>INPUT_CONTROL_SET_FRAME_NEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Next frame"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_player_state</name></name></type>

<name>vlc_player_GetState</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>player</name><operator>-&gt;</operator><name>global_state</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_player_error</name></name></type>

<name>vlc_player_GetError</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>error</name></name></expr> </then><else>: <expr><name>VLC_PLAYER_ERROR_NONE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_GetCapabilities</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type>

<name>vlc_player_GetRate</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>rate</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_ChangeRate</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name>

<operator>&amp;&amp;</operator> <macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>INPUT_CONTROL_SET_RATE</argument>,

<argument>&amp;(vlc_value_t) { .f_float = rate }</argument>)</argument_list></macro> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"Speed: %.2fx"</literal><operator>)</operator></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_rate_changed</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_ChangeRateOffset</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>increment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>rates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">64</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">32</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">16</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">4</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2.0</literal><operator>/</operator><literal type="number">3</literal></expr>,

<expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">1</literal></expr>,

<expr><literal type="number">3.0</literal><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32.0</literal><operator>/</operator><literal type="number">1</literal></expr>, <expr><literal type="number">64.0</literal><operator>/</operator><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>increment</name></expr> ?</condition><then> <expr><literal type="number">1.1f</literal></expr> </then><else>: <expr><literal type="number">0.9f</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>increment</name> <operator>&amp;&amp;</operator> <name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>rate</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>increment</name> <operator>&amp;&amp;</operator> <name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>rate</name> <operator>&amp;&amp;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <ternary><condition><expr><name>increment</name></expr> ?</condition><then> <expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>rates</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_IncrementRate</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_ChangeRateOffset</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_DecrementRate</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_ChangeRateOffset</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>

<name>vlc_player_GetLength</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>

<name>vlc_player_GetTime</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_player_input_GetTime</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type>

<name>vlc_player_GetPosition</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><call><name>vlc_player_input_GetPos</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.f</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_player_assert_seek_params</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>vlc_player_seek_speed</name></name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>speed</name> <operator>==</operator> <name>VLC_PLAYER_SEEK_PRECISE</name>

<operator>||</operator> <name>speed</name> <operator>==</operator> <name>VLC_PLAYER_SEEK_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name>

<operator>||</operator> <name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>speed</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>whence</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_DisplayPosition</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Position</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,

<argument><expr><call><name>vlc_player_input_GetTime</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vlc_player_input_GetPos</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SeekByPos</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>position</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_seek_speed</name></name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_seek_params</name><argument_list>(<argument><expr><name>speed</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>=

<expr><ternary><condition><expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr> ?</condition><then> <expr><name>INPUT_CONTROL_SET_POSITION</name></expr>

</then><else>: <expr><name>INPUT_CONTROL_JUMP_POSITION</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPush</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>type</argument>,

<argument>&amp;(input_control_param_t) {

.pos.f_val = position</argument>,

<argument>.pos.b_fast_seek = speed == VLC_PLAYER_SEEK_FAST</argument>,

<argument>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Position</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SeekByTime</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_seek_speed</name></name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_seek_params</name><argument_list>(<argument><expr><name>speed</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>=

<expr><ternary><condition><expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr> ?</condition><then> <expr><name>INPUT_CONTROL_SET_TIME</name></expr>

</then><else>: <expr><name>INPUT_CONTROL_JUMP_TIME</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPush</name><argument_list>(<argument>input-&gt;thread</argument>, <argument>type</argument>,

<argument>&amp;(input_control_param_t) {

.time.i_val = time</argument>,

<argument>.time.b_fast_seek = speed == VLC_PLAYER_SEEK_FAST</argument>,

<argument>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Position</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetRenderer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <ternary><condition><expr><name>renderer</name></expr> ?</condition><then> <expr><call><name>vlc_renderer_item_hold</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<macro><name>vlc_player_foreach_inputs</name><argument_list>(<argument>input</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name> <init>= <expr><block>{

<expr><operator>.</operator><name>p_address</name> <operator>=</operator> <name>renderer</name> <operator>?</operator> <call><name>vlc_renderer_item_hold</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_RENDERER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_renderer_changed</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetRenderer</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_SetAtoBLoop</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_abloop</name></name></type> <name>abloop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>abloop</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_ABLOOP_A</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_ABLOOP_B</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>

<operator>&amp;&amp;</operator> <name>time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>abloop</name> <operator>=</operator> <name>VLC_PLAYER_ABLOOP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_PLAYER_ABLOOP_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_atobloop_changed</name></expr></argument>, <argument><expr><name>abloop</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_player_abloop</name></name></type>

<name>vlc_player_GetAtoBLoop</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>a_time</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>a_pos</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>b_time</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>b_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_PLAYER_ABLOOP_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>a_time</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>a_pos</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_PLAYER_ABLOOP_A</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>b_time</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>b_pos</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>abloop_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_PLAYER_ABLOOP_B</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Navigate</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_nav</name></name></type> <name>nav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>input_control_e</name></name></type> <name>control</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>nav</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_NAV_ACTIVATE</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_ACTIVATE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_UP</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_UP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_DOWN</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_DOWN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_LEFT</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_LEFT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_POPUP</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_POPUP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_NAV_MENU</name></expr>:</case>

<expr_stmt><expr><name>control</name> <operator>=</operator> <name>INPUT_CONTROL_NAV_MENU</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>input_ControlPushHelper</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>control</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_UpdateViewpoint</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>viewpoint</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{ <expr><operator>.</operator><name>viewpoint</name> <operator>=</operator> <operator>*</operator><name>viewpoint</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_VIEWPOINT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_UPDATE_VIEWPOINT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_player_IsRecording</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><name><name>input</name><operator>-&gt;</operator><name>recording</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetRecordingEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <macro><name>input_ControlPushHelper</name><argument_list>(<argument>input-&gt;thread</argument>,

<argument>INPUT_CONTROL_SET_RECORD_STATE</argument>,

<argument>&amp;(vlc_value_t) { .b_bool = enable }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><ternary><condition><expr><name>enable</name></expr> ?</condition><then>

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Recording"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Recording done"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_SetCategoryDelay</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>absolute</name> <init>= <expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name>cat</name> <operator>!=</operator> <name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>cat_delay</name> <init>= <expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>cat_delays</name><index>[<expr><name>cat</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>absolute</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cat_delay</name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cat_delay</name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>*</operator><name>cat_delay</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{ <expr><operator>.</operator><name>cat_delay</name> <operator>=</operator> <block>{ <expr><name>cat</name></expr>, <expr><name>delay</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_CATEGORY_DELAY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s delay: %i ms"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>es_format_category_to_string</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_category_delay_changed</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>

<name>vlc_player_GetCategoryDelay</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name>cat</name> <operator>!=</operator> <name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>cat_delays</name><index>[<expr><name>cat</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_SetEsIdDelay</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>absolute</name> <init>= <expr><name>whence</name> <operator>==</operator> <name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=

<expr><call><name>vlc_player_input_FindTrackById</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trackpriv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<operator>(</operator><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>absolute</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>input_control_param_t</name></type> <name>param</name> <init>= <expr><block>{ <expr><operator>.</operator><name>es_delay</name> <operator>=</operator> <block>{ <expr><name>es_id</name></expr>, <expr><name>delay</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>input_ControlPush</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INPUT_CONTROL_SET_ES_DELAY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s delay: %i ms"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>trackpriv</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_track_delay_changed</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type>

<name>vlc_player_GetEsIdDelay</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track_priv</name></name> <modifier>*</modifier></type><name>trackpriv</name> <init>=

<expr><call><name>vlc_player_input_FindTrackById</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>trackpriv</name></expr> ?</condition><then> <expr><name><name>trackpriv</name><operator>-&gt;</operator><name>delay</name></name></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>var</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>sout_var</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"sout-video"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>cat2vars</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"video"</literal></expr>, <expr><literal type="string">"sout-video"</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"audio"</literal></expr>, <expr><literal type="string">"sout-audio"</literal></expr> }</block></expr>,

<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"spu"</literal></expr>, <expr><literal type="string">"sout-spu"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type>

<name>vlc_player_SetTrackCategoryEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cat</name> <operator>&gt;=</operator> <name>UNKNOWN_ES</name> <operator>&amp;&amp;</operator> <name>cat</name> <operator>&lt;=</operator> <name>DATA_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>cat2vars</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>cat2vars</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>sout_var</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name><name>cat2vars</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name><name>cat2vars</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>sout_var</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_UnselectTrackCategory</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>vlc_player_IsTrackCategoryEnabled</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cat</name> <operator>&gt;=</operator> <name>UNKNOWN_ES</name> <operator>&amp;&amp;</operator> <name>cat</name> <operator>&lt;=</operator> <name>DATA_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>cat2vars</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetSubtitleTextScale</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>scale</name> <operator>&lt;=</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-text-scale"</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name></type>

<name>vlc_player_GetSubtitleTextScale</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"sub-text-scale"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_player_GetSignal</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>quality</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>strength</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>quality</name> <operator>&amp;&amp;</operator> <name>strength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>signal_quality</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>signal_strength</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>quality</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>signal_quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>strength</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>signal_strength</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>input_stats_t</name></name> <modifier>*</modifier></type>

<name>vlc_player_GetStatistics</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>stats</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_SetPauseOnCork</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_assert_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>pause_on_cork</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vlc_player_CorkCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>pause_on_cork</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>corked</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name>

<operator>||</operator> <name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_STARTED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>corked</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>corked</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>corked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SendEvent</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>on_cork_changed</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>this</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>var</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_object_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetV4l2Object</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_input</name></name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>vlc_player_get_input_locked</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>input</name> <operator>&amp;&amp;</operator> <call><name>var_Type</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="string">"controls"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name><name>input</name><operator>-&gt;</operator><name>thread</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vlc_player_InitLocks</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_lock_type</name></name></type> <name>lock_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lock_type</name> <operator>==</operator> <name>VLC_PLAYER_LOCK_REENTRANT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_init_recursive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>aout_listeners_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>start_delay_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_player_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_destructor_AddInput</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>deleting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>aout_listeners</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_DestroyTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_aout_DelCallbacks</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"corks"</literal></expr></argument>, <argument><expr><name>vlc_player_CorkCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_resource_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_player_t</name> <modifier>*</modifier></type>

<name>vlc_player_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_lock_type</name></name></type> <name>lock_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_media_provider</name></name> <modifier>*</modifier></type><name>media_provider</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>media_provider_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>player</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"player"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>player</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>media_provider</name> <operator>||</operator> <name><name>media_provider</name><operator>-&gt;</operator><name>get_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>vout_listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>aout_listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>stopping_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>joinable_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media_stopped_action</name></name> <operator>=</operator> <name>VLC_PLAYER_MEDIA_STOPPED_CONTINUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>start_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>pause_on_cork</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>corked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media_provider</name></name> <operator>=</operator> <name>media_provider</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media_provider_data</name></name> <operator>=</operator> <name>media_provider_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>global_state</name></name> <operator>=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>error_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>releasing_media</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media_requested</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>next_media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>video_string_ids</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>audio_string_ids</name></name> <operator>=</operator>

<name><name>player</name><operator>-&gt;</operator><name>sub_string_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_CREATE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (var_Create(player, var, flag) != VLC_SUCCESS) goto error; } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"rate"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sub-fps"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sub-text-scale"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"demux-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"mute"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"corks"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"video"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sout-video"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sout-audio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"spu"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sout-spu"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"audio-language"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"sub-language"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"start-paused"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VAR_CREATE</name><argument_list>(<argument><expr><literal type="string">"play-and-pause"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VAR_CREATE</name></cpp:undef>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name> <operator>=</operator> <call><name>input_resource_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aout</name> <operator>=</operator> <call><name>input_resource_GetAout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_aout_AddCallbacks</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_resource_PutAout</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"corks"</literal></expr></argument>, <argument><expr><name>vlc_player_CorkCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>deleting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InitLocks</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>lock_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_InitTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>player</name><operator>-&gt;</operator><name>destructor</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>vlc_player_destructor_Thread</name></expr></argument>,

<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_DestroyTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>player</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>aout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_aout_DelCallbacks</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="string">"corks"</literal></expr></argument>, <argument><expr><name>vlc_player_CorkCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_resource_Release</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_object_t</name> <modifier>*</modifier></type>

<name>vlc_player_GetObject</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
