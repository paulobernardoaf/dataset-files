<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\media_source\test.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_source.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_tree.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_media_tree</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>vlc_media_tree_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Lock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://item"</literal></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>p_item</name></name> <operator>==</operator> <name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media2</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://child"</literal></expr></argument>, <argument><expr><literal type="string">"bbb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node2</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>p_item</name></name> <operator>==</operator> <name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media3</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://child2"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node3</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node3</name><operator>-&gt;</operator><name>p_item</name></name> <operator>==</operator> <name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node3</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>removed</name> <init>= <expr><call><name>vlc_media_tree_Remove</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Unlock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Release</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>children_reset_report</name>

<block>{

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>children_added_report</name>

<block>{

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>first_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>children_removed_report</name>

<block>{

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>first_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>callback_ctx</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>children_reset_report</name></expr></argument>)</argument_list> <name>vec_children_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>children_added_report</name></expr></argument>)</argument_list> <name>vec_children_added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>children_removed_report</name></expr></argument>)</argument_list> <name>vec_children_removed</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK_CTX_INITIALIZER</name></cpp:macro> <cpp:value>{ VLC_VECTOR_INITIALIZER, VLC_VECTOR_INITIALIZER, VLC_VECTOR_INITIALIZER, }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>callback_ctx_destroy_reports</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vec_children_added</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vec_children_removed</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_removed</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>callback_ctx_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>callback_ctx_destroy_reports</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_added</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_removed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>callback_ctx_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>callback_ctx_destroy_reports</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_added</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_removed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_children_reset</name><parameter_list>(<parameter><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>children_reset_report</name></name></type> <name>report</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_reset</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_children_added</name><parameter_list>(<parameter><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>children</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>children_added_report</name></name></type> <name>report</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>first_media</name></name> <operator>=</operator> <call><name>input_item_Hold</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_added</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_children_removed</name><parameter_list>(<parameter><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>children</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>children_removed_report</name></name></type> <name>report</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>first_media</name></name> <operator>=</operator> <call><name>input_item_Hold</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vec_children_removed</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_tree_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_media_tree_callbacks</name></name></type> <name>cbs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>on_children_reset</name> <operator>=</operator> <name>on_children_reset</name></expr>,

<expr><operator>.</operator><name>on_children_added</name> <operator>=</operator> <name>on_children_added</name></expr>,

<expr><operator>.</operator><name>on_children_removed</name> <operator>=</operator> <name>on_children_removed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>vlc_media_tree_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name></type> <name>ctx</name> <init>= <expr><name>CALLBACK_CTX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_media_tree_listener_id</name> <modifier>*</modifier></type><name>listener</name> <init>=

<expr><call><name>vlc_media_tree_AddListener</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Lock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://item"</literal></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>==</operator> <operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_media</name> <operator>==</operator> <name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_ctx_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media2</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://child"</literal></expr></argument>, <argument><expr><literal type="string">"bbb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node2</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_media</name> <operator>==</operator> <name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_ctx_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media3</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://child2"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node3</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_media</name> <operator>==</operator> <name>media3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_ctx_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>removed</name> <init>= <expr><call><name>vlc_media_tree_Remove</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_added</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_removed</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_media</name> <operator>==</operator> <name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Unlock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_RemoveListener</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_ctx_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Release</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_media_tree_callbacks_on_add_listener</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_media_tree_callbacks</name></name></type> <name>cbs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>on_children_reset</name> <operator>=</operator> <name>on_children_reset</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_media_tree_t</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>vlc_media_tree_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Lock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://item"</literal></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media2</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"vlc://child"</literal></expr></argument>, <argument><expr><literal type="string">"bbb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node2</name> <init>= <expr><call><name>vlc_media_tree_Add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Unlock</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name></type> <name>ctx</name> <init>= <expr><name>CALLBACK_CTX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_media_tree_listener_id</name> <modifier>*</modifier></type><name>listener</name> <init>=

<expr><call><name>vlc_media_tree_AddListener</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>==</operator> <operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>node</name><operator>-&gt;</operator><name>i_children</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vec_children_reset</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_RemoveListener</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>callback_ctx_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_media_tree_Release</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_media_tree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_tree_callbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_tree_callbacks_on_add_listener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
