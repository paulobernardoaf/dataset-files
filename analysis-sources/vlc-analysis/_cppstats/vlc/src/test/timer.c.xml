<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\test\timer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_tick_sleep</name></cpp:undef>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"test_timer"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>timer_data</name>

<block>{

<decl_stmt><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callback</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>vlc_timer_getoverrun</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_timer_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_timer_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_timer_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%u iterations in %"</literal><name>PRId64</name><literal type="string">" us\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ts</name> <operator>&gt;=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_disarm</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ts</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>data</name><operator>.</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%u iterations in %"</literal><name>PRId64</name><literal type="string">" us\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ts</name> <operator>&gt;=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
