<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\test\md5.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_md5</name></decl>;</decl_stmt>

}</block></struct></type> <name>md5_sample_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>md5_sample_t</name></type> <name><name>md5_samples</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"d41d8cd98f00b204e9800998ecf8427e"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"0cc175b9c0f1b6a831c399e269772661"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>, <expr><literal type="string">"900150983cd24fb0d6963f7d28e17f72"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"message digest"</literal></expr>, <expr><literal type="string">"f96b697d7cb7938d525a2f31aaf161d0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr>, <expr><literal type="string">"c3fcd3d76192e4007dfb496cca67e13b"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</literal></expr>,

<expr><literal type="string">"d174ab98d277d9f5a5611c2c9f419d9f"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012345678901"</literal>

<literal type="string">"234567890"</literal></expr>, <expr><literal type="string">"57edf4a22be3c955ac49da2e2107b67a"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"azertyuiop"</literal></expr>, <expr><literal type="string">"7682fe272099ea26efe39c890b33675b"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_config_StringEscape</name><parameter_list>()</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>md5_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>md5_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>md5_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_hash</name> <init>= <expr><call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_hash</name></expr></argument>, <argument><expr><name><name>md5_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_md5</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Output: %s\nExpected: %s\n"</literal></expr></argument>, <argument><expr><name>psz_hash</name></expr></argument>,

<argument><expr><name><name>md5_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_config_StringEscape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
