<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\test\list.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_list.h&gt;</cpp:file></cpp:include>

<struct>struct <name>test_elem</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>make_elem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>test_elem</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>node</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>test_elem</name></name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_list_prepend</name><argument_list>(<argument><expr><call><name>make_elem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <call><name>make_elem</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_prepend</name><argument_list>(<argument><expr><call><name>make_elem</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>vlc_list_entry</name><argument_list>(<argument><expr><name>back</name></expr></argument>, <argument><expr>struct <name>test_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_list_append</name><argument_list>(<argument><expr><call><name>make_elem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_list_prepend</name><argument_list>(<argument><expr><call><name>make_elem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>count</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <call><name>vlc_list_first_entry_or_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr>struct <name>test_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>elem</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>elem</name> <operator>=</operator> <call><name>vlc_list_next_entry_or_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>,

<argument><expr>struct <name>test_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>count</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <call><name>vlc_list_last_entry_or_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr>struct <name>test_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>elem</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>elem</name> <operator>=</operator> <call><name>vlc_list_prev_entry_or_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>,

<argument><expr>struct <name>test_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <literal type="number">29</literal> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>vlc_list_foreach</name><argument_list>(<argument>elem</argument>, <argument>&amp;head</argument>, <argument>node</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
