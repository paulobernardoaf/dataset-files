<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\test\i18n_atof.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_charset.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>dot9</name><index>[]</index></name> <init>= <expr><literal type="string">"999999.999999"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>comma9</name><index>[]</index></name> <init>= <expr><literal type="string">"999999,999999"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>sharp9</name><index>[]</index></name> <init>= <expr><literal type="string">"999999#999999"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"1."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"1,"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"1#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><name>dot9</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">999999.999999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><name>comma9</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">999999.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><name>sharp9</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">999999.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>us_atof</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><call><name>us_strtod</name><argument_list>(<argument><expr><name>dot9</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">999999.999999</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><call><name>us_strtod</name><argument_list>(<argument><expr><name>comma9</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">999999.</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><call><name>us_strtod</name><argument_list>(<argument><expr><name>sharp9</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">999999.</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
