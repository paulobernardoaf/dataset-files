<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\test\dictionary.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_arrays.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_dictionary_validity</name> <parameter_list>(<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>our_keys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>keys</name> <init>= <expr><call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>found</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>our_keys</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Hello"</literal></expr>, <expr><literal type="string">"Hella"</literal></expr>, <expr><literal type="string">"flowmeter"</literal></expr>, <expr><literal type="string">"Frostnipped"</literal></expr>, <expr><literal type="string">"frostnipped"</literal></expr>, <expr><literal type="string">"remiform"</literal></expr>, <expr><literal type="string">"quadrifoliolate"</literal></expr>, <expr><literal type="string">"singularity"</literal></expr>, <expr><literal type="string">"unafflicted"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>our_keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>dict</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_keys_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>keys</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_has_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_dictionary_validity</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>our_keys</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_remove_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name><name>our_keys</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_dictionary_validity</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>our_keys</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_keys_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
