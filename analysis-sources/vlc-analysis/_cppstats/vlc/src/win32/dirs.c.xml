<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\win32\dirs.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32api.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_configuration.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/configuration.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winstring.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.storage.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;roapi.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_LOCAL_APPDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_LOCAL_APPDATA</name></cpp:macro> <cpp:value>0x001C</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>WinRTSHGetFolderPath</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>csidl</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hToken</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></parameter>, <parameter><decl><type><name>LPWSTR</name></type> <name>pszPath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IStorageFolder</name> <modifier>*</modifier></type><name>folder</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dwFlags</name> <operator>!=</operator> <name>SHGFP_TYPE_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_NOTIMPL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>folder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csidl</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0xFF00</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>csidl</name> <operator>==</operator> <name>CSIDL_APPDATA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IApplicationDataStatics</name> <modifier>*</modifier></type><name>appDataStatics</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IApplicationData</name> <modifier>*</modifier></type><name>appData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>className</name> <init>= <expr><literal type="string">L"Windows.Storage.ApplicationData"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UINT32</name></type> <name>clen</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HSTRING</name></type> <name>hClassName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HSTRING_HEADER</name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>WindowsCreateStringReference</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_appdata</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>RoGetActivationFactory</name><argument_list>(<argument><expr><name>hClassName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IApplicationDataStatics</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>appDataStatics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_appdata</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>appDataStatics</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt>

<goto>goto <name>end_appdata</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IApplicationDataStatics_get_Current</name><argument_list>(<argument><expr><name>appDataStatics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>appData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_appdata</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>appData</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt>

<goto>goto <name>end_appdata</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IApplicationData_get_LocalFolder</name><argument_list>(<argument><expr><name>appData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end_appdata</name>:</label>

<expr_stmt><expr><call><name>WindowsDeleteString</name><argument_list>(<argument><expr><name>hClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>appDataStatics</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IApplicationDataStatics_Release</name><argument_list>(<argument><expr><name>appDataStatics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>appData</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IApplicationData_Release</name><argument_list>(<argument><expr><name>appData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>IKnownFoldersStatics</name> <modifier>*</modifier></type><name>knownFoldersStatics</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>className</name> <init>= <expr><literal type="string">L"Windows.Storage.KnownFolders"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UINT32</name></type> <name>clen</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HSTRING</name></type> <name>hClassName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HSTRING_HEADER</name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>WindowsCreateStringReference</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_other</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>RoGetActivationFactory</name><argument_list>(<argument><expr><name>hClassName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IKnownFoldersStatics</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>knownFoldersStatics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_other</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>knownFoldersStatics</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt>

<goto>goto <name>end_other</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>csidl</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSIDL_PERSONAL</name></expr>:</case>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IKnownFoldersStatics_get_DocumentsLibrary</name><argument_list>(<argument><expr><name>knownFoldersStatics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSIDL_MYMUSIC</name></expr>:</case>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IKnownFoldersStatics_get_MusicLibrary</name><argument_list>(<argument><expr><name>knownFoldersStatics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSIDL_MYPICTURES</name></expr>:</case>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IKnownFoldersStatics_get_PicturesLibrary</name><argument_list>(<argument><expr><name>knownFoldersStatics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSIDL_MYVIDEO</name></expr>:</case>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IKnownFoldersStatics_get_VideosLibrary</name><argument_list>(<argument><expr><name>knownFoldersStatics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_NOTIMPL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<label><name>end_other</name>:</label>

<expr_stmt><expr><call><name>WindowsDeleteString</name><argument_list>(<argument><expr><name>hClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>knownFoldersStatics</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IKnownFoldersStatics_Release</name><argument_list>(<argument><expr><name>knownFoldersStatics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>folder</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HSTRING</name></type> <name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IStorageItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCWSTR</name></type> <name>pszPathTemp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IStorageFolder_QueryInterface</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IStorageItem</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_folder</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IStorageItem_get_Path</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_folder</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pszPathTemp</name> <operator>=</operator> <call><name>WindowsGetStringRawBuffer</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>pszPath</name></expr></argument>, <argument><expr><name>pszPathTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end_folder</name>:</label>

<expr_stmt><expr><call><name>WindowsDeleteString</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IStorageFolder_Release</name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IStorageItem_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHGetFolderPathW</name></cpp:macro> <cpp:value>WinRTSHGetFolderPath</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetLibDir</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualQuery</name> <argument_list>(<argument><expr><name>config_GetLibDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetModuleFileName</name> <argument_list>(<argument><expr><operator>(</operator><name>HMODULE</name><operator>)</operator> <name><name>mbi</name><operator>.</operator><name>AllocationBase</name></name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>wcsrchr</name> <argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><call><name>FromWide</name> <argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetDataDir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"VLC_DATA_PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>path</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>config_GetLibDir</name> <argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetSysPath</name><parameter_list>(<parameter><decl><type><name>vlc_sysdir_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PKG_DATA_DIR</name></expr>:</case>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>config_GetDataDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PKG_LIB_DIR</name></expr>:</case>

<case>case <expr><name>VLC_PKG_LIBEXEC_DIR</name></expr>:</case>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>config_GetLibDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_SYSDATA_DIR</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VLC_LOCALE_DIR</name></expr>:</case>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_PKG_DATA_DIR</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>dir</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>path</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetShellDir</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>csidl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wdir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SHGetFolderPathW</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csidl</name> <operator>|</operator> <name>CSIDL_FLAG_CREATE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>wdir</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FromWide</name> <argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>config_GetAppDir</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetModuleFileName</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>lastDir</name> <init>= <expr><call><name>wcsrchr</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastDir</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wcscpy</name> <argument_list>(<argument><expr><name>lastDir</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"portable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attrib</name> <init>= <expr><call><name>GetFileAttributes</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attrib</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>attrib</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FromWide</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parent</name> <init>= <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_APPDATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_parent</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>psz_dir</name></expr></argument>, <argument><expr><literal type="string">"%s\\vlc"</literal></expr></argument>, <argument><expr><name>psz_parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_dir</name></expr>;</return>

</block_content>}</block></function>

<cpp:warning>#<cpp:directive>warning</cpp:directive> FIXME Use known folders on Vista and above</cpp:warning>

<function><type><name>char</name> <modifier>*</modifier></type><name>config_GetUserDir</name> <parameter_list>(<parameter><decl><type><name>vlc_userdir_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_HOME_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_PERSONAL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CONFIG_DIR</name></expr>:</case>

<case>case <expr><name>VLC_USERDATA_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetAppDir</name> <argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CACHE_DIR</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<return>return <expr><call><name>config_GetAppDir</name> <argument_list>()</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_LOCAL_APPDATA</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VLC_DESKTOP_DIR</name></expr>:</case>

<case>case <expr><name>VLC_DOWNLOAD_DIR</name></expr>:</case>

<case>case <expr><name>VLC_TEMPLATES_DIR</name></expr>:</case>

<case>case <expr><name>VLC_PUBLICSHARE_DIR</name></expr>:</case>

<case>case <expr><name>VLC_DOCUMENTS_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetUserDir</name><argument_list>(<argument><expr><name>VLC_HOME_DIR</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_MUSIC_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_MYMUSIC</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_PICTURES_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_MYPICTURES</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_VIDEOS_DIR</name></expr>:</case>

<return>return <expr><call><name>config_GetShellDir</name> <argument_list>(<argument><expr><name>CSIDL_MYVIDEO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
