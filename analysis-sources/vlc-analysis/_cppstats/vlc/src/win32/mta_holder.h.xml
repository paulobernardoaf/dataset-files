<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\win32\mta_holder.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>vlc_mta_holder</name>

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>ready_sem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>release_sem</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_mta_holder</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name><modifier>*</modifier></type> <name>MtaMainLoop</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_mta_holder</name><modifier>*</modifier></type> <name>p_mta</name> <init>= <expr><operator>(</operator><name>vlc_mta_holder</name><operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CoInitializeEx</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>ready_sem</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>release_sem</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mta_acquire</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_global_lock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_mta_holder</name><modifier>*</modifier></type> <name>p_mta</name> <init>= <expr><operator>(</operator><name>vlc_mta_holder</name><operator>*</operator><operator>)</operator><call><name>var_CreateGetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"mta-holder"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_mta</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_mta</name> <operator>=</operator> <operator>(</operator><name>vlc_mta_holder</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_mta</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_mta</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>ready_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>release_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mta</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>MtaMainLoop</name></expr></argument>, <argument><expr><name>p_mta</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"mta-holder"</literal></expr></argument>, <argument><expr><name>p_mta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>ready_sem</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>p_mta</name><operator>-&gt;</operator><name>i_refcount</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mta_release</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_global_lock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_mta_holder</name> <modifier>*</modifier></type><name>p_mta</name> <init>= <expr><operator>(</operator><name>vlc_mta_holder</name><operator>*</operator><operator>)</operator><call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"mta-holder"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mta</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name> <init>= <expr><operator>--</operator><name><name>p_mta</name><operator>-&gt;</operator><name>i_refcount</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_refcount</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"mta-holder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MTA_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_refcount</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mta</name><operator>-&gt;</operator><name>release_sem</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_mta</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
