<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\win32\thread.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DECL_DLLMAIN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmsystem.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>CRITICAL_SECTION</name></type> <name>super_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CONDITION_VARIABLE</name></type> <name>super_variable</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTERRUPTIBLE</name></cpp:macro> <cpp:value>(!VLC_WINSTORE_APP || _WIN32_WINNT &gt;= 0x0A00)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>thread_key</name></decl>;</decl_stmt>

<struct>struct <name>vlc_thread</name>

<block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>killable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_bool</name></type> <name>killed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>cleaners</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>

}</block> <decl><name>wait</name></decl>;</struct>

}</block>;</struct>

<struct>struct <name>vlc_threadvar</name>

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>id</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>vlc_threadvar_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>vlc_threadvar_create</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type><name>p_tls</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destr</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>var</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>TLS_OUT_OF_INDEXES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EAGAIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>destr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_tls</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>vlc_threadvar_last</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vlc_threadvar_last</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_threadvar_delete</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type><name>p_tls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>*</operator><name>p_tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>vlc_threadvar_last</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TlsFree</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_threadvar_set</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved</name> <init>= <expr><call><name>GetLastError</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TlsSetValue</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vlc_threadvar_get</name> <parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved</name> <init>= <expr><call><name>GetLastError</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>TlsGetValue</name> <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_threadvars_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <name>vlc_threadvar_last</name></expr>;</init> <condition><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>vlc_threadvar_get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>destroy</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_threadvar_set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>key</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>WaitOnAddress_</name>)<parameter_list>(<parameter><decl><type><name>VOID</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>SIZE_T</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WaitOnAddress</name></cpp:macro> <cpp:value>(*WaitOnAddress_)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VOID</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>WakeByAddressAll_</name>)<parameter_list>(<parameter><decl><type><name>PVOID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WakeByAddressAll</name></cpp:macro> <cpp:value>(*WakeByAddressAll_)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VOID</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>WakeByAddressSingle_</name>)<parameter_list>(<parameter><decl><type><name>PVOID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WakeByAddressSingle</name></cpp:macro> <cpp:value>(*WakeByAddressSingle_)</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>wait_addr_bucket</name>

<block>{

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONDITION_VARIABLE</name></type> <name>wait</name></decl>;</decl_stmt>

}</block> <decl><name><name>wait_addr_buckets</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>wait_addr_bucket</name></name> <modifier>*</modifier></type><name>wait_addr_get_bucket</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>wait_addr_buckets</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_addr_buckets</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_wait_addr_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_addr_buckets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_addr_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name>wait_addr_buckets</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_wait_addr_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wait_addr_buckets</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_addr_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name>wait_addr_buckets</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>WaitOnAddressFallback</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>SIZE_T</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_addr_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_addr_get_bucket</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>futex</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>futex</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>(</operator><name>atomic_char</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>futex</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>(</operator><name>atomic_short</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>short</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>futex</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>(</operator><name>atomic_int</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>futex</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>(</operator><name>atomic_llong</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>futex</name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SleepConditionVariableCS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>WakeByAddressFallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wait_addr_bucket</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>wait_addr_get_bucket</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WakeAllConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>vlc_atomic_wait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>WaitOnAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_atomic_timedwait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>deadline</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delay</name> <operator>&gt;=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>LONG_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitOnAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

while <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>ETIMEDOUT</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_atomic_timedwait_daytime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>delay</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>deadline</name> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delay</name> <operator>&gt;=</operator> <operator>(</operator><name>LONG_MAX</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>LONG_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>delay</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitOnAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

while <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>ETIMEDOUT</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_atomic_notify_one</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>WakeByAddressSingle</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_atomic_notify_all</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>WakeByAddressAll</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_thread_destroy</name><parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>vlc_entry</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name><name>th</name><operator>-&gt;</operator><name>entry</name></name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_thread_destroy</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_clone_attr</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detached</name></decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>th</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>th</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>killed</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>h</name> <init>= <expr><call><name>_beginthreadex</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vlc_entry</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>detached</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_handle</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>priority</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetThreadPriority</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_clone</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_clone_attr</name> <argument_list>(<argument><expr><name>p_handle</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_join</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>WAIT_ABANDONED_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_thread_destroy</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_clone_detach</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>entry</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_handle</name> <operator>=</operator> <operator>&amp;</operator><name>th</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_clone_attr</name> <argument_list>(<argument><expr><name>p_handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>vlc_thread_id</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GetCurrentThreadId</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_set_priority</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetThreadPriority</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IS_INTERRUPTIBLE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>vlc_cancel_self</name> <parameter_list>(<parameter><decl><type><name>ULONG_PTR</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>self</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>vlc_cancel</name> <parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>killed</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_or_explicit</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_atomic_notify_all</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IS_INTERRUPTIBLE</name></expr></cpp:if>

<expr_stmt><expr><call><name>QueueUserAPC</name> <argument_list>(<argument><expr><name>vlc_cancel_self</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_savecancel</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_restorecancel</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name>false</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>state</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_testcancel</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>th</name><operator>-&gt;</operator><name>killable</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>killed</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>killable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>proc</name></name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vlc_thread_destroy</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_endthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_control_cancel</name> <parameter_list>(<parameter><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>cleaner</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>cleaner</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cleaner</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name>cleaner</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>cleaners</name></name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>cleaners</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cancel_addr_set</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_cancel_addr_clear</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>th</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>wait</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<union><specifier>static</specifier> union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>freq</name></decl>;</decl_stmt>

}</block> <decl><name>perf</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<struct>struct

<block>{

<function_decl><type><name>MMRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>timeGetDevCaps</name>)<parameter_list>(<parameter><decl><type><name>LPTIMECAPS</name></type> <name>ptc</name></decl></parameter>,<parameter><decl><type><name>UINT</name></type> <name>cbtc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>timeGetTime</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name>multimedia</name></decl>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <decl><name>clk</name></decl>;</union>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_interrupt</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QueryUnbiasedInterruptTime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="number">10000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Broken frequencies ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ts</name> <operator>/</operator> <operator>(</operator><literal type="number">10000000</literal> <operator>/</operator> <name>CLOCK_FREQ</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_tick</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ts</name> <init>= <expr><call><name>GetTickCount64</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Broken frequencies ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>ts</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_multimedia</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ts</name> <init>= <expr><call><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetTime</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Broken frequencies ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>ts</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_perf</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_tick_from_frac</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>QuadPart</name></name></expr></argument>, <argument><expr><name><name>clk</name><operator>.</operator><name>perf</name><operator>.</operator><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_wall</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>VLC_WINSTORE_APP</name> <operator>||</operator> <name>_WIN32_WINNT</name> <operator>&gt;=</operator> <literal type="number">0x0A00</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>GetSystemTimePreciseAsFileTime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="number">10000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Broken frequencies ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mdate_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_threads_setup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mdate_perf</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> (<modifier>*</modifier><name>mdate_selected</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>mdate_default</name></expr></init>;</function_decl>

<function><type><name>vlc_tick_t</name></type> <name>vlc_tick_now</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mdate_selected</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<function><type><name>void</name></type> (<name>vlc_tick_wait</name>)<parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>delay</name> <operator>=</operator> <operator>(</operator><name>deadline</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>(</operator><name>delay</name> <operator>+</operator> <operator>(</operator><literal type="number">1000</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> (<name>vlc_tick_sleep</name>)<parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_tick_wait</name> <argument_list>(<argument><expr><call><name>vlc_tick_now</name> <argument_list>()</argument_list></call> <operator>+</operator> <name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>SelectClockSource</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"perf"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"multimedia"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"clock-source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"interrupt"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using interrupt time as clock source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mdate_selected</name> <operator>=</operator> <name>mdate_interrupt</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tick"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using Windows time as clock source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mdate_selected</name> <operator>=</operator> <name>mdate_tick</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"multimedia"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>TIMECAPS</name></type> <name>caps</name></decl>;</decl_stmt>

<function_decl><type><name>MMRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>timeBeginPeriod</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hWinmm</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"winmm.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hWinmm</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>perf</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetDevCaps</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hWinmm</name></expr></argument>, <argument><expr><literal type="string">"timeGetDevCaps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetTime</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hWinmm</name></expr></argument>, <argument><expr><literal type="string">"timeGetTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetDevCaps</name></name> <operator>||</operator> <operator>!</operator><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetTime</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>perf</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using multimedia timers as clock source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>clk</name><operator>.</operator><name>multimedia</name><operator>.</operator><name>timeGetDevCaps</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>perf</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" min period: %u ms, max period: %u ms"</literal></expr></argument>,

<argument><expr><name><name>caps</name><operator>.</operator><name>wPeriodMin</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>wPeriodMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mdate_selected</name> <operator>=</operator> <name>mdate_multimedia</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timeBeginPeriod</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hWinmm</name></expr></argument>, <argument><expr><literal type="string">"timeBeginPeriod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeBeginPeriod</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timeBeginPeriod</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"perf"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<label><name>perf</name>:</label>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using performance counters as clock source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceFrequency</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>clk</name><operator>.</operator><name>perf</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" frequency: %llu Hz"</literal></expr></argument>, <argument><expr><name><name>clk</name><operator>.</operator><name>perf</name><operator>.</operator><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mdate_selected</name> <operator>=</operator> <name>mdate_perf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"wall"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using system time as clock source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mdate_selected</name> <operator>=</operator> <name>mdate_wall</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid clock source \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>vlc_GetCPUCount</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>systemInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetNativeSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>systemInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>systemInfo</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>CRITICAL_SECTION</name></type> <name>setup_lock</name></decl>;</decl_stmt> 

<function><type><name>void</name></type> <name>vlc_threads_setup</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mdate_selected</name> <operator>!=</operator> <name>mdate_default</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SelectClockSource</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>vlc</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mdate_selected</name> <operator>!=</operator> <name>mdate_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ABOVE_NORMAL_PRIORITY_CLASS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABOVE_NORMAL_PRIORITY_CLASS</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"high-priority"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SetPriorityClass</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ABOVE_NORMAL_PRIORITY_CLASS</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>SetPriorityClass</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HIGH_PRIORITY_CLASS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"raised process priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"could not raise process priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s##_) = (void *)GetProcAddress(h, #s)) != NULL)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>vlc_rwlock_t</name></type> <name>config_lock</name></decl>;</decl_stmt>

<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hinstDll</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>fdwReason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpvReserved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>hinstDll</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>lpvReserved</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fdwReason</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DLL_PROCESS_ATTACH</name></expr>:</case>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>h</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LOOKUP</name><argument_list>(<argument><expr><name>WaitOnAddress</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>LOOKUP</name><argument_list>(<argument><expr><name>WakeByAddressAll</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>LOOKUP</name><argument_list>(<argument><expr><name>WakeByAddressSingle</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_wait_addr_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WaitOnAddress_</name> <operator>=</operator> <name>WaitOnAddressFallback</name></expr>;</expr_stmt>

<expr_stmt><expr><name>WakeByAddressAll_</name> <operator>=</operator> <name>WakeByAddressFallback</name></expr>;</expr_stmt>

<expr_stmt><expr><name>WakeByAddressSingle_</name> <operator>=</operator> <name>WakeByAddressFallback</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>thread_key</name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>thread_key</name> <operator>==</operator> <name>TLS_OUT_OF_INDEXES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rwlock_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DLL_PROCESS_DETACH</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_rwlock_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>config_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>super_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TlsFree</name><argument_list>(<argument><expr><name>thread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>WaitOnAddress_</name> <operator>==</operator> <name>WaitOnAddressFallback</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_wait_addr_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>DLL_THREAD_DETACH</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_threadvars_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

</unit>
