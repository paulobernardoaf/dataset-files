<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\win32\plugin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modules/modules.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_dlerror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wmsg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FormatMessageW</name><argument_list>( <argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator> <name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_error</name></expr></argument>, <argument><expr><call><name>MAKELANGID</name> <argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>wmsg</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name>wmemchr</name><argument_list>( <argument><expr><literal type="string">L"\r\n\0"</literal></expr></argument>, <argument><expr><name><name>wmsg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>snwprintf</name><argument_list>( <argument><expr><name>wmsg</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">L" (error %i)"</literal></expr></argument>, <argument><expr><name>i_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>wmsg</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vlc_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lazy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wfile</name> <init>= <expr><call><name>ToWide</name> <argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetThreadErrorMode</name> <argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>LoadLibraryExW</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetThreadErrorMode</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>LoadPackagedLibrary</name><argument_list>( <argument><expr><name>wfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>wfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>lazy</name></expr>;</expr_stmt>

<return>return <expr><name>handle</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vlc_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_function</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
