<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\network\http_auth.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_http.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>AuthGetParam</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_param</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_what</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_param</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>psz_what</name></expr></argument>, <argument><expr><literal type="string">"%s=\""</literal></expr></argument>, <argument><expr><name>psz_param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_what</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_header</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_what</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_end</name> <operator>-</operator> <name>psz_header</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>AuthGetParamNoQuotes</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_param</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_what</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_param</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>psz_what</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>psz_param</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_what</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_header</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_what</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_end</name> <operator>-</operator> <name>psz_header</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GenerateCnonce</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>ps_random</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>( <argument><expr><name>ps_random</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ps_random</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>ps_random</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ps_random</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>AuthDigest</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_HA1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_HA2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_inonce</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Digest Authentication: "</literal>

<literal type="string">"Mandatory 'realm' value not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_HA1</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_HA1</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_HA1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_HA1</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_username</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_password</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_HA1</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_HA1</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr></argument>, <argument><expr><literal type="string">"MD5-sess"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_HA1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_HA1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_HA1</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_HA1</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_HA1</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_HA1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_HA1</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_method</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_path</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth-int"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_ent</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_ent</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_ent</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_HA2</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_HA2</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_HA1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth-int"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_inonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_inonce</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_inonce</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>psz_HA2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_result</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_HA1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_HA2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_auth_ParseWwwAuthenticateHeader</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>psz_basic_prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"Basic "</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>psz_digest_prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"Digest "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_basic_prefix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_basic_prefix</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Using Basic Authentication"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>psz_basic_prefix</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"realm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Basic Authentication: "</literal>

<literal type="string">"Mandatory 'realm' parameter is missing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name>psz_digest_prefix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_digest_prefix</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Using Digest Access Authentication"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>psz_digest_prefix</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"realm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_domain</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_stale</name></name> <operator>=</operator> <call><name>AuthGetParamNoQuotes</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"stale"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name> <operator>=</operator> <call><name>AuthGetParamNoQuotes</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"algorithm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name> <operator>=</operator> <call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"qop"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Digest Access Authentication: "</literal>

<literal type="string">"Mandatory 'realm' parameter is missing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Digest Access Authentication: "</literal>

<literal type="string">"Mandatory 'nonce' parameter is missing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unknown authentication scheme: '%*s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>psz_end</name> <operator>-</operator> <name>psz_header</name><operator>)</operator></expr></argument>, <argument><expr><name>psz_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unknown authentication scheme: '%s'"</literal></expr></argument>,

<argument><expr><name>psz_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_http_auth_ParseAuthenticationInfoHeader</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_nextnonce</name> <init>= <expr><call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"nextnonce"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_qop</name> <init>= <expr><call><name>AuthGetParamNoQuotes</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"qop"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rspauth</name> <init>= <expr><call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"rspauth"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cnonce</name> <init>= <expr><call><name>AuthGetParam</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"cnonce"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_nc</name> <init>= <expr><call><name>AuthGetParamNoQuotes</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><literal type="string">"nc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_err</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nonce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_cnonce</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cnonce</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"HTTP Digest Access Authentication: server "</literal>

<literal type="string">"replied with a different client nonce value."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_nc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_nonce</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_nc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_nonce</name> <operator>!=</operator> <name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"HTTP Digest Access Authentication: server "</literal>

<literal type="string">"replied with a different nonce count "</literal>

<literal type="string">"value."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_qop</name> <operator>&amp;&amp;</operator> <name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>( <argument><expr><name>psz_qop</name></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"HTTP Digest Access Authentication: server "</literal>

<literal type="string">"replied using a different 'quality of "</literal>

<literal type="string">"protection' option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_digest</name> <operator>=</operator> <call><name>AuthDigest</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_auth</name></expr></argument>, <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>,

<argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_digest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_digest</name></expr></argument>, <argument><expr><name>psz_rspauth</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"HTTP Digest Access Authentication: server "</literal>

<literal type="string">"replied with an invalid response digest "</literal>

<literal type="string">"(expected value: %s)."</literal></expr></argument>, <argument><expr><name>psz_digest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_nextnonce</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name> <operator>=</operator> <name>psz_nextnonce</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_nextnonce</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_nextnonce</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_qop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_rspauth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cnonce</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_nc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_digest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlc_http_auth_FormatAuthorizationHeader</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_base64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr></argument>, <argument><expr><literal type="string">"MD5"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr></argument>, <argument><expr><literal type="string">"MD5-sess"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Digest Access Authentication: "</literal>

<literal type="string">"Unknown algorithm '%s'"</literal></expr></argument>, <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name> <operator>=</operator> <call><name>GenerateCnonce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_buffer</name> <operator>=</operator> <call><name>AuthDigest</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_auth</name></expr></argument>, <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>,

<argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_buffer</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_rc</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_result</name></expr></argument>,

<argument><expr><literal type="string">"Digest "</literal>

<literal type="string">"username=\"%s\", "</literal>

<literal type="string">"realm=\"%s\", "</literal>

<literal type="string">"nonce=\"%s\", "</literal>

<literal type="string">"uri=\"%s\", "</literal>

<literal type="string">"response=\"%s\", "</literal>

<literal type="string">"%s%s%s"</literal> 

<literal type="string">"%s%s%s"</literal> 

<literal type="string">"%s%s%s"</literal> 

<literal type="string">"%s%s%s"</literal> 

<literal type="string">"%s=\"%08x\""</literal></expr></argument>, 

<argument><expr><name>psz_username</name></expr></argument>,

<argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name></expr></argument>,

<argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_path</name></expr> ?</condition><then> <expr><name>psz_path</name></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>psz_buffer</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr> ?</condition><then> <expr><literal type="string">"algorithm=\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr> ?</condition><then> <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr> ?</condition><then> <expr><literal type="string">"cnonce=\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr> ?</condition><then> <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name></expr> ?</condition><then> <expr><literal type="string">"opaque=\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name></expr> ?</condition><then> <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr> ?</condition><then> <expr><literal type="string">"qop=\""</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr> ?</condition><then> <expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr> ?</condition><then> <expr><literal type="string">"\", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name></expr> ?</condition><then> <expr><literal type="string">"nc"</literal></expr> </then><else>: <expr><literal type="string">"uglyhack"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>i_nonce</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_rc</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>psz_password</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_base64</name> <operator>=</operator> <call><name>vlc_b64_encode</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_base64</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_rc</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_result</name></expr></argument>, <argument><expr><literal type="string">"Basic %s"</literal></expr></argument>, <argument><expr><name>psz_base64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_base64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_auth_Init</name><parameter_list>( <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_auth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_auth</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_auth_Deinit</name><parameter_list>( <parameter><decl><type><name>vlc_http_auth_t</name> <modifier>*</modifier></type><name>p_auth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_realm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_domain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_nonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_stale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_qop</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_cnonce</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_auth</name><operator>-&gt;</operator><name>psz_HA1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
