<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\network\udp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAFNOSUPPORT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAFNOSUPPORT</name></cpp:macro> <cpp:value>WSAEAFNOSUPPORT</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iphlpapi.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DCCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dccp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_DCCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_DCCP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_IP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_IP</name></cpp:macro> <cpp:value>IPPROTO_IP</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_IPV6</name></cpp:macro> <cpp:value>IPPROTO_IPV6</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPPROTO_IPV6</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_DCCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_DCCP</name></cpp:macro> <cpp:value>IPPROTO_DCCP</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_DCCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPPROTO_DCCP</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_UDPLITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_UDPLITE</name></cpp:macro> <cpp:value>IPPROTO_UDPLITE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_UDPLITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPPROTO_UDPLITE</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_NETINET_UDPLITE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/udplite.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDPLITE_SEND_CSCOV</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDPLITE_RECV_CSCOV</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_SetupDgramSocket</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SO_REUSEPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_REUSEPORT</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>h_Network</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Windows.Networking.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>h_Network</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>GetProcAddress</name><argument_list>( <argument><expr><name>h_Network</name></expr></argument>, <argument><expr><literal type="string">"SetSocketMediaStreamingMode"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_RCVBUF</argument>,

<argument>(void *)&amp;(int){ <literal type="number">0x80000</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>h_Network</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name>h_Network</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>net_SockAddrIsMulticast</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>dumb</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>sin6_family</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>,

<expr><operator>.</operator><name>sin6_port</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bind</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dumb</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>bind</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"socket bind error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>net_Subscribe</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_ListenSingle</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,

<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>protocol</name></expr>,

<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_PASSIVE</name> <operator>|</operator> <name>AI_NUMERICSERV</name> <operator>|</operator> <name>AI_IDN</name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>host</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"net: opening %s datagram port %u"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>host</name></expr> ?</condition><then> <expr><name>host</name></expr> </then><else>: <expr><literal type="string">"any"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Cannot resolve %s port %u : %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>ptr</name></type> <init>= <expr><name>res</name></expr></init></decl>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>net_Socket</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"socket error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_IPV6</argument>, <argument>IPV6_V6ONLY</argument>, <argument>&amp;(int){ <literal type="number">0</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>net_SetupDgramSocket</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>net_SockAddrIsMulticast</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>net_Subscribe</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_SetMcastHopLimit</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hlim</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>proto</name></decl>, <decl><type ref="prev"/><name>cmd</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>family</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <name>SOL_IP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>IP_MULTICAST_TTL</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_HOPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <name>SOL_IPV6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>IPV6_MULTICAST_HOPS</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlim</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hlim</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot set hop limit (%d): %s"</literal></expr></argument>, <argument><expr><name>hlim</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator> <name>hlim</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>hlim</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot set hop limit (%d): %s"</literal></expr></argument>, <argument><expr><name>hlim</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_SetMcastOut</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scope</name> <init>= <expr><call><name>if_nametoindex</name> <argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scope</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"invalid multicast interface: %s"</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>family</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IPV6</name></expr></argument>, <argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>scope</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreqn</name></name></type> <name>req</name> <init>= <expr><block>{ <expr><operator>.</operator><name>imr_ifindex</name> <operator>=</operator> <name>scope</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><name>IP_MULTICAST_IF</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot force multicast interface %s: %s"</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCAST_JOIN_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>var_GetIfIndex</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ifname</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"miface"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ifname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ifindex</name> <init>= <expr><call><name>if_nametoindex</name> <argument_list>(<argument><expr><name>ifname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ifindex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid multicast interface: %s"</literal></expr></argument>, <argument><expr><name>ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ifindex</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>net_SourceSubscribe</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>srclen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>grplen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MCAST_JOIN_SOURCE_GROUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>group_source_req</name></name></type> <name>gsr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gsr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gsr</name><operator>.</operator><name>gsr_interface</name></name> <operator>=</operator> <call><name>var_GetIfIndex</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>grp</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>g6</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>grp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IPV6</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gsr</name><operator>.</operator><name>gsr_interface</name></name> <operator>=</operator> <name><name>g6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&lt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name><name>gsr</name><operator>.</operator><name>gsr_group</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>gsr</name><operator>.</operator><name>gsr_source</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>srclen</name> <operator>&lt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name><name>gsr</name><operator>.</operator><name>gsr_source</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>gsr</name><operator>.</operator><name>gsr_group</name></name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>grplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>MCAST_JOIN_SOURCE_GROUP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gsr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gsr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name><name>grp</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>grp</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_ADD_SOURCE_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq_source</name></name></type> <name>imr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>grp</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>srclen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_sourceaddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><name>IP_ADD_SOURCE_MEMBERSHIP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot join source multicast group: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"trying ASM instead of SSM..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>net_Subscribe</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>grplen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_Subscribe</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>grplen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MCAST_JOIN_GROUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>group_req</name></name></type> <name>gr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gr</name><operator>.</operator><name>gr_interface</name></name> <operator>=</operator> <call><name>var_GetIfIndex</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>grp</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>g6</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>grp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IPV6</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gr</name><operator>.</operator><name>gr_interface</name></name> <operator>=</operator> <name><name>g6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&lt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><name><name>gr</name><operator>.</operator><name>gr_group</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>gr</name><operator>.</operator><name>gr_group</name></name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>grplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>MCAST_JOIN_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name><name>grp</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ipv6_mreq</name></name></type> <name>ipv6mr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>g6</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>grp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ipv6mr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ipv6mr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ipv6mr</name><operator>.</operator><name>ipv6mr_multiaddr</name></name> <operator>=</operator> <name><name>g6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ipv6mr</name><operator>.</operator><name>ipv6mr_interface</name></name> <operator>=</operator> <name><name>g6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IPV6</name></expr></argument>, <argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ipv6mr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ipv6mr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_ADD_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq</name></name></type> <name>imr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grplen</name> <operator>&gt;=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imr</name><operator>.</operator><name>imr_multiaddr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>grp</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><name>IP_ADD_MEMBERSHIP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>imr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>imr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot join multicast group: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>net_SetDSCP</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dscp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><macro><name>getsockname</name><argument_list>( <argument>fd</argument>, <argument>(struct sockaddr *)&amp;addr</argument>, <argument>&amp;(socklen_t){ sizeof (addr) }</argument>)</argument_list></macro></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>cmd</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>addr</name><operator>.</operator><name>ss_family</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_TCLASS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IPV6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>IPV6_TCLASS</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>SOL_IP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>IP_TOS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOPROTOOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOPROTOOPT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <macro><name>setsockopt</name><argument_list>( <argument>fd</argument>, <argument>level</argument>, <argument>cmd</argument>, <argument>&amp;(int){ dscp }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>net_ConnectDgram</name></cpp:undef>

<function><type><name>int</name></type> <name>net_ConnectDgram</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_port</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_hlim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,

<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>proto</name></expr>,

<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_NUMERICSERV</name> <operator>|</operator> <name>AI_IDN</name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_handle</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_unreach</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_hlim</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_hlim</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"net: connecting to [%s]:%u"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot resolve [%s]:%u : %s"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>ptr</name></type> <init>= <expr><name>res</name></expr></init></decl>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>net_Socket</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_BROADCAST</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if<condition>( <expr><name>i_hlim</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_SetMcastHopLimit</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>i_hlim</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"miface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>net_SetMcastOut</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>net_SetDSCP</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dscp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>connect</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_handle</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><call><name>WSAGetLastError</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>WSAENETUNREACH</name></expr> )</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>ENETUNREACH</name></expr> )</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b_unreach</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"%s port %u : %s"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_handle</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_unreach</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Host %s port %u is unreachable"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>,

<argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_handle</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>net_OpenDgram</name></cpp:undef>

<function><type><name>int</name></type> <name>net_OpenDgram</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_bind</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_bind</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_server</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>psz_server</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>psz_server</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>net_ListenSingle</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>psz_bind</name></expr></argument>, <argument><expr><name>i_bind</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"net: connecting to [%s]:%u from [%s]:%u"</literal></expr></argument>,

<argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>i_server</name></expr></argument>, <argument><expr><name>psz_bind</name></expr></argument>, <argument><expr><name>i_bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,

<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>protocol</name></expr>,

<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_NUMERICSERV</name> <operator>|</operator> <name>AI_IDN</name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>loc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>i_server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot resolve %s port %u : %s"</literal></expr></argument>, <argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>i_server</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>psz_bind</name></expr></argument>, <argument><expr><name>i_bind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot resolve %s port %u : %s"</literal></expr></argument>, <argument><expr><name>psz_bind</name></expr></argument>, <argument><expr><name>i_bind</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>ptr</name></type> <init>= <expr><name>loc</name></expr></init></decl>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>net_Socket</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>net_SetupDgramSocket</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><name>ptr2</name></type> <init>= <expr><name>rem</name></expr></init></decl>;</init> <condition><expr><name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr2</name> <operator>=</operator> <name><name>ptr2</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ptr2</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_family</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>ptr2</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>!=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_socktype</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>ptr2</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>!=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>ai_protocol</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><call><name>net_SockAddrIsMulticast</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>net_SourceSubscribe</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,

<argument><expr><name><name>ptr2</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr2</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>connect</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ptr2</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ptr2</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot connect to %s port %u: %s"</literal></expr></argument>,

<argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>i_server</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>net_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>net_SetCSCov</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sendcov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recvcov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>getsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_TYPE</argument>,

<argument>&amp;type</argument>, <argument>&amp;(socklen_t){ sizeof (type) }</argument>)</argument_list></macro></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UDPLITE_RECV_CSCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SOCK_DGRAM</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>sendcov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sendcov</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sendcov</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_UDPLITE</name></expr></argument>, <argument><expr><name>UDPLITE_SEND_CSCOV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendcov</name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sendcov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recvcov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recvcov</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>recvcov</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_UDPLITE</name></expr></argument>, <argument><expr><name>UDPLITE_RECV_CSCOV</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>recvcov</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>recvcov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DCCP_SOCKOPT_SEND_CSCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SOCK_DCCP</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sendcov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sendcov</name> <operator>&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sendcov</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sendcov</name> <operator>=</operator> <operator>(</operator><name>sendcov</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_DCCP</name></expr></argument>, <argument><expr><name>DCCP_SOCKOPT_SEND_CSCOV</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sendcov</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sendcov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>recvcov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>recvcov</name> <operator>&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recvcov</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>recvcov</name> <operator>=</operator> <operator>(</operator><name>recvcov</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_DCCP</name></expr></argument>, <argument><expr><name>DCCP_SOCKOPT_RECV_CSCOV</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>recvcov</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>recvcov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>UDPLITE_RECV_CSCOV</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>DCCP_SOCKOPT_SEND_CSCOV</name></expr></argument> )</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>sendcov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>recvcov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

</unit>
