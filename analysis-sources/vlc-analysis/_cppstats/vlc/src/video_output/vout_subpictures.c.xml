<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\vout_subpictures.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../misc/subpicture.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>orgstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>orgstop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>stop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_late</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>channel_order</name></decl>;</decl_stmt>

}</block></struct></type> <name>spu_render_entry_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>spu_render_entry_t</name></expr></argument>)</argument_list> <name>spu_render_vector</name>;</typedef>

<struct>struct <name>spu_channel</name> <block>{

<decl_stmt><decl><type><name>spu_render_vector</name></type> <name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>spu_channel</name></expr></argument>)</argument_list> <name>spu_channel_vector</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>subpicture_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>spu_prerender_vector</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPU_CHROMALIST_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct>struct <name>spu_private_t</name> <block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_channel_vector</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>textlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>scale_yuvp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>force_crop</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

}</block> <decl><name>crop</name></decl>;</struct> 

<decl_stmt><decl><type><name>int</name></type> <name>margin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>secondary_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>secondary_alignment</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source_chain_current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source_chain_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>source_chain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter_chain_current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter_chain_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>filter_chain_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>filter_chain</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>output_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_prerender_vector</name></type> <name>vector</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_processed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmtsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmtdst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>chroma_list</name><index>[<expr><name>SPU_CHROMALIST_COUNT</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>prerender</name></decl>;</struct>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_sort_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderSync</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderCancel</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_channel_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_channel_Push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>orgstart</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>orgstop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name></type> <name>entry</name> <init>= <expr><block>{

<expr><operator>.</operator><name>subpic</name> <operator>=</operator> <name>subpic</name></expr>,

<expr><operator>.</operator><name>orgstart</name> <operator>=</operator> <name>orgstart</name></expr>,

<expr><operator>.</operator><name>orgstop</name> <operator>=</operator> <name>orgstop</name></expr>,

<expr><operator>.</operator><name>start</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr>,

<expr><operator>.</operator><name>stop</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_channel_DeleteAt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_channel_Clean</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_PrerenderCancel</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>spu_GetChannel</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>channel_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>spu_GetFreeChannelId</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_OSD_COUNT</name></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>id</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>VOUT_SPU_CHANNEL_OSD_COUNT</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>order</name> <operator>=</operator> <name>VLC_VOUT_ORDER_SECONDARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>used</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterRelease</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_get_attachments</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>attachment_ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attachment_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>input_GetAttachments</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>attachment_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>attachment_count</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>SpuRenderCreateAndLoadText</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"spu text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name> <operator>=</operator> <name>spu</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>pf_get_attachments</name></name> <operator>=</operator> <name>spu_get_attachments</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"text renderer"</literal></expr></argument>, <argument><expr><literal type="string">"text-renderer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>text</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>SpuRenderCreateAndLoadScale</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>src_chroma</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>dst_chroma</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>require_resize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>scale</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>scale</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>src_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>dst_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <ternary><condition><expr><name>require_resize</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="string">"video converter"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scale</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>scale</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpuRenderText</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_original_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_original_height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>text</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>textlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>text</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_SRGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name> <operator>==</operator> <name>COLOR_SPACE_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_SRGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_original_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>text</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_original_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>region</name><operator>-&gt;</operator><name>p_text</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>text</name><operator>-&gt;</operator><name>pf_render</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>chroma_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>textlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_UNIT</name></cpp:macro> <cpp:value>(10000)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

}</block></struct></type> <name>spu_scale_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>spu_scale_t</name></type> <name>spu_scale_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_scale_t</name></type> <name>s</name> <init>= <expr><block>{ <expr><operator>.</operator><name>w</name> <operator>=</operator> <name>w</name></expr>, <expr><operator>.</operator><name>h</name> <operator>=</operator> <name>h</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>w</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>SCALE_UNIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>h</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>SCALE_UNIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>spu_scale_t</name></type> <name>spu_scale_unit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>spu_scale_create</name><argument_list>(<argument><expr><name>SCALE_UNIT</name></expr></argument>, <argument><expr><name>SCALE_UNIT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>spu_scale_t</name></type> <name>spu_scale_createq</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>wn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>wd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>hn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>hd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>spu_scale_create</name><argument_list>(<argument><expr><name>wn</name> <operator>*</operator> <name>SCALE_UNIT</name> <operator>/</operator> <name>wd</name></expr></argument>,

<argument><expr><name>hn</name> <operator>*</operator> <name>SCALE_UNIT</name> <operator>/</operator> <name>hd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_scale_w</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>*</operator> <name><name>s</name><operator>.</operator><name>w</name></name> <operator>/</operator> <name>SCALE_UNIT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_scale_h</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>*</operator> <name><name>s</name><operator>.</operator><name>h</name></name> <operator>/</operator> <name>SCALE_UNIT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_invscale_w</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>*</operator> <name>SCALE_UNIT</name> <operator>/</operator> <name><name>s</name><operator>.</operator><name>w</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spu_invscale_h</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>*</operator> <name>SCALE_UNIT</name> <operator>/</operator> <name><name>s</name><operator>.</operator><name>h</name></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_scale_t</name></type> <name>scale</name></decl>;</decl_stmt>

}</block></struct></type> <name>spu_area_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>spu_area_t</name></type> <name>spu_area_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>a</name> <init>= <expr><block>{ <expr><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>, <expr><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>, <expr><operator>.</operator><name>width</name> <operator>=</operator> <name>w</name></expr>, <expr><operator>.</operator><name>height</name> <operator>=</operator> <name>h</name></expr>, <expr><operator>.</operator><name>scale</name> <operator>=</operator> <name>s</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>spu_area_t</name></type> <name>spu_area_scaled</name><parameter_list>(<parameter><decl><type><name>spu_area_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>scale</name><operator>.</operator><name>w</name></name> <operator>==</operator> <name>SCALE_UNIT</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>scale</name><operator>.</operator><name>h</name></name> <operator>==</operator> <name>SCALE_UNIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <call><name>spu_scale_unit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>spu_area_t</name></type> <name>spu_area_unscaled</name><parameter_list>(<parameter><decl><type><name>spu_area_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>spu_scale_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>scale</name><operator>.</operator><name>w</name></name> <operator>==</operator> <name><name>s</name><operator>.</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>scale</name><operator>.</operator><name>h</name></name> <operator>==</operator> <name><name>s</name><operator>.</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>spu_area_scaled</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>spu_invscale_w</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>spu_invscale_h</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>spu_invscale_w</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>spu_invscale_h</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>spu_area_overlap</name><parameter_list>(<parameter><decl><type><name>spu_area_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>spu_area_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>spu_area_scaled</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>spu_area_scaled</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>width</name></name></expr></argument> , <argument><expr><name><name>b</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>width</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>__MAX</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpuAreaFixOverlap</name><parameter_list>(<parameter><decl><type><name>spu_area_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>spu_area_t</name> <modifier>*</modifier></type><name>sub_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sub_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>a</name> <init>= <expr><call><name>spu_area_scaled</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_ok</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>is_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sub_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>sub</name> <init>= <expr><call><name>spu_area_scaled</name><argument_list>(<argument><expr><name><name>sub_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>spu_area_overlap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_y</name> <init>= <expr><name><name>sub</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sub</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>i_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_y</name> <init>= <expr><name><name>sub</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>i_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>is_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>is_ok</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>is_moved</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>spu_area_unscaled</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpuAreaFitInside</name><parameter_list>(<parameter><decl><type><name>spu_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_area_t</name> <modifier>*</modifier></type><name>boundary</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>a</name> <init>= <expr><call><name>spu_area_scaled</name><argument_list>(<argument><expr><operator>*</operator><name>area</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_error_x</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name><name>boundary</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_error_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>i_error_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_error_y</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name><name>boundary</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_error_y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>i_error_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>area</name> <operator>=</operator> <call><name>spu_area_unscaled</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpuRegionPlace</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>!=</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>!=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>IntegerCmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>i0</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>i0</name> <operator>&lt;</operator> <name>i1</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i0</name> <operator>&gt;</operator> <name>i1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SSizeCmp</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>i0</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>i1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>i0</name> <operator>&lt;</operator> <name>i1</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i0</name> <operator>&gt;</operator> <name>i1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SpuRenderCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry0</name> <init>= <expr><name>s0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry1</name> <init>= <expr><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic0</name> <init>= <expr><name><name>render_entry0</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic1</name> <init>= <expr><name><name>render_entry1</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IntegerCmp</name><argument_list>(<argument><expr><operator>!</operator><name><name>subpic0</name><operator>-&gt;</operator><name>b_absolute</name></name></expr></argument>, <argument><expr><operator>!</operator><name><name>subpic1</name><operator>-&gt;</operator><name>b_absolute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IntegerCmp</name><argument_list>(<argument><expr><name><name>subpic0</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>, <argument><expr><name><name>subpic1</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SSizeCmp</name><argument_list>(<argument><expr><name><name>subpic0</name><operator>-&gt;</operator><name>i_channel</name></name></expr></argument>, <argument><expr><name><name>subpic1</name><operator>-&gt;</operator><name>i_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IntegerCmp</name><argument_list>(<argument><expr><name><name>subpic0</name><operator>-&gt;</operator><name>i_order</name></name></expr></argument>, <argument><expr><name><name>subpic1</name><operator>-&gt;</operator><name>i_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>spu_channel_UpdateDates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>date_array</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>date_array</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date_array</name><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>orgstart</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date_array</name><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>orgstop</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_clock_ConvertArrayToSystem</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>date_array</name></expr></argument>,

<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>date_array</name><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>render_entry</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name><name>date_array</name><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>date_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>spu_render_entry_IsSelected</name><parameter_list>(<parameter><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>render_subtitle_date</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_osd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><name><name>render_entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>==</operator> <name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>channel_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_osd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>render_date</name> <init>=

<expr><ternary><condition><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name>render_subtitle_date</name></expr> </then><else>: <expr><name>system_now</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>render_date</name> <operator>&amp;&amp;</operator> <name>render_date</name> <operator>&lt;</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type>

<name>spu_SelectSubpictures</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>render_subtitle_date</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>ignore_osd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>subpicture_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name>VOUT_SPU_CHANNEL_OSD_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>subpicture_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>subpicture_array</name> <init>=

<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>total_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spu_render_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subpicture_array</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start_date</name> <init>= <expr><name>render_subtitle_date</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ephemer_subtitle_date</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ephemer_osd_date</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>selected_max_order</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>spu_channel_UpdateDates</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>render_entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>spu_render_entry_IsSelected</name><argument_list>(<argument><expr><name>render_entry</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>render_subtitle_date</name></expr></argument>,

<argument><expr><name>ignore_osd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>render_date</name> <init>= <expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name>render_subtitle_date</name></expr> </then><else>: <expr><name>system_now</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>date_ptr</name> <init>= <expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ephemer_subtitle_date</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ephemer_osd_date</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <operator>*</operator><name>date_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>date_ptr</name> <operator>=</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>i_order</name></name> <operator>&gt;</operator> <name>selected_max_order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selected_max_order</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>i_order</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>i_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_stop_valid</name> <init>= <expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>||</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>orgstop</name></name> <operator>&gt;</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>orgstart</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>render_entry</name><operator>-&gt;</operator><name>is_late</name></name> <operator>=</operator> <name>is_stop_valid</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name>render_date</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>render_entry</name><operator>-&gt;</operator><name>is_late</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_date</name> <operator>=</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>start_date</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>last_sort_date</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_date</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>last_sort_date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_date</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_date</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>render_entry</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>render_entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_late</name> <init>= <expr><name><name>render_entry</name><operator>-&gt;</operator><name>is_late</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>spu_render_entry_IsSelected</name><argument_list>(<argument><expr><name>render_entry</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>render_subtitle_date</name></expr></argument>,

<argument><expr><name>ignore_osd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>stop_date</name> <init>= <expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>start_date</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_sort_date</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>system_now</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>ephemer_date</name> <init>= <expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name>ephemer_subtitle_date</name></expr> </then><else>: <expr><name>ephemer_osd_date</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_rejeted</name> <init>= <expr><name>is_late</name> <operator>&amp;&amp;</operator> <name><name>render_entry</name><operator>-&gt;</operator><name>stop</name></name> <operator>&lt;=</operator> <name>stop_date</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name>ephemer_date</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_rejeted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>render_entry</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>ephemer_date</name> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>i_order</name></name> <operator>&lt;</operator> <name>selected_max_order</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_rejeted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_rejeted</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>spu_PrerenderCancel</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>render_entry</name><operator>-&gt;</operator><name>channel_order</name></name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpicture_array</name><index>[<expr><operator>(</operator><operator>*</operator><name>subpicture_count</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>render_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_sort_date</name></name> <operator>=</operator> <name>render_subtitle_date</name></expr>;</expr_stmt>

<return>return <expr><name>subpicture_array</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpuRenderRegion</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_ptr</name></decl></parameter>, <parameter><decl><type><name>spu_area_t</name> <modifier>*</modifier></type><name>dst_area</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>spu_scale_t</name></type> <name>scale_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_original_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_original_height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>spu_area_t</name> <modifier>*</modifier></type><name>subtitle_area</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>subtitle_area_count</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>render_date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>region_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>region_picture</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_area</name> <operator>=</operator> <call><name>spu_area_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SpuRenderText</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,

<argument><expr><name>i_original_width</name></expr></argument>, <argument><expr><name>i_original_height</name></expr></argument>,

<argument><expr><name>chroma_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_AdjustColorSpace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>using_palette</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>force_palette</name> <init>= <expr><name>using_palette</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>palette</name><operator>.</operator><name>i_entries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>crop_requested</name> <init>= <expr><operator>(</operator><name>force_palette</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>force_crop</name></name><operator>)</operator> <operator>||</operator>

<name><name>region</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>||</operator> <name><name>region</name><operator>-&gt;</operator><name>i_max_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>changed_palette</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_margin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crop_requested</name> <operator>&amp;&amp;</operator> <name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y_margin</name> <operator>=</operator> <call><name>spu_invscale_h</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>margin</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>i_align</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_SECONDARY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_align</name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_alignment</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_alignment</name></name></expr> </then><else>: <expr><name>i_align</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SpuRegionPlace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_offset</name></expr></argument>,

<argument><expr><name>subpic</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>i_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_SECONDARY</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>secondary_margin</name> <init>=

<expr><call><name>spu_invscale_h</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_margin</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>y_offset</name> <operator>-=</operator> <name>secondary_margin</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>y_margin</name> <operator>+=</operator> <name>secondary_margin</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_area</name> <operator>=</operator> <call><name>spu_area_create</name><argument_list>(<argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,

<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SpuAreaFixOverlap</name><argument_list>(<argument><expr><name>dst_area</name></expr></argument>, <argument><expr><name>subtitle_area</name></expr></argument>, <argument><expr><name>subtitle_area_count</name></expr></argument>,

<argument><expr><name>i_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>restrained</name> <init>= <expr><operator>*</operator><name>dst_area</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>restrained</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>y_margin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>display</name> <init>= <expr><call><name>spu_area_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><call><name>spu_scale_unit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SpuAreaFitInside</name><argument_list>(<argument><expr><operator>&amp;</operator><name>restrained</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_offset</name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>restrained</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>restrained</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>restrained</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>restrained</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force_palette</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>old_palette</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>new_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_opaque</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_old_opaque</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_palette</name><operator>.</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_palette</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>palette</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>b_opaque</name> <operator>|=</operator> <operator>(</operator><name><name>new_palette</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x00</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>old_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>==</operator> <name><name>new_palette</name><operator>.</operator><name>i_entries</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>old_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>changed_palette</name> <operator>|=</operator> <name><name>old_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>new_palette</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>b_old_opaque</name> <operator>|=</operator> <operator>(</operator><name><name>old_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x00</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>changed_palette</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_old_opaque</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_opaque</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_old_opaque</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>old_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>changed_palette</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>changed_palette</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>old_palette</name> <operator>=</operator> <name>new_palette</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>region_fmt</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>region_picture</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_picture</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>convert_chroma</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chroma_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>convert_chroma</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>region_fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name><name>chroma_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>convert_chroma</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>scale_size</name><operator>.</operator><name>w</name></name> <operator>!=</operator> <name>SCALE_UNIT</name> <operator>||</operator> <name><name>scale_size</name><operator>.</operator><name>h</name></name> <operator>!=</operator> <name>SCALE_UNIT</name> <operator>||</operator> <name>convert_chroma</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>dst_width</name> <init>= <expr><call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>dst_height</name> <init>= <expr><call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>subpicture_region_private_t</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_width</name> <operator>!=</operator> <name><name>private</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator>

<name>dst_height</name> <operator>!=</operator> <name><name>private</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changed_palette</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>convert_chroma</name> <operator>&amp;&amp;</operator> <name><name>private</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_changed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>subpicture_region_private_Delete</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name> <operator>&amp;&amp;</operator> <name>dst_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dst_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>scale</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_palette</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>scale_yuvp</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>scale_yuvp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scale_yuvp</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale_yuvp</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale_yuvp</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <call><name><name>scale_yuvp</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>(<argument><expr><name>scale_yuvp</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"%4.4s to %4.4s conversion failed"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>scale_yuvp</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>scale_yuvp</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name> <operator>!=</operator> <name>dst_width</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name> <operator>!=</operator> <name>dst_height</name> <operator>||</operator>

<operator>(</operator><name>convert_chroma</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>using_palette</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_palette</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>convert_chroma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator>

<name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>dst_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>dst_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>

<call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <call><name><name>scale</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"scaling failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <call><name>subpicture_region_private_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>region</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>subpicture_region_private_Delete</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>p_private</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>region_fmt</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>region_picture</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_private</name><operator>-&gt;</operator><name>p_picture</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>crop_requested</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>crop_x</name></decl>, <decl><type ref="prev"/><name>crop_y</name></decl>, <decl><type ref="prev"/><name>crop_width</name></decl>, <decl><type ref="prev"/><name>crop_height</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>force_crop</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>crop_x</name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_y</name> <operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_width</name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_height</name><operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>crop_x</name> <operator>=</operator> <name>x_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_y</name> <operator>=</operator> <name>y_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_width</name> <operator>=</operator> <name><name>region_fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crop_height</name> <operator>=</operator> <name><name>region_fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>&amp;&amp;</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_max_width</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>crop_width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>crop_width</name> <operator>=</operator> <call><name>spu_scale_w</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_max_width</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>&amp;&amp;</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_max_height</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>crop_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>crop_height</name> <operator>=</operator> <call><name>spu_scale_h</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_max_height</name></name></expr></argument>, <argument><expr><name>scale_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>crop_x</name> <operator>+</operator> <name>crop_width</name> <operator>&lt;=</operator> <name>x_offset</name> <operator>||</operator>

<name>x_offset</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>region_fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>&lt;</operator> <name>crop_x</name> <operator>||</operator>

<name>crop_y</name> <operator>+</operator> <name>crop_height</name> <operator>&lt;=</operator> <name>y_offset</name> <operator>||</operator>

<name>y_offset</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>region_fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>&lt;</operator> <name>crop_y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>region_fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>region_fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x_end</name></decl>, <decl><type ref="prev"/><name>y_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>crop_x</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>crop_y</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_end</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>crop_x</name> <operator>+</operator> <name>crop_width</name></expr></argument>,

<argument><expr><name>x_offset</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>region_fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_end</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>crop_y</name> <operator>+</operator> <name>crop_height</name></expr></argument>,

<argument><expr><name>y_offset</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>region_fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region_fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>x_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region_fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>y_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region_fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>x_end</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region_fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>y_end</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_offset</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>*</operator><name>dst_ptr</name> <operator>=</operator> <call><name>subpicture_region_NewInternal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>region_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>region_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fade_alpha</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_fade</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>fade_start</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fade_start</name> <operator>&lt;=</operator> <name>render_date</name> <operator>&amp;&amp;</operator> <name>fade_start</name> <operator>&lt;</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fade_alpha</name> <operator>=</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name>render_date</name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name>fade_start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name>fade_alpha</name> <operator>*</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>*</operator> <name><name>region</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">65025</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>SpuRenderSubpictures</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_subpicture</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>render_subtitle_date</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>external_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subtitle_region_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>region_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_subpicture</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subtitle_region_count</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>region_count</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>region_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>subpicture_New</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_order</name></name> <operator>=</operator> <name><name>p_entries</name><index>[<expr><name>i_subpicture</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>subpic</name><operator>-&gt;</operator><name>i_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_last_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name><name>subtitle_area_buffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_area_t</name> <modifier>*</modifier></type><name>subtitle_area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>subtitle_area_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>subtitle_area</name> <operator>=</operator> <name>subtitle_area_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_region_count</name> <operator>&gt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>subtitle_area_buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subtitle_area</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>subtitle_region_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>subtitle_area</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>i_subpicture</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>spu_render_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"original picture size %dx%d is unsupported"</literal></expr></argument>,

<argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></argument>,

<argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"original picture size is undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt_src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt_src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_original_width</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_original_height</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>region</name> <operator>=</operator> <name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</init> <condition><expr><name>region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>region</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>spu_area_t</name></type> <name>area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>region_fmt</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region_fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>region_fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_sar_num</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator>

<name><name>fmt_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_sar_den</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator>

<name><name>fmt_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>region_fmt</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region_fmt</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>,

<argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>spu_scale_t</name></type> <name>scale</name> <init>= <expr><call><name>spu_scale_createq</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <name><name>fmt_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>region_fmt</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>*</operator> <name><name>fmt_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>region_fmt</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>,

<argument><expr><name><name>fmt_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scale</name><operator>.</operator><name>w</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>scale</name><operator>.</operator><name>h</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_external_scale</name> <init>= <expr><name>external_scale</name> <operator>&amp;&amp;</operator> <name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_TEXT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_scale_t</name></type> <name>virtual_scale</name> <init>= <expr><ternary><condition><expr><name>external_scale</name></expr> ?</condition><then> <expr><operator>(</operator><name>spu_scale_t</name><operator>)</operator><block>{ <expr><name>SCALE_UNIT</name></expr>, <expr><name>SCALE_UNIT</name></expr> }</block></expr> </then><else>: <expr><name>scale</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SpuRenderRegion</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>output_last_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>,

<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>virtual_scale</name></expr></argument>,

<argument><expr><name>chroma_list</name></expr></argument>, <argument><expr><name>fmt_dst</name></expr></argument>,

<argument><expr><name>i_original_width</name></expr></argument>, <argument><expr><name>i_original_height</name></expr></argument>,

<argument><expr><name>subtitle_area</name></expr></argument>, <argument><expr><name>subtitle_area_count</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name>render_subtitle_date</name></expr> </then><else>: <expr><name>system_now</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>output_last_ptr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_external_scale</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>scale</name><operator>.</operator><name>h</name></name> <operator>!=</operator> <name>SCALE_UNIT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>output_last_ptr</name><operator>)</operator><operator>-&gt;</operator><name><name>zoom_h</name><operator>.</operator><name>num</name></name></name> <operator>=</operator> <name><name>scale</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>output_last_ptr</name><operator>)</operator><operator>-&gt;</operator><name><name>zoom_h</name><operator>.</operator><name>den</name></name></name> <operator>=</operator> <name>SCALE_UNIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scale</name><operator>.</operator><name>w</name></name> <operator>!=</operator> <name>SCALE_UNIT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>output_last_ptr</name><operator>)</operator><operator>-&gt;</operator><name><name>zoom_v</name><operator>.</operator><name>num</name></name></name> <operator>=</operator> <name><name>scale</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>output_last_ptr</name><operator>)</operator><operator>-&gt;</operator><name><name>zoom_v</name><operator>.</operator><name>den</name></name></name> <operator>=</operator> <name>SCALE_UNIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>output_last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>area</name> <operator>=</operator> <call><name>spu_area_unscaled</name><argument_list>(<argument><expr><name>area</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>&amp;&amp;</operator> <name><name>area</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>area</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_area</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subtitle_area</name><index>[<expr><name>subtitle_area_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>area</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>&amp;&amp;</operator> <name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>subtitle_area</name> <operator>!=</operator> <name>subtitle_area_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subtitle_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateSPU</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>hl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>palette</name><operator>.</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>force_crop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>force_crop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>hl</name><operator>-&gt;</operator><name>x_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>hl</name><operator>-&gt;</operator><name>y_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>hl</name><operator>-&gt;</operator><name>x_end</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>hl</name><operator>-&gt;</operator><name>y_end</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hl</name><operator>-&gt;</operator><name>palette</name><operator>.</operator><name>i_entries</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hl</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"crop: %i,%i,%i,%i, palette forced: %i"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>palette</name><operator>.</operator><name>i_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>sub_new_buffer</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>channel</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ssize_t</name> <operator>*</operator><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name> <init>= <expr><call><name>subpicture_New</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subpicture</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>subpicture</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_subpicture_callbacks</name></name></type> <name>sub_cbs</name> <init>= <expr><block>{

<expr><name>sub_new_buffer</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceInit</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ssize_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>channel</name> <operator>=</operator> <call><name>spu_RegisterChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sub</name></name> <operator>=</operator> <operator>&amp;</operator><name>sub_cbs</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceClean</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_ClearChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><operator>*</operator><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RestartSubFilterCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeSubFilters</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubFilterAddProxyCallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_AddProxyCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>RestartSubFilterCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubFilterDelProxyCallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_DelProxyCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>RestartSubFilterCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RestartSubSourceCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeSubSources</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceAddProxyCallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_AddProxyCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>RestartSubSourceCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceDelProxyCallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_DelProxyCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>RestartSubSourceCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderWake</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><name>fmt_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>, <argument><expr><name>fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><name>fmt_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>, <argument><expr><name>fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SPU_CHROMALIST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chroma_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>chroma_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderEnqueue</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderCancel</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_index_of</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <while>while<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>==</operator> <name>p_subpic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>output_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderPause</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>output_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderSync</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_index_of</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>==</operator> <name>p_subpic</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>output_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_index_of</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_PrerenderText</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtsrc</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtdst</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"original picture size %dx%d is unsupported"</literal></expr></argument>,

<argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></argument>,

<argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"original picture size is undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmtsrc</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmtsrc</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>subpicture_Update</name><argument_list>(<argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>fmtsrc</name></expr></argument>, <argument><expr><name>fmtdst</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr> </then><else>: <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_original_picture_width</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_original_picture_height</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</init> <condition><expr><name>region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>region</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SpuRenderText</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,

<argument><expr><name>i_original_picture_width</name></expr></argument>, <argument><expr><name>i_original_picture_height</name></expr></argument>,

<argument><expr><name>chroma_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>spu_prerender_ctx_s</name>

<block>{

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmtsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmtdst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>chroma_list</name><index>[<expr><name>SPU_CHROMALIST_COUNT</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>cleanuplock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_processed</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_prerender_cleanup_routine</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_prerender_ctx_s</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>pp_processed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cleanuplock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>spu_PrerenderThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_prerender_ctx_s</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cleanuplock</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>chroma_list</name><index>[<expr><name>SPU_CHROMALIST_COUNT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtdst</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pp_processed</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>spu_prerender_cleanup_routine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name><operator>.</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_start</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>chroma_list</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name></name></expr></argument>, <argument><expr><name>SPU_CHROMALIST_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtdst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_PrerenderText</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>fmtdst</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>chroma_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_Cleanup</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FilterRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>scale_yuvp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FilterRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>scale_yuvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FilterRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>, <argument><expr><name>SubSourceClean</name></expr></argument>, <argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>,

<argument><expr><name>SubSourceDelProxyCallbacks</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>,

<argument><expr><name>SubFilterDelProxyCallbacks</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_channel_Clean</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vector_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_Destroy</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_Cleanup</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>spu_Create</name></cpp:undef>

<function><type><name>spu_t</name> <modifier>*</modifier></type><name>spu_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>object</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spu_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>spu_private_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"subpicture"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spu</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>spu_private_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>spu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VOUT_SPU_CHANNEL_OSD_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name></type> <name>channel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_channel_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>margin</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_margin</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_alignment</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>spu</name></expr></argument>,

<argument><expr><literal type="string">"secondary-sub-alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name> <operator>=</operator> <call><name>filter_chain_NewSPU</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"sub source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name> <operator>=</operator> <call><name>filter_chain_NewSPU</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"sub filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtdst</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>fmtsrc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>p_processed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>chroma_list</name><index>[<expr><name>SPU_CHROMALIST_COUNT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>SpuRenderCreateAndLoadText</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>textlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>SpuRenderCreateAndLoadScale</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_CODEC_YUVA</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGBA</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>scale_yuvp</name></name> <operator>=</operator> <call><name>SpuRenderCreateAndLoadScale</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_CODEC_YUVP</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name> <operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name> <operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>text</name></name> <operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name>

<operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>scale_yuvp</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_Cleanup</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_sort_date</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name> <operator>=</operator> <name>vout</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prerender</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>spu_PrerenderThread</name></expr></argument>, <argument><expr><name>spu</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_VIDEO</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>spu_Cleanup</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_Attach</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>input</name></name> <operator>!=</operator> <name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UpdateSPU</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>textlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FilterRelease</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>SpuRenderCreateAndLoadText</name><argument_list>(<argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>textlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_Detach</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_PrerenderPause</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_SetClockDelay</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>spu_GetChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_SetClockRate</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>spu_GetChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_PutSubpicture</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chain_update</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_left_empty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain_update</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chain_update</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>,

<argument><expr><name>SubFilterDelProxyCallbacks</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_Clear</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_AppendFromString</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>, <argument><expr><name>chain_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>,

<argument><expr><name>SubFilterAddProxyCallbacks</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_Clear</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>is_left_empty</name> <operator>=</operator> <call><name>filter_chain_IsEmpty</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_left_empty</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chain_update</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>chain_update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>=</operator> <name>chain_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>chain_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chain_update</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chain_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subpic</name> <operator>=</operator> <call><name>filter_chain_SubFilter</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter_chain</name></name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subpic</name> <operator>||</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subpic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>==</operator> <name>VOUT_SPU_CHANNEL_OSD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_ClearChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_private</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>spu_GetChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>orgstart</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>orgstop</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>orgstart</name></expr>, <expr><name>orgstop</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_clock_ConvertArrayToSystem</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>,

<argument><expr><name>times</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>spu_channel_Push</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>, <argument><expr><name>orgstart</name></expr></argument>, <argument><expr><name>orgstop</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><literal type="string">"subpicture heap full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>spu_PrerenderEnqueue</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>subpicture_t</name> <modifier>*</modifier></type><name>spu_Render</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>chroma_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>render_subtitle_date</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>ignore_osd</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>external_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chain_update</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain_update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>, <argument><expr><name>SubSourceClean</name></expr></argument>, <argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>,

<argument><expr><name>SubSourceDelProxyCallbacks</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_Clear</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_AppendFromString</name><argument_list>(<argument><expr><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>, <argument><expr><name>chain_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>,

<argument><expr><name>SubSourceAddProxyCallbacks</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>, <argument><expr><name>SubSourceInit</name></expr></argument>, <argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chain_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_SubSource</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain</name></name></expr></argument>, <argument><expr><name>spu</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>chroma_list_default_yuv</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VLC_CODEC_YUVA</name></expr>,

<expr><name>VLC_CODEC_RGBA</name></expr>,

<expr><name>VLC_CODEC_ARGB</name></expr>,

<expr><name>VLC_CODEC_BGRA</name></expr>,

<expr><name>VLC_CODEC_YUVP</name></expr>,

<expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>chroma_list_default_rgb</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VLC_CODEC_RGBA</name></expr>,

<expr><name>VLC_CODEC_ARGB</name></expr>,

<expr><name>VLC_CODEC_BGRA</name></expr>,

<expr><name>VLC_CODEC_YUVA</name></expr>,

<expr><name>VLC_CODEC_YUVP</name></expr>,

<expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma_list</name> <operator>||</operator> <operator>*</operator><name>chroma_list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma_list</name> <operator>=</operator> <ternary><condition><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt_dst</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>chroma_list_default_yuv</name></expr>

</then><else>: <expr><name>chroma_list_default_rgb</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>spu_PrerenderWake</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>fmt_dst</name></expr></argument>, <argument><expr><name>fmt_src</name></expr></argument>, <argument><expr><name>chroma_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>subpicture_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>subpicture_array</name> <init>=

<expr><call><name>spu_SelectSubpictures</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>render_subtitle_date</name></expr></argument>,

<argument><expr><name>ignore_osd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subpicture_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subpicture_array</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subpicture_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>spu_render_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>subpicture_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_PrerenderSync</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>stop</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_validate</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>subpicture_Update</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>,

<argument><expr><name>fmt_src</name></expr></argument>, <argument><expr><name>fmt_dst</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> ?</condition><then> <expr><name>render_subtitle_date</name></expr> </then><else>: <expr><name>system_now</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>subpicture_array</name></expr></argument>, <argument><expr><name>subpicture_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>subpicture_array</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SpuRenderCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>render</name> <init>= <expr><call><name>SpuRenderSubpictures</name><argument_list>(<argument><expr><name>spu</name></expr></argument>,

<argument><expr><name>subpicture_count</name></expr></argument>, <argument><expr><name>subpicture_array</name></expr></argument>,

<argument><expr><name>chroma_list</name></expr></argument>,

<argument><expr><name>fmt_dst</name></expr></argument>,

<argument><expr><name>fmt_src</name></expr></argument>,

<argument><expr><name>system_now</name></expr></argument>,

<argument><expr><name>render_subtitle_date</name></expr></argument>,

<argument><expr><name>external_scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subpicture_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>render</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>spu_RegisterChannelInternal</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>channel_id</name> <init>= <expr><call><name>spu_GetFreeChannelId</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_id</name> <operator>!=</operator> <name>VOUT_SPU_CHANNEL_INVALID</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name></type> <name>channel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_channel_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>order</name></expr> ?</condition><then> <expr><operator>*</operator><name>order</name></expr> </then><else>: <expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr></else></ternary></expr></argument>, <argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>channel_id</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VOUT_SPU_CHANNEL_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>spu_RegisterChannel</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>spu_RegisterChannelInternal</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spu_channel_Clear</name><parameter_list>(<parameter><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>spu_PrerenderCancel</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_channel_DeleteAt</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_ClearChannel</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>spu_GetChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_channel_Clear</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_clock_Reset</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_UnregisterChannel</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>spu_channel</name></name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>spu_GetChannel</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spu_channel_Clean</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_ChangeSources</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filters</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_update</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>source_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_ChangeFilters</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filters</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_current</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_current</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_update</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter_chain_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_ChangeChannelOrderMargin</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>margin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>spu_private_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>spu</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>margin</name></name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VOUT_ORDER_SECONDARY</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>secondary_margin</name></name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>spu_SetHighlight</name><parameter_list>(<parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type><name>spu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>hl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateSPU</name><argument_list>(<argument><expr><name>spu</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
