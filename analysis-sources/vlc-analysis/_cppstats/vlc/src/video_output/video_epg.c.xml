<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\video_epg.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_spuregion_helper.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_MARGIN</name></cpp:macro> <cpp:value>0.025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_MARGINS</name></cpp:macro> <cpp:value>(OSDEPG_MARGIN * 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_PADDING</name></cpp:macro> <cpp:value>0.05</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_WIDTH</name></cpp:macro> <cpp:value>(1.0 - OSDEPG_MARGINS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_HEIGHT</name></cpp:macro> <cpp:value>0.25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_LEFT</name></cpp:macro> <cpp:value>OSDEPG_MARGIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_TOP</name></cpp:macro> <cpp:value>(1.0 - OSDEPG_MARGINS - OSDEPG_HEIGHT + OSDEPG_MARGIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_ROWS_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_ROW_HEIGHT</name></cpp:macro> <cpp:value>(1.0 / OSDEPG_ROWS_COUNT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_LOGO_SIZE</name></cpp:macro> <cpp:value>(OSDEPG_HEIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_RIGHT</name></cpp:macro> <cpp:value>(1.0 - OSDEPG_MARGIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_ROWS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OSDEPG_ROW_HEIGHT * x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDEPG_ROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OSDEPG_ROWS(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPGOSD_TEXTSIZE_NAME</name></cpp:macro> <cpp:value>(OSDEPG_ROWS(2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPGOSD_TEXTSIZE_PROG</name></cpp:macro> <cpp:value>(OSDEPG_ROWS(2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPGOSD_TEXTSIZE_NTWK</name></cpp:macro> <cpp:value>(OSDEPG_ROWS(2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_COLOR1</name></cpp:macro> <cpp:value>0x2badde</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGB_BGCOLOR</name></cpp:macro> <cpp:value>0xc003182d</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>epg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>art</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>epg_spu_updater_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>GetDefaultArtUri</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_SYSDATA_DIR</name></expr></argument>, <argument><expr><literal type="string">"icons/hicolor/"</literal>

<literal type="string">"128x128/"</literal><name>PACKAGE_NAME</name><literal type="string">".png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_path</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_uri</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psz_uri</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRADIENT_COLORS</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDBackground</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_argb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>spuregion_CreateVGradientPalette</name><argument_list>( <argument><expr><operator>&amp;</operator><name>palette</name></expr></argument>, <argument><expr><name>GRADIENT_COLORS</name></expr></argument>, <argument><expr><name>i_argb</name></expr></argument>, <argument><expr><literal type="number">0xFF000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spuregion_CreateVGradientFill</name><argument_list>( <argument><expr><name><name>region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>palette</name><operator>.</operator><name>i_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDEpgSlider</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>ratio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name> <init>= <expr><block>{

<expr><operator>.</operator><name>i_entries</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>palette</name> <operator>=</operator> <block>{

<expr><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <block>{ <expr><call><name>HEX2YUV</name><argument_list>(<argument><expr><name>RGB_COLOR1</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr>, 

<expr><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <block>{ <expr><call><name>HEX2YUV</name><argument_list>(<argument><expr><literal type="number">0x00ff00</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{ <expr><call><name>HEX2YUV</name><argument_list>(<argument><expr><name>RGB_COLOR1</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0xC0</literal></expr> }</block></expr>, 

<expr><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <block>{ <expr><call><name>HEX2YUV</name><argument_list>(<argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>, 

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filled_part_width</name> <init>= <expr><name>ratio</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_outline</name> <init>= <expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>

<name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_border</name> <init>= <expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>j</name></expr></argument> &gt;</argument_list></name> <name>height</name> <operator>-</operator> <literal type="number">4</literal> <operator>||</operator>

<name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name>width</name> <operator>-</operator> <literal type="number">4</literal> <operator>||</operator>

<name>i</name> <operator>&lt;</operator> <name>filled_part_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>is_border</name> <operator>+</operator> <name>is_outline</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>filled_part_width</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>color</name></expr></argument>, <argument><expr><name>filled_part_width</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&gt;</operator> <name>filled_part_width</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>filled_part_width</name></expr>]</index></name></expr></argument>,

<argument><expr><name>color</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>filled_part_width</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>filled_part_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_OSDSegmentSetNoWrap</name><parameter_list>(<parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_segment</name></expr>;</condition> <incr><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>=</operator> <name>STYLE_WRAP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_WRAP_INFO</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type> <name>vout_OSDSegment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><call><name>text_segment_New</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_segment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>(<argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>(<argument><expr><name>p_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>size</name></expr></argument> ,<argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_TRANSPARENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_TRANSPARENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_FONT_COLOR</name> <operator>|</operator>

<name>STYLE_HAS_OUTLINE_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_SHADOW_ALPHA</name></expr>;</expr_stmt>

<return>return <expr><name>p_segment</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>image</name> <init>=

<expr><call><name>spuregion_CreateFromPicture</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>image</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name><operator>|</operator><name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>image</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_OSDRegionConstrain</name><parameter_list>(<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDTextRegion</name><parameter_list>(<parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_segment</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <name>p_segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>b_balanced_text</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDEpgText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vout_OSDTextRegion</name><argument_list>(<argument><expr><call><name>vout_OSDSegment</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>vout_OSDPrintTime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%2.2d:%2.2d"</literal></expr></argument>, <argument><expr><name><name>tms</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tms</name><operator>.</operator><name>tm_min</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_OSDEpgEvent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_start</name> <init>= <expr><call><name>vout_OSDPrintTime</name><argument_list>(<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><call><name>vout_OSDPrintTime</name><argument_list>(<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"%s-%s "</literal></expr></argument>, <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>vout_OSDSegment</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>RGB_COLOR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_segment</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <call><name>vout_OSDSegment</name><argument_list>(<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_OSDSegmentSetNoWrap</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_segment</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vout_OSDTextRegion</name><argument_list>(<argument><expr><name>p_segment</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_FillRightPanel</name><parameter_list>(<parameter><decl><type><name>epg_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>last_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDEpgText</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <name>EPGOSD_TEXTSIZE_NAME</name></expr></argument>,

<argument><expr><literal type="number">0x00ffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_current</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>p_current</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>p_current</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_current</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_id</name> <operator>!=</operator> <name><name>p_current</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>p_current</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDEpgEvent</name><argument_list>(<argument><expr><name>p_current</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name>height</name> <operator>*</operator> <call><name>OSDEPG_ROW</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <name>EPGOSD_TEXTSIZE_PROG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_OSDRegionConstrain</name><argument_list>(<argument><expr><operator>*</operator><name>last_ptr</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_next</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDEpgEvent</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name>height</name> <operator>*</operator> <call><name>OSDEPG_ROW</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <name>EPGOSD_TEXTSIZE_PROG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_OSDRegionConstrain</name><argument_list>(<argument><expr><operator>*</operator><name>last_ptr</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_progress</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>i_start</name></name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>i_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDEpgSlider</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">0.05</literal></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name>height</name> <operator>*</operator> <call><name>OSDEPG_ROW</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">0.90</literal></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <call><name>OSDEPG_ROWS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>f_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_network</name> <init>= <expr><call><name>vout_OSDPrintTime</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>psz_network</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDEpgText</name><argument_list>(<argument><expr><name>psz_network</name></expr></argument>,

<argument><expr><name>rx</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name>height</name> <operator>*</operator> <call><name>OSDEPG_ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <name>EPGOSD_TEXTSIZE_NTWK</name></expr></argument>,

<argument><expr><name>RGB_COLOR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type> <name>vout_BuildOSDEpg</name><parameter_list>(<parameter><decl><type><name>epg_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>visible_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>visible_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>last_ptr</name> <init>= <expr><operator>&amp;</operator><name>head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_padding</name> <init>= <expr><name>visible_height</name> <operator>*</operator> <operator>(</operator><name>OSDEPG_HEIGHT</name> <operator>*</operator> <name>OSDEPG_PADDING</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDBackground</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>visible_width</name> <operator>*</operator> <name>OSDEPG_LEFT</name></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <name>visible_height</name> <operator>*</operator> <name>OSDEPG_TOP</name></expr></argument>,

<argument><expr><name>visible_width</name> <operator>*</operator> <name>OSDEPG_WIDTH</name></expr></argument>,

<argument><expr><name>visible_height</name> <operator>*</operator> <name>OSDEPG_HEIGHT</name></expr></argument>,

<argument><expr><name>ARGB_BGCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>;</decl_stmt>

}</block> <decl><name>panel</name> <init>= <expr><block>{

<expr><name>x</name> <operator>+</operator> <name>visible_width</name> <operator>*</operator> <name>OSDEPG_LEFT</name> <operator>+</operator> <name>i_padding</name></expr>,

<expr><name>y</name> <operator>+</operator> <name>visible_height</name> <operator>*</operator> <name>OSDEPG_TOP</name> <operator>+</operator> <name>i_padding</name></expr>,

<expr><name>visible_width</name> <operator>*</operator> <name>OSDEPG_WIDTH</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name></expr>,

<expr><name>visible_height</name> <operator>*</operator> <name>OSDEPG_HEIGHT</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_padding</name></expr>,

<expr><name>visible_width</name> <operator>*</operator> <name>OSDEPG_LEFT</name> <operator>+</operator> <name>i_padding</name></expr>,

<expr><name>visible_height</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>OSDEPG_TOP</name> <operator>-</operator> <name>OSDEPG_HEIGHT</name><operator>)</operator> <operator>+</operator> <name>i_padding</name></expr>,

}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>art</name></name></expr> )</condition>

<block>{<block_content>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

}</block> <decl><name>logo</name> <init>= <expr><block>{

<expr><name><name>panel</name><operator>.</operator><name>x</name></name></expr>,

<expr><name><name>panel</name><operator>.</operator><name>y</name></name></expr>,

<expr><name><name>panel</name><operator>.</operator><name>h</name></name></expr>,

<expr><name><name>panel</name><operator>.</operator><name>h</name></name></expr>,

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDBackground</name><argument_list>(<argument><expr><name><name>logo</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>h</name></name></expr></argument>,

<argument><expr><literal type="number">0xFF000000</literal> <operator>|</operator> <name>RGB_COLOR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logo_padding</name> <init>= <expr><name>visible_height</name> <operator>*</operator> <operator>(</operator><name>OSDEPG_LOGO_SIZE</name> <operator>*</operator> <name>OSDEPG_PADDING</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>last_ptr</name> <operator>=</operator> <call><name>vout_OSDImage</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>logo_padding</name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>logo_padding</name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>logo_padding</name></expr></argument>,

<argument><expr><name><name>logo</name><operator>.</operator><name>h</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>logo_padding</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>art</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last_ptr</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>panel</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>logo</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>panel</name><operator>.</operator><name>w</name></name> <operator>-=</operator> <name><name>logo</name><operator>.</operator><name>w</name></name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_FillRightPanel</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>x</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>w</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>rx</name></name></expr></argument>,

<argument><expr><name><name>panel</name><operator>.</operator><name>ry</name></name></expr></argument>,

<argument><expr><name>last_ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>head</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OSDEpgValidate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>has_src_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>has_dst_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>has_src_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_dst_changed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OSDEpgUpdate</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>epg_spu_updater_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>fmt_dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>vout_BuildOSDEpg</name><argument_list>(<argument><expr><name>sys</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OSDEpgDestroy</name><parameter_list>(<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>epg_spu_updater_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>epg</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>epg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>art</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_OSDEpg</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>epg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>epg_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>input</name><operator>-&gt;</operator><name>p_epg_table</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>tmp</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_current_event</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>p_current</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>epg</name> <operator>=</operator> <call><name>vlc_epg_New</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>i_source_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>epg</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_current_event</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><call><name>vlc_epg_event_Duplicate</name><argument_list>(<argument><expr><name>p_current_event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_event</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vlc_epg_AddEvent</name><argument_list>(<argument><expr><name>epg</name></expr></argument>, <argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_SetCurrent</name><argument_list>(<argument><expr><name>epg</name></expr></argument>, <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tmp</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>p_next</name> <operator>||</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>p_current_event</name> <operator>||</operator> <operator>(</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_id</name></name> <operator>!=</operator> <name><name>p_current_event</name><operator>-&gt;</operator><name>i_id</name></name> <operator>&amp;&amp;</operator>

<name><name>p_evt</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <name><name>p_current_event</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator>

<name><name>p_current_event</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_next</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><call><name>vlc_epg_event_Duplicate</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vlc_epg_AddEvent</name><argument_list>(<argument><expr><name>epg</name></expr></argument>, <argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>epg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>(<argument><expr><name>epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>epg_time</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>i_epg_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>epg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>epg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>epg</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>input_item_GetMeta</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>vlc_meta_Title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>epg_spu_updater_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>(<argument><expr><name>epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>epg</name></name> <operator>=</operator> <name>epg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>epg_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>art</name></name> <operator>=</operator> <call><name>input_item_GetMeta</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>art</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>art</name></name> <operator>=</operator> <call><name>GetDefaultArtUri</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pf_validate</name> <operator>=</operator> <name>OSDEpgValidate</name></expr>,

<expr><operator>.</operator><name>pf_update</name> <operator>=</operator> <name>OSDEpgUpdate</name></expr>,

<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>OSDEpgDestroy</name></expr>,

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>sys</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><call><name>subpicture_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updater</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subpic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>epg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name>VOUT_SPU_CHANNEL_OSD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_fade</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_PutSubpicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
