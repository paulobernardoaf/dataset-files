<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\video_output.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdnoreturn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interlacing.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snapshot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../misc/variables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../clock/clock.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_REDISPLAY_DELAY</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_DISPLAY_LATE_THRESHOLD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_MWAIT_TOLERANCE</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(4)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>VoutCheckFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">8192</literal> <operator>||</operator>

<name><name>src</name><operator>-&gt;</operator><name>i_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">8192</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VoutFixFormat</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VoutFixFormatAR</name><argument_list>( <argument><expr><name>dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>VideoFormatIsCropArEqual</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&amp;&amp;</operator>

<name><name>dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>&amp;&amp;</operator>

<name><name>dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>&amp;&amp;</operator>

<name><name>dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&amp;&amp;</operator>

<name><name>dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_display_SizeWindow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>sar_num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>sar_den</name></decl></parameter>,

<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>height</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sar_num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sar_den</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>sar_num</name><operator>)</operator> <operator>/</operator> <name>sar_den</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ORIENT_IS_SWAP</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>/</operator> <name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>width</name> <operator>*</operator> <name>h</name><operator>)</operator> <operator>/</operator> <name>w</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>height</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>h</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_SizeWindow</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>original</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name> <init>= <expr><name><name>original</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><name><name>original</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sar_num</name> <init>= <expr><name><name>original</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sar_den</name> <init>= <expr><name><name>original</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_CROP_NONE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>den</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sar_den</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CROP_RATIO</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>den</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>*</operator> <name>den</name> <operator>&gt;</operator> <name>h</name> <operator>*</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>h</name> <operator>*</operator> <name>num</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>den</name> <operator>/</operator> <name>num</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VOUT_CROP_WINDOW</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CROP_BORDER</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vout_display_SizeWindow</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sar_num</name></expr></argument>, <argument><expr><name>sar_den</name></expr></argument>,

<argument><expr><name><name>original</name><operator>-&gt;</operator><name>orientation</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_UpdateWindowSizeLocked</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_SizeWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"requested window size: %ux%u"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_SetSize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_GetResetStatistic</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>displayed</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_statistic_GetReset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>statistic</name></name></expr></argument>, <argument><expr><name>displayed</name></expr></argument>, <argument><expr><name>lost</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vout_IsEmpty</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>picture_fifo_Peek</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_DisplayTitle</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>show</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_OSDText</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>, <argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>position</name></name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_MouseState</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_control_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_control_cmd_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>VOUT_CONTROL_MOUSE_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>mouse</name></name> <operator>=</operator> <operator>*</operator><name>mouse</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_PutSubpicture</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_PutSubpicture</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>vout_RegisterSubpictureChannel</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>channel</name> <init>= <expr><name>VOUT_SPU_CHANNEL_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>spu_RegisterChannel</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>vout_RegisterSubpictureChannelInternal</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>vlc_clock_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name> <modifier>*</modifier></type><name>out_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>channel</name> <init>= <expr><name>VOUT_SPU_CHANNEL_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>spu_RegisterChannelInternal</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>clock</name></expr></argument>, <argument><expr><name>out_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_UnregisterSubpictureChannel</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_UnregisterChannel</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_FlushSubpictureChannel</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_ClearChannel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_SetSpuHighlight</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_spu_highlight_t</name> <modifier>*</modifier></type><name>spu_hl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_SetHighlight</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>vout_GetPicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>picture_pool_Wait</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>picture</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Reset</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_CopyCropAr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_PutPicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_fifo_Push</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Wake</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_GetSnapshot</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>image_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>picture_dst</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>vout_snapshot_Get</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to grab a snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>image_dst</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name> <init>= <expr><name>VLC_CODEC_PNG</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <call><name>image_Type2Fourcc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>image_Type2Fourcc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>override_width</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>override_height</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-height"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>picture_Export</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>image_dst</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>override_width</name></expr></argument>, <argument><expr><name>override_height</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to convert image for snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>picture_dst</name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_SetFullScreen</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeWindowed</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_UnsetFullScreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeWindowState</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_SetState</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeDisplaySize</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_display_SetSize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeDisplayFilled</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_filled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>is_display_filled</name></name> <operator>=</operator> <name>is_filled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayFilled</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>is_filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeZoom</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>*</operator> <literal type="number">10</literal> <operator>&lt;</operator> <name>den</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>den</name> <operator>*</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>zoom</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>zoom</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayZoom</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeDisplayAspectRatio</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>dar_num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dar_den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>dar_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>dar_den</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayAspect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>dar_num</name></expr></argument>, <argument><expr><name>dar_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeCropRatio</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VOUT_CROP_RATIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VOUT_CROP_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayCrop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeCropWindow</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VOUT_CROP_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayCrop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeCropBorder</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VOUT_CROP_BORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayCrop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><operator>-</operator><name>right</name></expr></argument>, <argument><expr><operator>-</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ControlChangeFilters</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_PushString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><name>VOUT_CONTROL_CHANGE_FILTERS</name></expr></argument>,

<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ControlChangeSubSources</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_ChangeSources</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ControlChangeSubFilters</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_ChangeFilters</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeSpuChannelMargin</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>margin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_ChangeChannelOrderMargin</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeViewpoint</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>p_viewpoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_control_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>viewpoint</name></name> <operator>=</operator> <operator>*</operator><name>p_viewpoint</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_cmd_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>VOUT_CONTROL_VIEWPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>viewpoint</name></name> <operator>=</operator> <operator>*</operator><name>p_viewpoint</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VoutGetDisplayCfg</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>viewpoint</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>pose</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>display_width</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>display_height</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name>display_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>display_width</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><name>display_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>display_height</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>is_display_filled</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msar_num</name></decl>, <decl><type ref="prev"/><name>msar_den</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritURational</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msar_den</name></expr></argument>, <argument><expr><literal type="string">"monitor-par"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name>msar_num</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>msar_den</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msar_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>msar_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>msar_den</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>zoom_den</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>zoom_num</name> <init>= <expr><name>zoom_den</name> <operator>*</operator> <call><name>var_GetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zoom_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zoom_den</name></expr></argument>, <argument><expr><name>zoom_num</name></expr></argument>, <argument><expr><name>zoom_den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>zoom_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>zoom</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>zoom_den</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>horizontal</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_CENTER</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>align_mask</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>align_mask</name> <operator>&amp;</operator> <name>VOUT_ALIGN_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>horizontal</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>align_mask</name> <operator>&amp;</operator> <name>VOUT_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>horizontal</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>align_mask</name> <operator>&amp;</operator> <name>VOUT_ALIGN_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_TOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>align_mask</name> <operator>&amp;</operator> <name>VOUT_ALIGN_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_BOTTOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterRestartCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_this</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_var</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>newval</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeFilters</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThreadDelFilterCallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_DelProxyCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>FilterRestartCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadDelAllFilterCallbacks</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_ForEach</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>,

<argument><expr><name>ThreadDelFilterCallbacks</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VoutVideoFilterInteractiveNewPicture</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>picture_pool_Get</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>private_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Reset</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_CopyCropAr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>picture</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VoutVideoFilterStaticNewPicture</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_chain_IsEmpty</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>VoutVideoFilterInteractiveNewPicture</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadFilterFlush</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_locked</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_locked</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_VideoFlush</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_VideoFlush</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_locked</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

}</block></struct></type> <name>vout_filter_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadChangeFilters</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>new_deinterlace</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_locked</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ThreadFilterFlush</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>is_locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadDelAllFilterCallbacks</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>array_static</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>array_interactive</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_static</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_deinterlace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>has_deint</name></name> <operator>=</operator> <operator>*</operator><name>new_deinterlace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>has_deint</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_filter_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>config_ChainCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_static</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filters</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filters</name> <operator>=</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><ternary><condition><expr><name>filters</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vout_filter_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"postproc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_static</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array_interactive</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cfg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_locked</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_target</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_target</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_current</name> <init>= <expr><operator>&amp;</operator><name>fmt_target</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_current</name> <init>= <expr><name>vctx_target</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><ternary><condition><expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name>array_static</name></expr> </then><else>:

<expr><operator>&amp;</operator><name>array_interactive</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><ternary><condition><expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr> </then><else>:

<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>p_fmt_current</name></expr></argument>, <argument><expr><name>vctx_current</name></expr></argument>, <argument><expr><name>p_fmt_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vout_filter_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Adding '%s' as %s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"static"</literal></expr> </then><else>: <expr><literal type="string">"interactive"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>filter_chain_AppendFilter</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to add filter '%s'"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>filter_AddProxyCallbacks</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>FilterRestartCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_chain_IsEmpty</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_fmt_current</name> <operator>=</operator> <call><name>filter_chain_GetFmtOut</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vctx_current</name> <operator>=</operator> <call><name>filter_chain_GetVideoCtxOut</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>(<argument><expr><name>p_fmt_current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Adding a filter to compensate for format changes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_chain_AppendConverter</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to compensate for the format changes, removing all filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadDelAllFilterCallbacks</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>, <argument><expr><name>vctx_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>, <argument><expr><name>vctx_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name> <operator>!=</operator> <name>filters</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name> <operator>=</operator> <ternary><condition><expr><name>filters</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_locked</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThreadDisplayPreparePicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reuse</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>frame_by_frame</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>paused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_late_dropped</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>is_late_dropped</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>frame_by_frame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><call><name>filter_chain_VideoFilter</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>reuse</name> <operator>||</operator> <operator>!</operator><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>decoded</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reuse</name> <operator>&amp;&amp;</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>picture_fifo_Pop</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decoded</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_late_dropped</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>decoded</name><operator>-&gt;</operator><name>b_force</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>system_pts</name> <init>=

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>date</name></expr></argument>,

<argument><expr><name><name>decoded</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>late</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>system_pts</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>paused</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>late</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>late</name> <operator>=</operator> <name>date</name> <operator>-</operator> <name>system_pts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>late_threshold</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoded</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>decoded</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>late_threshold</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>decoded</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>/</operator> <name><name>decoded</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>late_threshold</name> <operator>=</operator> <name>VOUT_DISPLAY_LATE_THRESHOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>late</name> <operator>&gt;</operator> <name>late_threshold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"picture is too late to be displayed (missing %"</literal><name>PRId64</name><literal type="string">" ms)"</literal></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>late</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_statistic_AddLost</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>statistic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>late</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"picture might be displayed late (missing %"</literal><name>PRId64</name><literal type="string">" ms)"</literal></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>late</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>pic_vctx</name> <init>= <expr><call><name>picture_GetVideoContext</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VideoFormatIsCropArEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoded</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>decoded</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name> <operator>=</operator> <ternary><condition><expr><name>pic_vctx</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>pic_vctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadChangeFilters</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decoded</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reuse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>decoded</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>is_interlaced</name></name> <operator>=</operator> <operator>!</operator><name><name>decoded</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>picture</name> <operator>=</operator> <call><name>filter_chain_VideoFilter</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>picture</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>VoutHoldDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name>sys</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dec_device</name></name></expr> ?</condition><then> <expr><call><name>vlc_decoder_device_Hold</name><argument_list>( <argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>vout_video_cbs</name> <init>= <expr><block>{

<expr><name>NULL</name></expr>, <expr><name>VoutHoldDecoderDevice</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ConvertRGB32AndBlend</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu_blend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name> <init>= <expr><block>{

<expr><operator>.</operator><name>video</name> <operator>=</operator> <operator>&amp;</operator><name>vout_video_cbs</name></expr>,

<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>vout</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>filterc</name> <init>= <expr><call><name>filter_chain_NewVideo</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filterc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>src</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu_blend</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>(<argument><expr><name>filterc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_chain_AppendConverter</name><argument_list>(<argument><expr><name>filterc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name>filterc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>filter_chain_VideoFilter</name><argument_list>(<argument><expr><name>filterc</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name>filterc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type><name>swblend</name> <init>= <expr><call><name>filter_NewBlend</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swblend</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>picture_BlendSubpicture</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name>swblend</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>(<argument><expr><name>swblend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pic</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThreadDisplayRenderPicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_forced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>torender</name> <init>= <expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_chrono_Start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>filtered</name> <init>= <expr><call><name>filter_chain_VideoFilter</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>, <argument><expr><name>torender</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filtered</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Unsupported timestamp modifications done by chain_interactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_snapshot</name> <init>= <expr><call><name>vout_snapshot_IsRequested</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>render_subtitle_date</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>render_subtitle_date</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>render_subtitle_date</name> <operator>=</operator> <ternary><condition><expr><name><name>filtered</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>system_now</name></expr> </then><else>:

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name><name>filtered</name><operator>-&gt;</operator><name>date</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>render_subtitle_date</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>render_subtitle_date</name> <operator>=</operator> <name>system_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_dr_spu</name> <init>= <expr><operator>!</operator><name>do_snapshot</name> <operator>&amp;&amp;</operator>

<name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>&amp;&amp;</operator>

<operator>*</operator><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_early_spu</name> <init>= <expr><operator>!</operator><name>do_dr_spu</name> <operator>&amp;&amp;</operator>

<name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>ORIENT_NORMAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>subpicture_chromas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_spu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_dr_spu</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt_spu</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt_spu</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>fmt_spu</name><operator>.</operator><name>i_height</name></name> <operator>&lt;</operator> <name><name>place</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>place</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt_spu</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt_spu</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subpicture_chromas</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_early_spu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt_spu</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fmt_spu</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_spu</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>subpicture_chromas</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>fmt_spu</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>spu_blend_chroma</name></name> <operator>!=</operator> <name><name>fmt_spu</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend_chroma</name></name> <operator>=</operator> <name><name>fmt_spu</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>=</operator> <call><name>filter_NewBlend</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to create blending filter, OSD/Subtitles will not work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_spu_rot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_spu_rot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:

<expr><call><name>spu_Render</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>,

<argument><expr><name>subpicture_chromas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_spu_rot</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>,

<argument><expr><name>render_subtitle_date</name></expr></argument>,

<argument><expr><name>do_snapshot</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>can_scale_spu</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>todisplay</name> <init>= <expr><name>filtered</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>snap_pic</name> <init>= <expr><name>todisplay</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_early_spu</name> <operator>&amp;&amp;</operator> <name>subpic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>blent</name> <init>= <expr><call><name>picture_pool_Get</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>private_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>video_format_CopyCropAr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>blent</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filtered</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>(<argument><expr><name>blent</name></expr></argument>, <argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>picture_BlendSubpicture</name><argument_list>(<argument><expr><name>blent</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>todisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>snap_pic</name> <operator>=</operator> <name>todisplay</name> <operator>=</operator> <name>blent</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_snapshot</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>ConvertRGB32AndBlend</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>blent</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>snap_pic</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>blent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subpic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_snapshot</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>snap_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_snapshot_Set</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>snap_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>snap_pic</name> <operator>!=</operator> <name>todisplay</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>snap_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_UpdateDisplaySourceProperties</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>todisplay</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todisplay</name> <operator>=</operator> <call><name>vout_ConvertForDisplay</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>todisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>todisplay</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_dr_spu</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>subpic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_BlendSubpicture</name><argument_list>(<argument><expr><name>todisplay</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>system_now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>pts</name> <init>= <expr><name><name>todisplay</name><operator>-&gt;</operator><name>date</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>system_pts</name> <init>= <expr><ternary><condition><expr><name>is_forced</name></expr> ?</condition><then> <expr><name>system_now</name></expr> </then><else>:

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>system_pts</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>system_pts</name> <operator>=</operator> <name>system_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>frame_rate</name> <init>= <expr><name><name>todisplay</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>frame_rate_base</name> <init>= <expr><name><name>todisplay</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>todisplay</name></expr></argument>, <argument><expr><ternary><condition><expr><name>do_dr_spu</name></expr> ?</condition><then> <expr><name>subpic</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>system_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_chrono_Stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{

static int i = 0;

if (((i++)%10) == 0)

msg_Info(vout, "render: avg %d ms var %d ms",

(int)(sys-&gt;render.avg/1000), (int)(sys-&gt;render.var/1000));

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>system_now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_forced</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>system_now</name> <operator>&gt;</operator> <name>system_pts</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>system_pts</name> <operator>=</operator> <name>system_now</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_clock_Wait</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>,

<argument><expr><name>VOUT_REDISPLAY_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>system_pts</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>system_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>system_pts</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_clock_UpdateVideo</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_pts</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>,

<argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>frame_rate_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_display_Display</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>todisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_statistic_AddDisplayed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>statistic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThreadDisplayPicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>deadline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>frame_by_frame</name> <init>= <expr><operator>!</operator><name>deadline</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>paused</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ThreadDisplayPreparePicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>frame_by_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paused</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paused</name> <operator>||</operator> <name>frame_by_frame</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ThreadDisplayPreparePicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>frame_by_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paused</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>system_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>render_delay</name> <init>= <expr><call><name>vout_chrono_GetHigh</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VOUT_MWAIT_TOLERANCE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>drop_next_frame</name> <init>= <expr><name>frame_by_frame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date_next</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paused</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>next_system_pts</name> <init>=

<expr><call><name>vlc_clock_ConvertToSystem</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>next_system_pts</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>paused</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name>date_next</name> <operator>=</operator> <name>next_system_pts</name> <operator>-</operator> <name>render_delay</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>date_next</name> <operator>&lt;=</operator> <name>system_now</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>drop_next_frame</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>refresh</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date_refresh</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>date_refresh</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>+</operator> <name>VOUT_REDISPLAY_DELAY</name> <operator>-</operator> <name>render_delay</name></expr>;</expr_stmt>

<expr_stmt><expr><name>refresh</name> <operator>=</operator> <name>date_refresh</name> <operator>&lt;=</operator> <name>system_now</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_refresh</name> <init>= <expr><operator>!</operator><name>drop_next_frame</name> <operator>&amp;&amp;</operator> <name>refresh</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_by_frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>date_refresh</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>deadline</name> <operator>=</operator> <name>date_refresh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>date_next</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name>date_next</name> <operator>&lt;</operator> <operator>*</operator><name>deadline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>deadline</name> <operator>=</operator> <name>date_next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>refresh</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>drop_next_frame</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drop_next_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_forced</name> <init>= <expr><name>frame_by_frame</name> <operator>||</operator> <name>force_refresh</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name><operator>-&gt;</operator><name>b_force</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ThreadDisplayRenderPicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>is_forced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>force_refresh</name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangePause</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name> <operator>||</operator> <operator>!</operator><name>is_paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ThreadFilterFlush</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name> <operator>=</operator> <name>is_paused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_SetInhibition</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><operator>!</operator><name>is_paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_FlushUnlocked</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>below</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadFilterFlush</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>date</name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>below</name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;=</operator> <name>date</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>below</name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;=</operator> <name>date</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_fifo_Flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>below</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_FilterFlush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_Reset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_Flush</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_FlushUnlocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_NextPicture</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ThreadDisplayPicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>&gt;</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>-</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_control_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeDelay</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_clock_SetDelay</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeRate</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Hold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeSpuDelay</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_SetClockDelay</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ChangeSpuRate</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spu_SetClockRate</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadProcessMouseState</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>win_mouse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_mouse_t</name></type> <name>vid_mouse</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_display_TranslateMouseState</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vid_mouse</name></expr></argument>, <argument><expr><name>win_mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>vid_mouse</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name> <operator>&amp;&amp;</operator> <name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_chain_MouseFilter</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>filter_chain_MouseFilter</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mouse_HasMoved</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetCoords</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mouse_HasButton</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-button-down"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_pressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mouse_HasPressed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_GetCoords</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetCoords</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-clicked"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>b_double_click</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_ToggleBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse</name></name> <operator>=</operator> <operator>*</operator><name>m</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse_event</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse_event</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>mouse_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vout_Start</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_configuration_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>mouse_event</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mouse_opaque</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>mouse_opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mouse_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>mouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name> <operator>=</operator> <call><name>picture_fifo_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>private_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name> <operator>=</operator> <ternary><condition><expr><name>vctx</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>static_cbs</name> <init>= <expr><block>{

<expr><name>VoutVideoFilterStaticNewPicture</name></expr>, <expr><name>VoutHoldDecoderDevice</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>interactive_cbs</name> <init>= <expr><block>{

<expr><name>VoutVideoFilterInteractiveNewPicture</name></expr>, <expr><name>VoutHoldDecoderDevice</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name> <init>= <expr><block>{

<expr><operator>.</operator><name>video</name> <operator>=</operator> <operator>&amp;</operator><name>static_cbs</name></expr>,

<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>vout</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owner</name><operator>.</operator><name>video</name></name> <operator>=</operator> <operator>&amp;</operator><name>interactive_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_cfg_t</name></type> <name>dcfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vctx</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dec_device</name> <operator>&amp;&amp;</operator> <name>dec_device</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dcfg</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_CROP_NONE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VOUT_CROP_RATIO</name></expr>:</case>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CROP_WINDOW</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>window</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CROP_BORDER</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>border</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dcfg</name><operator>.</operator><name>window_props</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>window_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dcfg</name><operator>.</operator><name>window_props</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>window_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>vout_OpenWrapper</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>splitter_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dcfg</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_SetDisplayCrop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_SetDisplayAspect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_pool</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>private_pool</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>decoded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>is_interlaced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>step</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>is_on</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pause</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Print</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"original format"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ThreadDelAllFilterCallbacks</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_fifo_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadControl</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vout_control_cmd_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>cmd</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_CONTROL_CHANGE_FILTERS</name></expr>:</case>

<expr_stmt><expr><call><name>ThreadChangeFilters</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CONTROL_CHANGE_INTERLACE</name></expr>:</case>

<expr_stmt><expr><call><name>ThreadChangeFilters</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>boolean</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CONTROL_MOUSE_STATE</name></expr>:</case>

<expr_stmt><expr><call><name>ThreadProcessMouseState</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>mouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VOUT_CONTROL_VIEWPOINT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_SetDisplayViewpoint</name><argument_list>(<argument><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>viewpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vout_control_cmd_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>noreturn</name> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wait</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vout_control_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>max_deadline</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <ternary><condition><expr><name>deadline</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name>max_deadline</name></expr> </then><else>: <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>, <argument><expr><name>max_deadline</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vout_control_Pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ThreadControl</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name>ThreadDisplayPicture</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deadline</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>picture_interlaced</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>displayed</name><operator>.</operator><name>is_interlaced</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_SetInterlacingState</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>picture_interlaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_ReleaseDisplay</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_blend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display_pool</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_FlushUnlocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_CloseWrapper</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ThreadDelAllFilterCallbacks</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_interactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>chain_static</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>src_vctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_fifo_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_pool</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>mouse_event</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>mouse_event</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mouse_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_Detach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_StopDisplay</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ReleaseDisplay</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vout_DisableWindow</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_window_Disable</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_Stop</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_StopDisplay</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_DisableWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_Close</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_Stop</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_IntfDeinit</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_snapshot_End</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Dead</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_chrono_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_Release</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>splitter_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_display_window_Delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_statistic_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>statistic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_snapshot_Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vout_thread_t</name> <modifier>*</modifier></type><name>vout_CreateCommon</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_custom_create</name><argument_list>(<argument><expr><name>object</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vout</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"video output"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_CreateVars</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vout_thread_sys_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>vout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout_CreateDummy</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vout_CreateCommon</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>vout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vout_CreateCommon</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_IntfInit</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>splitter_name</name></name> <operator>=</operator> <ternary><condition><expr><call><name>config_GetType</name><argument_list>(<argument><expr><literal type="string">"video-splitter"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-splitter"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>splitter_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"wdummy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>dar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>crop</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>VOUT_CROP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <call><name>vout_snapshot_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_statistic_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>statistic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name> <operator>=</operator> <ternary><condition><expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"spu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"osd"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>spu_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_control_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>show</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-title-show"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-title-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>title</name><operator>.</operator><name>position</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-title-position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_InitInterlacingSupport</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_late_dropped</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"drop-late-frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name> <operator>=</operator> <call><name>vout_display_window_New</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>splitter_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_chrono_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>render</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_window_SetState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>VOUT_WINDOW_STATE_BELOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_window_SetState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>VOUT_WINDOW_STATE_ABOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>vout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout_Hold</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_ChangeSource</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>original</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EnableWindowLocked</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>original</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dummy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vout_window_cfg_t</name></type> <name>wcfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>is_fullscreen</name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>is_decorated</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-deco"</literal></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>x</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-x"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video-y"</literal></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VoutGetDisplayCfg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_SizeWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wcfg</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wcfg</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_window_Enable</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"failed to enable window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_UpdateWindowSizeLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_Request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vout_configuration_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>input_thread_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>vout</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>fmt</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>clock</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VoutCheckFormat</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>original</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VoutFixFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>original</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_ChangeSource</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>original</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EnableWindowLocked</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>original</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"failed to enable window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_StopDisplay</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_ReinitInterlacingSupport</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>original</name></name> <operator>=</operator> <name>original</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>clock</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_Start</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"video output display creation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_DisableWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_OUTPUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_ReleaseDisplay</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_DisableWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spu_Attach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>spu</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_IntfReinit</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>vout_GetDevice</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vout</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name> <operator>=</operator> <call><name>vlc_decoder_device_Create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display_cfg</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dec_device</name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr> ?</condition><then> <expr><call><name>vlc_decoder_device_Hold</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dec_device</name></expr>;</return>

</block_content>}</block></function>

</unit>
