<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\interlacing.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interlacing.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deinterlace_modes</name><index>[]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name><init>= <expr><block>{

<expr><literal type="string">"auto"</literal></expr>,

<expr><literal type="string">"discard"</literal></expr>,

<expr><literal type="string">"blend"</literal></expr>,

<expr><literal type="string">"mean"</literal></expr>,

<expr><literal type="string">"bob"</literal></expr>,

<expr><literal type="string">"linear"</literal></expr>,

<expr><literal type="string">"x"</literal></expr>,

<expr><literal type="string">"yadif"</literal></expr>,

<expr><literal type="string">"yadif2x"</literal></expr>,

<expr><literal type="string">"phosphor"</literal></expr>,

<expr><literal type="string">"ivtc"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DeinterlaceIsModeValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>deinterlace_modes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>deinterlace_modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeinterlaceCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>deinterlace_state</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>var_GetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_needed</name> <init>= <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-needed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mode</name> <operator>||</operator> <operator>!</operator><call><name>DeinterlaceIsModeValid</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>var_CreateGetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"sout-deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"sout-deinterlace-mode"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace %d, mode %s, is_needed %d"</literal></expr></argument>, <argument><expr><name>deinterlace_state</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>is_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deinterlace_state</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>deinterlace_state</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_needed</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_control_PushBool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>,

<argument><expr><name>VOUT_CONTROL_CHANGE_INTERLACE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_control_PushBool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>control</name></name></expr></argument>,

<argument><expr><name>VOUT_CONTROL_CHANGE_INTERLACE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_InitInterlacingSupport</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Deinterlacing available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>has_deint</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deinterlace_state</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Deinterlace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>optd</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>VLC_VAR_CLEARCHOICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>optd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>optd</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name><name>optd</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>optd</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>DeinterlaceCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deinterlace_mode</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Deinterlace mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>module_config_t</name> <modifier>*</modifier></type><name>optm</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_CLEARCHOICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>optm</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>optm</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeinterlaceIsModeValid</name><argument_list>(<argument><expr><name><name>optm</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>optm</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>,

<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>optm</name><operator>-&gt;</operator><name>list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>DeinterlaceCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-needed"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-needed"</literal></expr></argument>, <argument><expr><name>DeinterlaceCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter_mode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>has_deint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_mode</name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"sout-deinterlace-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deinterlace_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>deinterlace_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>deinterlace_mode</name> <operator>=</operator> <name>filter_mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <ternary><condition><expr><name>deinterlace_mode</name></expr> ?</condition><then> <expr><name>deinterlace_mode</name></expr> </then><else>: <expr><name><name>optm</name><operator>-&gt;</operator><name>orig</name><operator>.</operator><name>psz</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETVALUE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>deinterlace_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>deinterlace_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>is_interlaced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_ReinitInterlacingSupport</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>is_interlaced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-needed"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_SetInterlacingState</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_interlaced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>interlacing_change</name> <init>= <expr><operator>(</operator><operator>!</operator><operator>!</operator><name>is_interlaced</name><operator>)</operator>

<operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>is_interlaced</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interlacing_change</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name>interlacing_change</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>date</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"Detected %s video"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_interlaced</name></expr> ?</condition><then> <expr><literal type="string">"interlaced"</literal></expr> </then><else>: <expr><literal type="string">"progressive"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-needed"</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>is_interlaced</name></name> <operator>=</operator> <name>is_interlaced</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_interlaced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vout</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>interlacing</name><operator>.</operator><name>date</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
