<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\vout_spuregion_helper.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB2YUV</name><parameter_list>( <parameter><type><name>R</name></type></parameter>, <parameter><type><name>G</name></type></parameter>, <parameter><type><name>B</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>((0.257 * R) + (0.504 * G) + (0.098 * B) + 16), (-(0.148 * R) - (0.291 * G) + (0.439 * B) + 128),((0.439 * R) - (0.368 * G) - (0.071 * B) + 128)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX2YUV</name><parameter_list>( <parameter><type><name>rgb</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>RGB2YUV( (rgb &gt;&gt; 16), ((rgb &amp; 0xFF00) &gt;&gt; 8), (rgb &amp; 0xFF) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>spuregion_CreateVGradientPalette</name><parameter_list>( <parameter><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_palette</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_splits</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>argb1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>argb2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_splits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgb1</name> <init>= <expr><name>argb1</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgb2</name> <init>= <expr><name>argb2</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>rgb1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i_splits</name> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>rgb2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>i_splits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>g</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>rgb1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i_splits</name> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>i_splits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>rgb1</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i_splits</name> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>rgb2</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>i_splits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>entry</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>RGB2YUV</name><argument_list>( <argument><expr><name>r</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>, <expr><name>argb1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <name>i_splits</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>spuregion_CreateVGradientFill</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_splits</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_split</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name>i_splits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_left</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>%</operator> <name>i_splits</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_splits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>i_split</name><operator>)</operator></expr>]</index></name></expr></argument>,

<argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>i_split</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <operator>(</operator><name>i_splits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_split</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_splits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name>i_left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type>

<name>spuregion_CreateFromPicture</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name><name>p_this</name><operator>-&gt;</operator><name>logger</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_interact</name> <init>= <expr><name><name>p_this</name><operator>-&gt;</operator><name>no_interact</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_this</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_this</name><operator>-&gt;</operator><name>no_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_image</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>image_ReadUrl</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_this</name><operator>-&gt;</operator><name>no_interact</name></name> <operator>=</operator> <name>no_interact</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_this</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>

<return>return <expr><name>region</name></expr>;</return>

</block_content>}</block></function>

</unit>
