<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\src\video_output\vout_intf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snapshot.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CropCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CropBorderCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AspectCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AutoScaleCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ZoomCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AboveCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WallPaperCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FullscreenCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SnapshotCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VideoFilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubFilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubMarginCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SecondarySubMarginCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ViewpointCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>f_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_label</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>p_zoom_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0.25</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"1:4 Quarter"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"1:2 Half"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"1:1 Original"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"2:1 Double"</literal></argument>)</argument_list></macro> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_label</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>p_crop_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Default"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16:10"</literal></expr>, <expr><literal type="string">"16:10"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16:9"</literal></expr>, <expr><literal type="string">"16:9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4:3"</literal></expr>, <expr><literal type="string">"4:3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"185:100"</literal></expr>, <expr><literal type="string">"1.85:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"221:100"</literal></expr>, <expr><literal type="string">"2.21:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"235:100"</literal></expr>, <expr><literal type="string">"2.35:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"239:100"</literal></expr>, <expr><literal type="string">"2.39:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5:3"</literal></expr>, <expr><literal type="string">"5:3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5:4"</literal></expr>, <expr><literal type="string">"5:4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1:1"</literal></expr>, <expr><literal type="string">"1:1"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_label</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>p_aspect_ratio_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Default"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16:9"</literal></expr>, <expr><literal type="string">"16:9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4:3"</literal></expr>, <expr><literal type="string">"4:3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1:1"</literal></expr>, <expr><literal type="string">"1:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16:10"</literal></expr>, <expr><literal type="string">"16:10"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"221:100"</literal></expr>, <expr><literal type="string">"2.21:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"235:100"</literal></expr>, <expr><literal type="string">"2.35:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"239:100"</literal></expr>, <expr><literal type="string">"2.39:1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5:4"</literal></expr>, <expr><literal type="string">"5:4"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddCustomRatios</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cur</name> <init>= <expr><name>psz_list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz_cur</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_cur</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_cur</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_next</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>psz_cur</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>psz_cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_cur</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_CreateVars</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-num"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-num"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>

<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Autoscale video"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name> <operator>|</operator>

<name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Zoom"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_zoom_values</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <name><name>p_zoom_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><call><name>vlc_gettext</name><argument_list>( <argument><expr><name><name>p_zoom_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_label</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name> <operator>|</operator>

<name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Crop"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_crop_values</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_crop_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><name><name>p_crop_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_label</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_buf</name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"custom-crop-ratios"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddCustomRatios</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"monitor-par"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name> <operator>|</operator>

<name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Aspect ratio"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_aspect_ratio_values</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_aspect_ratio_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>p_aspect_ratio_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_label</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_buf</name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"custom-aspect-ratios"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddCustomRatios</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>

<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Always on top"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-deco"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Fullscreen"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETTEXT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Snapshot"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-filter"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>,

<argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>, <argument><expr><name>SecondarySubMarginCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-button-down"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><name>VLC_VAR_COORDS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-clicked"</literal></expr></argument>, <argument><expr><name>VLC_VAR_COORDS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-moved"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-changeable"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_IntfInit</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>AutoScaleCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>ZoomCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>CropCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>AspectCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument>, <argument><expr><name>AboveCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>, <argument><expr><name>WallPaperCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>FullscreenCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument>, <argument><expr><name>SnapshotCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>, <argument><expr><name>VideoFilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument>, <argument><expr><name>SubSourceCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-filter"</literal></expr></argument>, <argument><expr><name>SubFilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument>, <argument><expr><name>SubMarginCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument>, <argument><expr><name>ViewpointCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_IntfReinit</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-filter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_IntfDeinit</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"viewpoint"</literal></expr></argument>, <argument><expr><name>ViewpointCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"sub-margin"</literal></expr></argument>, <argument><expr><name>SubMarginCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"secondary-sub-margin"</literal></expr></argument>, <argument><expr><name>SecondarySubMarginCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"sub-filter"</literal></expr></argument>, <argument><expr><name>SubFilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument>, <argument><expr><name>SubSourceCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>, <argument><expr><name>VideoFilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument>, <argument><expr><name>SnapshotCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>FullscreenCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument>, <argument><expr><name>WallPaperCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument>, <argument><expr><name>AboveCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>AspectCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>CropCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>, <argument><expr><name>CropBorderCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>ZoomCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>AutoScaleCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VoutSnapshotPip</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><call><name>subpicture_NewFromPicture</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_fade</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_PutSubpicture</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VoutOsdSnapshot</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot taken (%s)"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_OSDMessage</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-preview"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>VoutSnapshotPip</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"Failed to display snapshot"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VoutSaveSnapshot</name><parameter_list>( <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-path"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_format</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-format"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_prefix</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-prefix"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vout_GetSnapshot</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_image</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_picture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_picture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_image</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>vout_snapshot_GetDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"no path specified for snapshots"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vout_snapshot_save_cfg_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>is_sequential</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-sequential"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-num"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>psz_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>psz_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>prefix_fmt</name></name> <operator>=</operator> <name>psz_prefix</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sequence</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_snapshot_SaveImage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sequence</name></expr></argument>,

<argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cfg</name><operator>.</operator><name>is_sequential</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-num"</literal></expr></argument>, <argument><expr><name>i_sequence</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VoutOsdSnapshot</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"snapshot-file"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_image</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_picture</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CropCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"%u:%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeCropRatio</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"%ux%u+%u+%u"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeCropWindow</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"%u+%u+%u+%u"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeCropBorder</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeCropRatio</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"Unknown crop format (%s)"</literal></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CropBorderCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">"+%"</literal><name>PRIu64</name><literal type="string">"+%"</literal><name>PRIu64</name><literal type="string">"+%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AspectCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"%u:%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>num</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>den</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_ChangeDisplayAspectRatio</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_ChangeDisplayAspectRatio</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AutoScaleCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ChangeDisplayFilled</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>b_bool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ZoomCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ChangeZoom</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name><name>cur</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AboveCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeWindowState</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cur</name><operator>.</operator><name>b_bool</name></name></expr> ?</condition><then> <expr><name>VOUT_WINDOW_STATE_ABOVE</name></expr> </then><else>: <expr><name>VOUT_WINDOW_STATE_NORMAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WallPaperCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>.</operator><name>b_bool</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_ChangeWindowState</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>VOUT_WINDOW_STATE_BELOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ChangeFullscreen</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video-on-top"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prev</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FullscreenCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>psz_cmd</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_ChangeFullscreen</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_ChangeWindowed</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SnapshotCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VoutSaveSnapshot</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VideoFilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeFilters</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSourceCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeSubSources</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubFilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ControlChangeSubFilters</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubMarginCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ChangeSpuChannelMargin</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SecondarySubMarginCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_ChangeSpuChannelMargin</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>VLC_VOUT_ORDER_SECONDARY</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ViewpointCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>p_address</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_ChangeViewpoint</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>p_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
