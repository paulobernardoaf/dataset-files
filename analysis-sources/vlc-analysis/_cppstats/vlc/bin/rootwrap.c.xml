<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\bin\rootwrap.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XPG4_2</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_RTPRIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Uho, your IPv6 support is broken and has been disabled. Fix your C library.</cpp:warning>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AF_INET6</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_LOCAL</name></cpp:macro> <cpp:value>AF_UNIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_NOSIGNAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CMSG_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_ALIGN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((len) + sizeof(intptr_t)-1) &amp; ~(sizeof(intptr_t)-1))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CMSG_SPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_SPACE</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CMSG_ALIGN(sizeof(struct cmsghdr)) + CMSG_ALIGN(len))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CMSG_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_LEN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CMSG_ALIGN(sizeof(struct cmsghdr)) + (len))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_allowed_port</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name> <argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>port</name> <operator>==</operator> <literal type="number">80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>port</name> <operator>==</operator> <literal type="number">443</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>port</name> <operator>==</operator> <literal type="number">554</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>send_err</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_fd</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>CMSG_SPACE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>&amp;</operator><name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>SOL_SOCKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>SCM_RIGHTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <call><name>CMSG_LEN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>CMSG_DATA</name> <argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>sendmsg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>MSG_NOSIGNAL</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rootprocess</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sin6</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <decl><name>addr</name></decl>;</union>

<while>while <condition>(<expr><call><name>recv</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>ss</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AF_INET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_allowed_port</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>send_err</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_allowed_port</name> <argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>send_err</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>send_err</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name> <argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>bind</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>send_fd</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>send_err</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>socketpair</name> <argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>setsockopt</name><argument_list>(<argument>pair[<literal type="number">1</literal>]</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_NOSIGPIPE</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>fork</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>pid</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<goto>goto <name>error</name>;</goto>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>null</name> <init>= <expr><call><name>open</name> <argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>null</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dup2</name> <argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name> <argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name> <argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setsid</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rootprocess</name> <argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setenv</name> <argument_list>(<argument><expr><literal type="string">"VLC_ROOTWRAP_SOCK"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_RTPRIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rlim</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rlim</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name><name>rlim</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <call><name>sched_get_priority_min</name> <argument_list>(<argument><expr><name>SCHED_RR</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setrlimit</name> <argument_list>(<argument><expr><name>RLIMIT_RTPRIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name> <init>= <expr><call><name>getuid</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sudo</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"SUDO_UID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sudo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>sudo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Cannot determine unprivileged user for VLC!\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setuid</name> <argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setuid</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"-wrapper"</literal></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"-wrapper"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>execvp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
