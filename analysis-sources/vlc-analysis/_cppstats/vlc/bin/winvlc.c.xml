<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\bin\winvlc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_IE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_IE</name></cpp:macro> <cpp:value>0x501</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeapEnableTerminationOnCorruption</name></cpp:macro> <cpp:value>(HEAP_INFORMATION_CLASS)1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BREAKPAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>CheckCrashDump</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>crashdump_path</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name><modifier>*</modifier></type> <name>InstallCrashHandler</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>crashdump_path</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReleaseCrashHandler</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handler</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>FromWide</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wide</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name> <argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wide</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WideCharToMultiByte</name> <argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wide</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>SetDefaultDllDirectories_</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>h</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>SetDefaultDllDirectoriesReal</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>SetDefaultDllDirectoriesReal</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"SetDefaultDllDirectories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SetDefaultDllDirectoriesReal</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>SetDefaultDllDirectoriesReal</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetDefaultDllDirectories</name></cpp:macro> <cpp:value>SetDefaultDllDirectories_</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrioritizeSystem32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_MITIGATION_IMAGE_LOAD_POLICY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>_PROCESS_MITIGATION_IMAGE_LOAD_POLICY</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>NoRemoteImages</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>NoLowMandatoryLabelImages</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>PreferSystem32Images</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ReservedFlags</name> <range>:<expr><literal type="number">29</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

}</block>;</union>

}</block></struct></type> <name>PROCESS_MITIGATION_IMAGE_LOAD_POLICY</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN8</name></expr></cpp:if>

<decl_stmt><decl><type><name>BOOL</name> <name>WINAPI</name></type> <argument_list>(<argument><expr><operator>*</operator><name>SetProcessMitigationPolicy</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>PROCESS_MITIGATION_POLICY</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>SIZE_T</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>h_Kernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>h_Kernel32</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SetProcessMitigationPolicy</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PROCESS_MITIGATION_POLICY</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>SIZE_T</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_Kernel32</name></expr></argument>, <argument><expr><literal type="string">"SetProcessMitigationPolicy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SetProcessMitigationPolicy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>PROCESS_MITIGATION_IMAGE_LOAD_POLICY</name></type> <name>m</name> <init>= <expr><block>{ <expr><operator>.</operator><name>Flags</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>PreferSystem32Images</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetProcessMitigationPolicy</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>m</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_kill</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>semp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><operator>*</operator><name>semp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name> <name>WINAPI</name></type> <name>WinMain</name><parameter_list>( <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hPrevInstance</name></decl></parameter>,

<parameter><decl><type><name>LPSTR</name></type> <name>lpCmdLine</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nCmdShow</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><literal type="string">"GETTEXT_MUI=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOP_BUILDDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><literal type="string">"VLC_PLUGIN_PATH=Z:"</literal><name>TOP_BUILDDIR</name><literal type="string">"/modules"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><literal type="string">"VLC_DATA_PATH=Z:"</literal><name>TOP_SRCDIR</name><literal type="string">"/share"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setvbuf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>HeapSetInformation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HeapEnableTerminationOnCorruption</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>h_Kernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h_Kernel32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROCESS_DEP_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_DEP_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>mySetProcessDEPPolicy</name>)<parameter_list>( <parameter><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>mySetProcessDEPPolicy</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator>

<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_Kernel32</name></expr></argument>, <argument><expr><literal type="string">"SetProcessDEPPolicy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mySetProcessDEPPolicy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mySetProcessDEPPolicy</name><argument_list>(<argument><expr><name>PROCESS_DEP_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetDllDirectory</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDefaultDllDirectories</name><argument_list>(<argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrioritizeSystem32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wargv</name> <init>= <expr><call><name>CommandLineToArgvW</name> <argument_list>(<argument><expr><call><name>GetCommandLine</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wargv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>crash_handling</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><literal type="string">L"--media-library"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><literal type="string">L"--no-ignore-config"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"--no-crashdump"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>crash_handling</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"--language"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>wcsncmp</name><argument_list>( <argument><expr><name><name>wargv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">L"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>FromWide</name> <argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>FromWide</name> <argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalFree</name> <argument_list>(<argument><expr><name>wargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BREAKPAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>eh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>crash_handling</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>S_OK</name> <operator>!=</operator> <call><name>SHGetFolderPathW</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CSIDL_APPDATA</name> <operator>|</operator> <name>CSIDL_FLAG_CREATE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't open the vlc conf PATH\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>( <argument><expr><name>path</name><operator>+</operator><call><name>wcslen</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><literal type="string">L"%s"</literal></expr></argument>, <argument><expr><literal type="string">L"\\vlc\\crashdump"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckCrashDump</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eh</name> <operator>=</operator> <call><name>InstallCrashHandler</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>crash_handling</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>_setmode</name><argument_list>( <argument><expr><call><name>_fileno</name><argument_list>( <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>h_key</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>RegOpenKeyEx</name><argument_list>( <argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Software\\VideoLAN\\VLC\\"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_key</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>ERROR_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szData</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>RegQueryValueEx</name><argument_list>( <argument><expr><name>h_key</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Lang"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator> <operator>&amp;</operator><name>szData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name>szData</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>( <argument><expr><name>lang</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"LANG=%s"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>sem</name> <init>= <expr><call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_set_exit_handler</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>vlc_kill</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_set_app_id</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"org.VideoLAN.VLC"</literal></expr></argument>, <argument><expr><name>PACKAGE_VERSION</name></expr></argument>,

<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_set_user_agent</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"VLC media player"</literal></expr></argument>, <argument><expr><literal type="string">"VLC/"</literal><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_add_intf</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"hotkeys,none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_add_intf</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"globalhotkeys,none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_add_intf</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_playlist_play</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MessageBox</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"VLC media player could not start.\n"</literal>

<literal type="string">"Either the command line options were invalid or no plugins were found.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MB_OK</name><operator>|</operator><name>MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BREAKPAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ReleaseCrashHandler</name><argument_list>( <argument><expr><name>eh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hInstance</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hPrevInstance</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>lpCmdLine</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nCmdShow</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
