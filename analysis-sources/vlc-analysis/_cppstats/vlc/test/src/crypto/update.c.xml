<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\src\crypto\update.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/misc/update_crypto.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>key_longid</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xEE</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>public_key</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-----BEGIN PGP PUBLIC KEY BLOCK-----\n"</literal>

<literal type="string">"Version: GnuPG v2\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"mQINBFR5uMsBEADBIrQB0ga41UbPkeJzrnUKQiEcOJtdJ1MS4wqRW9Bc4S8N4995\n"</literal>

<literal type="string">"CDnHRjQ6VIVqvMuU6ceAKKjjFH911bbmpJiXagsifm+G/WUbYcmDhF8bXpC0u2Ky\n"</literal>

<literal type="string">"1A0N7FsQ4QK0U8qvqdYDf3Uu8d7ANjoe50CkaQP0KhWm1i6P4rzHaNYNhg6/J5s+\n"</literal>

<literal type="string">"wRwSVg9eej9O3jjK+enYC/2gqt0U43qYBhHegZkMEKtKfQd18l2+5vWghjlOlP3w\n"</literal>

<literal type="string">"VsWBcMl7MRujMEoCtyCUpnJFO9rnGdbQLPAUPnuG5LFapROUfcQFe8EzJmlDx+jR\n"</literal>

<literal type="string">"3gBoJ8hv3pRLo7iuxBtFnbZY/nZRwyQ6G7qxtGsBwJEjjMjXBG+bcjtLQVamwgbI\n"</literal>

<literal type="string">"ElRTB98BWTAKY82TH5+76q4UNMjZM6Zn2zp7zuHNatrl2CCYbP0uCtZgh8PFaA6E\n"</literal>

<literal type="string">"saN2L4A2A4ZS6jnIIRGZXHpqcLrZESuWiWGtu0TdkOJ5kG9L9LySCoK/RteAkyno\n"</literal>

<literal type="string">"g3aiMtF4t97zEiULU9ioTGA57fHPJM2qm+44//nxtrVZIV4eQ69dFzd7XZ+z8PPx\n"</literal>

<literal type="string">"AtnRbraKLwvg8uqIkWKSdFdt8GEtuw80J8uBu1D8Ea8YhdeBiCcWs9C6bGIFo7Uy\n"</literal>

<literal type="string">"NqbK6xyCfG7c8W5xdnMW6nShuI7w5c5kjrMr3o87MifvgoHPPrt5HeJ4EQARAQAB\n"</literal>

<literal type="string">"tCVWaWRlb0xBTiB0ZXN0IDx2aWRlb2xhbkB2aWRlb2xhbi5vcmc+iQI3BBMBCAAh\n"</literal>

<literal type="string">"BQJUebjLAhsDBQsJCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEJ+KsROfOZvuCVIQ\n"</literal>

<literal type="string">"AK4F+niVQ8LUzSV4Hj5Bc9o6uzC6OYLRH43PJNfeHv2jzc5lyPff906CTp+W/Evn\n"</literal>

<literal type="string">"+VLZUz7AqRIz/U59PQgTbSEUGpDSt09cjYESqglV8dQEi81y93EIPnQPF3+jv+H0\n"</literal>

<literal type="string">"1/r9bRUef9D8eGS5Vrnu+WDJAlQUMfLJgdxAL7XLPIXNlSAqBRUguRK8Y6kmlAwC\n"</literal>

<literal type="string">"apODSog+u7TH5845bjeuVedqRyGsl1SoKIChSMq+zCubWsrKoyaKExNm4bYs7pOi\n"</literal>

<literal type="string">"8y3VESbCb6t3rHRMzmuEjV3SyHtpZrGXPN0OROm8hSNGEPtcu08IO8VgXlp6D3Cc\n"</literal>

<literal type="string">"TX2tLZs+4VN+x4iakScO3vdlyqMzsVL5OrV6cijSPE0GBNALmwowkWeVwEcykUYx\n"</literal>

<literal type="string">"MOSLJtuHJL2fTWRZ0rfPSemxyCT+74YslkbLkl1/cg4YKkkREBHOhXjgFAxiGlJF\n"</literal>

<literal type="string">"E43DIR0kaeqXOFkBsk/T7SHqWnBq8aWa7BrQNlM/b3FVhE/JgYsFoTWS5Yh0aYJE\n"</literal>

<literal type="string">"nmc9U66Ym/BaOkuIIoqHq+9xH90ho0crjBDTBm+9XkY+BviwcFDYVS+dpWj5i3X+\n"</literal>

<literal type="string">"2UfwMqMRJRXjYUK50z9Ap4r0ekafGmm0+ox0xn0bxLZOh7zrAzE/+TSG/h8HIPKZ\n"</literal>

<literal type="string">"qzcDd/n/EiFF23kBktC3ljzJoBxxUEGEE8YwzRWraAdV\n"</literal>

<literal type="string">"=6eGQ\n"</literal>

<literal type="string">"-----END PGP PUBLIC KEY BLOCK-----\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>key_longid2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x0F</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>public_key2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-----BEGIN PGP PUBLIC KEY BLOCK-----\n"</literal>

<literal type="string">"Version: GnuPG v2\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"mQINBFR5uMsBEADBIrQB0ga41UbPkeJzrnUKQiEcOJtdJ1MS4wqRW9Bc4S8N4995\n"</literal>

<literal type="string">"CDnHRjQ6VIVqvMuU6ceAKKjjFH911bbmpJiXagsifm+G/WUbYcmDhF8bXpC0u2Ky\n"</literal>

<literal type="string">"1A0N7FsQ4QK0U8qvqdYDf3Uu8d7ANjoe50CkaQP0KhWm1i6P4rzHaNYNhg6/J5s+\n"</literal>

<literal type="string">"wRwSVg9eej9O3jjK+enYC/2gqt0U43qYBhHegZkMEKtKfQd18l2+5vWghjlOlP3w\n"</literal>

<literal type="string">"VsWBcMl7MRujMEoCtyCUpnJFO9rnGdbQLPAUPnuG5LFapROUfcQFe8EzJmlDx+jR\n"</literal>

<literal type="string">"3gBoJ8hv3pRLo7iuxBtFnbZY/nZRwyQ6G7qxtGsBwJEjjMjXBG+bcjtLQVamwgbI\n"</literal>

<literal type="string">"ElRTB98BWTAKY82TH5+76q4UNMjZM6Zn2zp7zuHNatrl2CCYbP0uCtZgh8PFaA6E\n"</literal>

<literal type="string">"saN2L4A2A4ZS6jnIIRGZXHpqcLrZESuWiWGtu0TdkOJ5kG9L9LySCoK/RteAkyno\n"</literal>

<literal type="string">"g3aiMtF4t97zEiULU9ioTGA57fHPJM2qm+44//nxtrVZIV4eQ69dFzd7XZ+z8PPx\n"</literal>

<literal type="string">"AtnRbraKLwvg8uqIkWKSdFdt8GEtuw80J8uBu1D8Ea8YhdeBiCcWs9C6bGIFo7Uy\n"</literal>

<literal type="string">"NqbK6xyCfG7c8W5xdnMW6nShuI7w5c5kjrMr3o87MifvgoHPPrt5HeJ4EQARAQAB\n"</literal>

<literal type="string">"tCVWaWRlb0xBTiB0ZXN0IDx2aWRlb2xhbkB2aWRlb2xhbi5vcmc+iQI3BBMBCAAh\n"</literal>

<literal type="string">"BQJUebjLAhsDBQsJCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEJ+KsROfOZvuCVIQ\n"</literal>

<literal type="string">"AK4F+niVQ8LUzSV4Hj5Bc9o6uzC6OYLRH43PJNfeHv2jzc5lyPff906CTp+W/Evn\n"</literal>

<literal type="string">"+VLZUz7AqRIz/U59PQgTbSEUGpDSt09cjYESqglV8dQEi81y93EIPnQPF3+jv+H0\n"</literal>

<literal type="string">"1/r9bRUef9D8eGS5Vrnu+WDJAlQUMfLJgdxAL7XLPIXNlSAqBRUguRK8Y6kmlAwC\n"</literal>

<literal type="string">"apODSog+u7TH5845bjeuVedqRyGsl1SoKIChSMq+zCubWsrKoyaKExNm4bYs7pOi\n"</literal>

<literal type="string">"8y3VESbCb6t3rHRMzmuEjV3SyHtpZrGXPN0OROm8hSNGEPtcu08IO8VgXlp6D3Cc\n"</literal>

<literal type="string">"TX2tLZs+4VN+x4iakScO3vdlyqMzsVL5OrV6cijSPE0GBNALmwowkWeVwEcykUYx\n"</literal>

<literal type="string">"MOSLJtuHJL2fTWRZ0rfPSemxyCT+74YslkbLkl1/cg4YKkkREBHOhXjgFAxiGlJF\n"</literal>

<literal type="string">"E43DIR0kaeqXOFkBsk/T7SHqWnBq8aWa7BrQNlM/b3FVhE/JgYsFoTWS5Yh0aYJE\n"</literal>

<literal type="string">"nmc9U66Ym/BaOkuIIoqHq+9xH90ho0crjBDTBm+9XkY+BviwcFDYVS+dpWj5i3X+\n"</literal>

<literal type="string">"2UfwMqMRJRXjYUK50z9Ap4r0ekafGmm0+ox0xn0bxLZOh7zrAzE/+TSG/h8HIPKZ\n"</literal>

<literal type="string">"qzcDd/n/EiFF23kBktC3ljzJoBxxUEGEE8YwzRWraAdVmQINBFR50lMBEACXlte9\n"</literal>

<literal type="string">"f48AK3Qb95o0BPCO3uxAtrguFQF+Uph2RGWY3dklo60X0dZ485Dd6apdN+3wEyVD\n"</literal>

<literal type="string">"ZngZcUMbvJvUqstLD3k+59S+vI5G4JyYuqPaqd0d0WUueW2iV2pmBb4mzXXrsfeC\n"</literal>

<literal type="string">"PG/mRYE/wYPXpAmApzNUuYhg5n2aW4QUGC0Aq1DN7yAXjxPChDxlMul9bbiSZSxd\n"</literal>

<literal type="string">"g2EhnYQX8BBMfGuLw5roQFvFPgHs6HqesXPsEGOaNF2HaAKvDlvr+He2K8yms7up\n"</literal>

<literal type="string">"VBbsEiEOO3I938AdhGiwZQWhpUy4kskTDrDWDmIkjKB0/w/psoLGZd+mJnjeWHNL\n"</literal>

<literal type="string">"E2j5eOZ1hkrEf/ujGUxEIVTkryaISHmkSQE12mQ0I9CML/FXgdNapD03gdPpem1L\n"</literal>

<literal type="string">"BGlB6Si2SPyp5BfbaJWdZ2d3wInnwuwL95PT55LZCwsnwO6WwMCbxRtuFXDqeJCs\n"</literal>

<literal type="string">"eDndBpjzgrEyZlhFrhxzZQebB24q0UgPnwrk2hCs2iq17aVMA7HXFq9FWgbP4xUn\n"</literal>

<literal type="string">"gSOTevLzbIv8S8UCfFhj+8lMRyN+lHW3uUs4y2zR5dPajSRAN0AuZ0N20lTbgnVL\n"</literal>

<literal type="string">"ZFnM1asWOO58J8qVgta/mBtEQryqb/iGl+yhRnDfjTzI/6tw8KUOvlWA3zUC3FAB\n"</literal>

<literal type="string">"hXpH4mw8EYTI3pr6w8gE3/84tU07Z44e/xPdAQARAQABtClWaWRlb0xBTiB0ZXN0\n"</literal>

<literal type="string">"IG5ldyA8dmlkZW9sYW5AdmlkZW9sYW4ub3JnPokCNwQTAQgAIQUCVHnSUwIbAwUL\n"</literal>

<literal type="string">"CQgHAgYVCAkKCwIEFgIDAQIeAQIXgAAKCRDTeDH9Lc3sDz7lD/wJQeOMjItNTWfu\n"</literal>

<literal type="string">"al96XM9Z7mkbyIrFBfszAl9+xEtUUFYTWyyPk81GXAXhyCgBL1OrFSNhJCfTKF1Q\n"</literal>

<literal type="string">"gcxd4kQcjlcpueozFxz1obVakBvMhb2RB88PWLTPt/LXo3tF+yIaqpGjpmB0AOhm\n"</literal>

<literal type="string">"yA3q8Nl7MBx4wHLX+IXDXeRnf09wIQfKC3jAaJz4SVQdZ2PPBef5mEMEAkDZyIHD\n"</literal>

<literal type="string">"zoptMBy5JIOvmzt2jRrvWGg3VWAzG5aE87nv19ENUA6WKopB44ho1aJ5D3ccaDxo\n"</literal>

<literal type="string">"hUfNV2Ley8i6+Xl/BePZ1eZeCC74rz1rt680+2IBqMYwQ0oaCkeMD16FBAlQNgnH\n"</literal>

<literal type="string">"dAAxSRa2h86IZmOItH6zXrBXA34IREx3DAVf2pHRNCyLHMPdrNhNcSpRXJMZVrke\n"</literal>

<literal type="string">"oiU4ZsWfjLJ+p72esnzbmFc2EMBGjfuz0FQJrkl70QWfOuIK6HGUdl4Sxp850qrN\n"</literal>

<literal type="string">"zt1oeY4fvHSJ7OzlHLCNCbGrvnMUNC6gSy8W3/CtV+N9CNIOUAKc8GELHZIcmr4S\n"</literal>

<literal type="string">"HENTFqWLpQ/mKqBIGsSDm+F6NePCHhcBbdN9GDPckRpRI+0XCEy0vwt+UJCNtk9u\n"</literal>

<literal type="string">"DIPV4l6DCTV0xaHtbd832PvtZENl/X8DutVUycg0mbLfhkhHx6hoW8YZXLZmsLvY\n"</literal>

<literal type="string">"t1gZz12csye02AsQuXTnVvPZJ1fsGIkCHAQQAQgABgUCVHncVQAKCRCfirETnzmb\n"</literal>

<literal type="string">"7h9NEACk/hzRViy4DoLMrUPed04ZDSutVU6kYkQ/b1I/Z5CV/kqp2htgEWPU0vje\n"</literal>

<literal type="string">"Ay6ni/Q9EGlGBwRCU/DugeTie2H/nMzIgEMtTEorL7YTIa9kQLYlG6jfv54dyKbL\n"</literal>

<literal type="string">"HWM85qOns6RolKNwpjQtFuxnDN6EzpoM2IeJc8utjEnhMK2uG6ILazqLutDAXSF3\n"</literal>

<literal type="string">"hNGJY/wC+m7X9nYdFhum5tFNCzrYgwDODU9rMUlvBxONy1HQjwQZ8CPRNaTd/uXK\n"</literal>

<literal type="string">"C2gi5TRISTgV2bs7/AsygENXNZgXoa/tmihYxeXss0Q+kQQ+/eDOkcRSFhxDxg3F\n"</literal>

<literal type="string">"twa1tUIsruMCxbtagx5TU7xVvKjfZ2Mze8TpgnLcRDkoNTNXGJ6g87lOS6MJqMgy\n"</literal>

<literal type="string">"mJkHAVJ7omngBIr6xB1K5kWNnQhrltuFILqEO5zFi77puhYUhu68dAfAI/0uj+2y\n"</literal>

<literal type="string">"rDYJV1GcAxeXfuqePZ/yTsaNI16BtwKNUPQl01dbx8c8MAtiabh48DzzP2KRBe64\n"</literal>

<literal type="string">"bX6YkbPaOXdPjusEpJ9r7ZT/+YaLhmTHRrM2mjh52gXy0dLJKFrvXJLsVJvMlmLx\n"</literal>

<literal type="string">"HhycSFRkGQrsZCmdmjucGMXBDWowyzfdp8wpSHkaY6Y/Mrw9PboGQx6e0pg9OfxO\n"</literal>

<literal type="string">"nq99E4FH7ShZ7XzQs2Df9uPuSgWY6VOL2U1ZUiWO7ubtEY3asQ==\n"</literal>

<literal type="string">"=oMbP\n"</literal>

<literal type="string">"-----END PGP PUBLIC KEY BLOCK-----\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>status</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"42.0.19.1\n"</literal>

<literal type="string">"http://get.videolan.org/vlc/foo/bar.xz\n"</literal>

<literal type="string">"Bla bla bla.\n"</literal>

<literal type="string">"Foo bar.\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>status_sign2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-----BEGIN PGP SIGNATURE-----\n"</literal>

<literal type="string">"Version: GnuPG v2\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"iQIcBAABCAAGBQJUedMOAAoJENN4Mf0tzewPeCEQAIpkDYdJ+fLT7fG6MOOTAx8v\n"</literal>

<literal type="string">"cMHU2avRax9ttQ+10ZJXFRIlP52mtRMKjZ1hG47f3F4leccaKfTBOXsO20TjrsDk\n"</literal>

<literal type="string">"BByy+8TYK5IFk4AFQVEB4XuFw6almuf2ham0W5UaK7qdmUXHp3gU37ZKHkrmfF9C\n"</literal>

<literal type="string">"CDUsiogWMyUI8tL0sCmx8HXEAXxT9mDszLR3DcNxgKbmxUrxYuY3pifsmyZ4dDYZ\n"</literal>

<literal type="string">"g60INP3pcGm781lsS+D7Mc7GxvpqbZpZqzDNU1JMrCosm4hK81N50MLZDLc6N28T\n"</literal>

<literal type="string">"jYAC3I2VqctNOm4mIDSrdCTYWVhQHNe1d3FXkalj/x+kWz59qYdkRR6JkMbIvL2U\n"</literal>

<literal type="string">"m7tHalN9URiIX6jXDg/0K9WjEfFfYxnbTzn2opMasgPLzqvsryFgzkGliRitnGGV\n"</literal>

<literal type="string">"0HAiRMOw80HiA5I0T5z2lUX68k1gR0+jgOemYXua3ZBusxPXxKYMWELL7QoHUTjH\n"</literal>

<literal type="string">"q3urZlp5eaVP17I0H0yS+H3bX9h285AolTENbe05fh/gYjEUzRodLnejbCmlFcj2\n"</literal>

<literal type="string">"IeeZpQPjU2GozPzw7zc3tTkAfPb3pMu5RsYZH81PeohXMjUoATQH4BCHrV7s6kmt\n"</literal>

<literal type="string">"BttU9zAm4SCZJyTHR2PPUeQw3hNNrellyK+J/GJdeC6IFssIMF9I9rHpKf5YA2gL\n"</literal>

<literal type="string">"WvTgfHRwPJQCso4eMOJV\n"</literal>

<literal type="string">"=LwcX\n"</literal>

<literal type="string">"-----END PGP SIGNATURE-----\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>status_sign</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-----BEGIN PGP SIGNATURE-----\n"</literal>

<literal type="string">"Version: GnuPG v2\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"iQIcBAABCAAGBQJUechbAAoJEJ+KsROfOZvuFdsP/0SZ2rmOTz/ILWJgZOfyNhZU\n"</literal>

<literal type="string">"p8zAfcqrQdpTnuyrP8M4oEm4Kv1l/C/yGvOadHjmnqoJVCtE5kHmUV3rnBbaHZom\n"</literal>

<literal type="string">"BKKlY9i4UY4mhb+jIYW+jlxMs8FdZwnKYxCdxhk1kfPXtrR1uQ/q3XRiumlR3BJJ\n"</literal>

<literal type="string">"xbh2rjFZikqRnB/zZJyss/Q1cIn+tosqynAwgM/0uA5seWaKGafXr38dnBYN0bgx\n"</literal>

<literal type="string">"khNy89SMxpgx2K/TOGPRimVP+u+RBTtm86jzQJGLF4MqWdxkWPUyfd58KMegdJ6N\n"</literal>

<literal type="string">"sTVlfoRAjS2+H+fYDycqjU0oKt8bSeuu6qi//nrwn8U1F4qLHxxig5t0uChSUod0\n"</literal>

<literal type="string">"MxknIHUh+lqO0zaLGU7/gFfprIWGqYOsbqNVJA78NkUIbiJT2SX5WpTjNP+Iqn2v\n"</literal>

<literal type="string">"/ig+sWDUQkmTbpRSN62rP9DvxXNoPhT9Oe8kQjUW+T2oLFHd2xwhAO3aKx/9N7p7\n"</literal>

<literal type="string">"0qnUX/5wo5i1hqTBDU6VFqYT5N2fE6KQYRIIgvlpxCA7IQFGSlwCSM4Kh6gn3CfZ\n"</literal>

<literal type="string">"D7G7sG2fLsN1qc7WuucgIWf1yAUYxLI4vpw0d048SOJ2SRxbEpy6M6uQRPnMgQIU\n"</literal>

<literal type="string">"fp1b1Mv2SMYfMx/bPDUYoApjef4hM3Tw8tPFLdfLXfNW4wCjH/BkF8LK2uMorDpi\n"</literal>

<literal type="string">"aOCVn5XsqzeePNV82Pm0\n"</literal>

<literal type="string">"=jMLi\n"</literal>

<literal type="string">"-----END PGP SIGNATURE-----\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_sig</name><parameter_list>(<parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>sig_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unarmored_sig</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>sig_size</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><call><name>pgp_unarmor</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sig</name></expr></argument>, <argument><expr><name>sig_size</name></expr></argument>, <argument><expr><name>unarmored_sig</name></expr></argument>, <argument><expr><name>sig_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>packet_type</name><argument_list>(<argument><expr><name><name>unarmored_sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIGNATURE_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_len</name> <init>= <expr><call><name>packet_header_len</name><argument_list>(<argument><expr><name><name>unarmored_sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>header_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>header_len</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>header_len</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>header_len</name> <operator>&lt;</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>scalar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unarmored_sig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>header_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>parse_signature_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>unarmored_sig</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>header_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINARY_SIGNATURE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TEXT_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>signature_packet_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key_longid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key_longid2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_from_text</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_from_public_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"public key"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>hash_verification</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>issuer_longid</name></name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key2</name> <operator>&amp;&amp;</operator> <name>key_longid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>verify_signature</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Good %s %s signature from %s (%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X)\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>gcry_md_algo_name</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>,

<argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_key</name><parameter_list>(<parameter><decl><type><name>public_key_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mpi</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>algo</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GCRY_PK_DSA</name></expr>:</case> <expr_stmt><expr><name>mpi</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>dsa</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GCRY_PK_RSA</name></expr>:</case> <expr_stmt><expr><name>mpi</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>sig</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Key %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X %s %d bits\n"</literal></expr></argument>,

<argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>longid</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>gcry_pk_algo_name</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>algo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>scalar_number</name><argument_list>(<argument><expr><name>mpi</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>signature_packet_t</name></type> <name>sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public_key_t</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>parse_public_key</name><argument_list>(<argument><expr><name>public_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>public_key</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>longid</name></name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_sig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><name>status_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>public_key_t</name></type> <name>key2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>parse_public_key</name><argument_list>(<argument><expr><name>public_key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>public_key2</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>, <argument><expr><name>key_longid2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key2</name><operator>.</operator><name>longid</name></name></expr></argument>, <argument><expr><name>key_longid2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_sig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><name>status_sign2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><name>key_longid</name></expr></argument>, <argument><expr><name>key_longid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
