<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\src\misc\keystore.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<struct>struct <name>cred</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_pwd</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cred_res</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_pwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_realm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_authtype</name></decl>;</decl_stmt>

}</block>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>testcase</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_realm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_authtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cred_res</name></name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cred</name></name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cred</name></name></type> <name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dialog_store</name></decl>;</decl_stmt>

}</block> <decl><name><name>testcases</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>realm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"http://"path, realm, "Basic"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMB</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"smb://"path, NULL, NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTP</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sftp://"path, NULL, NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIPE_MEMORY_KEYSTORE</name></cpp:macro> <cpp:value>{ false, NULL, NULL, NULL, {}, {}, {}, false }</cpp:value></cpp:define>

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user1:pwd1@ex.com/testing/deprecated_url"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr> , <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/opt"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/dial"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user1@ex.com/testing/url_dial"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/opt_dial"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"WRONG_USER@ex.com/testing/url_opt_dial"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/mem_ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/mem_ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/mem_ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com:2022/testing/ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user1@ex.com/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user2@ex.com:2022/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user2@wrong_host.com:2022/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"user2@ex.com/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"user2@ex.com:2022/testing/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user2"</literal></expr>, <expr><literal type="string">"pwd2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/opt_not_storing_ks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user3"</literal></expr>, <expr><literal type="string">"pwd3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"user3"</literal></expr>, <expr><literal type="string">"pwd3"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SFTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/opt_not_storing_ks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user3"</literal></expr>, <expr><literal type="string">"pwd3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>HTTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/good_path/ks_store_realm"</literal></expr></argument>, <argument><expr><literal type="string">"Realm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr>, <expr><literal type="string">"Realm"</literal></expr>, <expr><literal type="string">"Basic"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>HTTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/good_path/ks_find_realm"</literal></expr></argument>, <argument><expr><literal type="string">"Wrong realm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr>, <expr><literal type="string">"Wrong realm"</literal></expr>, <expr><literal type="string">"Basic"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>HTTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/good_path/ks_find_realm"</literal></expr></argument>, <argument><expr><literal type="string">"Realm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr>, <expr><literal type="string">"Realm"</literal></expr>, <expr><literal type="string">"Basic"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>HTTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/good_path/another_path/ks_find_realm"</literal></expr></argument>, <argument><expr><literal type="string">"Realm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr>, <expr><literal type="string">"Realm"</literal></expr>, <expr><literal type="string">"Basic"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>HTTP</name><argument_list>(<argument><expr><literal type="string">"ex.com/testing/wrong_path/ks_find_realm"</literal></expr></argument>, <argument><expr><literal type="string">"Realm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user4"</literal></expr>, <expr><literal type="string">"pwd4"</literal></expr>, <expr><literal type="string">"Realm"</literal></expr>, <expr><literal type="string">"Basic"</literal></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"host/share/path1/path2/path3/ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user5"</literal></expr>, <expr><literal type="string">"pwd5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user5"</literal></expr>, <expr><literal type="string">"pwd5"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"host/share/path4/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user5"</literal></expr>, <expr><literal type="string">"pwd5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"wrong_host/share/path4/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user5"</literal></expr>, <expr><literal type="string">"pwd5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"host/wrong_share/path4/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user5"</literal></expr>, <expr><literal type="string">"pwd5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"host/share/path1/ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user6"</literal></expr>, <expr><literal type="string">"pwd6"</literal></expr>, <expr><literal type="string">"domain"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"domain;user6"</literal></expr>, <expr><literal type="string">"pwd6"</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"host/share/path1/ks_store"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user6"</literal></expr>, <expr><literal type="string">"pwd6"</literal></expr>, <expr><literal type="string">"domain"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"domain;user6@host/share/path1/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user6"</literal></expr>, <expr><literal type="string">"pwd6"</literal></expr>, <expr><literal type="string">"domain"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><call><name>SMB</name><argument_list>(<argument><expr><literal type="string">"wrong_domain;user6@host/share/path1/ks_find"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"user6"</literal></expr>, <expr><literal type="string">"pwd6"</literal></expr>, <expr><literal type="string">"wrong_domain"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{}</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><name>WIPE_MEMORY_KEYSTORE</name></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><literal type="string">"://invalid_url"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><literal type="string">"/invalid_path"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{}</block></expr>, <expr><block>{ <expr><literal type="string">"user1"</literal></expr>, <expr><literal type="string">"pwd1"</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct>struct <name>dialog_ctx</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_abort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>p_test</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_login_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_ask_store</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_title</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_text</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_default_username</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>b_ask_store</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_ctx</name></name> <modifier>*</modifier></type><name>p_dialog_ctx</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>p_testcase</name> <init>= <expr><name><name>p_dialog_ctx</name><operator>-&gt;</operator><name>p_test</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name> <init>= <expr><ternary><condition><expr><name><name>p_testcase</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>psz_user</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>

<expr><name><name>p_testcase</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>psz_user</name></name></expr> </then><else>: <expr><name>psz_default_username</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dialog_ctx</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>&amp;&amp;</operator> <name>psz_user</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>p_testcase</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>psz_pwd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_id_post_login</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name><name>p_testcase</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>psz_pwd</name></name></expr></argument>,

<argument><expr><name><name>p_testcase</name><operator>-&gt;</operator><name>b_dialog_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dialog_ctx</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>cancel_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>p_test</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test(%u): url %s%s%s%s (%sexpected: %s:%s)\n"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">" (realm: "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_realm</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_realm</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_test</name><operator>-&gt;</operator><name>b_found</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"not "</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_user</name></name></expr></argument>,

<argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_dialog_cbs</name></type> <name>cbs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pf_display_login</name> <operator>=</operator> <name>display_login_cb</name></expr>,

<expr><operator>.</operator><name>pf_cancel</name> <operator>=</operator> <name>cancel_cb</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dialog_ctx</name></name></type> <name>dialog_ctx</name> <init>= <expr><block>{

<expr><operator>.</operator><name>b_abort</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>p_test</name> <operator>=</operator> <name>p_test</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialog_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_opt_user</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_opt_pwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_test</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>psz_user</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_opt_user</name> <operator>=</operator> <literal type="string">"test-user"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_opt_user</name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>psz_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_test</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>psz_pwd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_opt_pwd</name> <operator>=</operator> <literal type="string">"test-pwd"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_opt_pwd</name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>psz_pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_credential</name></type> <name>credential</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_credential_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>credential</name><operator>.</operator><name>psz_realm</name></name> <operator>=</operator> <name><name>p_test</name><operator>-&gt;</operator><name>psz_realm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>credential</name><operator>.</operator><name>psz_authtype</name></name> <operator>=</operator> <name><name>p_test</name><operator>-&gt;</operator><name>psz_authtype</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vlc_credential_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_opt_user</name></expr></argument>, <argument><expr><name>psz_opt_pwd</name></expr></argument>,

<argument><expr><literal type="string">"test authentication"</literal></expr></argument>, <argument><expr><literal type="string">"this a test"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>realm_match</name> <init>= <expr><operator>!</operator><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_realm</name></name>

<operator>||</operator> <operator>(</operator><name><name>credential</name><operator>.</operator><name>psz_realm</name></name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>credential</name><operator>.</operator><name>psz_realm</name></name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_realm</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>authtype_match</name> <init>= <expr><operator>!</operator><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_authtype</name></name>

<operator>||</operator> <operator>(</operator><name><name>credential</name><operator>.</operator><name>psz_authtype</name></name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>credential</name><operator>.</operator><name>psz_authtype</name></name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_authtype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>realm_match</name> <operator>&amp;&amp;</operator> <name>authtype_match</name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_user</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>credential</name><operator>.</operator><name>psz_password</name></name></expr></argument>, <argument><expr><name><name>p_test</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>psz_pwd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b_found</name> <operator>==</operator> <name><name>p_test</name><operator>-&gt;</operator><name>b_found</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_credential_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_credential_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_instance_t</name> <modifier>*</modifier></type>

<name>create_libvlc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_vlc_argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_vlc_argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><name>i_vlc_argc</name></expr></argument>, <argument><expr><name>ppsz_vlc_argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>var_Create</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><literal type="string">"test-user"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>var_Create</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><literal type="string">"test-pwd"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_libvlc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"creating tmp plaintext keystore file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_tmp_path</name><index>[]</index></name> <init>= <expr><literal type="string">"/tmp/libvlc_XXXXXX"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tmp_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_tmp_fd</name> <operator>=</operator> <call><name>vlc_mkstemp</name><argument_list>(<argument><expr><name>psz_tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_tmp_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vlc_argc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_vlc_argv</name><index>[<expr><name>i_vlc_argc</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ppsz_vlc_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--keystore"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_vlc_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"file_plaintext,none"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_vlc_argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--keystore-file"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppsz_vlc_argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>psz_tmp_path</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><call><name>create_libvlc</name><argument_list>(<argument><expr><name>i_vlc_argc</name></expr></argument>, <argument><expr><name>ppsz_vlc_argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>testcases</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>testcases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_url</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test(%u): wiping memory keystore\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_libvlc</name> <operator>=</operator> <call><name>create_libvlc</name><argument_list>(<argument><expr><name>i_vlc_argc</name></expr></argument>, <argument><expr><name>ppsz_vlc_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>testcases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name>i_tmp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
