<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\src\misc\bits.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../modules/packetizer/hxxx_ep3b.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_assert</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>, <parameter><type><name>bar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {ssize_t a = (foo); ssize_t b = (bar); if(a != b) { printf("Failed (%s) line %d : %ld != %ld\n", psz_tag, __LINE__, a, b ); return 1; } } while( 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTSET_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>testset</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>dataset</name>

<block>{

<decl><name>TESTSET0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TESTSET1</name></decl>,

<decl><name>TESTSET_EXPGOLOMB</name></decl>,

<decl><name>TESTSET2</name></decl>,

}</block> ;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs_init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bs_init( a, b, c); if( callbacks ) { (a)-&gt;cb = *callbacks; if( cb_priv ) { (a)-&gt;p_priv = cb_priv; priv_init( cb_priv ); }; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_tests</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>testset</name></name> <modifier>*</modifier></type><name>p_testsets</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter>,

<parameter><decl><type><name>bs_byte_callbacks_t</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_priv</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>priv_init</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET0</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET0</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET0</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><literal type="number">0x0A</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x55</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET_EXPGOLOMB</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET_EXPGOLOMB</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read_ue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xCD</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>( <argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET2</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name>i</name><operator>%</operator><literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_eof</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bufok</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xF7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name>i</name><operator>%</operator><literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>j</name> <operator>%</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_eof</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufok</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>p_testsets</name><index>[<expr><name>TESTSET1</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x55</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bs_init</name></cpp:undef>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_skipeven_bytes_forward</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>bs_skipeven_bytes_forward</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i_count</name> <operator>*</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>i_count</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_skipeven_bytes_remain</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_skipeven_bytes_pos</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>bs_byte_callbacks_t</name></type> <name>skipeven_cb</name> <init>= <expr><block>{

<expr><name>bs_skipeven_bytes_forward</name></expr>,

<expr><name>bs_skipeven_bytes_pos</name></expr>,

<expr><name>bs_skipeven_bytes_remain</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_annexb</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>annexb</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,

<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>unesc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,

<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>annexb</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>annexb</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>hxxx_bsfw_ep3b_callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>p_priv</name></name> <operator>=</operator> <operator>&amp;</operator><name>bsctx</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>unesc</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name>i</name><operator>%</operator><literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>unesc</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_eof</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>annexb</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>annexb</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>hxxx_bsfw_ep3b_callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>p_priv</name></name> <operator>=</operator> <operator>&amp;</operator><name>bsctx</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>unesc</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>unesc</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_eof</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>annexb</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>annexb</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>annexb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_assert</name><argument_list>(<argument><expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>annexb</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>testset</name></name></type> <name><name>testsets</name><index>[<expr><name>TESTSET_COUNT</name></expr>]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>TESTSET0</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET1</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x55</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET_EXPGOLOMB</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET2</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">6</literal></expr>, <expr><block>{ <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>run_tests</name><argument_list>( <argument><expr><name>testsets</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>testset</name></name></type> <name><name>skipeventestsets</name><index>[<expr><name>TESTSET_COUNT</name></expr>]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>TESTSET0</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET1</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET_EXPGOLOMB</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TESTSET2</name></expr>]</index> <operator>=</operator>

<block>{ <expr><literal type="number">12</literal></expr>, <expr><block>{ <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>run_tests</name><argument_list>( <argument><expr><name>skipeventestsets</name></expr></argument>, <argument><expr><literal type="string">"even byte skip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skipeven_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>test_annexb</name><argument_list>( <argument><expr><literal type="string">"annexb "</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
