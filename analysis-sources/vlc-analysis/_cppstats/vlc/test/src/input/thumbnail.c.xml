<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\src\input\thumbnail.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_thumbnailer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC( 5 * 60 )</cpp:value></cpp:define>

<struct><specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_video_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_audio_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_add_video_track_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_fast_seek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_expected_success</name></decl>;</decl_stmt>

}</block> <decl><name><name>test_params</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VLC_TICK_INVALID</name></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>,

<expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VLC_TICK_INVALID</name></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>,

<expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VLC_TICK_INVALID</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">.3f</literal></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VLC_TICK_INVALID</name></expr>, <expr><operator>-</operator><literal type="number">12345</literal></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VLC_TICK_INVALID</name></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">120</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>,

<expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct>struct <name>test_ctx</name>

<block>{

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>test_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_done</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thumbnailer_callback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>thumbnail</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>test_ctx</name></name><modifier>*</modifier></type> <name>p_ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>thumbnail</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>test_params</name><index>[<expr><name><name>p_ctx</name><operator>-&gt;</operator><name>test_idx</name></name></expr>]</index></name><operator>.</operator><name>b_expected_success</name> <operator>&amp;&amp;</operator>

<literal type="string">"Expected failure but got a thumbnail"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>thumbnail</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_ARGB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

vlc_tick_t expected_date;

if ( test_params[p_ctx-&gt;test_idx].b_use_pos == true )

expected_date = MOCK_DURATION * test_params[p_ctx-&gt;test_idx].f_pos;

else if ( test_params[p_ctx-&gt;test_idx].i_add_video_track_at != VLC_TICK_INVALID )

expected_date = test_params[p_ctx-&gt;test_idx].i_add_video_track_at;

else

{

if ( test_params[p_ctx-&gt;test_idx].i_time &lt; 0 )

expected_date = VLC_TICK_0;

else

expected_date = test_params[p_ctx-&gt;test_idx].i_time;

}

assert( thumbnail-&gt;date == expected_date &amp;&amp; "Unexpected picture date");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>test_params</name><index>[<expr><name><name>p_ctx</name><operator>-&gt;</operator><name>test_idx</name></name></expr>]</index></name><operator>.</operator><name>b_expected_success</name> <operator>&amp;&amp;</operator>

<literal type="string">"Expected a thumbnail but got a failure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_thumbnails</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name><modifier>*</modifier></type> <name>p_vlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_t</name><modifier>*</modifier></type> <name>p_thumbnailer</name> <init>= <expr><call><name>vlc_thumbnailer_Create</name><argument_list>(

<argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name><name>p_vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_thumbnailer</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>test_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>test_params</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>test_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>b_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"mock://video_track_count=%u;audio_track_count=%u"</literal>

<literal type="string">";length=%"</literal> <name>PRId64</name> <literal type="string">";video_chroma=ARGB;add_video_track_at=%"</literal> <name>PRId64</name></expr></argument>,

<argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_nb_video_tracks</name></expr></argument>,

<argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_nb_audio_tracks</name></expr></argument>, <argument><expr><name>MOCK_DURATION</name></expr></argument>,

<argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_add_video_track_at</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><literal type="string">"Failed to allocate mock mrl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_item</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"mock item"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_use_pos</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_thumbnailer_RequestByPos</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument>, <argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_pos</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_fast_seek</name></expr> ?</condition><then>

<expr><name>VLC_THUMBNAILER_SEEK_FAST</name></expr> </then><else>: <expr><name>VLC_THUMBNAILER_SEEK_PRECISE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timeout</name></expr></argument>, <argument><expr><name>thumbnailer_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_thumbnailer_RequestByTime</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument>, <argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_time</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_fast_seek</name></expr> ?</condition><then>

<expr><name>VLC_THUMBNAILER_SEEK_FAST</name></expr> </then><else>: <expr><name>VLC_THUMBNAILER_SEEK_PRECISE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>test_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timeout</name></expr></argument>, <argument><expr><name>thumbnailer_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>( <expr><name><name>ctx</name><operator>.</operator><name>b_done</name></name> <operator>==</operator> <name>false</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>timeout</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>res</name> <operator>!=</operator> <name>ETIMEDOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_thumbnailer_Release</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thumbnailer_callback_cancel</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_thumbnail</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>test_ctx</name></name><modifier>*</modifier></type> <name>p_ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_thumbnail</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_cancel_thumbnail</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name><modifier>*</modifier></type> <name>p_vlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_thumbnailer_t</name><modifier>*</modifier></type> <name>p_thumbnailer</name> <init>= <expr><call><name>vlc_thumbnailer_Create</name><argument_list>(

<argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name><name>p_vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_thumbnailer</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>test_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name> <init>= <expr><literal type="string">"mock://video_track_count=1;audio_track_count=1"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_item</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"mock item"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>p_req</name> <init>= <expr><call><name>vlc_thumbnailer_RequestByTime</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>VLC_THUMBNAILER_SEEK_PRECISE</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>,

<argument><expr><name>VLC_TICK_INVALID</name></expr></argument>, <argument><expr><name>thumbnailer_callback_cancel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_thumbnailer_Cancel</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument>, <argument><expr><name>p_req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while <condition>( <expr><name><name>ctx</name><operator>.</operator><name>b_done</name></name> <operator>==</operator> <name>false</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>timeout</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>res</name> <operator>!=</operator> <name>ETIMEDOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_thumbnailer_Release</name><argument_list>( <argument><expr><name>p_thumbnailer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-v"</literal></expr>,

<expr><literal type="string">"--ignore-config"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_thumbnails</name><argument_list>( <argument><expr><name>vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_cancel_thumbnail</name><argument_list>( <argument><expr><name>vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name>vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
