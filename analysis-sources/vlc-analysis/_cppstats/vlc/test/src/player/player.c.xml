<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\src\player\player.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>

<struct>struct <name>report_capabilities</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>old_caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_caps</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_position</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pos</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_track_list</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_track_selection</name>

<block>{

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>unselected_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>selected_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_program_list</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_program_selection</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>unselected_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selected_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_chapter_selection</name>

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>title_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chapter_idx</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_category_delay</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_signal</name>

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>strength</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_vout</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_vout_action</name></name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>report_media_subitems</name>

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT_LIST</name></cpp:macro> <cpp:value>X(input_item_t *, on_current_media_changed) X(enum vlc_player_state, on_state_changed) X(enum vlc_player_error, on_error_changed) X(float, on_buffering_changed) X(float, on_rate_changed) X(struct report_capabilities, on_capabilities_changed) X(struct report_position, on_position_changed) X(vlc_tick_t, on_length_changed) X(struct report_track_list, on_track_list_changed) X(struct report_track_selection, on_track_selection_changed) X(struct report_program_list, on_program_list_changed) X(struct report_program_selection, on_program_selection_changed) X(vlc_player_title_list *, on_titles_changed) X(size_t, on_title_selection_changed) X(struct report_chapter_selection, on_chapter_selection_changed) X(struct report_category_delay, on_category_delay_changed) X(bool, on_recording_changed) X(struct report_signal, on_signal_changed) X(struct input_stats_t, on_statistics_changed) X(struct report_vout, on_vout_changed) X(input_item_t *, on_media_meta_changed) X(input_item_t *, on_media_epg_changed) X(struct report_media_subitems, on_media_subitems_changed)</cpp:value></cpp:define> 

<struct>struct <name>report_timer</name>

<block>{

<enum>enum

<block>{

<decl><name>REPORT_TIMER_POINT</name></decl>,

<decl><name>REPORT_TIMER_TC</name></decl>,

<decl><name>REPORT_TIMER_DISCONTINUITY</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<union>union

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_point</name></name></type> <name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_timer_smpte_timecode</name></name></type> <name>tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>discontinuity_date</name></decl>;</decl_stmt>

}</block>;</union>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>report_timer</name></expr></argument>)</argument_list> <name>vec_report_timer</name>;</typedef>

<struct>struct <name>timer_state</name>

<block>{

<decl_stmt><decl><type><name>vlc_player_timer_id</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name></type> <name>vec</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct VLC_VECTOR(type) vec_##name;</cpp:value></cpp:define>

<macro><name>REPORT_LIST</name></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_##name name;</cpp:value></cpp:define>

<struct>struct <name>reports</name>

<block>{

<expr_stmt><expr><name>REPORT_LIST</name></expr></expr_stmt>

}</block>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>reports_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reports</name></name> <modifier>*</modifier></type><name>report</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_init(&amp;report-&gt;name);</cpp:value></cpp:define>

<expr_stmt><expr><name>REPORT_LIST</name></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

</block_content>}</block></function>

<struct>struct <name>media_params</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>audio_sample_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>track_count</name><index>[<expr><name>DATA_ES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>program_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>video_packetized</name></decl>, <decl><type ref="prev"/><name>audio_packetized</name></decl>, <decl><type ref="prev"/><name>sub_packetized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>video_frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>video_frame_rate_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>title_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chapter_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_seek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_pause</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>null_names</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MEDIA_PARAMS</name><parameter_list>(<parameter><type><name>param_length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .length = param_length, .audio_sample_length = VLC_TICK_FROM_MS(100), .track_count = { [VIDEO_ES] = 1, [AUDIO_ES] = 1, [SPU_ES] = 1, }, .program_count = 0, .video_packetized = true, .audio_packetized = true, .sub_packetized = true,.video_frame_rate = 25, .video_frame_rate_base = 1, .title_count = 0, .chapter_count = 0, .can_seek = true, .can_pause = true, .error = false, .null_names = false, }</cpp:value></cpp:define>

<struct>struct <name>ctx</name>

<block>{

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>next_medias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>played_medias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>program_switch_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extra_start_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_state_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>reports</name></name></type> <name>report</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type>

<name>get_ctx</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>player</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type>

<name>player_get_next</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>next_media</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_media</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>next_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>, <argument><expr><name>next_media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>next_media</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>next_media</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_PUSH</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool success = vlc_vector_push(&amp;ctx-&gt;report.vec, item); assert(success); vlc_cond_signal(&amp;ctx-&gt;wait); } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_current_media_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>new_media</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_media</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>new_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_current_media_changed</name></expr></argument>, <argument><expr><name>new_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_state_changed</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_error_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_error</name></name></type> <name>error</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_error_changed</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_buffering_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_buffering</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_buffering_changed</name></expr></argument>, <argument><expr><name>new_buffering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_rate_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_rate</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_rate_changed</name></expr></argument>, <argument><expr><name>new_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_capabilities_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_caps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_caps</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_capabilities</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>old_caps</name> <operator>=</operator> <name>old_caps</name></expr>,

<expr><operator>.</operator><name>new_caps</name> <operator>=</operator> <name>new_caps</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_capabilities_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_position_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_position</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>time</name> <operator>=</operator> <name>time</name></expr>,

<expr><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_position_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_length_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>new_length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_length_changed</name></expr></argument>, <argument><expr><name>new_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_track_list_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_list</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>action</name> <operator>=</operator> <name>action</name></expr>,

<expr><operator>.</operator><name>track</name> <operator>=</operator> <call><name>vlc_player_track_Dup</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>track</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_track_list_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_track_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>unselected_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>selected_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_selection</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>unselected_id</name> <operator>=</operator> <name>unselected_id</name> <operator>?</operator> <call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name>unselected_id</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>selected_id</name> <operator>=</operator> <name>selected_id</name> <operator>?</operator> <call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name>selected_id</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>unselected_id</name> <operator>==</operator> <operator>!</operator><operator>!</operator><name><name>report</name><operator>.</operator><name>unselected_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>selected_id</name> <operator>==</operator> <operator>!</operator><operator>!</operator><name><name>report</name><operator>.</operator><name>selected_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_track_selection_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_program_list_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_list</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>action</name> <operator>=</operator> <name>action</name></expr>,

<expr><operator>.</operator><name>prgm</name> <operator>=</operator> <macro><name>vlc_player_program_Dup</name><argument_list>(<argument>prgm</argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>prgm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_program_list_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_program_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unselected_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected_id</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_selection</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>unselected_id</name> <operator>=</operator> <name>unselected_id</name></expr>,

<expr><operator>.</operator><name>selected_id</name> <operator>=</operator> <name>selected_id</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_program_selection_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_titles_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>titles</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_title_list_Hold</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_titles_changed</name></expr></argument>, <argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_title_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>new_title</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>new_idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_title_selection_changed</name></expr></argument>, <argument><expr><name>new_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>new_title</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_chapter_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>title_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>chapter_idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_chapter_selection</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>title_idx</name> <operator>=</operator> <name>title_idx</name></expr>,

<expr><operator>.</operator><name>chapter_idx</name> <operator>=</operator> <name>chapter_idx</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_chapter_selection_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>title</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>chapter</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_category_delay_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>new_delay</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_category_delay</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>cat</name> <operator>=</operator> <name>cat</name></expr>,

<expr><operator>.</operator><name>delay</name> <operator>=</operator> <name>new_delay</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_category_delay_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_recording_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recording</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_recording_changed</name></expr></argument>, <argument><expr><name>recording</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_signal_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>strength</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_signal</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>quality</name> <operator>=</operator> <name>quality</name></expr>,

<expr><operator>.</operator><name>strength</name> <operator>=</operator> <name>strength</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_signal_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_statistics_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_stats_t</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_stats_t</name></name></type> <name>dup</name> <init>= <expr><operator>*</operator><name>stats</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_statistics_changed</name></expr></argument>, <argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_vout_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_vout_action</name></name></type> <name>action</name></decl></parameter>,

<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_vout</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>action</name> <operator>=</operator> <name>action</name></expr>,

<expr><operator>.</operator><name>vout</name> <operator>=</operator> <call><name>vout_Hold</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>order</name> <operator>=</operator> <name>order</name></expr>,

<expr><operator>.</operator><name>es_id</name> <operator>=</operator> <call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_vout_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_media_meta_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_media_meta_changed</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_media_epg_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_media_epg_changed</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_media_subitems_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>media</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>get_ctx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_media_subitems</name></name></type> <name>report</name> <init>= <expr><block>{

<expr><operator>.</operator><name>count</name> <operator>=</operator> <name><name>subitems</name><operator>-&gt;</operator><name>i_children</name></name></expr>,

<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>subitems</name><operator>-&gt;</operator><name>i_children</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subitems</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>report</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>input_item_Hold</name><argument_list>(<argument><expr><name><name>subitems</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VEC_PUSH</name><argument_list>(<argument><expr><name>on_media_subitems_changed</name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LAST</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vec)-&gt;data[(vec)-&gt;size - 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_position</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>report</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(fabs((report)-&gt;pos - (report)-&gt;time / (float) ctx-&gt;params.length) &lt; 0.001); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>wait_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_state_idx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>last_state_idx</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vec</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>state</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_state_idx</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_state_idx</name></name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_state</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vec_on_state_changed *vec = &amp;ctx-&gt;report.on_state_changed; assert(VEC_LAST(vec) == state); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_normal_state</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vec_on_state_changed *vec = &amp;ctx-&gt;report.on_state_changed; assert(vec-&gt;size &gt;= 4); assert(vec-&gt;data[vec-&gt;size - 4] == VLC_PLAYER_STATE_STARTED); assert(vec-&gt;data[vec-&gt;size - 3] == VLC_PLAYER_STATE_PLAYING); assert(vec-&gt;data[vec-&gt;size - 2] == VLC_PLAYER_STATE_STOPPING); assert(vec-&gt;data[vec-&gt;size - 1] == VLC_PLAYER_STATE_STOPPED); } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ctx_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH_VEC</name><parameter_list>(<parameter><type><name>item</name></type></parameter>, <parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_foreach(item, &amp;ctx-&gt;report.vec)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN_MEDIA_VEC</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { input_item_t *media; FOREACH_VEC(media, vec) { if (media) input_item_Release(media); } } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CLEAN_MEDIA_VEC</name><argument_list>(<argument><expr><name>on_current_media_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN_MEDIA_VEC</name><argument_list>(<argument><expr><name>on_media_meta_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN_MEDIA_VEC</name><argument_list>(<argument><expr><name>on_media_epg_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>report</argument>, <argument>on_track_list_changed</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>vlc_player_track_Delete</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>track</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_selection</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>report</argument>, <argument>on_track_selection_changed</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>unselected_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>unselected_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>selected_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>selected_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>report</argument>, <argument>on_program_list_changed</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>vlc_player_program_Delete</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>prgm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>titles</argument>, <argument>on_titles_changed</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>titles</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_title_list_Release</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_vout</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>report</argument>, <argument>on_vout_changed</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_media_subitems</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>FOREACH_VEC</name><argument_list>(<argument>report</argument>, <argument>on_media_subitems_changed</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>report</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEAN_MEDIA_VEC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FOREACH_VEC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_clear(&amp;ctx-&gt;report.name);</cpp:value></cpp:define>

<decl_stmt><decl><type><name>REPORT_LIST</name>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>media</argument>, <argument>&amp;ctx-&gt;next_medias</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>media</argument>, <argument>&amp;ctx-&gt;played_medias</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>media</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extra_start_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>program_switch_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_state_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type>

<name>create_mock_media</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>media_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>,

<argument><expr><literal type="string">"mock://video_width=4;video_height=4;"</literal>

<literal type="string">"video_track_count=%zu;audio_track_count=%zu;sub_track_count=%zu;"</literal>

<literal type="string">"program_count=%zu;video_packetized=%d;audio_packetized=%d;"</literal>

<literal type="string">"sub_packetized=%d;length=%"</literal><name>PRId64</name><literal type="string">";audio_sample_length=%"</literal><name>PRId64</name><literal type="string">";"</literal>

<literal type="string">"video_frame_rate=%u;video_frame_rate_base=%u;"</literal>

<literal type="string">"title_count=%zu;chapter_count=%zu;"</literal>

<literal type="string">"can_seek=%d;can_pause=%d;error=%d;null_names=%d"</literal></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>program_count</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>video_packetized</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>audio_packetized</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>sub_packetized</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>audio_sample_length</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>video_frame_rate</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>title_count</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>can_seek</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>can_pause</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>null_names</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_set_current_mock_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>media_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignored</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>create_mock_media</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <operator>*</operator><name>params</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>chapter_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>title_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>title_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>program_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>program_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>media</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ignored</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>media</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_set_next_mock_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>media_params</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>create_mock_media</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_set_rate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_prestop_rate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name> <operator>!=</operator> <literal type="number">1.0f</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_rate_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_rate_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_prestop_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_length_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_length_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>length</name></name> <operator>==</operator> <call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_prestop_capabilities</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_capabilities_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_capabilities_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>int</name></type> <name>new_caps</name> <init>= <expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>new_caps</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>can_seek</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>new_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_SEEK</name><operator>)</operator> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>can_seek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_CanPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>can_pause</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>new_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_PAUSE</name><operator>)</operator> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>can_pause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_prestop_buffering</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_buffering_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_buffering_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_tracks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_list_changed</name></name></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>removed</name></decl>;</decl_stmt>

}</block> <decl><name><name>tracks</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>report</argument>, <argument>vec</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>.</operator><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name>

<operator>||</operator> <name><name>report</name><operator>.</operator><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name>

<operator>||</operator> <name><name>report</name><operator>.</operator><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_LIST_ADDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tracks</name><index>[<expr><name><name>report</name><operator>.</operator><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>]</index></name><operator>.</operator><name>added</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_LIST_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tracks</name><index>[<expr><name><name>report</name><operator>.</operator><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>]</index></name><operator>.</operator><name>removed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name><name>cats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VIDEO_ES</name></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>SPU_ES</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><name><name>cats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tracks</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>added</name> <operator>==</operator> <name><name>tracks</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program_switch_count</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extra_start_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>track_count</name> <init>=

<expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>cat</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>program_switch_count</name></name> <operator>*</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extra_start_count</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tracks</name><index>[<expr><name>cat</name></expr>]</index></name><operator>.</operator><name>added</name> <operator>==</operator> <name>track_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_programs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_program_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_program_list_changed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>program_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>program_removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>report</argument>, <argument>vec</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_LIST_ADDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>program_added</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_LIST_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>program_removed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>program_added</name> <operator>==</operator> <name>program_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>program_count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>program_count</name></name> <operator>*</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extra_start_count</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>program_added</name> <operator>==</operator> <name>program_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_titles</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>chapter_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>title_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vec_on_titles_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_titles_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>title_count</name> <init>= <expr><call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title_count</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>title_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>title_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>title_idx</name> <operator>&lt;</operator> <name>title_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>title_idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>=

<expr><call><name>vlc_player_title_list_GetAt</name><argument_list>(<argument><expr><name>titles</name></expr></argument>, <argument><expr><name>title_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>title</name><operator>-&gt;</operator><name>name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>chapter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>chapter_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chapter_idx</name> <operator>&lt;</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>chapter_idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name> <init>=

<expr><operator>&amp;</operator><name><name>title</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>chapter_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>chapter</name><operator>-&gt;</operator><name>name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chapter_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_vouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_vout_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_vout_changed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vout_started</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vout_stopped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_vout</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>report</argument>, <argument>vec</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_VOUT_STARTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vout_started</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>VLC_PLAYER_VOUT_STOPPED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vout_stopped</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout_started</name> <operator>==</operator> <name>vout_stopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end_poststop_medias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_current_media_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_current_media_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>oldsize</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>oldsize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_prestop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_end_prestop_rate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_prestop_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_prestop_capabilities</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_prestop_buffering</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wait_stopped</name> <init>=

<expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_stopped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>error</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>test_end_poststop_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_poststop_tracks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_poststop_programs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_poststop_titles</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end_poststop_vouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_end_poststop_medias</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_rate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetStartPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctx_reset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>vec_on_program_list_get_action_count</name><parameter_list>(<parameter><decl><type><name>vec_on_program_list_changed</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>report</argument>, <argument>vec</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>action</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>vec_on_program_selection_has_event</name><parameter_list>(<parameter><decl><type><name>vec_on_program_selection_changed</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>from_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unselected_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>from_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_unselected_id</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>has_selected_id</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>from_idx</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_program_selection</name></name></type> <name>report</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unselected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>report</name><operator>.</operator><name>unselected_id</name></name> <operator>==</operator> <name>unselected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_unselected_id</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>report</name><operator>.</operator><name>selected_id</name></name> <operator>==</operator> <name>selected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_selected_id</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>unselected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>selected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>has_unselected_id</name> <operator>&amp;&amp;</operator> <name>has_selected_id</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>unselected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_unselected_id</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_selected_id</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_programs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"programs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>program_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_program_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_program_list_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vec_on_program_list_get_action_count</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name><name>params</name><operator>.</operator><name>program_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetProgramCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>params</name><operator>.</operator><name>program_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>new_prgm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>old_prgm</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>program_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>old_prgm</name> <operator>=</operator> <call><name>vlc_player_GetProgramAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_prgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_prgm</name> <operator>==</operator> <call><name>vlc_player_GetProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>old_prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_prgm</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>params</name><operator>.</operator><name>program_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_prgm</name> <operator>=</operator> <call><name>vlc_player_GetProgramAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_prgm</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_id</name> <init>= <expr><name><name>old_prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_id</name> <init>= <expr><name><name>new_prgm</name><operator>-&gt;</operator><name>group_id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_on_program_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_program_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vec_oldsize</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vec_on_program_selection_has_event</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_oldsize</name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>,

<argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>program_switch_count</name></name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>vec_on_track_list_get_action_count</name><parameter_list>(<parameter><decl><type><name>vec_on_track_list_changed</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_list</name></name></type> <name>report</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>report</argument>, <argument>vec</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>action</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>vec_on_track_selection_has_event</name><parameter_list>(<parameter><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>from_idx</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>unselected_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>selected_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>from_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_unselected_id</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>has_selected_id</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>from_idx</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_track_selection</name></name></type> <name>report</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unselected_id</name> <operator>&amp;&amp;</operator> <name><name>report</name><operator>.</operator><name>unselected_id</name></name> <operator>==</operator> <name>unselected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_unselected_id</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_id</name> <operator>&amp;&amp;</operator> <name><name>report</name><operator>.</operator><name>selected_id</name></name> <operator>==</operator> <name>selected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_selected_id</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>unselected_id</name> <operator>&amp;&amp;</operator> <name>selected_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>has_unselected_id</name> <operator>&amp;&amp;</operator> <name>has_selected_id</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>unselected_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_unselected_id</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>has_unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_selected_id</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>player_select_next_unselected_track</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>new_track</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>old_track</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_selected_track</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>new_id</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>old_track</name> <operator>=</operator> <call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_track</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>has_selected_track</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_track</name> <operator>=</operator> <call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_selected_track</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cat</name> <operator>==</operator> <name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_track</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_track</name> <operator>=</operator> <call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_id</name> <operator>=</operator> <ternary><condition><expr><name>new_track</name></expr> ?</condition><then> <expr><call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name><name>new_track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>old_id</name> <operator>=</operator> <ternary><condition><expr><name>old_track</name></expr> ?</condition><then> <expr><call><name>vlc_es_id_Hold</name><argument_list>(<argument><expr><name><name>old_track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectEsId</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>new_id</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UnselectEsId</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vec_oldsize</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vec_on_track_selection_has_event</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_oldsize</name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>,

<argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>new_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name>new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_es_id_Release</name><argument_list>(<argument><expr><name>old_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>new_track</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_tracks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>packetized</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"tracks (packetized: %d)\n"</literal></expr></argument>, <argument><expr><name>packetized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>video_packetized</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>audio_packetized</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>sub_packetized</name></name>

<operator>=</operator> <name>packetized</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>track_count</name> <init>= <expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>+</operator>

<name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>+</operator>

<name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_list_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vec_on_track_list_get_action_count</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>track_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name> <operator>==</operator> <call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name><name>cats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SPU_ES</name></expr>, <expr><name>VIDEO_ES</name></expr>, <expr><name>AUDIO_ES</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><name><name>cats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>cat</name></expr>]</index></name> <operator>==</operator> <call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>player_select_next_unselected_track</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vec_oldsize</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>cat</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vec_on_track_selection_has_event</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_oldsize</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>vec_oldsize</name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>cat</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectPrevTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vec_on_track_selection_has_event</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_oldsize</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>vec_oldsize</name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_player_SelectPrevTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vec_on_track_selection_has_event</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_oldsize</name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_tracks_ids</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"tracks_ids\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>track_count</name> <init>= <expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>+</operator>

<name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>+</operator>

<name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>selected_video_tracks</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>first_video_track_idx</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>,

<argument><expr><literal type="string">"video/4,video/5,video/6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>selected_audio_tracks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>first_audio_track_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>selected_sub_tracks</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>first_sub_track_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><literal type="string">"spu/0,spu/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>selected_tracks</name> <init>= <expr><name>selected_video_tracks</name> <operator>+</operator> <name>selected_audio_tracks</name>

<operator>+</operator> <name>selected_sub_tracks</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_list_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vec_on_track_list_get_action_count</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>track_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>video_track_idx</name> <init>= <expr><name>first_video_track_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sub_track_idx</name> <init>= <expr><name>first_sub_track_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cat_id</name><index>[]</index></name> <init>= <expr><literal type="string">"video/0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>selected_tracks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>video_track_idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"video/%u"</literal></expr></argument>, <argument><expr><name>video_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sub_track_idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"spu/%u"</literal></expr></argument>, <argument><expr><name>sub_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>vlc_es_id_GetStrId</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name>selected_video_tracks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selected_audio_tracks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first_audio_track_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="string">"audio/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTracksByStringIds</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_selected_tracks</name> <init>= <expr><name>selected_tracks</name> <operator>+</operator>

<operator>+</operator> <name>selected_video_tracks</name> <operator>+</operator> <name>selected_audio_tracks</name>

<operator>+</operator> <name>selected_sub_tracks</name></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>audio_track_idx</name> <init>= <expr><name>first_audio_track_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sub_track_idx</name> <init>= <expr><name>first_sub_track_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cat_id</name><index>[]</index></name> <init>= <expr><literal type="string">"audio/0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>new_selected_tracks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>selected_tracks</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><ternary><condition><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr> ?</condition><then>

<expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr> </then><else>: <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>audio_track_idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"audio/%u"</literal></expr></argument>, <argument><expr><name>audio_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sub_track_idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"spu/%u"</literal></expr></argument>, <argument><expr><name>sub_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>vlc_es_id_GetStrId</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_track_list_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_list_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>vec_on_track_list_get_action_count</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LIST_ADDED</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>track_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>video_track_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>audio_track_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cat_id</name><index>[]</index></name> <init>= <expr><literal type="string">"audio/0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_track_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_track_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unselected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name> <init>= <expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>video_track_idx</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"video/%u"</literal></expr></argument>, <argument><expr><name>video_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>audio_track_idx</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cat_id</name></expr></argument>, <argument><expr><literal type="string">"audio/%u"</literal></expr></argument>, <argument><expr><name>audio_track_idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>vlc_es_id_GetStrId</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_titles</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>null_names</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"titles (null_names: %d)\n"</literal></expr></argument>, <argument><expr><name>null_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>title_count</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>chapter_count</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>null_names</name></name> <operator>=</operator> <name>null_names</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_titles_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_titles_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>titles</name> <operator>=</operator> <name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>titles</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>titles</name> <operator>==</operator> <call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>last_chapter_idx</name> <init>= <expr><name><name>params</name><operator>.</operator><name>chapter_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_title_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_title_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>=

<expr><call><name>vlc_player_title_list_GetAt</name><argument_list>(<argument><expr><name>titles</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>==</operator> <name><name>params</name><operator>.</operator><name>chapter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>last_chapter_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_chapter_selection_changed</name> <modifier>*</modifier></type><name>vec</name> <init>=

<expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_chapter_selection_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>chapter_idx</name> <operator>!=</operator> <name>last_chapter_idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>title_idx</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_error_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_error_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_PLAYER_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_unknown_uri</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"unknown_uri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><literal type="string">"unknownuri://foo"</literal></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_error_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_error_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>VLC_PLAYER_ERROR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_capabilities_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"capabilites_seek\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>can_seek</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_capabilities_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_capabilities_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">4.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_position_changed</name> <modifier>*</modifier></type><name>posvec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_position_changed</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>posvec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last_time</name> <operator>!=</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>posvec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>posvec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>assert_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_capabilities_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"capabilites_pause\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>can_pause</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_capabilities_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_capabilities_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">32.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"pause\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetStartPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_position_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_position_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_position_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_position_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_state_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_state_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_seeks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"seeks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTimeFast</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTimeFast</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTimeFast</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>seek_time</name> <init>= <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTimeFast</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_position_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_position_changed</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name> <operator>&gt;=</operator> <name>seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_position</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_time</name> <init>= <expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>jump_time</name> <init>= <expr><operator>-</operator><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_JumpTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>jump_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name> <operator>&gt;=</operator> <name>last_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name>time</name> <operator>&gt;=</operator> <name>last_time</name> <operator>+</operator> <name>jump_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_position</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_player_SetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_media_name</name><parameter_list>(<parameter><type><name>media</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(media); char *media_name = input_item_GetName(media); assert(media_name &amp;&amp; strcmp(media_name, name) == 0); free(media_name); } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_next_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"next_media\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>media_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"media1"</literal></expr>, <expr><literal type="string">"media2"</literal></expr>, <expr><literal type="string">"media3"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>media_count</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>media_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>media_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>player_set_next_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>player_set_rate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_current_media_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_current_media_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>media_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_medias</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert_media_name</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_set_current_media</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"current_media\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>media_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"media1"</literal></expr>, <expr><literal type="string">"media2"</literal></expr>, <expr><literal type="string">"media3"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>media_count</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>media_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_PLAYING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_current_media_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_current_media_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>media_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<while>while <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_CondWait</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>last_media</name> <init>= <expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last_media</name> <operator>==</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last_media</name> <operator>==</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_media_name</name><argument_list>(<argument><expr><name>last_media</name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>media_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ignored"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>last_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>test_prestop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extra_start_count</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_normal_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>media_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>VEC_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>played_medias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_delete_while_playback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"delete_while_playback (start: %d)\n"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_player_New</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>VLC_PLAYER_LOCK_NORMAL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>create_mock_media</name><argument_list>(<argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_player_Start</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_no_outputs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"test_no_outputs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_vout_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_vout_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_outputs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"test_outputs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vout_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vout_list</name> <init>= <expr><call><name>vlc_player_vout_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vout_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vout_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>vout_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>vout_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vout_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_on_vout_changed</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name><operator>.</operator><name>on_vout_changed</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>action</name> <operator>==</operator> <name>VLC_PLAYER_VOUT_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>same_vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vout</name> <operator>==</operator> <name>same_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>same_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>same_aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>same_aout</name> <operator>==</operator> <name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>same_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ctx_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_destroy(&amp;ctx-&gt;report.name);</cpp:value></cpp:define>

<decl_stmt><decl><type><name>REPORT_LIST</name></type>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ctx_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_outputs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-v"</literal></expr>,

<expr><literal type="string">"--ignore-config"</literal></expr>,

<expr><literal type="string">"-Idummy"</literal></expr>,

<expr><literal type="string">"--no-media-library"</literal></expr>,

<expr><literal type="string">"--no-drop-late-frames"</literal></expr>,

<expr><literal type="string">"--codec=araw,rawvideo,subsdec,none"</literal></expr>,

<expr><literal type="string">"--dec-dev=none"</literal></expr>,

<expr><name>use_outputs</name> <operator>?</operator> <literal type="string">"--vout=dummy"</literal> <operator>:</operator> <literal type="string">"--vout=none"</literal></expr>,

<expr><name>use_outputs</name> <operator>?</operator> <literal type="string">"--aout=dummy"</literal> <operator>:</operator> <literal type="string">"--aout=none"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_media_provider</name></name></type> <name>provider</name> <init>= <expr><block>{

<expr><operator>.</operator><name>get_next</name> <operator>=</operator> <name>player_get_next</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.name = player_##name,</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name></type> <name>cbs</name> <init>= <expr><block>{

<expr><name>REPORT_LIST</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <operator>(</operator>struct <name>ctx</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>vlc</name></expr>,

<expr><operator>.</operator><name>next_medias</name> <operator>=</operator> <name>VLC_VECTOR_INITIALIZER</name></expr>,

<expr><operator>.</operator><name>played_medias</name> <operator>=</operator> <name>VLC_VECTOR_INITIALIZER</name></expr>,

<expr><operator>.</operator><name>program_switch_count</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>extra_start_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>rate</name> <operator>=</operator> <literal type="number">1.f</literal></expr>,

<expr><operator>.</operator><name>wait</name> <operator>=</operator> <name>VLC_STATIC_COND</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reports_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>report</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>var_SetString</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"wdummy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <call><name>vlc_player_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_PLAYER_LOCK_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>provider</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>timers_on_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_point</name></name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name></type> <name>report</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REPORT_TIMER_POINT</name></expr>,

<expr><operator>.</operator><name>point</name> <operator>=</operator> <operator>*</operator><name>point</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>timers_on_discontinuity</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_date</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name></type> <name>report</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REPORT_TIMER_DISCONTINUITY</name></expr>,

<expr><operator>.</operator><name>discontinuity_date</name> <operator>=</operator> <name>system_date</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>timers_smpte_on_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_smpte_timecode</name></name> <modifier>*</modifier></type><name>tc</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name></type> <name>report</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REPORT_TIMER_TC</name></expr>,

<expr><operator>.</operator><name>tc</name> <operator>=</operator> <operator>*</operator><name>tc</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>report</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_timers_assert_smpte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>fps</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>drop_frame</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>frame_resolution</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>duration</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>prev_report</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>fps</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_report</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>fps</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <name>fps</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REPORT_TIMER_TC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>drop_frame</name></name> <operator>==</operator> <name>drop_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frame_resolution</name></name> <operator>==</operator> <name>frame_resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VEC_LAST</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>tc</name><operator>.</operator><name>frames</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>fps</name> <operator>*</operator> <name>duration</name> <operator>/</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_timers_assert_smpte_dropframe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>minute</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fps</name> <operator>==</operator> <literal type="number">30</literal> <operator>||</operator> <name>fps</name> <operator>==</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>minute</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>last_second_seen</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>minute_seen</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>prev_report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>drop_frame</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frame_resolution</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <name>fps</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>==</operator> <literal type="number">59</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>==</operator> <name>minute</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>==</operator> <literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>==</operator> <name>minute</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_second_seen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>==</operator> <name>minute</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>==</operator> <literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>==</operator> <name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minute</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <operator>(</operator><name>fps</name> <operator>/</operator> <literal type="number">30</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>minute_seen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>minutes</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>seconds</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>==</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last_second_seen</name> <operator>&amp;&amp;</operator> <name>minute_seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGULAR_TIMER_IDX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGULAR_DELAY_TIMER_IDX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMPTE_TIMER_IDX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOURCE_DELAY_TIMER_VALUE</name></cpp:macro> <cpp:value>(VLC_TICK_FROM_MS(2))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_timers_playback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timer_state</name></name></type> <name><name>timers</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>track_count</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>fps</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_LENGTH</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UPDATE_COUNT</name></cpp:macro> <cpp:value>(size_t)(length / SAMPLE_LENGTH)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>= <expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>=</operator> <name>track_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>=</operator> <name>track_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name> <operator>=</operator> <name>track_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>audio_sample_length</name></name> <operator>=</operator> <name>SAMPLE_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>video_frame_rate</name></name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>video_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_rate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>timer_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>timer_idx</name> <operator>&lt;</operator> <name>SMPTE_TIMER_IDX</name></expr>;</condition> <incr><expr><operator>++</operator><name>timer_idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>timer_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>prev_report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REPORT_TIMER_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>position</name></name> <operator>&gt;=</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>rate</name></name> <operator>==</operator> <name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REPORT_TIMER_DISCONTINUITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>discontinuity_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>track_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>REGULAR_TIMER_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>point_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>prev_report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name> <operator>!=</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name> <operator>==</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>ts</name></name> <operator>+</operator> <name>SAMPLE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>point</name><operator>.</operator><name>ts</name></name>

<operator>==</operator> <name>length</name> <operator>-</operator> <name>SAMPLE_LENGTH</name> <operator>+</operator> <name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>point_count</name> <operator>==</operator> <name>MAX_UPDATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>REGULAR_DELAY_TIMER_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>MAX_UPDATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>prev_report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>report_timer</name></name> <modifier>*</modifier></type><name>report</name> <init>= <expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name> <operator>-</operator> <name><name>prev_report</name><operator>-&gt;</operator><name>point</name><operator>.</operator><name>system_date</name></name>

<operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>track_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_timers_assert_smpte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>SMPTE_TIMER_IDX</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>SMPTE_TIMER_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_report_timer</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TIMER_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_timers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"timers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_cbs</name></name></type> <name>cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_update</name> <operator>=</operator> <name>timers_on_update</name></expr>,

<expr><operator>.</operator><name>on_discontinuity</name> <operator>=</operator> <name>timers_on_discontinuity</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_timer_smpte_cbs</name></name></type> <name>smpte_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_update</name> <operator>=</operator> <name>timers_smpte_on_update</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name></type> <name><name>timers</name><index>[<expr><name>TIMER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>timers</name><index>[<expr><name>REGULAR_TIMER_IDX</name></expr>]</index></name><operator>.</operator><name>delay</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timers</name><index>[<expr><name>REGULAR_DELAY_TIMER_IDX</name></expr>]</index></name><operator>.</operator><name>delay</name> <operator>=</operator> <name>SOURCE_DELAY_TIMER_VALUE</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>timers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SMPTE_TIMER_IDX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>vlc_player_AddSmpteTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smpte_cbs</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>vlc_player_AddTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>test_timers_playback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>timers</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_timers_playback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>timers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>df_fps_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>df_min_test_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>df_fps_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fps</name> <init>= <expr><name><name>df_fps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>df_min_test_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>minute</name> <init>= <expr><name><name>df_min_test_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>media_params</name></name></type> <name>params</name> <init>=

<expr><call><name>DEFAULT_MEDIA_PARAMS</name><argument_list>(<argument><expr><name>minute</name> <operator>*</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>VIDEO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>AUDIO_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>track_count</name><index>[<expr><name>SPU_ES</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>video_frame_rate</name></name> <operator>=</operator> <name>fps</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>video_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_current_mock_media</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"media1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_set_rate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>length</name></name> <operator>-</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>player_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_timers_assert_smpte_dropframe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>SMPTE_TIMER_IDX</name></expr>]</index></name></expr></argument>, <argument><expr><name>minute</name></expr></argument>,

<argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>SMPTE_TIMER_IDX</name></expr>]</index></name><operator>.</operator><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>timers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timer_state</name></name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>&amp;</operator><name><name>timers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveTimer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_no_outputs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctx_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_outputs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>test_set_current_media</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_next_media</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_seeks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_capabilities_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_capabilities_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_unknown_uri</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_titles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_titles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_tracks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_tracks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_tracks_ids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_programs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_timers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_delete_while_playback</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_delete_while_playback</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctx_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
