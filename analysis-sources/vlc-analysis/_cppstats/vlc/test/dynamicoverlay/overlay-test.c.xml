<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\dynamicoverlay\overlay-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ipc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT</name></cpp:macro> <cpp:value>"Hello world!"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXTSIZE</name></cpp:macro> <cpp:value>sizeof( TEXT )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_imageRGBA</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_text</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DataCreate</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>p_imageRGBA</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HEIGHT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HEIGHT</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_data</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_text</name></expr></argument>, <argument><expr><name>TEXT</name></expr></argument>, <argument><expr><name>TEXTSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>IsFailure</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list> <block>{<block_content>

<return>return <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"SUCCESS:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CheckResult</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_resp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fscanf</name><argument_list>( <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"%8s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_resp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IsFailure</name><argument_list>( <argument><expr><name>psz_resp</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CheckedCommand</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>p_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_res</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CheckResult</name><argument_list>( <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GenImage</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_overlay</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Getting an overlay..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"GenImage\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fscanf</name><argument_list>( <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_overlay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done. Overlay is %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_overlay</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DeleteImage</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Removing image..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"DeleteImage %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>StartAtomic</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"StartAtomic\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EndAtomic</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"EndAtomic\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataSharedMem</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_shmid</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Sending data via shared memory..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"DataSharedMem %d %d %d %s %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>,

<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>, <argument><expr><name>psz_format</name></expr></argument>, <argument><expr><name>i_shmid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetAlpha</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_alpha</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetAlpha %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_alpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetPosition</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetPosition %d %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>,

<argument><expr><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetVisibility</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetVisibility %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>,

<argument><expr><name>i_visible</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetTextAlpha</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_alpha</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetTextAlpha %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_alpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetTextColor</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_red</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_green</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_blue</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetTextColor %d %d %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>,

<argument><expr><name>i_red</name></expr></argument>, <argument><expr><name>i_green</name></expr></argument>, <argument><expr><name>i_blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetTextSize</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"SetTextSize %d %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetTextSize</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CheckedCommand</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"GetTextSize %d\n"</literal></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fscanf</name><argument_list>( <argument><expr><name>p_res</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>BasicTest</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Activating overlay..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetVisibility</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Sweeping alpha..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_alpha</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</init> <condition><expr><name>i_alpha</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xFF</literal></expr> ;</condition> <incr><expr><name>i_alpha</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetAlpha</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>( <argument><expr><name>i_alpha</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SetAlpha</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Circle motion..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>float</name></type> <name>f_theta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f_theta</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr> ;</condition> <incr><expr><name>f_theta</name> <operator>+=</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">64.0</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetPosition</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>-</operator> <call><name>cos</name><argument_list>( <argument><expr><name>f_theta</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100.0</literal> <operator>+</operator> <literal type="number">100.0</literal> <operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>-</operator> <call><name>sin</name><argument_list>( <argument><expr><name>f_theta</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100.0</literal> <operator>+</operator> <literal type="number">100.0</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SetPosition</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Atomic motion..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StartAtomic</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPosition</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPosition</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndAtomic</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckResult</name><argument_list>( <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckResult</name><argument_list>( <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>TextTest</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlay</name></decl></parameter> )</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Sweeping (text) alpha..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_alpha</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</init> <condition><expr><name>i_alpha</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xFF</literal></expr> ;</condition> <incr><expr><name>i_alpha</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetTextAlpha</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>( <argument><expr><name>i_alpha</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SetTextAlpha</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Sweeping colors..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_red</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</init> <condition><expr><name>i_red</name> <operator>&gt;=</operator> <literal type="number">0x00</literal></expr> ;</condition> <incr><expr><name>i_red</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetTextColor</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_red</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_green</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</init> <condition><expr><name>i_green</name> <operator>&gt;=</operator> <literal type="number">0x00</literal></expr> ;</condition> <incr><expr><name>i_green</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetTextColor</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>i_green</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_blue</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</init> <condition><expr><name>i_blue</name> <operator>&gt;=</operator> <literal type="number">0x00</literal></expr> ;</condition> <incr><expr><name>i_blue</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetTextColor</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>i_blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SetTextColor</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Getting size..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_basesize</name> <init>= <expr><call><name>GetTextSize</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done. Size is %d\n"</literal></expr></argument>, <argument><expr><name>i_basesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Sweeping size..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>float</name></type> <name>f_theta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f_theta</name> <operator>&lt;=</operator> <name>M_PI</name></expr> ;</condition> <incr><expr><name>f_theta</name> <operator>+=</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">128.0</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>SetTextSize</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>,

<argument><expr><name>i_basesize</name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>sin</name><argument_list>( <argument><expr><name>f_theta</name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usleep</name><argument_list>( <argument><expr><literal type="number">20000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SetTextSize</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay</name></expr></argument>, <argument><expr><name>i_basesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter> )</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_argc</name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Incorrect number of parameters.\n"</literal>

<literal type="string">"Usage is: %s command-fifo response-fifo\n"</literal></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Creating shared memory for RGBA..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_shmRGBA</name> <init>= <expr><call><name>shmget</name><argument_list>( <argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>WIDTH</name> <operator>*</operator> <name>HEIGHT</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_shmRGBA</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done, ID is %d. Text..."</literal></expr></argument>, <argument><expr><name>i_shmRGBA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_shmText</name> <init>= <expr><call><name>shmget</name><argument_list>( <argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>TEXTSIZE</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_shmText</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done, ID is %d\n"</literal></expr></argument>, <argument><expr><name>i_shmText</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Attaching shared memory for RGBA..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_imageRGBA</name> <operator>=</operator> <call><name>shmat</name><argument_list>( <argument><expr><name>i_shmRGBA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_imageRGBA</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done. Text..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_text</name> <operator>=</operator> <call><name>shmat</name><argument_list>( <argument><expr><name>i_shmText</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_text</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Queueing shared memory for destruction, RGBA..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>shmctl</name><argument_list>( <argument><expr><name>i_shmRGBA</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done. Text..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>shmctl</name><argument_list>( <argument><expr><name>i_shmText</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Generating data..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DataCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Making FIFOs..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mkfifo</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" input already exists..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mkfifo</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" output already exists..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Please make sure vlc is running.\n"</literal>

<literal type="string">"You should append parameters similar to the following:\n"</literal>

<literal type="string">"--sub-source overlay{input=%s,output=%s}\n"</literal></expr></argument>,

<argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"Opening FIFOs..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_cmd</name> <init>= <expr><call><name>fopen</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cmd</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_res</name> <init>= <expr><call><name>fopen</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_res</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">" done\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_overlay_image</name> <init>= <expr><call><name>GenImage</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_overlay_text</name> <init>= <expr><call><name>GenImage</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DataSharedMem</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_image</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><name>HEIGHT</name></expr></argument>, <argument><expr><literal type="string">"RGBA"</literal></expr></argument>,

<argument><expr><name>i_shmRGBA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DataSharedMem</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_text</name></expr></argument>, <argument><expr><name>TEXTSIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>,

<argument><expr><name>i_shmText</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BasicTest</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BasicTest</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextTest</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteImage</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteImage</name><argument_list>( <argument><expr><name>p_cmd</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument>, <argument><expr><name>i_overlay_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
