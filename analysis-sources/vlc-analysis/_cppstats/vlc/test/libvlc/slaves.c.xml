<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\libvlc\slaves.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVES_DIR</name></cpp:macro> <cpp:value>SRCDIR "/samples/slaves"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>finished_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type><name>p_ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_ev</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>p_sem</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><name>p_sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>media_parse_sync</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>p_em</name> <init>= <expr><call><name>libvlc_media_event_manager</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>p_em</name></expr></argument>, <argument><expr><name>libvlc_MediaParsedChanged</name></expr></argument>, <argument><expr><name>finished_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>libvlc_media_parse_with_options</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>, <argument><expr><name>libvlc_media_parse_local</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><name>p_em</name></expr></argument>, <argument><expr><name>libvlc_MediaParsedChanged</name></expr></argument>, <argument><expr><name>finished_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>path_to_mrl</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_m</name> <init>= <expr><call><name>libvlc_media_new_path</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><call><name>libvlc_media_get_mrl</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_mrl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_expected_slaves</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_m</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier></type><name>p_expected_slaves</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_expected_slaves</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Check if slaves are correclty attached to media\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_slave_count</name> <init>= <expr><call><name>libvlc_media_slaves_get</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_slaves</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_expected_slaves</name> <operator>==</operator> <name>i_slave_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_found_slaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_found_list</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>i_expected_slaves</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_found_list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_slave_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier></type><name>p_slave1</name> <init>= <expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_expected_slaves</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier></type><name>p_slave2</name> <init>= <expr><operator>&amp;</operator><name><name>p_expected_slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_slave1</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name><name>p_slave2</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_found_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_slave1</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name><name>p_slave2</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_slave1</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>==</operator> <name><name>p_slave2</name><operator>-&gt;</operator><name>i_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_found_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_found_slaves</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_expected_slaves</name> <operator>==</operator> <name>i_found_slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_expected_slaves</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Check if slaves[%d] is found\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_found_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_found_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_slaves_release</name><argument_list>(<argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>i_slave_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_media_has_slaves_from_parent</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_main_media</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier></type><name>p_expected_slaves</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_expected_slaves</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_m</name> <init>= <expr><call><name>libvlc_media_new_path</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_m</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Parse media dir to get subitems\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_parse_sync</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_main_media_mrl</name> <init>= <expr><call><name>path_to_mrl</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>psz_main_media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_main_media_mrl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Main media mrl: '%s'\n"</literal></expr></argument>, <argument><expr><name>psz_main_media_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Fetch main media from subitems\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>p_ml</name> <init>= <expr><call><name>libvlc_media_subitems</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>(<argument><expr><name>p_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name>p_ml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_subm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_subm</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name><argument_list>(<argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_subm</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><call><name>libvlc_media_get_mrl</name><argument_list>(<argument><expr><name>p_subm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_mrl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_main_media_mrl</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Found main media\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_subm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_subm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_main_media_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>(<argument><expr><name>p_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_subm</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_expected_slaves</name><argument_list>(<argument><expr><name>p_subm</name></expr></argument>, <argument><expr><name>p_expected_slaves</name></expr></argument>, <argument><expr><name>i_expected_slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_subm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pp_slave_paths</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SLAVES_DIR</name> <literal type="string">"/test.aac"</literal></expr>,

<expr><name>SLAVES_DIR</name> <literal type="string">"/test.rt.srt"</literal></expr>,

<expr><name>SLAVES_DIR</name> <literal type="string">"/lt-test.srt"</literal></expr>,

<expr><name>SLAVES_DIR</name> <literal type="string">"/nomatch.srt"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name></type> <name><name>p_expected_slaves</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>libvlc_media_slave_type_audio</name></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>libvlc_media_slave_type_subtitle</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>libvlc_media_slave_type_subtitle</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>libvlc_media_slave_type_subtitle</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_slave_paths</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_expected_slaves</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"pp_slave_paths and p_expected_slaves mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pp_args</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"-v"</literal></expr>, <expr><literal type="string">"--sub-autodetect-fuzzy"</literal></expr>, <expr><literal type="string">"1"</literal></expr>,

<expr><literal type="string">"--no-video"</literal></expr>, <expr><literal type="string">"--no-audio"</literal></expr>,

<expr><literal type="string">"--codec"</literal></expr>, <expr><literal type="string">"none"</literal></expr>, 

<expr><name>NULL</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_expected_slaves</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_expected_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_uri</name> <operator>=</operator> <call><name>path_to_mrl</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name><name>pp_slave_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_expected_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing --sub-autodetect-fuzzy 1 (everything) ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/test.mp4"</literal></expr></argument>,

<argument><expr><name>p_expected_slaves</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_expected_slaves</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing --sub-autodetect-fuzzy 2 (full, left, and right match) ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"2"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/test.mp4"</literal></expr></argument>,

<argument><expr><name>p_expected_slaves</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing if the matching is not too permissive ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/t.mp4"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing --sub-autodetect-fuzzy 3 (full and left match) ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"3"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/test.mp4"</literal></expr></argument>,

<argument><expr><name>p_expected_slaves</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing --sub-autodetect-fuzzy 4 (full match) ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"4"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/test.mp4"</literal></expr></argument>,

<argument><expr><name>p_expected_slaves</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"== Testing --no-sub-autodetect-file (no match) ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_args</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--no-sub-autodetect-file"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pp_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_has_slaves_from_parent</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>SLAVES_DIR</name> <literal type="string">"/test.mp4"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_expected_slaves</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_expected_slaves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
