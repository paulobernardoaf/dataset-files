<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\libvlc\renderer_discoverer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>item_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"item %s: name: '%s', type: '%s', flags: 0x%X\n"</literal></expr></argument>, <argument><expr><name>psz_event</name></expr></argument>,

<argument><expr><call><name>libvlc_renderer_item_name</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>libvlc_renderer_item_type</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>libvlc_renderer_item_flags</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>renderer_discoverer_item_added</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>p_ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_event</name><argument_list>(<argument><expr><name><name>p_ev</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>renderer_discoverer_item_added</name><operator>.</operator><name>item</name></name></expr></argument>, <argument><expr><literal type="string">"added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>renderer_discoverer_item_deleted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>p_ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_event</name><argument_list>(<argument><expr><name><name>p_ev</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>renderer_discoverer_item_deleted</name><operator>.</operator><name>item</name></name></expr></argument>, <argument><expr><literal type="string">"deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_discoverer</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"creating and starting discoverer %s\n"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>=

<expr><call><name>libvlc_renderer_discoverer_new</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>p_evm</name> <init>= <expr><call><name>libvlc_renderer_discoverer_event_manager</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_evm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>p_evm</name></expr></argument>, <argument><expr><name>libvlc_RendererDiscovererItemAdded</name></expr></argument>,

<argument><expr><name>renderer_discoverer_item_added</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>p_evm</name></expr></argument>, <argument><expr><name>libvlc_RendererDiscovererItemDeleted</name></expr></argument>,

<argument><expr><name>renderer_discoverer_item_deleted</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libvlc_renderer_discoverer_start</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"warn: could not start md (not critical)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"Press any keys to stop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_renderer_discoverer_stop</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>libvlc_renderer_discoverer_release</name><argument_list>(<argument><expr><name>p_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_test_name</name> <init>= <expr><ternary><condition><expr><name>i_argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><name>test_defaults_nargs</name></expr></argument>,

<argument><expr><name>test_defaults_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_test_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_discoverer</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><name>psz_test_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"== getting the list of renderer_discoverer ==\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_count</name> <init>=

<expr><call><name>libvlc_renderer_discoverer_list_get</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_services</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"warn: no discoverers (not critical)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pp_services</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier></type><name>p_service</name> <init>= <expr><name><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"= discoverer: name: '%s', longname: '%s' =\n"</literal></expr></argument>,

<argument><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>libvlc_renderer_discoverer_list_release</name><argument_list>(<argument><expr><name>pp_services</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
