<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\libvlc\core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_core</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing core\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_retain</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_moduledescriptionlist</name> <parameter_list>(<parameter><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>module</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_shortname</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_longname</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_help</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>module</name><operator>-&gt;</operator><name>psz_help</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while> 

<expr_stmt><expr><call><name>libvlc_module_description_list_release</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_audiovideofilterlists</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing libvlc_(audio|video)_filter_list_get()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_moduledescriptionlist</name> <argument_list>(<argument><expr><call><name>libvlc_audio_filter_list_get</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_moduledescriptionlist</name> <argument_list>(<argument><expr><call><name>libvlc_video_filter_list_get</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_audio_output</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>libvlc_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>mods</name> <init>= <expr><call><name>libvlc_audio_output_list_get</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mods</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"Audio outputs:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>mods</name></expr></init></decl>;</init> <condition><expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>devs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>devs</name> <operator>=</operator> <call><name>libvlc_audio_output_device_list_get</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>devs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>devs</name></expr></init></decl>;</init>

<condition><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>psz_device</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>libvlc_audio_output_device_list_release</name> <argument_list>(<argument><expr><name>devs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>libvlc_audio_output_list_release</name> <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_core</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_audiovideofilterlists</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_audio_output</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
