<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\libvlc\media_list.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>md1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>md2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>md3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>md4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media_list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md1</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md2</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md3</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_count</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_index_of_item</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_index_of_item</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_remove_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_index_of_item</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_count</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_insert_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_count</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>libvlc_media_list_index_of_item</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md3</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name> <operator>==</operator> <name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name> <operator>==</operator> <name>md3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_remove_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_remove_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_remove_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_non_exist</name> <init>=

<expr><call><name>libvlc_media_list_item_at_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_non_exist</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_non_exist</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_non_exist</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_non_exist</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_non_exist</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md4</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md4</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_non_exist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_non_exist</name> <operator>=</operator> <call><name>libvlc_media_list_index_of_item</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>i_non_exist</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
