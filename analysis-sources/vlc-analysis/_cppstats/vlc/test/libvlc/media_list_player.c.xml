<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\test\libvlc\media_list_player.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_additions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/media_internal.h"</cpp:file></cpp:include>

<struct>struct <name>check_items_order_data</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>done_playing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name><name>items</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>check_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>check_items_order_data</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>done_playing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>queue_expected_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>check_items_order_data</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>check</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>wait_queued_items</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>check_items_order_data</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>done_playing</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>wait_playing</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>libvlc_media_list_player_is_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>wait_stopped</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>libvlc_media_list_player_is_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>stop_and_wait</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_list_player_stop_async</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_stopped</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_items_order_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type> <name>p_event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>check_items_order_data</name></name> <modifier>*</modifier></type><name>checks</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>p_event</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>media_list_player_next_item_set</name><operator>.</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>checks</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>checks</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>!=</operator> <name>md</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>libvlc_media_get_meta</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>libvlc_meta_Title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Got items %s\n"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>checks</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>==</operator> <name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>libvlc_media_get_meta</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>libvlc_meta_Title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Item %d '%s' was correctly queued\n"</literal></expr></argument>, <argument><expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>(</operator><name><name>checks</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Done playing with success\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>checks</name><operator>-&gt;</operator><name>done_playing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>checks</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_items_queue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player item queue-ing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>check_items_order_data</name></name></type> <name>check</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>libvlc_media_new_as_node</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>subitems</name> <init>= <expr><call><name>libvlc_media_subitems</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>subitems</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>subitems</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>queue_expected_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>, <argument><expr><call><name>media_list_add_file_path</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>subitems</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>subitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type> <name>em</name> <init>= <expr><call><name>libvlc_media_list_player_event_manager</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaListPlayerNextItemSet</name></expr></argument>,

<argument><expr><name>check_items_order_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>check</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_queued_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_previous</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player previous()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_previous</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_pause</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_previous</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_previous</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player next()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_next</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_pause</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_next</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_next</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_pause_stop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing play and pause of %s using the media list.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name><argument_list>( <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name><argument_list>( <argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name><argument_list>( <argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_pause</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_play_item_at_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing play_item_at_index of %s using the media list.\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name><argument_list>( <argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name><argument_list>( <argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item_at_index</name><argument_list>( <argument><expr><name>mlp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_list_player_playback_options</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>ml6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player playback options()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md2</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md3</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md4</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md5</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml2</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml3</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml3</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml4</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml4</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml5</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml5</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ml6</name> <operator>=</operator> <call><name>libvlc_media_list_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ml6</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml2</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml2</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>md4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml3</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml4</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml4</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml4</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml5</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml6</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>media_list_add_file_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>ml6</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>ml2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md2</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>ml3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md3</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>ml4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md4</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>ml5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md5</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>ml6</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_add_media</name> <argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>md3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlp</name> <operator>=</operator> <call><name>libvlc_media_list_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_media_list</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_playback_mode</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>libvlc_playback_mode_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_stop_async</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>libvlc_media_list_player_is_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player playback option - Loop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_playback_mode</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>libvlc_playback_mode_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media player playback option - Repeat\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_set_playback_mode</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>libvlc_playback_mode_repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_play_item</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_playing</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_and_wait</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_player_release</name> <argument_list>(<argument><expr><name>mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_pause_stop</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_play_item_at_index</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_previous</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_next</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_items_queue</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_list_player_playback_options</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
