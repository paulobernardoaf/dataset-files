<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\media.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_list.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_thumbnailer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/libvlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_list_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"picture_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_meta_type_t</name></type> <name><name>libvlc_to_vlc_meta</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>libvlc_meta_Title</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Title</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Artist</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Artist</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Genre</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Genre</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Copyright</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Copyright</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Album</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Album</name></expr>,

<expr><index>[<expr><name>libvlc_meta_TrackNumber</name></expr>]</index> <operator>=</operator> <name>vlc_meta_TrackNumber</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Description</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Description</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Rating</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Rating</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Date</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Date</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Setting</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Setting</name></expr>,

<expr><index>[<expr><name>libvlc_meta_URL</name></expr>]</index> <operator>=</operator> <name>vlc_meta_URL</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Language</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Language</name></expr>,

<expr><index>[<expr><name>libvlc_meta_NowPlaying</name></expr>]</index> <operator>=</operator> <name>vlc_meta_NowPlaying</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Publisher</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Publisher</name></expr>,

<expr><index>[<expr><name>libvlc_meta_EncodedBy</name></expr>]</index> <operator>=</operator> <name>vlc_meta_EncodedBy</name></expr>,

<expr><index>[<expr><name>libvlc_meta_ArtworkURL</name></expr>]</index> <operator>=</operator> <name>vlc_meta_ArtworkURL</name></expr>,

<expr><index>[<expr><name>libvlc_meta_TrackID</name></expr>]</index> <operator>=</operator> <name>vlc_meta_TrackID</name></expr>,

<expr><index>[<expr><name>libvlc_meta_TrackTotal</name></expr>]</index> <operator>=</operator> <name>vlc_meta_TrackTotal</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Director</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Director</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Season</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Season</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Episode</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Episode</name></expr>,

<expr><index>[<expr><name>libvlc_meta_ShowName</name></expr>]</index> <operator>=</operator> <name>vlc_meta_ShowName</name></expr>,

<expr><index>[<expr><name>libvlc_meta_Actors</name></expr>]</index> <operator>=</operator> <name>vlc_meta_Actors</name></expr>,

<expr><index>[<expr><name>libvlc_meta_AlbumArtist</name></expr>]</index> <operator>=</operator> <name>vlc_meta_AlbumArtist</name></expr>,

<expr><index>[<expr><name>libvlc_meta_DiscNumber</name></expr>]</index> <operator>=</operator> <name>vlc_meta_DiscNumber</name></expr>,

<expr><index>[<expr><name>libvlc_meta_DiscTotal</name></expr>]</index> <operator>=</operator> <name>vlc_meta_DiscTotal</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>libvlc_meta_t</name></type> <name><name>vlc_to_libvlc_meta</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>vlc_meta_Title</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Title</name></expr>,

<expr><index>[<expr><name>vlc_meta_Artist</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Artist</name></expr>,

<expr><index>[<expr><name>vlc_meta_Genre</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Genre</name></expr>,

<expr><index>[<expr><name>vlc_meta_Copyright</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Copyright</name></expr>,

<expr><index>[<expr><name>vlc_meta_Album</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Album</name></expr>,

<expr><index>[<expr><name>vlc_meta_TrackNumber</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_TrackNumber</name></expr>,

<expr><index>[<expr><name>vlc_meta_Description</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Description</name></expr>,

<expr><index>[<expr><name>vlc_meta_Rating</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Rating</name></expr>,

<expr><index>[<expr><name>vlc_meta_Date</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Date</name></expr>,

<expr><index>[<expr><name>vlc_meta_Setting</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Setting</name></expr>,

<expr><index>[<expr><name>vlc_meta_URL</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_URL</name></expr>,

<expr><index>[<expr><name>vlc_meta_Language</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Language</name></expr>,

<expr><index>[<expr><name>vlc_meta_NowPlaying</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_NowPlaying</name></expr>,

<expr><index>[<expr><name>vlc_meta_ESNowPlaying</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_NowPlaying</name></expr>,

<expr><index>[<expr><name>vlc_meta_Publisher</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Publisher</name></expr>,

<expr><index>[<expr><name>vlc_meta_EncodedBy</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_EncodedBy</name></expr>,

<expr><index>[<expr><name>vlc_meta_ArtworkURL</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_ArtworkURL</name></expr>,

<expr><index>[<expr><name>vlc_meta_TrackID</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_TrackID</name></expr>,

<expr><index>[<expr><name>vlc_meta_TrackTotal</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_TrackTotal</name></expr>,

<expr><index>[<expr><name>vlc_meta_Director</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Director</name></expr>,

<expr><index>[<expr><name>vlc_meta_Season</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Season</name></expr>,

<expr><index>[<expr><name>vlc_meta_Episode</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Episode</name></expr>,

<expr><index>[<expr><name>vlc_meta_ShowName</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_ShowName</name></expr>,

<expr><index>[<expr><name>vlc_meta_Actors</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_Actors</name></expr>,

<expr><index>[<expr><name>vlc_meta_AlbumArtist</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_AlbumArtist</name></expr>,

<expr><index>[<expr><name>vlc_meta_DiscNumber</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_DiscNumber</name></expr>,

<expr><index>[<expr><name>vlc_meta_DiscTotal</name></expr>]</index> <operator>=</operator> <name>libvlc_meta_DiscTotal</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(

<argument><expr><name>ORIENT_TOP_LEFT</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_top_left</name> <operator>&amp;&amp;</operator>

<name>ORIENT_TOP_RIGHT</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_top_right</name> <operator>&amp;&amp;</operator>

<name>ORIENT_BOTTOM_LEFT</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_bottom_left</name> <operator>&amp;&amp;</operator>

<name>ORIENT_BOTTOM_RIGHT</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_bottom_right</name> <operator>&amp;&amp;</operator>

<name>ORIENT_LEFT_TOP</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_left_top</name> <operator>&amp;&amp;</operator>

<name>ORIENT_LEFT_BOTTOM</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_left_bottom</name> <operator>&amp;&amp;</operator>

<name>ORIENT_RIGHT_TOP</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_right_top</name> <operator>&amp;&amp;</operator>

<name>ORIENT_RIGHT_BOTTOM</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_orient_right_bottom</name></expr></argument>,

<argument><expr><literal type="string">"Mismatch between libvlc_video_orient_t and video_orientation_t"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(

<argument><expr><name>PROJECTION_MODE_RECTANGULAR</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_projection_rectangular</name> <operator>&amp;&amp;</operator>

<name>PROJECTION_MODE_EQUIRECTANGULAR</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_projection_equirectangular</name> <operator>&amp;&amp;</operator>

<name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_projection_cubemap_layout_standard</name></expr></argument>,

<argument><expr><literal type="string">"Mismatch between libvlc_video_projection_t and video_projection_mode_t"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(

<argument><expr><name>MULTIVIEW_2D</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_2d</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_SBS</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_sbs</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_TB</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_tb</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_ROW</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_row</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_COL</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_col</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_FRAME</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_frame</name> <operator>&amp;&amp;</operator>

<name>MULTIVIEW_STEREO_CHECKERBOARD</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>libvlc_video_multiview_stereo_checkerboard</name></expr></argument>,

<argument><expr><literal type="string">"Mismatch between libvlc_video_multiview_t and video_multiview_mode_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>media_get_subitems</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_create</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>p_subitems</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>subitems_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b_create</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <call><name>libvlc_media_list_new</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name><operator>-&gt;</operator><name>p_internal_md</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_subitems</name> <operator>=</operator> <name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>subitems_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_subitems</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>input_item_add_subitem</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>p_subitems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_md_child</name> <operator>=</operator> <call><name>libvlc_media_new_from_input_item</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument>,

<argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_subitems</name> <operator>=</operator> <call><name>media_get_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subitems</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_internal_add_media</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><name>p_md_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaSubItemAdded</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_subitem_added</name><operator>.</operator><name>new_child</name></name> <operator>=</operator> <name>p_md_child</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_md_child</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_add_subnode</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md_child</name> <init>= <expr><call><name>input_item_add_subitem</name><argument_list>( <argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>md_child</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_add_subnode</name><argument_list>( <argument><expr><name>md_child</name></expr></argument>, <argument><expr><name>child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>md_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_subtree_added</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_add_subtree</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_add_subtree</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_add_subnode</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaSubItemTreeAdded</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_subitemtree_added</name><operator>.</operator><name>item</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_meta_changed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaMetaChanged</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_meta_changed</name><operator>.</operator><name>meta_type</name></name> <operator>=</operator>

<name><name>vlc_to_libvlc_meta</name><index>[<expr><name><name>p_event</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input_item_meta_changed</name><operator>.</operator><name>meta_type</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_duration_changed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaDurationChanged</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_duration_changed</name><operator>.</operator><name>new_duration</name></name> <operator>=</operator>

<call><name>from_mtime</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input_item_duration_changed</name><operator>.</operator><name>new_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_parsed_changed</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_parsed_status_t</name></type> <name>new_status</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>parsed_status</name></name> <operator>==</operator> <name>new_status</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_md</name><operator>-&gt;</operator><name>is_parsed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>is_parsed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>parsed_status</name></name> <operator>=</operator> <name>new_status</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>parsed_status</name></name> <operator>!=</operator> <name>libvlc_media_parsed_status_done</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>has_asked_preparse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>new_status</name> <operator>==</operator> <name>libvlc_media_parsed_status_done</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>p_subitems</name> <init>= <expr><call><name>media_get_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subitems</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_internal_end_reached</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaParsedChanged</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_parsed_changed</name><operator>.</operator><name>new_status</name></name> <operator>=</operator> <name>new_status</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_preparse_ended</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>input_item_preparse_status</name></name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_parsed_status_t</name></type> <name>new_status</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>status</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ITEM_PREPARSE_SKIPPED</name></expr>:</case>

<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>libvlc_media_parsed_status_skipped</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ITEM_PREPARSE_FAILED</name></expr>:</case>

<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>libvlc_media_parsed_status_failed</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ITEM_PREPARSE_TIMEOUT</name></expr>:</case>

<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>libvlc_media_parsed_status_timeout</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ITEM_PREPARSE_DONE</name></expr>:</case>

<expr_stmt><expr><name>new_status</name> <operator>=</operator> <name>libvlc_media_parsed_status_done</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>send_parsed_changed</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>new_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>install_input_item_observer</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_event_attach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemMetaChanged</name></expr></argument>,

<argument><expr><name>input_item_meta_changed</name></expr></argument>,

<argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_event_attach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemDurationChanged</name></expr></argument>,

<argument><expr><name>input_item_duration_changed</name></expr></argument>,

<argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uninstall_input_item_observer</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_event_detach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemMetaChanged</name></expr></argument>,

<argument><expr><name>input_item_meta_changed</name></expr></argument>,

<argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_event_detach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemDurationChanged</name></expr></argument>,

<argument><expr><name>input_item_duration_changed</name></expr></argument>,

<argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>libvlc_media_new_from_input_item</name><parameter_list>(

<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_input_item</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"No input item given"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_media_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_md</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name> <operator>=</operator> <name>p_instance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <name>p_input_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>subitems_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>libvlc_NothingSpecial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_manager_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_input_item_observer</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_retain</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_md</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_location</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_input_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_input_item</name> <operator>=</operator> <call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_input_item</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>libvlc_media_new_from_input_item</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_md</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_path</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mrl</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>libvlc_media_new_location</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_fd</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>mrl</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>mrl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fd://%d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>libvlc_media_new_location</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_callbacks</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_open_cb</name></type> <name>open_cb</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_read_cb</name></type> <name>read_cb</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_seek_cb</name></type> <name>seek_cb</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_close_cb</name></type> <name>close_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>libvlc_media_new_location</name><argument_list>(<argument><expr><name>p_instance</name></expr></argument>, <argument><expr><literal type="string">"imem://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>m</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>read_cb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOpaque</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><literal type="string">"imem-data"</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOpaque</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><literal type="string">"imem-open"</literal></expr></argument>, <argument><expr><name>open_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOpaque</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><literal type="string">"imem-read"</literal></expr></argument>, <argument><expr><name>read_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOpaque</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><literal type="string">"imem-seek"</literal></expr></argument>, <argument><expr><name>seek_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOpaque</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><literal type="string">"imem-close"</literal></expr></argument>, <argument><expr><name>close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>libvlc_media_new_as_node</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_input_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_subitems</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_input_item</name> <operator>=</operator> <call><name>input_item_New</name><argument_list>( <argument><expr><name>INPUT_ITEM_URI_NOP</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_input_item</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>libvlc_media_new_from_input_item</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_subitems</name> <operator>=</operator> <call><name>media_get_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subitems</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_md</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_add_option</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_option</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_add_option_flag</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>psz_option</name></expr></argument>,

<argument><expr><name>VLC_INPUT_OPTION_UNIQUE</name><operator>|</operator><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_add_option_flag</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ppsz_option</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><name>ppsz_option</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_md</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>uninstall_input_item_observer</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_MetadataCancel</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_subitems</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaFreed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_freed</name><operator>.</operator><name>md</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_manager_destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type>

<name>libvlc_media_duplicate</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md_orig</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>libvlc_media_new_from_input_item</name><argument_list>(

<argument><expr><name><name>p_md_orig</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument>, <argument><expr><name><name>p_md_orig</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>libvlc_media_get_mrl</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>input_item_GetURI</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>libvlc_media_get_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>, <parameter><decl><type><name>libvlc_meta_t</name></type> <name>e_meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>e_meta</name> <operator>==</operator> <name>libvlc_meta_NowPlaying</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_meta</name> <operator>=</operator> <call><name>input_item_GetNowPlayingFb</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_meta</name> <operator>=</operator> <call><name>input_item_GetMeta</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>,

<argument><expr><name><name>libvlc_to_vlc_meta</name><index>[<expr><name>e_meta</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_meta</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>e_meta</name> <operator>==</operator> <name>libvlc_meta_Title</name>

<operator>&amp;&amp;</operator> <name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_meta</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>psz_meta</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_set_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>, <parameter><decl><type><name>libvlc_meta_t</name></type> <name>e_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetMeta</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><name><name>libvlc_to_vlc_meta</name><index>[<expr><name>e_meta</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_save_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>input_item_WriteMeta</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_state_t</name></type>

<name>libvlc_media_get_state</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_md</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_media_set_state</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>libvlc_state_t</name></type> <name>state</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaStateChanged</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_state_changed</name><operator>.</operator><name>new_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type>

<name>libvlc_media_subitems</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type><name>p_subitems</name> <init>= <expr><call><name>media_get_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subitems</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_retain</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_subitems</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_media_get_stats</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_stats_t</name> <modifier>*</modifier></type><name>p_stats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_stats_t</name> <modifier>*</modifier></type><name>p_itm_stats</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>p_stats</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_itm_stats</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_read_bytes</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_read_bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>f_input_bitrate</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>f_input_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_demux_read_bytes</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_demux_read_bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>f_demux_bitrate</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>f_demux_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_demux_corrupted</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_demux_corrupted</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_demux_discontinuity</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_demux_discontinuity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_video</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_decoded_video</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_audio</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_decoded_audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_lost_pictures</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_lost_pictures</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_played_abuffers</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_played_abuffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_lost_abuffers</name></name> <operator>=</operator> <name><name>p_itm_stats</name><operator>-&gt;</operator><name>i_lost_abuffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type>

<name>libvlc_media_event_manager</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type>

<name>libvlc_media_get_duration</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"No input item"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>input_item_IsPreparsed</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>from_mtime</name><argument_list>(<argument><expr><call><name>input_item_GetDuration</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>input_preparser_callbacks_t</name></type> <name>input_preparser_callbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>on_preparse_ended</name> <operator>=</operator> <name>input_item_preparse_ended</name></expr>,

<expr><operator>.</operator><name>on_subtree_added</name> <operator>=</operator> <name>input_item_subtree_added</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>media_parse</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_async</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_parse_flag_t</name></type> <name>parse_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>needed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needed</name> <operator>=</operator> <operator>!</operator><name><name>media</name><operator>-&gt;</operator><name>has_asked_preparse</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>has_asked_preparse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>is_parsed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>media</name><operator>-&gt;</operator><name>parsed_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc</name> <init>= <expr><name><name>media</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>media</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_meta_request_option_t</name></type> <name>parse_scope</name> <init>= <expr><name>META_REQUEST_OPTION_SCOPE_LOCAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_flag</name> <operator>&amp;</operator> <name>libvlc_media_parse_network</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parse_scope</name> <operator>|=</operator> <name>META_REQUEST_OPTION_SCOPE_NETWORK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_flag</name> <operator>&amp;</operator> <name>libvlc_media_fetch_local</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parse_scope</name> <operator>|=</operator> <name>META_REQUEST_OPTION_FETCH_LOCAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_flag</name> <operator>&amp;</operator> <name>libvlc_media_fetch_network</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parse_scope</name> <operator>|=</operator> <name>META_REQUEST_OPTION_FETCH_NETWORK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_flag</name> <operator>&amp;</operator> <name>libvlc_media_do_interact</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parse_scope</name> <operator>|=</operator> <name>META_REQUEST_OPTION_DO_INTERACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_MetadataRequest</name><argument_list>(<argument><expr><name>libvlc</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>parse_scope</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input_preparser_callbacks</name></expr></argument>, <argument><expr><name>media</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_async</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>media</name><operator>-&gt;</operator><name>is_parsed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_media_parse</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>media_parse</name><argument_list>( <argument><expr><name>media</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>libvlc_media_fetch_local</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_media_parse_async</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>media_parse</name><argument_list>( <argument><expr><name>media</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>libvlc_media_fetch_local</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_media_parse_with_options</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_parse_flag_t</name></type> <name>parse_flag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>media_parse</name><argument_list>( <argument><expr><name>media</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>parse_flag</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_media_parse_stop</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_MetadataCancel</name><argument_list>( <argument><expr><name><name>media</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_media_is_parsed</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>parsed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parsed</name> <operator>=</operator> <name><name>media</name><operator>-&gt;</operator><name>is_parsed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>parsed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_parsed_status_t</name></type>

<name>libvlc_media_get_parsed_status</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_parsed_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>media</name><operator>-&gt;</operator><name>parsed_status</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>media</name><operator>-&gt;</operator><name>parsed_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_media_set_user_data</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_new_user_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_user_data</name></name> <operator>=</operator> <name>p_new_user_data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>libvlc_media_get_user_data</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_user_data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type>

<name>libvlc_media_tracks_get</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>pp_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_es</name> <init>= <expr><name><name>p_input_item</name><operator>-&gt;</operator><name>i_es</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_es</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_es</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pp_es</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_es</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_es</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier></type><name>p_mes</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_mes</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_mes</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_mes</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_mes</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_mes</name><operator>-&gt;</operator><name>subtitle</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_mes</name> <operator>||</operator> <operator>!</operator><name><name>p_mes</name><operator>-&gt;</operator><name>audio</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_tracks_release</name><argument_list>( <argument><expr><operator>*</operator><name>pp_es</name></expr></argument>, <argument><expr><name>i_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp_es</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>p_mes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_input_item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p_es</name><operator>-&gt;</operator><name>i_cat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>UNKNOWN_ES</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_track_unknown</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_track_video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_frame_rate_num</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_frame_rate_den</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>&gt;=</operator> <name>ORIENT_TOP_LEFT</name> <operator>&amp;&amp;</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>&lt;=</operator> <name>ORIENT_RIGHT_BOTTOM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_orientation</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>&gt;=</operator> <name>PROJECTION_MODE_RECTANGULAR</name> <operator>&amp;&amp;</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>&lt;=</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>==</operator> <name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_projection</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>projection_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>pose</name><operator>.</operator><name>f_yaw</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>yaw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>pose</name><operator>.</operator><name>f_pitch</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>pose</name><operator>.</operator><name>f_roll</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>roll</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>pose</name><operator>.</operator><name>f_field_of_view</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>fov</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>&gt;=</operator> <name>MULTIVIEW_2D</name> <operator>&amp;&amp;</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>&lt;=</operator> <name>MULTIVIEW_STEREO_CHECKERBOARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_multiview</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_track_audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>audio</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_track_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mes</name><operator>-&gt;</operator><name>subtitle</name><operator>-&gt;</operator><name>psz_encoding</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_es</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>

<expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>libvlc_media_get_codec_description</name><parameter_list>( <parameter><decl><type><name>libvlc_track_type_t</name></type> <name>i_type</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>libvlc_track_audio</name></expr>:</case>

<return>return <expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>libvlc_track_video</name></expr>:</case>

<return>return <expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>libvlc_track_text</name></expr>:</case>

<return>return <expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>libvlc_track_unknown</name></expr>:</case>

<default>default:</default>

<return>return <expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_tracks_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_tracks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>libvlc_track_audio</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>libvlc_track_video</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>libvlc_track_text</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>subtitle</name><operator>-&gt;</operator><name>psz_encoding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>libvlc_track_unknown</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_tracks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_media_type_t</name></type> <name>libvlc_media_get_type</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ITEM_TYPE_FILE</name></expr>:</case>

<return>return <expr><name>libvlc_media_type_file</name></expr>;</return>

<case>case <expr><name>ITEM_TYPE_NODE</name></expr>:</case>

<case>case <expr><name>ITEM_TYPE_DIRECTORY</name></expr>:</case>

<return>return <expr><name>libvlc_media_type_directory</name></expr>;</return>

<case>case <expr><name>ITEM_TYPE_DISC</name></expr>:</case>

<return>return <expr><name>libvlc_media_type_disc</name></expr>;</return>

<case>case <expr><name>ITEM_TYPE_STREAM</name></expr>:</case>

<return>return <expr><name>libvlc_media_type_stream</name></expr>;</return>

<case>case <expr><name>ITEM_TYPE_PLAYLIST</name></expr>:</case>

<return>return <expr><name>libvlc_media_type_playlist</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>libvlc_media_type_unknown</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct>struct <name>libvlc_media_thumbnail_request_t</name>

<block>{

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>crop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_picture_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thumbnailer_request_t</name><modifier>*</modifier></type> <name>req</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>media_on_thumbnail_ready</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>thumbnail</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>md</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaThumbnailGenerated</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>thumbnail</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>libvlc_picture_new</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>thumbnail</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>crop</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_thumbnail_generated</name><operator>.</operator><name>p_thumbnail</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_media</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_picture_release</name><argument_list>( <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_media_thumbnail_request_t</name><modifier>*</modifier></type>

<name>libvlc_media_thumbnail_request_by_time</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>libvlc_time_t</name></type> <name>time</name></decl></parameter>,

<parameter><decl><type><name>libvlc_thumbnailer_seek_speed_t</name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter>, <parameter><decl><type><name>libvlc_picture_type_t</name></type> <name>picture_type</name></decl></parameter>,

<parameter><decl><type><name>libvlc_time_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>req</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>req</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>picture_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>crop</name></name> <operator>=</operator> <name>crop</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_retain</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <call><name>vlc_thumbnailer_RequestByTime</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>time</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>speed</name> <operator>==</operator> <name>libvlc_media_thumbnail_seek_fast</name></expr> ?</condition><then>

<expr><name>VLC_THUMBNAILER_SEEK_FAST</name></expr> </then><else>: <expr><name>VLC_THUMBNAILER_SEEK_PRECISE</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr></argument>,

<argument><expr><name>media_on_thumbnail_ready</name></expr></argument>, <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>req</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_media_thumbnail_request_t</name><modifier>*</modifier></type>

<name>libvlc_media_thumbnail_request_by_pos</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>libvlc_thumbnailer_seek_speed_t</name></type> <name>speed</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter>, <parameter><decl><type><name>libvlc_picture_type_t</name></type> <name>picture_type</name></decl></parameter>,

<parameter><decl><type><name>libvlc_time_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>req</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>req</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>crop</name></name> <operator>=</operator> <name>crop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>picture_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_retain</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <call><name>vlc_thumbnailer_RequestByPos</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>speed</name> <operator>==</operator> <name>libvlc_media_thumbnail_seek_fast</name></expr> ?</condition><then>

<expr><name>VLC_THUMBNAILER_SEEK_FAST</name></expr> </then><else>: <expr><name>VLC_THUMBNAILER_SEEK_PRECISE</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr></argument>,

<argument><expr><name>media_on_thumbnail_ready</name></expr></argument>, <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>req</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_thumbnail_request_cancel</name><parameter_list>( <parameter><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_priv_t</name> <modifier>*</modifier></type><name>p_priv</name> <init>= <expr><call><name>libvlc_priv</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>md</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_thumbnailer_Cancel</name><argument_list>( <argument><expr><name><name>p_priv</name><operator>-&gt;</operator><name>p_thumbnailer</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_thumbnail_request_destroy</name><parameter_list>( <parameter><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name><name>req</name><operator>-&gt;</operator><name>md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>req</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_slaves_add</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_slave_type_t</name></type> <name>i_type</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_priority</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name> <operator>&amp;&amp;</operator> <name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_input_slave_type</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>libvlc_media_slave_type_subtitle</name></expr>:</case>

<expr_stmt><expr><name>i_input_slave_type</name> <operator>=</operator> <name>SLAVE_TYPE_SPU</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>libvlc_media_slave_type_audio</name></expr>:</case>

<expr_stmt><expr><name>i_input_slave_type</name> <operator>=</operator> <name>SLAVE_TYPE_AUDIO</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>enum</name> <name>slave_priority</name></name></type> <name>i_input_slave_priority</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_priority</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>i_input_slave_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>i_input_slave_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>i_input_slave_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_LEFT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>i_input_slave_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_MATCH_ALL</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>i_input_slave_priority</name> <operator>=</operator> <name>SLAVE_PRIORITY_USER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>= <expr><call><name>input_item_slave_New</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>,

<argument><expr><name>i_input_slave_type</name></expr></argument>,

<argument><expr><name>i_input_slave_priority</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_slave</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>input_item_AddSlave</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument>, <argument><expr><name>p_slave</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_slaves_clear</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_input_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_slave_Delete</name><argument_list>( <argument><expr><name><name>p_input_item</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_input_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></argument>, <argument><expr><name><name>p_input_item</name><operator>-&gt;</operator><name>pp_slaves</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>libvlc_media_slaves_get</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,

<parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_slaves</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_md</name> <operator>&amp;&amp;</operator> <name>ppp_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_slaves</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><name><name>p_input_item</name><operator>-&gt;</operator><name>i_slaves</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_slaves</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_slaves</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type><name>p_item_slave</name> <init>= <expr><name><name>p_input_item</name><operator>-&gt;</operator><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>&gt;=</operator> <name>SLAVE_PRIORITY_MATCH_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier></type><name>p_slave</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_slave</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<call><name>strlen</name><argument_list>( <argument><expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call>

<operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_slave</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_slaves_release</name><argument_list>(<argument><expr><name>pp_slaves</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_slave</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_slave</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name><name>p_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SLAVE_TYPE_SPU</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_media_slave_type_subtitle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>libvlc_media_slave_type_audio</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_item_slave</name><operator>-&gt;</operator><name>i_priority</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SLAVE_PRIORITY_MATCH_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_PRIORITY_MATCH_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_PRIORITY_MATCH_LEFT</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_PRIORITY_MATCH_ALL</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SLAVE_PRIORITY_USER</name></expr>:</case>

<expr_stmt><expr><name><name>p_slave</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p_slave</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_slaves</name> <operator>=</operator> <name>pp_slaves</name></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_slaves_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pp_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pp_slaves</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_slaves</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
