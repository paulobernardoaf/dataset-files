<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\event.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>libvlc_event_listener_t</name>

<block>{

<decl_stmt><decl><type><name>libvlc_event_type_t</name></type> <name>event_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_user_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_callback_t</name></type> <name>pf_callback</name></decl>;</decl_stmt>

}</block></struct></type> <name>libvlc_event_listener_t</name>;</typedef>

<function><type><name>void</name></type> <name>libvlc_event_manager_init</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>em</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init_recursive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_event_manager_destroy</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_event_send</name><parameter_list>( <parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type> <name>p_em</name></decl></parameter>,

<parameter><decl><type><name>libvlc_event_t</name> <modifier>*</modifier></type> <name>p_event</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name><name>p_em</name><operator>-&gt;</operator><name>p_obj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_listener_t</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>

<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>event_type</name></name> <operator>==</operator> <name><name>p_event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>listener</name><operator>-&gt;</operator><name>pf_callback</name></name><argument_list>(<argument><expr><name>p_event</name></expr></argument>, <argument><expr><name><name>listener</name><operator>-&gt;</operator><name>p_user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_event_attach</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name></decl></parameter>, <parameter><decl><type><name>libvlc_event_type_t</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>libvlc_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_listener_t</name> <modifier>*</modifier></type><name>listener</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>listener</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>listener</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>p_user_data</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>pf_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_event_detach</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name></decl></parameter>, <parameter><decl><type><name>libvlc_event_type_t</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>libvlc_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_listener_t</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>

<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>event_type</name></name> <operator>==</operator> <name>type</name>

<operator>&amp;&amp;</operator> <name><name>listener</name><operator>-&gt;</operator><name>pf_callback</name></name> <operator>==</operator> <name>callback</name>

<operator>&amp;&amp;</operator> <name><name>listener</name><operator>-&gt;</operator><name>p_user_data</name></name> <operator>==</operator> <name>opaque</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>listeners</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>em</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
