<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\media_list_path.h"><typedef>typedef <type><name>int</name> <modifier>*</modifier></type> <name>libvlc_media_list_path_t</name>;</typedef> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libvlc_media_list_path_dump</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>path</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL path\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_list_path_t</name></type> <name>libvlc_media_list_path_empty</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_list_path_t</name></type> <name>libvlc_media_list_path_with_root_index</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>libvlc_media_list_path_depth</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libvlc_media_list_path_append</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_path_t</name> <modifier>*</modifier></type> <name>p_path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_depth</name> <init>= <expr><call><name>libvlc_media_list_path_depth</name><argument_list>( <argument><expr><operator>*</operator><name>p_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_path</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><operator>*</operator><name>p_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>old_depth</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_path</name><index>[<expr><name>old_depth</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_path</name><index>[<expr><name>old_depth</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_list_path_t</name></type> <name>libvlc_media_list_path_copy_by_appending</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_depth</name> <init>= <expr><call><name>libvlc_media_list_path_depth</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>old_depth</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>old_depth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>old_depth</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>old_depth</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_list_path_t</name></type> <name>libvlc_media_list_path_copy</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name>libvlc_media_list_path_depth</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>depth</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>depth</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_media_list_path_t</name></type>

<name>get_path_rec</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_current_mlist</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_searched_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><call><name>libvlc_media_list_item_at_index</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_md</name> <operator>==</operator> <name>p_searched_md</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libvlc_media_list_path_copy_by_appending</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_subitems</name> <init>= <expr><call><name>libvlc_media_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subitems</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>new_path</name> <init>= <expr><call><name>libvlc_media_list_path_copy_by_appending</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name> <init>= <expr><call><name>get_path_rec</name><argument_list>( <argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><name>p_searched_md</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>new_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_media_list_path_t</name></type> <name>libvlc_media_list_path_of_item</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>path</name> <init>= <expr><call><name>libvlc_media_list_path_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_path_rec</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p_mlist</name></expr></argument>, <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_media_t</name> <modifier>*</modifier></type>

<name>libvlc_media_list_item_at_path</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_current_mlist</name> <init>= <expr><name>p_mlist</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_t</name><modifier>*</modifier></type> <name>p_md</name> <init>= <expr><call><name>libvlc_media_list_item_at_index</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_current_mlist</name> <operator>!=</operator> <name>p_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>path</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_md</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_current_mlist</name> <operator>=</operator> <call><name>libvlc_media_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_current_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_current_mlist</name> <operator>!=</operator> <name>p_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_media_list_t</name> <modifier>*</modifier></type>

<name>libvlc_media_list_parentlist_at_path</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_current_mlist</name> <init>= <expr><name>p_mlist</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_current_mlist</name> <operator>!=</operator> <name>p_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>path</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_media_list_retain</name><argument_list>(<argument><expr><name>p_current_mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_current_mlist</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name><modifier>*</modifier></type> <name>p_md</name> <init>= <expr><call><name>libvlc_media_list_item_at_index</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_current_mlist</name> <operator>=</operator> <call><name>libvlc_media_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_current_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_current_mlist</name> <operator>!=</operator> <name>p_mlist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>p_current_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_media_list_t</name> <modifier>*</modifier></type>

<name>libvlc_media_list_sublist_at_path</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><call><name>libvlc_media_list_item_at_path</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_md</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_subitems</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
