<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\audio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_player_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>audio_output_t</name> <modifier>*</modifier></type><name>GetAOut</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"No active audio output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_aout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type>

<name>libvlc_audio_output_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_list</name> <init>= <expr><call><name>module_list_get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><name><name>module_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>module_provides</name><argument_list>( <argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"audio output"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>item</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_audio_output_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>module_get_object</name><argument_list>( <argument><expr><name>module</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>module_get_name</name><argument_list>( <argument><expr><name>module</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>module_list_free</name><argument_list>( <argument><expr><name>module_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_output_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_audio_output_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>list</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>list</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_output_set</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>module_exists</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call>

<operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"%s,none"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"aout"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type>

<name>libvlc_audio_output_device_enum</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>texts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>aout_DevicesList</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>texts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_device</name></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name><name>texts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>texts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>values</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type>

<name>libvlc_audio_output_device_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>varname</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>( <argument><expr><name>varname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s-audio-device"</literal></expr></argument>, <argument><expr><name>aout</name></expr></argument> )</argument_list></call>

<operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>config_GetType</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_VAR_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>texts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name> <init>= <expr><call><name>config_GetPszChoices</name><argument_list>( <argument><expr><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_device</name></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name><name>texts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>texts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>values</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_instance</name></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_output_device_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>l</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>l</name><operator>-&gt;</operator><name>psz_device</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>l</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_output_device_set</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>devid</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cfg_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg_name</name></expr></argument>, <argument><expr><literal type="string">"%s-audio-device"</literal></expr></argument>, <argument><expr><name>module</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_Type</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cfg_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cfg_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cfg_name</name></expr></argument>, <argument><expr><name>devid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>cfg_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_DeviceSet</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>devid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>libvlc_audio_output_device_get</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>devid</name> <init>= <expr><call><name>aout_DeviceGet</name><argument_list>( <argument><expr><name>aout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>devid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_toggle_mute</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mute</name> <init>= <expr><call><name>libvlc_audio_get_mute</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>mute</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libvlc_audio_set_mute</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><operator>!</operator><name>mute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_get_mute</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mute</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>mute</name> <operator>=</operator> <call><name>aout_MuteGet</name><argument_list>( <argument><expr><name>aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mute</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_set_mute</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mute</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>mute</name> <operator>=</operator> <call><name>aout_MuteSet</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_get_volume</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>volume</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>vol</name> <init>= <expr><call><name>aout_VolumeGet</name><argument_list>( <argument><expr><name>aout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>volume</name> <operator>=</operator> <call><name>lroundf</name><argument_list>( <argument><expr><name>vol</name> <operator>*</operator> <literal type="number">100.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>volume</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_set_volume</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>volume</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>vol</name> <init>= <expr><name>volume</name> <operator>/</operator> <literal type="number">100.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isgreaterequal</name><argument_list>(<argument><expr><name>vol</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Volume out of range"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aout_VolumeSet</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>vol</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_get_track_count</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type>

<name>libvlc_audio_get_track_description</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>libvlc_get_track_description</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_get_track</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><ternary><condition><expr><name>track</name></expr> ?</condition><then> <expr><call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_set_track</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_track</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetAudioTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetAudioTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_track</name> <operator>==</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Track identifier not found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_get_channel</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_aout</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"stereo-mode"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_set_channel</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>GetAOut</name><argument_list>( <argument><expr><name>mp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_aout</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"stereo-mode"</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Audio channel out of range"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>libvlc_audio_get_delay</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_player_GetAudioDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_set_delay</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_delay</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetAudioDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>i_delay</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>libvlc_audio_equalizer_get_preset_count</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>NB_PRESETS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libvlc_audio_equalizer_get_preset_name</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>u_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>u_index</name> <operator>&gt;=</operator> <name>NB_PRESETS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>preset_list_text</name><index>[ <expr><name>u_index</name></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>libvlc_audio_equalizer_get_band_count</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>EQZ_BANDS_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_audio_equalizer_get_band_frequency</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>u_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>u_index</name> <operator>&gt;=</operator> <name>EQZ_BANDS_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1.f</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>f_iso_frequency_table_10b</name><index>[ <expr><name>u_index</name></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>libvlc_audio_equalizer_new</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_equalizer</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_equalizer</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_equalizer</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EQZ_BANDS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_amp</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>p_equalizer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>libvlc_audio_equalizer_new_from_preset</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>u_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>u_index</name> <operator>&gt;=</operator> <name>NB_PRESETS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_equalizer</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_equalizer</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_equalizer</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name> <operator>=</operator> <name><name>eqz_preset_10b</name><index>[ <expr><name>u_index</name></expr> ]</index></name><operator>.</operator><name>f_preamp</name></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EQZ_BANDS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_amp</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>eqz_preset_10b</name><index>[ <expr><name>u_index</name></expr> ]</index></name><operator>.</operator><name><name>f_amp</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>p_equalizer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_equalizer_release</name><parameter_list>( <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_equalizer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_equalizer_set_preamp</name><parameter_list>( <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_preamp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>isnan</name><argument_list>(<argument><expr><name>f_preamp</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>f_preamp</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">20.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_preamp</name> <operator>=</operator> <operator>-</operator><literal type="number">20.f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>f_preamp</name> <operator>&gt;</operator> <literal type="number">20.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_preamp</name> <operator>=</operator> <literal type="number">20.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name> <operator>=</operator> <name>f_preamp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_audio_equalizer_get_preamp</name><parameter_list>( <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_audio_equalizer_set_amp_at_index</name><parameter_list>( <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_amp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>u_band</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>u_band</name> <operator>&gt;=</operator> <name>EQZ_BANDS_MAX</name> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>f_amp</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>f_amp</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">20.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_amp</name> <operator>=</operator> <operator>-</operator><literal type="number">20.f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>f_amp</name> <operator>&gt;</operator> <literal type="number">20.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_amp</name> <operator>=</operator> <literal type="number">20.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_amp</name><index>[ <expr><name>u_band</name></expr> ]</index></name> <operator>=</operator> <name>f_amp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_audio_equalizer_get_amp_at_index</name><parameter_list>( <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>u_band</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>u_band</name> <operator>&gt;=</operator> <name>EQZ_BANDS_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nanf</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_amp</name><index>[ <expr><name>u_band</name></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

</unit>
