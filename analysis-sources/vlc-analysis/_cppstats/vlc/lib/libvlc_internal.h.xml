<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\libvlc_internal.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>VLC_API</name> <name>libvlc_int_t</name> <modifier>*</modifier></type><name>libvlc_InternalCreate</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>libvlc_InternalInit</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_InternalCleanup</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_InternalDestroy</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>libvlc_InternalAddIntf</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_InternalPlay</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_InternalWait</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_SetExitHandler</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>libvlc_instance_t</name>

<block>{

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>instance_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>libvlc_callback_entry_list_t</name></name> <modifier>*</modifier></type><name>p_callback_list</name></decl>;</decl_stmt>

<struct>struct

<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block> <decl><name>log</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>libvlc_dialog_cbs</name></type> <name>cbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block> <decl><name>dialog</name></decl>;</struct>

}</block>;</struct>

<struct>struct <name>libvlc_event_manager_t</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>listeners</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>libvlc_threads_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libvlc_threads_deinit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libvlc_event_manager_init</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libvlc_event_manager_destroy</name><parameter_list>(<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libvlc_event_send</name><parameter_list>(

<parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type> <name>p_em</name></decl></parameter>,

<parameter><decl><type><name>libvlc_event_t</name> <modifier>*</modifier></type> <name>p_event</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_time_t</name></type> <name>from_mtime</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>time</name> <operator>+</operator> <literal type="number">500ULL</literal><operator>)</operator><operator>/</operator> <literal type="number">1000ULL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>to_mtime</name><parameter_list>(<parameter><decl><type><name>libvlc_time_t</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
