<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\log.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>libvlc_log_get_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>module</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>file</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>module</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>psz_module</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_log_get_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>header</name></decl></parameter>,

<parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>psz_object_type</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>psz_object_type</name></name></expr> </then><else>: <expr><literal type="string">"generic"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>psz_header</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>i_object_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libvlc_logf</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>level</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_MSG_INFO</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LIBVLC_NOTICE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_MSG_ERR</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LIBVLC_ERROR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_MSG_WARN</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LIBVLC_WARNING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_MSG_DBG</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>LIBVLC_DEBUG</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name><name>inst</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>cb</name></name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>libvlc_log_ops</name> <init>= <expr><block>{

<expr><name>libvlc_logf</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>libvlc_log_unset</name> <parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_LogSet</name> <argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_log_set</name> <parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>libvlc_log_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_log_unset</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>log</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_LogSet</name><argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>libvlc_log_ops</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libvlc_log_file</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flockfile</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>funlockfile</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>log</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_log_set_file</name> <parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_log_set</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>libvlc_log_file</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
