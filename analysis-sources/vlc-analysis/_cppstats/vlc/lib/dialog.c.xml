<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\dialog.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>libvlc_dialog_question_type</name></type>

<name>vlc_to_libvlc_dialog_question_type</name><parameter_list>(<parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>i_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr>:</case> <return>return <expr><name>LIBVLC_DIALOG_QUESTION_NORMAL</name></expr>;</return>

<case>case <expr><name>VLC_DIALOG_QUESTION_WARNING</name></expr>:</case> <return>return <expr><name>LIBVLC_DIALOG_QUESTION_WARNING</name></expr>;</return>

<case>case <expr><name>VLC_DIALOG_QUESTION_CRITICAL</name></expr>:</case> <return>return <expr><name>LIBVLC_DIALOG_QUESTION_CRITICAL</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_error_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_display_error</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>,

<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_login_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_ask_store</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_display_login</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>libvlc_dialog_id</name> <operator>*</operator><operator>)</operator> <name>p_id</name></expr></argument>,

<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>,

<argument><expr><name>psz_default_username</name></expr></argument>, <argument><expr><name>b_ask_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_question_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>libvlc_dialog_question_type</name></type> <name>i_ltype</name> <init>=

<expr><call><name>vlc_to_libvlc_dialog_question_type</name><argument_list>(<argument><expr><name>i_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_display_question</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>libvlc_dialog_id</name> <operator>*</operator><operator>)</operator> <name>p_id</name></expr></argument>,

<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_ltype</name></expr></argument>,

<argument><expr><name>psz_cancel</name></expr></argument>,

<argument><expr><name>psz_action1</name></expr></argument>, <argument><expr><name>psz_action2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_progress_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_display_progress</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>libvlc_dialog_id</name> <operator>*</operator><operator>)</operator> <name>p_id</name></expr></argument>,

<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>,

<argument><expr><name>b_indeterminate</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>,

<argument><expr><name>psz_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>cancel_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_cancel</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>libvlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_progress_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name><operator>.</operator><name>pf_update_progress</name></name><argument_list>(<argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>libvlc_dialog_id</name> <operator>*</operator><operator>)</operator> <name>p_id</name></expr></argument>,

<argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_dialog_set_callbacks</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>libvlc_dialog_cbs</name> <modifier>*</modifier></type><name>p_cbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_instance</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cbs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_dialog_cbs</name></type> <name>dialog_cbs</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pf_display_error</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_display_error</name></name> <operator>!=</operator> <name>NULL</name> <operator>?</operator>

<name>display_error_cb</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>pf_display_login</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_display_login</name></name> <operator>?</operator>

<name>display_login_cb</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>pf_display_question</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_display_question</name></name> <operator>!=</operator> <name>NULL</name> <operator>?</operator>

<name>display_question_cb</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>pf_display_progress</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_display_progress</name></name> <operator>!=</operator> <name>NULL</name> <operator>?</operator>

<name>display_progress_cb</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>pf_cancel</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_cancel</name></name> <operator>!=</operator> <name>NULL</name> <operator>?</operator> <name>cancel_cb</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>pf_update_progress</name> <operator>=</operator> <name><name>p_cbs</name><operator>-&gt;</operator><name>pf_update_progress</name></name> <operator>!=</operator> <name>NULL</name> <operator>?</operator>

<name>update_progress_cb</name> <operator>:</operator> <name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>*</operator><name>p_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>dialog</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialog_cbs</name></expr></argument>, <argument><expr><name>p_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_instance</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_dialog_set_context</name><parameter_list>(<parameter><decl><type><name>libvlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_id_set_context</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>, <argument><expr><name>p_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>libvlc_dialog_get_context</name><parameter_list>(<parameter><decl><type><name>libvlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_dialog_id_get_context</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_dialog_post_login</name><parameter_list>(<parameter><decl><type><name>libvlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_password</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_store</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_id_post_login</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>,

<argument><expr><name>psz_password</name></expr></argument>, <argument><expr><name>b_store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_dialog_post_action</name><parameter_list>(<parameter><decl><type><name>libvlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_id_post_action</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>, <argument><expr><name>i_action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_dialog_dismiss</name><parameter_list>(<parameter><decl><type><name>libvlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_dialog_id</name> <operator>*</operator><operator>)</operator><name>p_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
