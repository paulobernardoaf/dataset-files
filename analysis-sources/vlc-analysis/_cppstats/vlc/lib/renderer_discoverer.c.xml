<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\renderer_discoverer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"renderer_discoverer_internal.h"</cpp:file></cpp:include>

<struct>struct <name>libvlc_renderer_discoverer_t</name>

<block>{

<decl_stmt><decl><type><name>libvlc_event_manager_t</name></type> <name>event_manager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pp_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<expr_stmt><expr><call><name>static_assert</name><argument_list>( <argument><expr><name>VLC_RENDERER_CAN_AUDIO</name> <operator>==</operator> <name>LIBVLC_RENDERER_CAN_AUDIO</name> <operator>&amp;&amp;</operator>

<name>VLC_RENDERER_CAN_VIDEO</name> <operator>==</operator> <name>LIBVLC_RENDERER_CAN_VIDEO</name></expr></argument>,

<argument><expr><literal type="string">"core/libvlc renderer flags mismatch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type>

<name>libvlc_renderer_item_to_vlc</name><parameter_list>( <parameter><decl><type><name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>vlc_renderer_item_t</name><operator>*</operator><operator>)</operator> <name>p_item</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>renderer_discovery_item_added</name><parameter_list>( <parameter><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>,

<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name> <init>= <expr><name><name>rd</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_renderer_item_hold</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name></name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>libvlc_RendererDiscovererItemAdded</name></expr>,

<expr><operator>.</operator><name><name>u</name><operator>.</operator><name>renderer_discoverer_item_added</name><operator>.</operator><name>item</name></name> <operator>=</operator>

<operator>(</operator><name>libvlc_renderer_item_t</name><operator>*</operator><operator>)</operator> <name>p_item</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_lrd</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>renderer_discovery_item_removed</name><parameter_list>( <parameter><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>,

<parameter><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name> <init>= <expr><name><name>rd</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_FIND</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name></name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name></name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>libvlc_RendererDiscovererItemDeleted</name></expr>,

<expr><operator>.</operator><name><name>u</name><operator>.</operator><name>renderer_discoverer_item_deleted</name><operator>.</operator><name>item</name></name> <operator>=</operator>

<operator>(</operator><name>libvlc_renderer_item_t</name><operator>*</operator><operator>)</operator> <name>p_item</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_lrd</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_renderer_item_t</name> <modifier>*</modifier></type>

<name>libvlc_renderer_item_hold</name><parameter_list>(<parameter><decl><type><name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_hold</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_item</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_renderer_item_release</name><parameter_list>(<parameter><decl><type><name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>libvlc_renderer_item_name</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_renderer_item_name</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>libvlc_renderer_item_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_renderer_item_type</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>libvlc_renderer_item_icon_uri</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_renderer_item_icon_uri</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_renderer_item_flags</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_renderer_item_flags</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_renderer_item_t</name> <operator>*</operator><operator>)</operator> <name>p_item</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type>

<name>libvlc_renderer_discoverer_new</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_inst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_lrd</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_lrd</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_object</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_inst</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_manager_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_lrd</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><name>p_lrd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_lrd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_renderer_discoverer_release</name><parameter_list>( <parameter><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_renderer_discoverer_stop</name><argument_list>( <argument><expr><name>p_lrd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_manager_destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_lrd</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_lrd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>libvlc_renderer_discoverer_start</name><parameter_list>( <parameter><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_renderer_discovery_owner</name></name></type> <name>owner</name> <init>=

<expr><block>{

<expr><name>p_lrd</name></expr>,

<expr><name>renderer_discovery_item_added</name></expr>,

<expr><name>renderer_discovery_item_removed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>=</operator> <call><name>vlc_rd_new</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_object</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_renderer_discoverer_stop</name><parameter_list>( <parameter><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_rd_release</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>p_rd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>i_items</name></name></expr></argument>, <argument><expr><name><name>p_lrd</name><operator>-&gt;</operator><name>pp_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type>

<name>libvlc_renderer_discoverer_event_manager</name><parameter_list>( <parameter><decl><type><name>libvlc_renderer_discoverer_t</name> <modifier>*</modifier></type><name>p_lrd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>p_lrd</name><operator>-&gt;</operator><name>event_manager</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libvlc_renderer_discoverer_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_longname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type>

<name>libvlc_renderer_discoverer_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_inst</name></decl></parameter>,

<parameter><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_services</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_inst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppp_services</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_names</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ppsz_longnames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_rd_get_names</name><argument_list>( <argument><expr><name><name>p_inst</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_names</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ppsz_longnames</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppp_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_services</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name> <init>= <expr><name>ppsz_names</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>ppsz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_name</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_nb_services</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name> <init>= <expr><name>NULL</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>p_services</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nb_services</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pp_services</name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><name>i_nb_services</name>

<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_rd_description_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_services</name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><name>i_nb_services</name>

<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_rd_description_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_services</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_services</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_nb_services</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_longname</name> <init>= <expr><name>ppsz_longnames</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_service_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_rd_description_t</name> <modifier>*</modifier></type><name>p_service</name> <init>= <expr><name>p_services</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>ppsz_name</name> <operator>=</operator> <name>ppsz_names</name></expr>;</init> <condition><expr><operator>*</operator><name>ppsz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_name</name><operator>++</operator></expr><operator>,</operator> <expr><name>ppsz_longname</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pp_services</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <operator>*</operator><name>ppsz_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_longname</name></name> <operator>=</operator> <operator>*</operator><name>ppsz_longname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_services</name><index>[<expr><name>i_service_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_service</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_longname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_names</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_longnames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_services</name> <operator>=</operator> <name>pp_services</name></expr>;</expr_stmt>

<return>return <expr><name>i_nb_services</name></expr>;</return>

</block_content>}</block></function>

</unit>
