<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\lib\core.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>libvlc_instance_t</name> <modifier>*</modifier></type> <name>libvlc_new</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_threads_init</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_new</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>my_argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>my_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"libvlc"</literal></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>my_argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>my_argv</name><index>[<expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc_int</name> <init>= <expr><call><name>libvlc_InternalCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>p_libvlc_int</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libvlc_InternalInit</name><argument_list>( <argument><expr><name>p_libvlc_int</name></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>my_argv</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_InternalDestroy</name><argument_list>( <argument><expr><name>p_libvlc_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>p_libvlc_int</name></name> <operator>=</operator> <name>p_libvlc_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>p_callback_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_new</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_new</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_threads_deinit</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_instance</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&lt;</operator> <name>UINT_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_instance</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>ref_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_instance</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_release</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><operator>&amp;</operator><name><name>p_instance</name><operator>-&gt;</operator><name>instance_lock</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <operator>--</operator><name><name>p_instance</name><operator>-&gt;</operator><name>ref_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>refs</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_InternalCleanup</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_InternalDestroy</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_threads_deinit</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_set_exit_handler</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><name><name>p_i</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libvlc_SetExitHandler</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_set_user_agent</name> <parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><name><name>p_i</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"user-agent"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>http</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s LibVLC/"</literal><name>PACKAGE_VERSION</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"http-user-agent"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_set_app_id</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><name><name>p_i</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-id"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-version"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>version</name></expr> ?</condition><then> <expr><name>version</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"app-icon-name"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>icon</name></expr> ?</condition><then> <expr><name>icon</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>VERSION_MESSAGE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_compiler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_Compiler</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_changeset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>psz_vlc_changeset</name><index>[]</index></name></decl>;</decl_stmt>

<return>return <expr><name>psz_vlc_changeset</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>module_description_list_get</name><parameter_list>(

<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capability</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><name>NULL</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>p_actual</name> <init>= <expr><name>NULL</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>p_previous</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>module_list</name> <init>= <expr><call><name>module_list_get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name> <init>= <expr><name><name>module_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>module_provides</name><argument_list>( <argument><expr><name>p_module</name></expr></argument>, <argument><expr><name>capability</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_actual</name> <operator>=</operator> <operator>(</operator> <name>libvlc_module_description_t</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>libvlc_module_description_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_actual</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_module_description_list_release</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_list_free</name><argument_list>( <argument><expr><name>module_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_list</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name>p_actual</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>module_get_object</name><argument_list>( <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>shortname</name> <init>= <expr><call><name>module_get_name</name><argument_list>( <argument><expr><name>p_module</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>longname</name> <init>= <expr><call><name>module_get_name</name><argument_list>( <argument><expr><name>p_module</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>help</name> <init>= <expr><call><name>module_get_help</name><argument_list>( <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_shortname</name></name> <operator>=</operator> <ternary><condition><expr><name>shortname</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>shortname</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_longname</name></name> <operator>=</operator> <ternary><condition><expr><name>longname</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>longname</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_help</name></name> <operator>=</operator> <ternary><condition><expr><name>help</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>help</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_actual</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_previous</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_previous</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_actual</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_previous</name> <operator>=</operator> <name>p_actual</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>module_list_free</name><argument_list>( <argument><expr><name>module_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_module_description_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>p_actual</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_before</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_actual</name> <operator>=</operator> <name>p_list</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>p_actual</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_shortname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_longname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_help</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_before</name> <operator>=</operator> <name>p_actual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_actual</name> <operator>=</operator> <name><name>p_before</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_before</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>libvlc_audio_filter_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>module_description_list_get</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><literal type="string">"audio filter"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>libvlc_video_filter_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>module_description_list_get</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><literal type="string">"video filter"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>libvlc_clock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"libvlc"</literal></expr></init></decl>;</decl_stmt>

</unit>
