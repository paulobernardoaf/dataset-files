<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_fs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>stat</name>;</struct_decl>

<struct_decl>struct <name>iovec</name>;</struct_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>_stati64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>_fstati64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lseek</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>_lseeki64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>lseek64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_open</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_openat</name><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_mkstemp</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_dup</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_pipe</name><argument_list>(<argument><expr><name><name>int</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_memfd</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_write</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_writev</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_stat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr>struct <name>stat</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_lstat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr>struct <name>stat</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>FILE</name> <modifier>*</modifier></type> <name>vlc_fopen</name><argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>mode</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>DIR</name> <modifier>*</modifier></type><name>vlc_opendir</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>dirname</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_readdir</name><argument_list>(<argument><expr><name>DIR</name> <operator>*</operator><name>dir</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_loaddir</name><parameter_list>( <parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>namelist</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_scandir</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>namelist</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_getcwd</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>vlc_DIR</name>

<block>{

<decl_stmt><decl><type><name>_WDIR</name> <modifier>*</modifier></type><name>wdir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>drives</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>insert_dot_dot</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

}</block></struct></type> <name>vlc_DIR</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_closedir</name><parameter_list>( <parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_DIR</name> <modifier>*</modifier></type><name>vdir</name> <init>= <expr><operator>(</operator><name>vlc_DIR</name> <operator>*</operator><operator>)</operator><name>dir</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_WDIR</name> <modifier>*</modifier></type><name>wdir</name> <init>= <expr><name><name>vdir</name><operator>-&gt;</operator><name>wdir</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>vdir</name><operator>-&gt;</operator><name>entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>vdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>wdir</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_wclosedir</name><argument_list>( <argument><expr><name>wdir</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>closedir</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>closedir</name></cpp:macro> <cpp:value>vlc_closedir</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_rewinddir</name><parameter_list>( <parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>_WDIR</name> <modifier>*</modifier></type><name>wdir</name> <init>= <expr><operator>*</operator><operator>(</operator><name>_WDIR</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dir</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_wrewinddir</name><argument_list>( <argument><expr><name>wdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rewinddir</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rewinddir</name></cpp:macro> <cpp:value>vlc_rewinddir</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>lseek64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
