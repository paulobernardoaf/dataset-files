





















#ifndef VLC_VIDEO_SPLITTER_H
#define VLC_VIDEO_SPLITTER_H 1

#include <vlc_es.h>
#include <vlc_picture.h>
#include <vlc_mouse.h>
#include <vlc_vout_display.h>






typedef struct video_splitter_t video_splitter_t;

struct vout_window_mouse_event_t;



typedef struct
{

video_format_t fmt;




char *psz_module;

} video_splitter_output_t;



struct video_splitter_t
{
struct vlc_object_t obj;


module_t *p_module;


config_chain_t *p_cfg;




video_format_t fmt;







int i_output;
video_splitter_output_t *p_output;

int (*pf_filter)( video_splitter_t *, picture_t *pp_dst[],
picture_t *p_src );
int (*mouse)(video_splitter_t *, int idx,
struct vout_window_mouse_event_t *);

void *p_sys;
};









static inline int video_splitter_NewPicture(video_splitter_t *splitter,
picture_t *pics[])
{
for (int i = 0; i < splitter->i_output; i++) {
pics[i] = picture_NewFromFormat(&splitter->p_output[i].fmt);
if (pics[i] == NULL) {
for (int j = 0; j < i; j++)
picture_Release(pics[j]);

msg_Warn(splitter, "can't get output pictures");
return VLC_EGENERIC;
}
}
return VLC_SUCCESS;
}





static inline void video_splitter_DeletePicture( video_splitter_t *p_splitter,
picture_t *pp_picture[] )
{
for (int i = 0; i < p_splitter->i_output; i++)
picture_Release(pp_picture[i]);
}


video_splitter_t * video_splitter_New( vlc_object_t *, const char *psz_name, const video_format_t * );
void video_splitter_Delete( video_splitter_t * );

static inline int video_splitter_Filter( video_splitter_t *p_splitter,
picture_t *pp_dst[], picture_t *p_src )
{
return p_splitter->pf_filter( p_splitter, pp_dst, p_src );
}

static inline int video_splitter_Mouse(video_splitter_t *splitter, int index,
struct vout_window_mouse_event_t *ev)
{
return (splitter->mouse != NULL)
? splitter->mouse(splitter, index, ev) : VLC_SUCCESS;
}

#endif 

