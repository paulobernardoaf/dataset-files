<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_text_style.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_fontname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_monofontname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_features</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_style_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_font_relsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_font_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_font_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_font_alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_spacing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_outline_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_outline_alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_outline_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_shadow_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_shadow_alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_shadow_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_background_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_background_alpha</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>STYLE_WRAP_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>STYLE_WRAP_CHAR</name></decl>, 

<decl><name>STYLE_WRAP_NONE</name></decl>, 

}</block> <decl><name>e_wrapinfo</name></decl>;</enum>

}</block></struct></type> <name>text_style_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_ALPHA_OPAQUE</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_ALPHA_TRANSPARENT</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_NO_DEFAULTS</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FULLY_SET</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_FONT_COLOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_FONT_ALPHA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_FLAGS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_OUTLINE_COLOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_OUTLINE_ALPHA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_SHADOW_COLOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_SHADOW_ALPHA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_BACKGROUND_COLOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_BACKGROUND_ALPHA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HAS_WRAP_INFO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_BOLD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_ITALIC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_OUTLINE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_SHADOW</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_BACKGROUND</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_UNDERLINE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRIKEOUT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_HALFWIDTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_MONOSPACED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_DOUBLEWIDTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_BLINK_FOREGROUND</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_BLINK_BACKGROUND</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_DEFAULT_FONT_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_DEFAULT_REL_FONT_SIZE</name></cpp:macro> <cpp:value>6.25</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>text_segment_t</name></name></type> <name>text_segment_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>text_segment_ruby_t</name></name></type> <name>text_segment_ruby_t</name>;</typedef>

<struct>struct <name>text_segment_ruby_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>text_segment_t</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>style</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>text_style_t</name> <modifier>*</modifier></type> <name>text_style_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_style_t</name> <modifier>*</modifier></type> <name>text_style_Create</name><parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_style_t</name> <modifier>*</modifier></type> <name>text_style_Copy</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_style_t</name> <modifier>*</modifier></type> <name>text_style_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>text_style_Merge</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_override</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>text_style_Delete</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_NewInheritStyle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name><modifier>*</modifier></type> <name>p_style</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>text_segment_Delete</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>text_segment_ChainDelete</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_segment_t</name> <modifier>*</modifier></type> <name>text_segment_Copy</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>text_segment_ruby_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_rt</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>text_segment_ruby_ChainDelete</name><parameter_list>( <parameter><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>text_segment_t</name> <modifier>*</modifier></type><name>text_segment_FromRuby</name><parameter_list>( <parameter><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>unsigned</name> <name>int</name></type> <name>vlc_html_color</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>ok</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
