<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_tick.h"><typedef>typedef <type><name>int64_t</name></type> <name>vlc_tick_t</name>;</typedef>

<typedef>typedef <type><name>vlc_tick_t</name></type> <name>mtime_t</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_SEC</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CLOCK_FREQ * (sec))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) / CLOCK_FREQ)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>

<specifier>static</specifier> <specifier>inline</specifier> <specifier>auto</specifier></type> <name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>T</name> <name>sec</name></expr></argument>)</argument_list>

-&gt; <name>typename</name> <name>std</name>::<name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>&gt;</argument_list></name>::<name>type</name>

<block>{<block_content>

<return>return <expr><name>CLOCK_FREQ</name> <operator>*</operator> <name>sec</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_from_sec</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>secf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator><name>CLOCK_FREQ</name> <operator>*</operator> <name>secf</name><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_from_seci</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>sec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CLOCK_FREQ</name> <operator>*</operator> <name>sec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_from_secf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>secf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator><name>CLOCK_FREQ</name> <operator>*</operator> <name>secf</name><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_tick_from_sec</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((sec), double: vlc_tick_from_secf(sec), float: vlc_tick_from_secf(sec), default: vlc_tick_from_seci(sec) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>secf_from_vlc_tick</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>vtk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name>vtk</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>CLOCK_FREQ</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_rate_duration</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>frame_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CLOCK_FREQ</name> <operator>/</operator> <name>frame_rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_from_samples</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samp_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CLOCK_FREQ</name> <operator>*</operator> <name>samples</name> <operator>/</operator> <name>samp_rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>samples_from_vlc_tick</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samp_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>t</name> <operator>*</operator> <name>samp_rate</name> <operator>/</operator> <name>CLOCK_FREQ</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>vlc_tick_from_frac</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MS</name><parameter_list>(<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CLOCK_FREQ / INT64_C(1000)) * (ms))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) / (CLOCK_FREQ / INT64_C(1000)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><literal type="number">1000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MS</name><parameter_list>(<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ms) / (INT64_C(1000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * (INT64_C(1000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MS</name><parameter_list>(<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CLOCK_FREQ * (ms) / 1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * 1000 / CLOCK_FREQ)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_US</name><parameter_list>(<parameter><type><name>us</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CLOCK_FREQ / INT64_C(1000000)) * (us))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>US_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) / (CLOCK_FREQ / INT64_C(1000000)))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><literal type="number">1000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_US</name><parameter_list>(<parameter><type><name>us</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((us) / (INT64_C(1000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>US_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * (INT64_C(1000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_US</name><parameter_list>(<parameter><type><name>us</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CLOCK_FREQ * (us) / INT64_C(1000000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>US_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * INT64_C(1000000) / CLOCK_FREQ)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">1000000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_NS</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ns) * (CLOCK_FREQ / (INT64_C(1000000000))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) / (CLOCK_FREQ / (INT64_C(1000000000))))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><literal type="number">1000000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_NS</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ns) / (INT64_C(1000000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * (INT64_C(1000000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_NS</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CLOCK_FREQ * (ns) / INT64_C(1000000000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * INT64_C(1000000000) / CLOCK_FREQ)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>int64_t</name></type> <name>msftime_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSFTIME_FROM_SEC</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(INT64_C(10000000) * (sec))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSFTIME_FROM_MS</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(INT64_C(10000) * (sec))</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MSFTIME</name><parameter_list>(<parameter><type><name>msft</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((msft) * (CLOCK_FREQ / INT64_C(10000000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSFTIME_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) / (CLOCK_FREQ / INT64_C(10000000))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><literal type="number">10000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MSFTIME</name><parameter_list>(<parameter><type><name>msft</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((msft) / (INT64_C(10000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSFTIME_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * (INT64_C(10000000) / CLOCK_FREQ))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TICK_FROM_MSFTIME</name><parameter_list>(<parameter><type><name>msft</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CLOCK_FREQ * (msft) / INT64_C(10000000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSFTIME_FROM_VLC_TICK</name><parameter_list>(<parameter><type><name>vtk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vtk) * INT64_C(10000000) / CLOCK_FREQ)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_tick_from_timeval</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vlc_tick_from_sec( (tv)-&gt;tv_sec ) + VLC_TICK_FROM_US( (tv)-&gt;tv_usec ))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_tick_from_timespec</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vlc_tick_from_sec( (tv)-&gt;tv_sec ) + VLC_TICK_FROM_NS( (tv)-&gt;tv_nsec ))</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timespec_from_vlc_tick</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSTRTIME_MAX_SIZE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>secstotimestr</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>secs</name></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>date_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_divider_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_divider_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_remainder</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>date_Init</name><parameter_list>(<parameter><decl><type><name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>den</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>date_Change</name><parameter_list>(<parameter><decl><type><name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>den</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>date_Set</name><parameter_list>(<parameter><decl><type><name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>date</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>date</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>date_Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>date</name><operator>-&gt;</operator><name>date</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>vlc_tick_t</name></type> <name>date_Increment</name><parameter_list>(<parameter><decl><type><name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>vlc_tick_t</name></type> <name>date_Decrement</name><parameter_list>(<parameter><decl><type><name>date_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>uint64_t</name></type> <name>NTPtime64</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

</unit>
