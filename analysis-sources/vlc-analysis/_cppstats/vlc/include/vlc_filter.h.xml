<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_filter.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>vlc_video_context</name></name></type> <name>vlc_video_context</name>;</typedef>

<struct>struct <name>filter_video_callbacks</name>

<block>{

<function_decl><type><name>picture_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>buffer_new</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>hold_device</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<struct>struct <name>filter_subpicture_callbacks</name>

<block>{

<function_decl><type><name>subpicture_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>buffer_new</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>filter_owner_t</name>

<block>{

<union>union

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filter_subpicture_callbacks</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_owner_t</name>;</typedef>

<struct_decl>struct <name>vlc_mouse_t</name>;</struct_decl>

<struct>struct <name>filter_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type> <name>p_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_allow_fmt_out_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type> <name>p_cfg</name></decl>;</decl_stmt>

<union>union

<block>{

<function_decl><type><name>picture_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_video_filter</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_audio_filter</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_video_blend</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>subpicture_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_sub_source</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>subpicture_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_sub_filter</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_render</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

}</block>;</union>

<union>union

<block>{

<function_decl><type><name>block_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_audio_drain</name>) <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

}</block>;</union>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_flush</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_change_viewpoint</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<union>union

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_video_mouse</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_mouse_t</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_mouse_t</name></name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_mouse_t</name></name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>;</function_decl>

}</block>;</union>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_get_attachments</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>filter_NewPicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>buffer_new</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>buffer_new</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>filter_Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>filter_ChangeViewpoint</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_change_viewpoint</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_change_viewpoint</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>vp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>filter_HoldDecoderDevice</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name></name> <operator>||</operator> <operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>filter_HoldDecoderDeviceType</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_decoder_device_type</name></name></type> <name>type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name></name> <operator>||</operator> <operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name> <init>= <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name><operator>-&gt;</operator><name>hold_device</name></name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>dec_dev</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>dec_dev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>dec_dev</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>filter_DrainAudio</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_drain</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_drain</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>filter_NewSubpicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name> <init>= <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sub</name><operator>-&gt;</operator><name>buffer_new</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>subpic</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output subpicture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>subpic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>filter_GetInputAttachments</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>pf_get_attachments</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>p_filter</name><operator>-&gt;</operator><name>pf_get_attachments</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>ppp_attachment</name></expr></argument>, <argument><expr><name>pi_attachment</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_AddProxyCallbacks</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><name>vlc_callback_t</name></type> <name>restart_cb</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_AddProxyCallbacks</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_AddProxyCallbacks(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_DelProxyCallbacks</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><name>vlc_callback_t</name></type> <name>restart_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_DelProxyCallbacks</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_DelProxyCallbacks(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>

<typedef>typedef <type><name>filter_t</name></type> <name>vlc_blender_t</name>;</typedef>

<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_blender_t</name> <modifier>*</modifier></type> <name>filter_NewBlend</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>video_format_t</name> <operator>*</operator><name>p_dst_chroma</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>filter_ConfigureBlend</name><parameter_list>( <parameter><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>filter_Blend</name><parameter_list>( <parameter><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_alpha</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_DeleteBlend</name><parameter_list>( <parameter><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FILTER_WRAPPER</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static picture_t *name ##_Filter ( filter_t *p_filter, picture_t *p_pic ) { picture_t *p_outpic = filter_NewPicture( p_filter ); if( p_outpic ) { name( p_filter, p_pic, p_outpic ); picture_CopyProperties( p_outpic, p_pic ); } picture_Release( p_pic ); return p_outpic; }</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>filter_chain_t</name></name></type> <name>filter_chain_t</name>;</typedef>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type> <name>filter_chain_NewSPU</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_capability</name></expr></argument> )</argument_list>

<name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_chain_NewSPU</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>filter_chain_NewSPU( VLC_OBJECT( a ), b )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>filter_chain_t</name> <modifier>*</modifier></type> <name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>bool</name> <name>change</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>filter_owner_t</name> <operator>*</operator><name>owner</name></expr></argument> )</argument_list>

<name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_chain_NewVideo</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>filter_chain_NewVideo( VLC_OBJECT( a ), b, c )</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_chain_Delete</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_chain_Reset</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>,

<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_out</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_chain_Clear</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>filter_t</name> <modifier>*</modifier></type><name>filter_chain_AppendFilter</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>filter_chain_AppendConverter</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>filter_chain_AppendFromString</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_chain_DeleteFilter</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>filter_chain_IsEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>filter_chain_GetFmtOut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>vlc_video_context</name> <modifier>*</modifier></type><name>filter_chain_GetVideoCtxOut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type><name>filter_chain_VideoFilter</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>filter_chain_VideoFlush</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>filter_chain_SubSource</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>spu_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>display_date</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>subpicture_t</name> <modifier>*</modifier></type><name>filter_chain_SubFilter</name><parameter_list>(<parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>filter_chain_MouseFilter</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_mouse_t</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_mouse_t</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>filter_chain_ForEach</name><parameter_list>( <parameter><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>;</function_decl>

</unit>
