<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_input_item.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>input_item_opaque</name></name></type> <name>input_item_opaque_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>input_item_slave</name></name></type> <name>input_item_slave_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>input_preparser_callbacks_t</name></name></type> <name>input_preparser_callbacks_t</name>;</typedef>

<struct>struct <name>info_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>node</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info_foreach</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>cat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_list_foreach(info, cat, node)</cpp:value></cpp:define>

<struct>struct <name>info_category_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name></type> <name>infos</name></decl>;</decl_stmt> 

}</block>;</struct>

<enum>enum <name>input_item_type_e</name>

<block>{

<decl><name>ITEM_TYPE_UNKNOWN</name></decl>,

<decl><name>ITEM_TYPE_FILE</name></decl>,

<decl><name>ITEM_TYPE_DIRECTORY</name></decl>,

<decl><name>ITEM_TYPE_DISC</name></decl>,

<decl><name>ITEM_TYPE_CARD</name></decl>,

<decl><name>ITEM_TYPE_STREAM</name></decl>,

<decl><name>ITEM_TYPE_PLAYLIST</name></decl>,

<decl><name>ITEM_TYPE_NODE</name></decl>,

<decl><name>ITEM_TYPE_NUMBER</name></decl>

}</block>;</enum>

<struct>struct <name>input_item_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_options</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_options</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>optflagv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>optflagc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_opaque_t</name> <modifier>*</modifier></type><name>opaques</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_categories</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_categories</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_es</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>es</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>input_stats_t</name> <modifier>*</modifier></type><name>p_stats</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_epg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_epg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_epg_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_slaves</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>input_item_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_event_manager_t</name></type> <name>event_manager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>input_item_type_e</name></name></type> <name>i_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_net</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_error_when_reading</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_preparse_depth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_preparse_interact</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_ITEM_URI_NOP</name></cpp:macro> <cpp:value>"vlc://nop"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_DURATION_UNSET</name></cpp:macro> <cpp:value>VLC_TICK_INVALID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_DURATION_INDEFINITE</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define> 

<enum>enum <name>input_item_net_type</name>

<block>{

<decl><name>ITEM_NET_UNKNOWN</name></decl>,

<decl><name>ITEM_NET</name></decl>,

<decl><name>ITEM_LOCAL</name></decl>

}</block>;</enum>

<enum>enum <name>slave_type</name>

<block>{

<decl><name>SLAVE_TYPE_SPU</name></decl>,

<decl><name>SLAVE_TYPE_AUDIO</name></decl>,

}</block>;</enum>

<enum>enum <name>slave_priority</name>

<block>{

<decl><name>SLAVE_PRIORITY_MATCH_NONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>SLAVE_PRIORITY_MATCH_RIGHT</name></decl>,

<decl><name>SLAVE_PRIORITY_MATCH_LEFT</name></decl>,

<decl><name>SLAVE_PRIORITY_MATCH_ALL</name></decl>,

<decl><name>SLAVE_PRIORITY_USER</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASTER_EXTENSIONS</name></cpp:macro> <cpp:value>"asf", "avi", "divx", "f4v", "flv", "m1v", "m2v", "m4v", "mkv", "mov", "mp2", "mp2v", "mp4", "mp4v", "mpe", "mpeg", "mpeg1", "mpeg2", "mpeg4", "mpg", "mpv2", "mxf", "ogv", "ogx", "ps", "vro","webm", "wmv", "wtv"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_SPU_EXTENSIONS</name></cpp:macro> <cpp:value>"aqt", "ass", "cdg", "dks", "idx", "jss", "mpl2", "mpsub", "pjs", "psb", "rt", "sami", "sbv", "scc", "smi", "srt", "ssa", "stl", "sub", "tt", "ttml", "usf", "vtt", "webvtt"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLAVE_AUDIO_EXTENSIONS</name></cpp:macro> <cpp:value>"aac", "ac3", "dts", "dtshd", "eac3", "flac", "m4a", "mp3", "pcm"</cpp:value></cpp:define> 

<struct>struct <name>input_item_slave</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>slave_type</name></name></type> <name>i_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>slave_priority</name></name></type> <name>i_priority</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_uri</name><index>[]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>input_item_node_t</name>

<block>{

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_children</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_CopyOptions</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_SetName</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>input_item_node_t</name> <modifier>*</modifier></type> <name>input_item_node_Create</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator><name>p_input</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>input_item_node_t</name> <modifier>*</modifier></type> <name>input_item_node_AppendItem</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_node_AppendNode</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_node_RemoveNode</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_node_Delete</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>;</function_decl>

<enum>enum <name>input_item_option_e</name>

<block>{

<decl><name>VLC_INPUT_OPTION_TRUSTED</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>VLC_INPUT_OPTION_UNIQUE</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_AddOption</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_AddOptions</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_options</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_AddOpaque</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>input_item_ApplyOptions</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>input_item_slave_GetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>slave_type</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>input_item_slave_t</name> <modifier>*</modifier></type><name>input_item_slave_New</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>slave_type</name></name></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>slave_priority</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_slave_Delete</name><parameter_list>(<parameter><type><name>p_slave</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p_slave)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_AddSlave</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_slave_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>input_item_HasErrorWhenReading</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_SetMeta</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>input_item_MetaMatch</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetMeta</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator><name>p_i</name></expr></argument>, <argument><expr><name>vlc_meta_type_t</name> <name>meta_type</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_item_GetMetaLocked</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_meta_type_t</name></type> <name>meta_type</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetName</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator> <name>p_i</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetTitleFbName</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator> <name>p_i</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetURI</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator> <name>p_i</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetNowPlayingFb</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator><name>p_item</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_SetURI</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>vlc_tick_t</name></type> <name>input_item_GetDuration</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_i</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_SetDuration</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_i</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>input_item_IsPreparsed</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>input_item_IsArtFetched</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_META</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static inline void input_item_Set ##name (input_item_t *p_input, const char *val) { input_item_SetMeta (p_input, vlc_meta_ ##name, val); } static inline char *input_item_Get ##name (input_item_t *p_input) { return input_item_GetMeta (p_input, vlc_meta_ ##name); }</cpp:value></cpp:define>

<macro><name>INPUT_META</name><argument_list>(<argument>Title</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Artist</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>AlbumArtist</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Genre</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Copyright</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Album</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>TrackNumber</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Description</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Rating</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Date</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Setting</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>URL</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Language</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>NowPlaying</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>ESNowPlaying</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Publisher</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>EncodedBy</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>ArtworkURL</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>TrackID</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>TrackTotal</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Director</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Season</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Episode</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>ShowName</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>Actors</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>DiscNumber</argument>)</argument_list></macro>

<macro><name>INPUT_META</name><argument_list>(<argument>DiscTotal</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_SetTrackNum</name></cpp:macro> <cpp:value>input_item_SetTrackNumber</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_GetTrackNum</name></cpp:macro> <cpp:value>input_item_GetTrackNumber</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_SetArtURL</name></cpp:macro> <cpp:value>input_item_SetArtworkURL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_GetArtURL</name></cpp:macro> <cpp:value>input_item_GetArtworkURL</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_GetInfo</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator><name>p_i</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_cat</name></expr></argument>,<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_name</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_AddInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> VLC_FORMAT<parameter_list>(</parameter_list> 4<operator>,</operator> 5</function_decl> )<empty_stmt>;</empty_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>input_item_DelInfo</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_ReplaceInfos</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>info_category_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_MergeInfos</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>info_category_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>input_item_t</name> <modifier>*</modifier></type> <name>input_item_NewExt</name><argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_uri</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_name</name></expr></argument>,

<argument><expr><name>vlc_tick_t</name> <name>i_duration</name></expr></argument>, <argument><expr>enum <name>input_item_type_e</name> <name>i_type</name></expr></argument>,

<argument><expr>enum <name>input_item_net_type</name> <name>i_net</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_New</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, INPUT_DURATION_UNSET, ITEM_TYPE_UNKNOWN, ITEM_NET_UNKNOWN )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_NewCard</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, INPUT_DURATION_INDEFINITE, ITEM_TYPE_CARD, ITEM_LOCAL )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_NewDisc</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>i_duration</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, i_duration, ITEM_TYPE_DISC, ITEM_LOCAL )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_NewStream</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>i_duration</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, i_duration, ITEM_TYPE_STREAM, ITEM_NET )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_NewDirectory</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>i_net</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, INPUT_DURATION_UNSET, ITEM_TYPE_DIRECTORY, i_net )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_item_NewFile</name><parameter_list>( <parameter><type><name>psz_uri</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>i_duration</name></type></parameter>, <parameter><type><name>i_net</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>input_item_NewExt( psz_uri, psz_name, i_duration, ITEM_TYPE_FILE, i_net )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>input_item_t</name> <modifier>*</modifier></type> <name>input_item_Copy</name><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>input_item_t</name> <modifier>*</modifier></type><name>input_item_Hold</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>input_item_Release</name><parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_RECORD_PREFIX</name></cpp:macro> <cpp:value>"vlc-record-%Y-%m-%d-%Hh%Mm%Ss-$ N-$ p"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>input_item_CreateFilename</name><argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_path</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_prefix</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_extension</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>input_item_parser_id_t</name></name></type> <name>input_item_parser_id_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>input_item_parser_cbs_t</name>

<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_ended</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_subtree_added</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>input_item_parser_cbs_t</name>;</typedef>

<decl_stmt><decl><type><name>VLC_API</name> <name>input_item_parser_id_t</name> <modifier>*</modifier></type>

<name>input_item_Parse</name><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>parent</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>input_item_parser_cbs_t</name> <operator>*</operator><name>cbs</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>userdata</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type>

<name>input_item_parser_id_Interrupt</name><parameter_list>(<parameter><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type>

<name>input_item_parser_id_Release</name><parameter_list>(<parameter><decl><type><name>input_item_parser_id_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <name>input_item_meta_request_option_t</name>

<block>{

<decl><name>META_REQUEST_OPTION_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_SCOPE_LOCAL</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_SCOPE_NETWORK</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_SCOPE_ANY</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_FETCH_LOCAL</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_FETCH_NETWORK</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_FETCH_ANY</name> <init>= <expr><literal type="number">0x0C</literal></expr></init></decl>,

<decl><name>META_REQUEST_OPTION_DO_INTERACT</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

}</block></enum></type> <name>input_item_meta_request_option_t</name>;</typedef>

<enum>enum <name>input_item_preparse_status</name>

<block>{

<decl><name>ITEM_PREPARSE_SKIPPED</name></decl>,

<decl><name>ITEM_PREPARSE_FAILED</name></decl>,

<decl><name>ITEM_PREPARSE_TIMEOUT</name></decl>,

<decl><name>ITEM_PREPARSE_DONE</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>input_preparser_callbacks_t</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_preparse_ended</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>input_item_preparse_status</name></name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_subtree_added</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>input_preparser_callbacks_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>input_fetcher_callbacks_t</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_art_fetch_ended</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fetched</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>input_fetcher_callbacks_t</name>;</typedef>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>libvlc_MetadataRequest</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_preparser_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>libvlc_ArtRequest</name><parameter_list>(<parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>input_item_meta_request_option_t</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>input_fetcher_callbacks_t</name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbs_userdata</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>libvlc_MetadataCancel</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>input_stats_t</name>

<block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_read_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_read_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_input_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_demux_read_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_demux_read_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_demux_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_demux_corrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_demux_discontinuity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_decoded_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_decoded_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_displayed_pictures</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_lost_pictures</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_played_abuffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_lost_abuffers</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>vlc_readdir_helper</name>

<block>{

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_slaves</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dirs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_dirs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sub_autodetect_fuzzy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_show_hiddenfiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_flatten</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ignored_exts</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_readdir_helper_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,

<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_readdir_helper_init</name><parameter_list>(<parameter><type><name>p_rdh</name></type></parameter>, <parameter><type><name>p_obj</name></type></parameter>, <parameter><type><name>p_node</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_readdir_helper_init(p_rdh, VLC_OBJECT(p_obj), p_node)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_readdir_helper_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_success</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_readdir_helper_additem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>p_rdh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_flatpath</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_net</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
