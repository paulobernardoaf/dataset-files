



















#ifndef VLC_PLAYER_H
#define VLC_PLAYER_H 1

#include <vlc_input.h>
#include <vlc_aout.h>







































typedef struct vlc_player_t vlc_player_t;




enum vlc_player_lock_type
{
    





    VLC_PLAYER_LOCK_NORMAL,

    






    VLC_PLAYER_LOCK_REENTRANT,
};






enum vlc_player_media_stopped_action {
    
    VLC_PLAYER_MEDIA_STOPPED_CONTINUE,
    
    VLC_PLAYER_MEDIA_STOPPED_PAUSE,
    
    VLC_PLAYER_MEDIA_STOPPED_STOP,
    
    VLC_PLAYER_MEDIA_STOPPED_EXIT,
};











struct vlc_player_media_provider
{
    








    input_item_t *(*get_next)(vlc_player_t *player, void *data);
};










VLC_API vlc_player_t *
vlc_player_New(vlc_object_t *parent, enum vlc_player_lock_type lock_type,
               const struct vlc_player_media_provider *media_provider,
               void *media_provider_data);












VLC_API void
vlc_player_Delete(vlc_player_t *player);









VLC_API void
vlc_player_Lock(vlc_player_t *player);






VLC_API void
vlc_player_Unlock(vlc_player_t *player);









VLC_API void
vlc_player_CondWait(vlc_player_t *player, vlc_cond_t *cond);







VLC_API void
vlc_player_SetMediaStoppedAction(vlc_player_t *player,
                                 enum vlc_player_media_stopped_action action);









VLC_API void
vlc_player_SetStartPaused(vlc_player_t *player, bool start_paused);











VLC_API void
vlc_player_SetPauseOnCork(vlc_player_t *player, bool enabled);





















enum vlc_player_state
{
    





    VLC_PLAYER_STATE_STOPPED,

    




    VLC_PLAYER_STATE_STARTED,

    





    VLC_PLAYER_STATE_PLAYING,

    




    VLC_PLAYER_STATE_PAUSED,

    





    VLC_PLAYER_STATE_STOPPING,
};






enum vlc_player_error
{
    VLC_PLAYER_ERROR_NONE,
    VLC_PLAYER_ERROR_GENERIC,
};







enum vlc_player_seek_speed
{
    
    VLC_PLAYER_SEEK_PRECISE,
    
    VLC_PLAYER_SEEK_FAST,
};








enum vlc_player_whence
{
    
    VLC_PLAYER_WHENCE_ABSOLUTE,
    
    VLC_PLAYER_WHENCE_RELATIVE,
};






enum vlc_player_nav
{
    
    VLC_PLAYER_NAV_ACTIVATE,
    
    VLC_PLAYER_NAV_UP,
    
    VLC_PLAYER_NAV_DOWN,
    
    VLC_PLAYER_NAV_LEFT,
    
    VLC_PLAYER_NAV_RIGHT,
    
    VLC_PLAYER_NAV_POPUP,
    
    VLC_PLAYER_NAV_MENU,
};




enum vlc_player_abloop
{
    VLC_PLAYER_ABLOOP_NONE,
    VLC_PLAYER_ABLOOP_A,
    VLC_PLAYER_ABLOOP_B,
};


#define VLC_PLAYER_CAP_SEEK (1<<0)

#define VLC_PLAYER_CAP_PAUSE (1<<1)

#define VLC_PLAYER_CAP_CHANGE_RATE (1<<2)

#define VLC_PLAYER_CAP_REWIND (1<<3)


#define VLC_PLAYER_TELETEXT_KEY_RED ('r' << 16)

#define VLC_PLAYER_TELETEXT_KEY_GREEN ('g' << 16)

#define VLC_PLAYER_TELETEXT_KEY_YELLOW ('y' << 16)

#define VLC_PLAYER_TELETEXT_KEY_BLUE ('b' << 16)

#define VLC_PLAYER_TELETEXT_KEY_INDEX ('i' << 16)

enum vlc_player_restore_playback_pos
{
    VLC_PLAYER_RESTORE_PLAYBACK_POS_NEVER,
    VLC_PLAYER_RESTORE_PLAYBACK_POS_ASK,
    VLC_PLAYER_RESTORE_PLAYBACK_POS_ALWAYS,
};




















VLC_API int
vlc_player_SetCurrentMedia(vlc_player_t *player, input_item_t *media);









VLC_API input_item_t *
vlc_player_GetCurrentMedia(vlc_player_t *player);




static inline input_item_t *
vlc_player_HoldCurrentMedia(vlc_player_t *player)
{
    input_item_t *item = vlc_player_GetCurrentMedia(player);
    return item ? input_item_Hold(item) : NULL;
}













VLC_API void
vlc_player_InvalidateNextMedia(vlc_player_t *player);







VLC_API int
vlc_player_Start(vlc_player_t *player);











VLC_API int
vlc_player_Stop(vlc_player_t *player);






VLC_API void
vlc_player_Pause(vlc_player_t *player);






VLC_API void
vlc_player_Resume(vlc_player_t *player);






VLC_API void
vlc_player_NextVideoFrame(vlc_player_t *player);














VLC_API enum vlc_player_state
vlc_player_GetState(vlc_player_t *player);









VLC_API enum vlc_player_error
vlc_player_GetError(vlc_player_t *player);




static inline bool
vlc_player_IsStarted(vlc_player_t *player)
{
    switch (vlc_player_GetState(player))
    {
        case VLC_PLAYER_STATE_STARTED:
        case VLC_PLAYER_STATE_PLAYING:
        case VLC_PLAYER_STATE_PAUSED:
            return true;
        default:
            return false;
    }
}




static inline bool
vlc_player_IsPaused(vlc_player_t *player)
{
    return vlc_player_GetState(player) == VLC_PLAYER_STATE_PAUSED;
}




static inline void
vlc_player_TogglePause(vlc_player_t *player)
{
    if (vlc_player_IsStarted(player))
    {
        if (vlc_player_IsPaused(player))
            vlc_player_Resume(player);
        else
            vlc_player_Pause(player);
    }
}











VLC_API int
vlc_player_GetCapabilities(vlc_player_t *player);




static inline bool
vlc_player_CanSeek(vlc_player_t *player)
{
    return vlc_player_GetCapabilities(player) & VLC_PLAYER_CAP_SEEK;
}




static inline bool
vlc_player_CanPause(vlc_player_t *player)
{
    return vlc_player_GetCapabilities(player) & VLC_PLAYER_CAP_PAUSE;
}




static inline bool
vlc_player_CanChangeRate(vlc_player_t *player)
{
    return vlc_player_GetCapabilities(player) & VLC_PLAYER_CAP_CHANGE_RATE;
}




static inline bool
vlc_player_CanRewind(vlc_player_t *player)
{
    return vlc_player_GetCapabilities(player) & VLC_PLAYER_CAP_REWIND;
}









VLC_API float
vlc_player_GetRate(vlc_player_t *player);









VLC_API void
vlc_player_ChangeRate(vlc_player_t *player, float rate);






VLC_API void
vlc_player_IncrementRate(vlc_player_t *player);






VLC_API void
vlc_player_DecrementRate(vlc_player_t *player);












VLC_API vlc_tick_t
vlc_player_GetLength(vlc_player_t *player);












VLC_API vlc_tick_t
vlc_player_GetTime(vlc_player_t *player);










VLC_API float
vlc_player_GetPosition(vlc_player_t *player);












VLC_API void
vlc_player_SeekByPos(vlc_player_t *player, float position,
                     enum vlc_player_seek_speed speed,
                     enum vlc_player_whence whence);














VLC_API void
vlc_player_SeekByTime(vlc_player_t *player, vlc_tick_t time,
                      enum vlc_player_seek_speed speed,
                      enum vlc_player_whence whence);




static inline void
vlc_player_SetPosition(vlc_player_t *player, float position)
{
    vlc_player_SeekByPos(player, position, VLC_PLAYER_SEEK_PRECISE,
                         VLC_PLAYER_WHENCE_ABSOLUTE);
}




static inline void
vlc_player_SetPositionFast(vlc_player_t *player, float position)
{
    vlc_player_SeekByPos(player, position, VLC_PLAYER_SEEK_FAST,
                         VLC_PLAYER_WHENCE_ABSOLUTE);
}




static inline void
vlc_player_JumpPos(vlc_player_t *player, float jumppos)
{
    

    vlc_player_SeekByPos(player, jumppos, VLC_PLAYER_SEEK_PRECISE,
                         VLC_PLAYER_WHENCE_RELATIVE);
}




static inline void
vlc_player_SetTime(vlc_player_t *player, vlc_tick_t time)
{
    vlc_player_SeekByTime(player, time, VLC_PLAYER_SEEK_PRECISE,
                          VLC_PLAYER_WHENCE_ABSOLUTE);
}




static inline void
vlc_player_SetTimeFast(vlc_player_t *player, vlc_tick_t time)
{
    vlc_player_SeekByTime(player, time, VLC_PLAYER_SEEK_FAST,
                          VLC_PLAYER_WHENCE_ABSOLUTE);
}




static inline void
vlc_player_JumpTime(vlc_player_t *player, vlc_tick_t jumptime)
{
    

    vlc_player_SeekByTime(player, jumptime, VLC_PLAYER_SEEK_PRECISE,
                          VLC_PLAYER_WHENCE_RELATIVE);
}






VLC_API void
vlc_player_DisplayPosition(vlc_player_t *player);











VLC_API int
vlc_player_SetAtoBLoop(vlc_player_t *player, enum vlc_player_abloop abloop);




















VLC_API enum vlc_player_abloop
vlc_player_GetAtoBLoop(vlc_player_t *player, vlc_tick_t *a_time, float *a_pos,
                       vlc_tick_t *b_time, float *b_pos);







VLC_API void
vlc_player_Navigate(vlc_player_t *player, enum vlc_player_nav nav);









VLC_API void
vlc_player_UpdateViewpoint(vlc_player_t *player,
                           const vlc_viewpoint_t *viewpoint,
                           enum vlc_player_whence whence);









VLC_API bool
vlc_player_IsRecording(vlc_player_t *player);










VLC_API void
vlc_player_SetRecordingEnabled(vlc_player_t *player, bool enabled);




static inline void
vlc_player_ToggleRecording(vlc_player_t *player)
{
    vlc_player_SetRecordingEnabled(player, !vlc_player_IsRecording(player));
}











VLC_API int
vlc_player_AddAssociatedMedia(vlc_player_t *player,
                              enum es_format_category_e cat, const char *uri,
                              bool select, bool notify, bool check_ext);






VLC_API int
vlc_player_GetSignal(vlc_player_t *player, float *quality, float *strength);












VLC_API const struct input_stats_t *
vlc_player_GetStatistics(vlc_player_t *player);




VLC_API void
vlc_player_RestorePlaybackPos(vlc_player_t *player);








VLC_API vlc_object_t *
vlc_player_GetV4l2Object(vlc_player_t *player) VLC_DEPRECATED;











struct vlc_player_chapter
{
    
    const char *name;
    
    vlc_tick_t time;
};


#define VLC_PLAYER_TITLE_MENU         0x01

#define VLC_PLAYER_TITLE_INTERACTIVE  0x02


struct vlc_player_title
{
    
    const char *name;
    
    vlc_tick_t length;
    

    unsigned flags;
    
    size_t chapter_count;
    
    const struct vlc_player_chapter *chapters;
};








typedef struct vlc_player_title_list vlc_player_title_list;











VLC_API vlc_player_title_list *
vlc_player_title_list_Hold(vlc_player_title_list *titles);




VLC_API void
vlc_player_title_list_Release(vlc_player_title_list *titles);




VLC_API size_t
vlc_player_title_list_GetCount(vlc_player_title_list *titles);







VLC_API const struct vlc_player_title *
vlc_player_title_list_GetAt(vlc_player_title_list *titles, size_t idx);








VLC_API vlc_player_title_list *
vlc_player_GetTitleList(vlc_player_t *player);








VLC_API ssize_t
vlc_player_GetSelectedTitleIdx(vlc_player_t *player);




static inline const struct vlc_player_title *
vlc_player_GetSelectedTitle(vlc_player_t *player)
{
    vlc_player_title_list *titles = vlc_player_GetTitleList(player);
    if (!titles)
        return NULL;
    ssize_t selected_idx = vlc_player_GetSelectedTitleIdx(player);
    if (selected_idx < 0)
        return NULL;
    return vlc_player_title_list_GetAt(titles, selected_idx);
}













VLC_API void
vlc_player_SelectTitleIdx(vlc_player_t *player, size_t index);













VLC_API void
vlc_player_SelectTitle(vlc_player_t *player,
                       const struct vlc_player_title *title);











VLC_API void
vlc_player_SelectChapter(vlc_player_t *player,
                         const struct vlc_player_title *title,
                         size_t chapter_idx);






VLC_API void
vlc_player_SelectNextTitle(vlc_player_t *player);






VLC_API void
vlc_player_SelectPrevTitle(vlc_player_t *player);








VLC_API ssize_t
vlc_player_GetSelectedChapterIdx(vlc_player_t *player);




static inline const struct vlc_player_chapter *
vlc_player_GetSelectedChapter(vlc_player_t *player)
{
    const struct vlc_player_title *title = vlc_player_GetSelectedTitle(player);
    if (!title || !title->chapter_count)
        return NULL;
    ssize_t chapter_idx = vlc_player_GetSelectedChapterIdx(player);
    return chapter_idx >= 0 ? &title->chapters[chapter_idx] : NULL;
}












VLC_API void
vlc_player_SelectChapterIdx(vlc_player_t *player, size_t index);






VLC_API void
vlc_player_SelectNextChapter(vlc_player_t *player);






VLC_API void
vlc_player_SelectPrevChapter(vlc_player_t *player);











struct vlc_player_program
{
    
    int group_id;
    
    const char *name;
    
    bool selected;
    
    bool scrambled;
};











VLC_API struct vlc_player_program *
vlc_player_program_Dup(const struct vlc_player_program *prgm);




VLC_API void
vlc_player_program_Delete(struct vlc_player_program *prgm);










VLC_API size_t
vlc_player_GetProgramCount(vlc_player_t *player);














VLC_API const struct vlc_player_program *
vlc_player_GetProgramAt(vlc_player_t *player, size_t index);










VLC_API const struct vlc_player_program *
vlc_player_GetProgram(vlc_player_t *player, int group_id);








VLC_API void
vlc_player_SelectProgram(vlc_player_t *player, int group_id);






VLC_API void
vlc_player_SelectNextProgram(vlc_player_t *player);






VLC_API void
vlc_player_SelectPrevProgram(vlc_player_t *player);




static inline const struct vlc_player_program *
vlc_player_GetSelectedProgram(vlc_player_t *player)
{
    size_t count = vlc_player_GetProgramCount(player);
    for (size_t i = 0; i < count; ++i)
    {
        const struct vlc_player_program *program =
            vlc_player_GetProgramAt(player, i);
        assert(program);
        if (program->selected)
            return program;
    }
    return NULL;
}













enum vlc_player_select_policy
{
    



    VLC_PLAYER_SELECT_EXCLUSIVE,
    






    VLC_PLAYER_SELECT_SIMULTANEOUS,
};










struct vlc_player_track
{
    
    vlc_es_id_t *es_id;
    
    const char *name;
    
    es_format_t fmt;
    
    bool selected;
};














VLC_API struct vlc_player_track *
vlc_player_track_Dup(const struct vlc_player_track *track);




VLC_API void
vlc_player_track_Delete(struct vlc_player_track *track);











VLC_API size_t
vlc_player_GetTrackCount(vlc_player_t *player, enum es_format_category_e cat);















VLC_API const struct vlc_player_track *
vlc_player_GetTrackAt(vlc_player_t *player, enum es_format_category_e cat,
                      size_t index);




static inline size_t
vlc_player_GetVideoTrackCount(vlc_player_t *player)
{
    return vlc_player_GetTrackCount(player, VIDEO_ES);
}




static inline const struct vlc_player_track *
vlc_player_GetVideoTrackAt(vlc_player_t *player, size_t index)
{
    return vlc_player_GetTrackAt(player, VIDEO_ES, index);
}




static inline size_t
vlc_player_GetAudioTrackCount(vlc_player_t *player)
{
    return vlc_player_GetTrackCount(player, AUDIO_ES);
}




static inline const struct vlc_player_track *
vlc_player_GetAudioTrackAt(vlc_player_t *player, size_t index)
{
    return vlc_player_GetTrackAt(player, AUDIO_ES, index);
}




static inline size_t
vlc_player_GetSubtitleTrackCount(vlc_player_t *player)
{
    return vlc_player_GetTrackCount(player, SPU_ES);
}




static inline const struct vlc_player_track *
vlc_player_GetSubtitleTrackAt(vlc_player_t *player, size_t index)
{
    return vlc_player_GetTrackAt(player, SPU_ES, index);
}













VLC_API const struct vlc_player_track *
vlc_player_GetTrack(vlc_player_t *player, vlc_es_id_t *es_id);

















VLC_API vout_thread_t *
vlc_player_GetEsIdVout(vlc_player_t *player, vlc_es_id_t *es_id,
                       enum vlc_vout_order *order);














VLC_API vlc_es_id_t *
vlc_player_GetEsIdFromVout(vlc_player_t *player, vout_thread_t *vout);









static inline const struct vlc_player_track *
vlc_player_GetSelectedTrack(vlc_player_t *player, enum es_format_category_e cat)
{
    size_t count = vlc_player_GetTrackCount(player, cat);
    for (size_t i = 0; i < count; ++i)
    {
        const struct vlc_player_track *track =
            vlc_player_GetTrackAt(player, cat, i);
        assert(track);
        if (track->selected)
            return track;
    }
    return NULL;
}

























VLC_API void
vlc_player_SelectTracksByStringIds(vlc_player_t *player,
                                   enum es_format_category_e cat,
                                   const char *str_ids);













VLC_API unsigned
vlc_player_SelectEsId(vlc_player_t *player, vlc_es_id_t *es_id,
                      enum vlc_player_select_policy policy);





static inline unsigned
vlc_player_SelectTrack(vlc_player_t *player,
                       const struct vlc_player_track *track,
                       enum vlc_player_select_policy policy)
{
    return vlc_player_SelectEsId(player, track->es_id, policy);
}























VLC_API unsigned
vlc_player_SelectEsIdList(vlc_player_t *player,
                          enum es_format_category_e cat,
                          vlc_es_id_t *const es_id_list[]);














VLC_API void
vlc_player_SelectNextTrack(vlc_player_t *player,
                           enum es_format_category_e cat);














VLC_API void
vlc_player_SelectPrevTrack(vlc_player_t *player,
                           enum es_format_category_e cat);













VLC_API void
vlc_player_UnselectEsId(vlc_player_t *player, vlc_es_id_t *es_id);




static inline void
vlc_player_UnselectTrack(vlc_player_t *player,
                         const struct vlc_player_track *track)
{
    vlc_player_UnselectEsId(player, track->es_id);
}




static inline void
vlc_player_UnselectTrackCategory(vlc_player_t *player,
                                 enum es_format_category_e cat)
{
    size_t count = vlc_player_GetTrackCount(player, cat);
    for (size_t i = 0; i < count; ++i)
    {
        const struct vlc_player_track *track =
            vlc_player_GetTrackAt(player, cat, i);
        assert(track);
        if (track->selected)
            vlc_player_UnselectTrack(player, track);
    }
}











VLC_API void
vlc_player_RestartEsId(vlc_player_t *player, vlc_es_id_t *es_id);




static inline void
vlc_player_RestartTrack(vlc_player_t *player,
                        const struct vlc_player_track *track)
{
    vlc_player_RestartEsId(player, track->es_id);
}




static inline void
vlc_player_RestartTrackCategory(vlc_player_t *player,
                                enum es_format_category_e cat)
{
    size_t count = vlc_player_GetTrackCount(player, cat);
    for (size_t i = 0; i < count; ++i)
    {
        const struct vlc_player_track *track =
            vlc_player_GetTrackAt(player, cat, i);
        assert(track);
        if (track->selected)
            vlc_player_RestartTrack(player, track);
    }
}











VLC_API void
vlc_player_SelectCategoryLanguage(vlc_player_t *player,
                                  enum es_format_category_e cat,
                                  const char *lang);














VLC_API char *
vlc_player_GetCategoryLanguage(vlc_player_t *player,
                               enum es_format_category_e cat);




static inline void
vlc_player_SelectAudioLanguage(vlc_player_t *player, const char *lang)
{
    vlc_player_SelectCategoryLanguage(player, AUDIO_ES, lang);
}




static inline void
vlc_player_SelectSubtitleLanguage(vlc_player_t *player, const char *lang)
{
    vlc_player_SelectCategoryLanguage(player, SPU_ES, lang);
}











VLC_API void
vlc_player_SetTrackCategoryEnabled(vlc_player_t *player,
                                   enum es_format_category_e cat, bool enabled);







VLC_API bool
vlc_player_IsTrackCategoryEnabled(vlc_player_t *player,
                                  enum es_format_category_e cat);




static inline void
vlc_player_SetVideoEnabled(vlc_player_t *player, bool enabled)
{
    vlc_player_SetTrackCategoryEnabled(player, VIDEO_ES, enabled);
}




static inline bool
vlc_player_IsVideoEnabled(vlc_player_t *player)
{
    return vlc_player_IsTrackCategoryEnabled(player, VIDEO_ES);
}




static inline void
vlc_player_SetAudioEnabled(vlc_player_t *player, bool enabled)
{
    vlc_player_SetTrackCategoryEnabled(player, AUDIO_ES, enabled);
}




static inline bool
vlc_player_IsAudioEnabled(vlc_player_t *player)
{
    return vlc_player_IsTrackCategoryEnabled(player, AUDIO_ES);
}




static inline void
vlc_player_SetSubtitleEnabled(vlc_player_t *player, bool enabled)
{
    vlc_player_SetTrackCategoryEnabled(player, SPU_ES, enabled);
}




static inline bool
vlc_player_IsSubtitleEnabled(vlc_player_t *player)
{
    return vlc_player_IsTrackCategoryEnabled(player, SPU_ES);
}




static inline void
vlc_player_ToggleSubtitle(vlc_player_t *player)
{
    bool enabled = !vlc_player_IsSubtitleEnabled(player);
    return vlc_player_SetSubtitleEnabled(player, enabled);
}









VLC_API void
vlc_player_SetSubtitleTextScale(vlc_player_t *player, unsigned scale);







VLC_API unsigned
vlc_player_GetSubtitleTextScale(vlc_player_t *player);

















VLC_API vlc_tick_t
vlc_player_GetCategoryDelay(vlc_player_t *player, enum es_format_category_e cat);
















VLC_API int
vlc_player_SetCategoryDelay(vlc_player_t *player, enum es_format_category_e cat,
                            vlc_tick_t delay, enum vlc_player_whence whence);











VLC_API vlc_tick_t
vlc_player_GetEsIdDelay(vlc_player_t *player, vlc_es_id_t *es_id);


















VLC_API int
vlc_player_SetEsIdDelay(vlc_player_t *player, vlc_es_id_t *es_id,
                        vlc_tick_t delay, enum vlc_player_whence whence);




static inline vlc_tick_t
vlc_player_GetAudioDelay(vlc_player_t *player)
{
    return vlc_player_GetCategoryDelay(player, AUDIO_ES);
}




static inline void
vlc_player_SetAudioDelay(vlc_player_t *player, vlc_tick_t delay,
                         enum vlc_player_whence whence)

{
    vlc_player_SetCategoryDelay(player, AUDIO_ES, delay, whence);
}




static inline vlc_tick_t
vlc_player_GetSubtitleDelay(vlc_player_t *player)
{
    return vlc_player_GetCategoryDelay(player, SPU_ES);
}




static inline void
vlc_player_SetSubtitleDelay(vlc_player_t *player, vlc_tick_t delay,
                            enum vlc_player_whence whence)
{
    vlc_player_SetCategoryDelay(player, SPU_ES, delay, whence);
}
















VLC_API void
vlc_player_SetAssociatedSubsFPS(vlc_player_t *player, float fps);







VLC_API float
vlc_player_GetAssociatedSubsFPS(vlc_player_t *player);
















VLC_API bool
vlc_player_HasTeletextMenu(vlc_player_t *player);












VLC_API void
vlc_player_SetTeletextEnabled(vlc_player_t *player, bool enabled);








VLC_API bool
vlc_player_IsTeletextEnabled(vlc_player_t *player);
















VLC_API void
vlc_player_SelectTeletextPage(vlc_player_t *player, unsigned page);








VLC_API unsigned
vlc_player_GetTeletextPage(vlc_player_t *player);












VLC_API void
vlc_player_SetTeletextTransparency(vlc_player_t *player, bool enabled);






VLC_API bool
vlc_player_IsTeletextTransparent(vlc_player_t *player);




















VLC_API void
vlc_player_SetRenderer(vlc_player_t *player, vlc_renderer_item_t *renderer);









VLC_API vlc_renderer_item_t *
vlc_player_GetRenderer(vlc_player_t *player);














typedef struct vlc_player_aout_listener_id vlc_player_aout_listener_id;









struct vlc_player_aout_cbs
{
    








    void (*on_volume_changed)(audio_output_t *aout, float new_volume,
        void *data);

    








    void (*on_mute_changed)(audio_output_t *aout, bool new_muted,
        void *data);

    






    void (*on_device_changed)(audio_output_t *aout, const char *device,
        void *data);
};









VLC_API audio_output_t *
vlc_player_aout_Hold(vlc_player_t *player);















VLC_API vlc_player_aout_listener_id *
vlc_player_aout_AddListener(vlc_player_t *player,
                            const struct vlc_player_aout_cbs *cbs,
                            void *cbs_data);







VLC_API void
vlc_player_aout_RemoveListener(vlc_player_t *player,
                               vlc_player_aout_listener_id *listener_id);













VLC_API float
vlc_player_aout_GetVolume(vlc_player_t *player);














VLC_API int
vlc_player_aout_SetVolume(vlc_player_t *player, float volume);











VLC_API int
vlc_player_aout_IncrementVolume(vlc_player_t *player, int steps, float *result);




static inline int
vlc_player_aout_DecrementVolume(vlc_player_t *player, int steps, float *result)
{
    return vlc_player_aout_IncrementVolume(player, -steps, result);
}












VLC_API int
vlc_player_aout_IsMuted(vlc_player_t *player);














VLC_API int
vlc_player_aout_Mute(vlc_player_t *player, bool mute);




static inline int
vlc_player_aout_ToggleMute(vlc_player_t *player)
{
    return vlc_player_aout_Mute(player,
                                !vlc_player_aout_IsMuted(player));
}








VLC_API int
vlc_player_aout_EnableFilter(vlc_player_t *player, const char *name, bool add);














typedef struct vlc_player_vout_listener_id vlc_player_vout_listener_id;




enum vlc_player_vout_action
{
    VLC_PLAYER_VOUT_STARTED,
    VLC_PLAYER_VOUT_STOPPED,
};













struct vlc_player_vout_cbs
{
    








    void (*on_fullscreen_changed)(vout_thread_t *vout, bool enabled,
        void *data);

    








    void (*on_wallpaper_mode_changed)(vout_thread_t *vout, bool enabled,
        void *data);
};















VLC_API vout_thread_t *
vlc_player_vout_Hold(vlc_player_t *player);













VLC_API vout_thread_t **
vlc_player_vout_HoldAll(vlc_player_t *player, size_t *count);















VLC_API vlc_player_vout_listener_id *
vlc_player_vout_AddListener(vlc_player_t *player,
                            const struct vlc_player_vout_cbs *cbs,
                            void *cbs_data);







VLC_API void
vlc_player_vout_RemoveListener(vlc_player_t *player,
                               vlc_player_vout_listener_id *listener_id);














VLC_API bool
vlc_player_vout_IsFullscreen(vlc_player_t *player);














VLC_API void
vlc_player_vout_SetFullscreen(vlc_player_t *player, bool enabled);




static inline void
vlc_player_vout_ToggleFullscreen(vlc_player_t *player)
{
    vlc_player_vout_SetFullscreen(player,
                                  !vlc_player_vout_IsFullscreen(player));
}















VLC_API bool
vlc_player_vout_IsWallpaperModeEnabled(vlc_player_t *player);














VLC_API void
vlc_player_vout_SetWallpaperModeEnabled(vlc_player_t *player, bool enabled);




static inline void
vlc_player_vout_ToggleWallpaperMode(vlc_player_t *player)
{
    vlc_player_vout_SetWallpaperModeEnabled(player,
        !vlc_player_vout_IsWallpaperModeEnabled(player));
}






VLC_API void
vlc_player_vout_Snapshot(vlc_player_t *player);







VLC_API void
vlc_player_osd_Message(vlc_player_t *player, const char *fmt, ...);














typedef struct vlc_player_listener_id vlc_player_listener_id;





enum vlc_player_list_action
{
    VLC_PLAYER_LIST_ADDED,
    VLC_PLAYER_LIST_REMOVED,
    VLC_PLAYER_LIST_UPDATED,
};















struct vlc_player_cbs
{
    














    void (*on_current_media_changed)(vlc_player_t *player,
        input_item_t *new_media, void *data);

    








    void (*on_state_changed)(vlc_player_t *player,
        enum vlc_player_state new_state, void *data);

    










    void (*on_error_changed)(vlc_player_t *player,
        enum vlc_player_error error, void *data);

    









    void (*on_buffering_changed)(vlc_player_t *player,
        float new_buffering, void *data);

    









    void (*on_rate_changed)(vlc_player_t *player,
        float new_rate, void *data);

    









    void (*on_capabilities_changed)(vlc_player_t *player,
        int old_caps, int new_caps, void *data);

    









    void (*on_position_changed)(vlc_player_t *player,
        vlc_tick_t new_time, float new_pos, void *data);

    










    void (*on_length_changed)(vlc_player_t *player,
        vlc_tick_t new_length, void *data);

    











    void (*on_track_list_changed)(vlc_player_t *player,
        enum vlc_player_list_action action,
        const struct vlc_player_track *track, void *data);

    










    void (*on_track_selection_changed)(vlc_player_t *player,
        vlc_es_id_t *unselected_id, vlc_es_id_t *selected_id, void *data);

    







    void (*on_track_delay_changed)(vlc_player_t *player,
        vlc_es_id_t *es_id, vlc_tick_t delay, void *data);

    











    void (*on_program_list_changed)(vlc_player_t *player,
        enum vlc_player_list_action action,
        const struct vlc_player_program *prgm, void *data);

    










    void (*on_program_selection_changed)(vlc_player_t *player,
        int unselected_id, int selected_id, void *data);

    













    void (*on_titles_changed)(vlc_player_t *player,
        vlc_player_title_list *titles, void *data);

    












    void (*on_title_selection_changed)(vlc_player_t *player,
        const struct vlc_player_title *new_title, size_t new_idx, void *data);

    














    void (*on_chapter_selection_changed)(vlc_player_t *player,
        const struct vlc_player_title *title, size_t title_idx,
        const struct vlc_player_chapter *new_chapter, size_t new_chapter_idx,
        void *data);

    






    void (*on_teletext_menu_changed)(vlc_player_t *player,
        bool has_teletext_menu, void *data);

    








    void (*on_teletext_enabled_changed)(vlc_player_t *player,
        bool enabled, void *data);

    








    void (*on_teletext_page_changed)(vlc_player_t *player,
        unsigned new_page, void *data);

    








    void (*on_teletext_transparency_changed)(vlc_player_t *player,
        bool enabled, void *data);

    









    void (*on_category_delay_changed)(vlc_player_t *player,
         enum es_format_category_e cat, vlc_tick_t new_delay, void *data);

    








    void (*on_associated_subs_fps_changed)(vlc_player_t *player,
        float subs_fps, void *data);

    








    void (*on_renderer_changed)(vlc_player_t *player,
        vlc_renderer_item_t *new_item, void *data);

    








    void (*on_recording_changed)(vlc_player_t *player,
        bool recording, void *data);

    







    void (*on_signal_changed)(vlc_player_t *player,
        float quality, float strength, void *data);

    









    void (*on_statistics_changed)(vlc_player_t *player,
        const struct input_stats_t *stats, void *data);

    











    void (*on_atobloop_changed)(vlc_player_t *player,
        enum vlc_player_abloop new_state, vlc_tick_t time, float pos,
        void *data);

    








    void (*on_media_stopped_action_changed)(vlc_player_t *player,
        enum vlc_player_media_stopped_action new_action, void *data);

    






    void (*on_media_meta_changed)(vlc_player_t *player,
        input_item_t *media, void *data);

    






    void (*on_media_epg_changed)(vlc_player_t *player,
        input_item_t *media, void *data);

    







    void (*on_media_subitems_changed)(vlc_player_t *player,
        input_item_t *media, input_item_node_t *new_subitems, void *data);

    













    void (*on_vout_changed)(vlc_player_t *player,
        enum vlc_player_vout_action action, vout_thread_t *vout,
        enum vlc_vout_order order, vlc_es_id_t *es_id, void *data);

    


















    void (*on_cork_changed)(vlc_player_t *player, unsigned cork_count,
                            void *data);

    













    void (*on_playback_restore_queried)(vlc_player_t *player, void *data);
};













VLC_API vlc_player_listener_id *
vlc_player_AddListener(vlc_player_t *player,
                       const struct vlc_player_cbs *cbs, void *cbs_data);







VLC_API void
vlc_player_RemoveListener(vlc_player_t *player,
                          vlc_player_listener_id *listener_id);











typedef struct vlc_player_timer_id vlc_player_timer_id;






struct vlc_player_timer_point
{
    
    float position;
    
    double rate;
    

    vlc_tick_t ts;
    
    vlc_tick_t length;
    




    vlc_tick_t system_date;
};






struct vlc_player_timer_smpte_timecode
{
    
    unsigned hours;
    
    unsigned minutes;
    
    unsigned seconds;
    
    unsigned frames;
    
    unsigned frame_resolution;
    
    bool drop_frame;
};






struct vlc_player_timer_cbs
{
    

















    void (*on_update)(const struct vlc_player_timer_point *value, void *data);

    









    void (*on_discontinuity)(vlc_tick_t system_date, void *data);
};






struct vlc_player_timer_smpte_cbs
{
    









    void (*on_update)(const struct vlc_player_timer_smpte_timecode *tc,
                      void *data);
};














VLC_API vlc_player_timer_id *
vlc_player_AddTimer(vlc_player_t *player, vlc_tick_t min_period,
                    const struct vlc_player_timer_cbs *cbs, void *data);











VLC_API vlc_player_timer_id *
vlc_player_AddSmpteTimer(vlc_player_t *player,
                         const struct vlc_player_timer_smpte_cbs *cbs,
                         void *data);







VLC_API void
vlc_player_RemoveTimer(vlc_player_t *player, vlc_player_timer_id *timer);














VLC_API int
vlc_player_timer_point_Interpolate(const struct vlc_player_timer_point *point,
                                   vlc_tick_t system_now,
                                   vlc_tick_t *out_ts, float *out_pos);


















VLC_API vlc_tick_t
vlc_player_timer_point_GetNextIntervalDate(const struct vlc_player_timer_point *point,
                                           vlc_tick_t system_now,
                                           vlc_tick_t interpolated_ts,
                                           vlc_tick_t next_interval);





#endif
