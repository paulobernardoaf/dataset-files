<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_list.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vlc_list</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LIST_INITIALIZER</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ h, h }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_add_between</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_add_after</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_add_between</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_add_before</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_add_between</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_add_before</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_prepend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_add_after</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>original</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>substitute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_list_add_between</name><argument_list>(<argument><expr><name>substitute</name></expr></argument>, <argument><expr><name><name>original</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>original</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_list_is_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>head</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_list_is_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>head</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_list_is_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>head</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>vlc_list_it</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name><name>struct</name> <name>vlc_list_it</name></name></type> <name>vlc_list_it_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator>struct <name>vlc_list_it</name><operator>)</operator><block>{ <expr><name>head</name></expr>, <expr><name>first</name></expr>, <expr><name><name>first</name><operator>-&gt;</operator><name>next</name></name></expr> }</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_list_it_continue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list_it</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>head</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_list_it_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_list_it</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_entry_aligned_size</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sizeof (*(p)) + sizeof (max_align_t) - 1) / sizeof (max_align_t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_entry_dummy</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 ? (p) : ((void *)(&amp;(max_align_t[vlc_list_entry_aligned_size(p)]){})))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_offset_p</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) = vlc_list_entry_dummy(p), (char *)(&amp;(p)-&gt;member) - (char *)(p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_entry_p</name><parameter_list>(<parameter><type><name>node</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 ? (p) : (void *)(((char *)(node)) - vlc_list_offset_p(p, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_foreach</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (struct vlc_list_it vlc_list_it_##pos = vlc_list_it_start(head); vlc_list_it_continue(&amp;(vlc_list_it_##pos)) &amp;&amp; ((pos) = vlc_list_entry_p((vlc_list_it_##pos).current, pos, member), true); vlc_list_it_next(&amp;(vlc_list_it_##pos)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_entry</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(ptr, type, member)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_list_first_or_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>head</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_list_last_or_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_is_empty</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>head</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_list_prev_or_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_is_first</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_list_next_or_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vlc_list</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_list_is_last</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_first_entry_or_null</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)vlc_list_first_or_null(head, offsetof (type, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_last_entry_or_null</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)vlc_list_last_or_null(head, offsetof (type, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_prev_entry_or_null</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)vlc_list_prev_or_null(head, &amp;(entry)-&gt;member, offsetof (type, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_list_next_entry_or_null</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)vlc_list_next_or_null(head, &amp;(entry)-&gt;member, offsetof (type, member)))</cpp:value></cpp:define>

</unit>
