<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_arrays.h"><function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>realloc_down</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>ptr</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>realloc_or_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>n</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_INIT</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { (count) = 0; (tab) = NULL; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_CLEAN</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { free( tab ); (count)= 0; (tab)= NULL; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_APPEND_CAST</name><parameter_list>( <parameter><type><name>cast</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( (count) &gt; 0 ) (tab) = cast realloc( tab, sizeof( *(tab) ) * ( (count) + 1 ) ); else (tab) = cast malloc( sizeof( *(tab) ) ); if( !(tab) ) abort(); (tab)[count] = (p); (count)++; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_APPEND</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>TAB_APPEND_CAST( , count, tab, p )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_FIND</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>idx</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { for( (idx) = 0; (idx) &lt; (count); (idx)++ ) if( (tab)[(idx)] == (p) ) break; if( (idx) &gt;= (count) ) (idx) = -1; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_ERASE</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>index</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( (count) &gt; 1 ) memmove( (tab) + (index), (tab) + (index) + 1, ((count) - (index) - 1 ) * sizeof( *(tab) ) );(count)--; if( (count) == 0 ) { free( tab ); (tab) = NULL; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_REMOVE</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { int i_index; TAB_FIND( count, tab, p, i_index ); if( i_index &gt;= 0 ) TAB_ERASE( count, tab, i_index ); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_INSERT_CAST</name><parameter_list>( <parameter><type><name>cast</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>index</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( (count) &gt; 0 ) (tab) = cast realloc( tab, sizeof( *(tab) ) * ( (count) + 1 ) ); else (tab) = cast malloc( sizeof( *(tab) ) ); if( !(tab) ) abort(); if( (count) - (index) &gt; 0 ) memmove( (tab) + (index) + 1, (tab) + (index), ((count) - (index)) * sizeof( *(tab) ) );(tab)[(index)] = (p); (count)++; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_INSERT</name><parameter_list>( <parameter><type><name>count</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>index</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>TAB_INSERT_CAST( , count, tab, p, index )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSEARCH</name><parameter_list>( <parameter><type><name>entries</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>elem</name></type></parameter>, <parameter><type><name>zetype</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>answer</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { int low = 0, high = count - 1; answer = -1; while( low &lt;= high ) {int mid = ((unsigned int)low + (unsigned int)high) &gt;&gt; 1;zetype mid_val = entries[mid] elem;if( mid_val &lt; key ) low = mid + 1; else if ( mid_val &gt; key ) high = mid -1; else { answer = mid; break; }} } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARRAY_ALLOC</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>newsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (array).i_alloc = newsize; (array).p_elems = realloc( (array).p_elems, (array).i_alloc * sizeof(*(array).p_elems) ); if( !(array).p_elems ) abort(); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARRAY_GROW1</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if( (array).i_alloc &lt; 10 ) _ARRAY_ALLOC(array, 10 ) else if( (array).i_alloc == (array).i_size ) _ARRAY_ALLOC(array, (int)((array).i_alloc * 1.5) ) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof((x)[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_ARRAY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { int i_alloc; int i_size; type *p_elems; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEDEF_ARRAY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef DECL_ARRAY(type) name;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_INIT</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (array).i_alloc = 0; (array).i_size = 0; (array).p_elems = NULL; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_RESET</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (array).i_alloc = 0; (array).i_size = 0; free( (array).p_elems ); (array).p_elems = NULL; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_APPEND</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { _ARRAY_GROW1(array); (array).p_elems[(array).i_size] = elem; (array).i_size++; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_INSERT</name><parameter_list>(<parameter><type><name>array</name></type></parameter>,<parameter><type><name>elem</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { _ARRAY_GROW1(array); if( (array).i_size - (pos) ) { memmove( (array).p_elems + (pos) + 1, (array).p_elems + (pos), ((array).i_size-(pos)) * sizeof(*(array).p_elems) ); } (array).p_elems[pos] = elem; (array).i_size++; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARRAY_SHRINK</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if( (array).i_size &gt; 10 &amp;&amp; (array).i_size &lt; (int)((array).i_alloc / 1.5) ) { _ARRAY_ALLOC(array, (array).i_size + 5); } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_FIND</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TAB_FIND((array).i_size, (array).p_elems, p, idx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_REMOVE</name><parameter_list>(<parameter><type><name>array</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if( (array).i_size - (pos) - 1 ) { memmove( (array).p_elems + (pos), (array).p_elems + (pos) + 1, ( (array).i_size - (pos) - 1 ) *sizeof(*(array).p_elems) );} (array).i_size--; _ARRAY_SHRINK(array); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_VAL</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array.p_elems[pos]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_BSEARCH</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>elem</name></type></parameter>, <parameter><type><name>zetype</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>answer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BSEARCH( (array).p_elems, (array).i_size, elem, zetype, key, answer)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_FOREACH</name><parameter_list>(<parameter><type><name>item</name></type></parameter>, <parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int array_index_##item = 0; array_index_##item &lt; (array).i_size &amp;&amp; ((item) = (array).p_elems[array_index_##item], 1); ++array_index_##item)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>vlc_array_t</name>

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pp_elems</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_array_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_array_init</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type> <name>p_array</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_elems</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_array_clear</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type> <name>p_array</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_elems</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><name>p_array</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_array_count</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type> <name>p_array</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_array</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_array_item_at_index</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((ar), const vlc_array_t *: ((ar)-&gt;pp_elems[idx]), vlc_array_t *: ((ar)-&gt;pp_elems[idx]))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_array_item_at_index</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_array_item_at_index</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>vlc_array_index_of_item</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>elem</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_array_insert</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>( <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tail</name> <init>= <expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name> <operator>-</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tail</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>pp</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>tail</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_array_insert_or_abort</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_insert</name><argument_list>( <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_array_append</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>( <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><index>[<expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_array_append_or_abort</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_append</name><argument_list>( <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>elem</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_array_remove</name><parameter_list>( <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tail</name> <init>= <expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tail</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>pp</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>tail</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>( <argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>pp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>pp_elems</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>DictHash</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashsize</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_hash</name> <operator>+=</operator> <operator>*</operator><name>psz_string</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_hash</name> <operator>+=</operator> <name>i_hash</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_hash</name> <operator>^=</operator> <name>i_hash</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_hash</name> <operator>%</operator> <name>hashsize</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>vlc_dictionary_entry_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_dictionary_entry_t</name></name> <modifier>*</modifier></type> <name>p_next</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_dictionary_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_dictionary_t</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>p_entries</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_dictionary_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>kVLCDictionaryNotFound</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_dictionary_init</name><parameter_list>( <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <operator>(</operator><name>vlc_dictionary_entry_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_dictionary_clear</name><parameter_list>( <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> ( <modifier>*</modifier> <name>pf_free</name> )<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_current</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_current</name> <operator>=</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_current</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pf_free</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>( <modifier>*</modifier> <name>pf_free</name> )<argument_list>( <argument><expr><name><name>p_current</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_current</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_current</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_current</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>vlc_dictionary_has_key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><call><name>DictHash</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>vlc_dictionary_value_for_key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>kVLCDictionaryNotFound</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><call><name>DictHash</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>kVLCDictionaryNotFound</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_entry</name></expr> )</condition>;</do>

<return>return <expr><name>kVLCDictionaryNotFound</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>vlc_dictionary_keys_count</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>p_entry</name> <operator>=</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p_entry</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_dictionary_is_empty</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>vlc_dictionary_all_keys</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>vlc_dictionary_keys_count</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ppsz_ret</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>ppsz_ret</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>p_entry</name> <operator>=</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p_entry</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppsz_ret</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ppsz_ret</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ppsz_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_dictionary_insert_impl_</name><parameter_list>( <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rebuild</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><call><name>DictHash</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <operator>(</operator><name>vlc_dictionary_entry_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name> <operator>=</operator> <name>p_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>rebuild</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_dictionary_t</name></name></type> <name>new_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_new_size</name> <init>= <expr><operator>(</operator> <operator>(</operator><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_dict</name></expr></argument>, <argument><expr><name>i_new_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_entry</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert_impl_</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_dict</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>,

<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>new_dict</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name><name>new_dict</name><operator>.</operator><name>p_entries</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_dictionary_insert</name><parameter_list>( <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert_impl_</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_dictionary_remove_value_for_key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_key</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> ( <modifier>*</modifier> <name>pf_free</name> )<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><call><name>DictHash</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type> <name>p_prev</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pf_free</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>( <modifier>*</modifier> <name>pf_free</name> )<argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_prev</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i_pos</name></expr>]</index></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_entry</name></expr> )</condition>;</do>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>

<name>void</name></type> <name>vlc_delete_all</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>typename</name> <name>T</name><operator>::</operator><name>iterator</name> <name>it</name> <operator>=</operator> <call><name><name>container</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>container</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>delete</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
