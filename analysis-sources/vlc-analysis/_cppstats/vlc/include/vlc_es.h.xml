<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_es.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_viewpoint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PALETTE_COLORS_MAX</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>video_palette_t</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_entries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>palette</name><index>[<expr><name>VIDEO_PALETTE_COLORS_MAX</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_REPLAY_GAIN_MAX</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_REPLAY_GAIN_TRACK</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_REPLAY_GAIN_ALBUM</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pf_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pf_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>audio_replay_gain_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>audio_channel_type_t</name>

<block>{

<decl><name>AUDIO_CHANNEL_TYPE_BITMAP</name></decl>,

<decl><name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></decl>,

}</block></enum></type> <name>audio_channel_type_t</name>;</typedef>

<struct>struct <name>audio_format_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_physical_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_chan_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_channel_type_t</name></type> <name>channel_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bytes_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bitspersample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_blockalign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channels</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_CENTER</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_LEFT</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_RIGHT</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_REARCENTER</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_REARLEFT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_REARRIGHT</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_MIDDLELEFT</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_MIDDLERIGHT</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_LFE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_FRONT</name></cpp:macro> <cpp:value>(AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_MIDDLE</name></cpp:macro> <cpp:value>(AOUT_CHAN_MIDDLELEFT | AOUT_CHAN_MIDDLERIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_REAR</name></cpp:macro> <cpp:value>(AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_CENTER</name></cpp:macro> <cpp:value>(AOUT_CHAN_CENTER | AOUT_CHAN_REARCENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_STEREO</name></cpp:macro> <cpp:value>AOUT_CHANS_2_0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_2_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_2_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT | AOUT_CHAN_LFE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_3_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT | AOUT_CHAN_CENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_3_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_3_0 | AOUT_CHAN_LFE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_4_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT | AOUT_CHANS_REAR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_4_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_4_0 | AOUT_CHAN_LFE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_5_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_4_0 | AOUT_CHAN_CENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_5_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_5_0 | AOUT_CHAN_LFE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_6_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_4_0 | AOUT_CHANS_MIDDLE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_7_0</name></cpp:macro> <cpp:value>(AOUT_CHANS_6_0 | AOUT_CHAN_CENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_7_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_5_1 | AOUT_CHANS_MIDDLE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_8_1</name></cpp:macro> <cpp:value>(AOUT_CHANS_7_1 | AOUT_CHAN_REARCENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_4_0_MIDDLE</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT | AOUT_CHANS_MIDDLE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_4_CENTER_REAR</name></cpp:macro> <cpp:value>(AOUT_CHANS_FRONT | AOUT_CHANS_CENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_5_0_MIDDLE</name></cpp:macro> <cpp:value>(AOUT_CHANS_4_0_MIDDLE | AOUT_CHAN_CENTER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANS_6_1_MIDDLE</name></cpp:macro> <cpp:value>(AOUT_CHANS_5_0_MIDDLE | AOUT_CHAN_REARCENTER | AOUT_CHAN_LFE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_MAX</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_CHAN_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vlc_chan_maps</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHANS_2_0</name></expr>,

<expr><name>AOUT_CHANS_3_0</name></expr>,

<expr><name>AOUT_CHANS_4_0</name></expr>,

<expr><name>AOUT_CHANS_5_0</name></expr>,

<expr><name>AOUT_CHANS_5_1</name></expr>,

<expr><name>AOUT_CHANS_7_0</name></expr>,

<expr><name>AOUT_CHANS_7_1</name></expr>,

<expr><name>AOUT_CHANS_8_1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANMODE_DUALMONO</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHANMODE_DOLBYSTEREO</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>video_orientation_t</name>

<block>{

<decl><name>ORIENT_TOP_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>ORIENT_TOP_RIGHT</name></decl>, 

<decl><name>ORIENT_BOTTOM_LEFT</name></decl>, 

<decl><name>ORIENT_BOTTOM_RIGHT</name></decl>, 

<decl><name>ORIENT_LEFT_TOP</name></decl>, 

<decl><name>ORIENT_LEFT_BOTTOM</name></decl>, 

<decl><name>ORIENT_RIGHT_TOP</name></decl>, 

<decl><name>ORIENT_RIGHT_BOTTOM</name></decl>, 

<decl><name>ORIENT_NORMAL</name> <init>= <expr><name>ORIENT_TOP_LEFT</name></expr></init></decl>,

<decl><name>ORIENT_TRANSPOSED</name> <init>= <expr><name>ORIENT_LEFT_TOP</name></expr></init></decl>,

<decl><name>ORIENT_ANTI_TRANSPOSED</name> <init>= <expr><name>ORIENT_RIGHT_BOTTOM</name></expr></init></decl>,

<decl><name>ORIENT_HFLIPPED</name> <init>= <expr><name>ORIENT_TOP_RIGHT</name></expr></init></decl>,

<decl><name>ORIENT_VFLIPPED</name> <init>= <expr><name>ORIENT_BOTTOM_LEFT</name></expr></init></decl>,

<decl><name>ORIENT_ROTATED_180</name> <init>= <expr><name>ORIENT_BOTTOM_RIGHT</name></expr></init></decl>,

<decl><name>ORIENT_ROTATED_270</name> <init>= <expr><name>ORIENT_LEFT_BOTTOM</name></expr></init></decl>,

<decl><name>ORIENT_ROTATED_90</name> <init>= <expr><name>ORIENT_RIGHT_TOP</name></expr></init></decl>,

}</block></enum></type> <name>video_orientation_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_FROM_EXIF</name><parameter_list>(<parameter><type><name>exif</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0x57642310U &gt;&gt; (4 * ((exif) - 1))) &amp; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_TO_EXIF</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0x76853421U &gt;&gt; (4 * (orient))) &amp; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_IS_MIRROR</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>parity(orient)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_IS_SWAP</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((orient) &amp; 4) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_HFLIP</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((orient) ^ 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_VFLIP</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((orient) ^ 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIENT_ROTATE_180</name><parameter_list>(<parameter><type><name>orient</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((orient) ^ 3)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>video_transform_t</name>

<block>{

<decl><name>TRANSFORM_IDENTITY</name> <init>= <expr><name>ORIENT_NORMAL</name></expr></init></decl>,

<decl><name>TRANSFORM_HFLIP</name> <init>= <expr><name>ORIENT_HFLIPPED</name></expr></init></decl>,

<decl><name>TRANSFORM_VFLIP</name> <init>= <expr><name>ORIENT_VFLIPPED</name></expr></init></decl>,

<decl><name>TRANSFORM_R180</name> <init>= <expr><name>ORIENT_ROTATED_180</name></expr></init></decl>,

<decl><name>TRANSFORM_R270</name> <init>= <expr><name>ORIENT_ROTATED_270</name></expr></init></decl>,

<decl><name>TRANSFORM_R90</name> <init>= <expr><name>ORIENT_ROTATED_90</name></expr></init></decl>,

<decl><name>TRANSFORM_TRANSPOSE</name> <init>= <expr><name>ORIENT_TRANSPOSED</name></expr></init></decl>,

<decl><name>TRANSFORM_ANTI_TRANSPOSE</name> <init>= <expr><name>ORIENT_ANTI_TRANSPOSED</name></expr></init></decl>

}</block></enum></type> <name>video_transform_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_multiview_mode_t</name>

<block>{

<decl><name>MULTIVIEW_2D</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MULTIVIEW_STEREO_SBS</name></decl>,

<decl><name>MULTIVIEW_STEREO_TB</name></decl>,

<decl><name>MULTIVIEW_STEREO_ROW</name></decl>,

<decl><name>MULTIVIEW_STEREO_COL</name></decl>,

<decl><name>MULTIVIEW_STEREO_FRAME</name></decl>,

<decl><name>MULTIVIEW_STEREO_CHECKERBOARD</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIVIEW_STEREO_MAX</name></cpp:macro> <cpp:value>MULTIVIEW_STEREO_CHECKERBOARD</cpp:value></cpp:define>

}</block></enum></type> <name>video_multiview_mode_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_projection_mode_t</name>

<block>{

<decl><name>PROJECTION_MODE_RECTANGULAR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PROJECTION_MODE_EQUIRECTANGULAR</name></decl>,

<decl><name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,

}</block></enum></type> <name>video_projection_mode_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_color_primaries_t</name>

<block>{

<decl><name>COLOR_PRIMARIES_UNDEF</name></decl>,

<decl><name>COLOR_PRIMARIES_BT601_525</name></decl>,

<decl><name>COLOR_PRIMARIES_BT601_625</name></decl>,

<decl><name>COLOR_PRIMARIES_BT709</name></decl>,

<decl><name>COLOR_PRIMARIES_BT2020</name></decl>,

<decl><name>COLOR_PRIMARIES_DCI_P3</name></decl>,

<decl><name>COLOR_PRIMARIES_FCC1953</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_SRGB</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_SMTPE_170</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_525</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_SMTPE_240</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_525</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_SMTPE_RP145</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_525</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_EBU_3213</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_BT470_BG</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_BT470_M</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_FCC1953</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_MAX</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_FCC1953</cpp:value></cpp:define>

}</block></enum></type> <name>video_color_primaries_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_transfer_func_t</name>

<block>{

<decl><name>TRANSFER_FUNC_UNDEF</name></decl>,

<decl><name>TRANSFER_FUNC_LINEAR</name></decl>,

<decl><name>TRANSFER_FUNC_SRGB</name></decl> ,

<decl><name>TRANSFER_FUNC_BT470_BG</name></decl>,

<decl><name>TRANSFER_FUNC_BT470_M</name></decl>,

<decl><name>TRANSFER_FUNC_BT709</name></decl>,

<decl><name>TRANSFER_FUNC_SMPTE_ST2084</name></decl>,

<decl><name>TRANSFER_FUNC_SMPTE_240</name></decl>,

<decl><name>TRANSFER_FUNC_HLG</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_BT2020</name></cpp:macro> <cpp:value>TRANSFER_FUNC_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_SMPTE_170</name></cpp:macro> <cpp:value>TRANSFER_FUNC_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_SMPTE_274</name></cpp:macro> <cpp:value>TRANSFER_FUNC_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_SMPTE_293</name></cpp:macro> <cpp:value>TRANSFER_FUNC_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_SMPTE_296</name></cpp:macro> <cpp:value>TRANSFER_FUNC_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_ARIB_B67</name></cpp:macro> <cpp:value>TRANSFER_FUNC_HLG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_MAX</name></cpp:macro> <cpp:value>TRANSFER_FUNC_HLG</cpp:value></cpp:define>

}</block></enum></type> <name>video_transfer_func_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_color_space_t</name>

<block>{

<decl><name>COLOR_SPACE_UNDEF</name></decl>,

<decl><name>COLOR_SPACE_BT601</name></decl>,

<decl><name>COLOR_SPACE_BT709</name></decl>,

<decl><name>COLOR_SPACE_BT2020</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_SPACE_SRGB</name></cpp:macro> <cpp:value>COLOR_SPACE_BT709</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_SPACE_SMPTE_170</name></cpp:macro> <cpp:value>COLOR_SPACE_BT601</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_SPACE_SMPTE_240</name></cpp:macro> <cpp:value>COLOR_SPACE_SMPTE_170</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_SPACE_MAX</name></cpp:macro> <cpp:value>COLOR_SPACE_BT2020</cpp:value></cpp:define>

}</block></enum></type> <name>video_color_space_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_chroma_location_t</name>

<block>{

<decl><name>CHROMA_LOCATION_UNDEF</name></decl>,

<decl><name>CHROMA_LOCATION_LEFT</name></decl>, 

<decl><name>CHROMA_LOCATION_CENTER</name></decl>, 

<decl><name>CHROMA_LOCATION_TOP_LEFT</name></decl>,

<decl><name>CHROMA_LOCATION_TOP_CENTER</name></decl>,

<decl><name>CHROMA_LOCATION_BOTTOM_LEFT</name></decl>,

<decl><name>CHROMA_LOCATION_BOTTOM_CENTER</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LOCATION_MAX</name></cpp:macro> <cpp:value>CHROMA_LOCATION_BOTTOM_CENTER</cpp:value></cpp:define>

}</block></enum></type> <name>video_chroma_location_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>video_color_range_t</name>

<block>{

<decl><name>COLOR_RANGE_UNDEF</name></decl>,

<decl><name>COLOR_RANGE_FULL</name></decl>,

<decl><name>COLOR_RANGE_LIMITED</name></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_RANGE_STUDIO</name></cpp:macro> <cpp:value>COLOR_RANGE_LIMITED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_RANGE_MAX</name></cpp:macro> <cpp:value>COLOR_RANGE_LIMITED</cpp:value></cpp:define>

}</block></enum></type> <name>video_color_range_t</name>;</typedef>

<struct>struct <name>video_format_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_x_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_y_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_visible_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_visible_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bits_per_pixel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sar_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sar_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_rate_base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rmask</name></decl>, <decl><type ref="prev"/><name>i_gmask</name></decl>, <decl><type ref="prev"/><name>i_bmask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_palette</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>primaries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>transfer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>space</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_color_range_t</name></type> <name>color_range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_chroma_location_t</name></type> <name>chroma_location</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>video_multiview_mode_t</name></type> <name>multiview_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_multiview_right_eye_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_multiview_left_eye</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_projection_mode_t</name></type> <name>projection_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>pose</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>primaries</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>white_point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_luminance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>min_luminance</name></decl>;</decl_stmt>

}</block> <decl><name>mastering</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>MaxCLL</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>MaxFALL</name></decl>;</decl_stmt> 

}</block> <decl><name>lighting</name></decl>;</struct>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_cubemap_padding</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>video_format_Init</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>video_format_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_viewpoint_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>pose</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>video_format_Copy</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_dst</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>p_palette</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_palette</name></name> <operator>=</operator> <operator>(</operator><name>video_palette_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>video_palette_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p_palette</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_palette</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p_palette</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p_palette</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>video_format_AdjustColorSpace</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">576</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT709</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">525</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_625</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_525</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_UNDEF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">576</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name>COLOR_SPACE_UNDEF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">576</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT709</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_UNDEF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_LIMITED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>video_format_Clean</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p_palette</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>video_format_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_Setup</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sar_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_den</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_CopyCrop</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>video_format_CopyCropAr</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>video_format_CopyCrop</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_ScaleCropAr</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_ApplyRotation</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type> <name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_TransformBy</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>video_transform_t</name></type> <name>transform</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_TransformTo</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>video_orientation_t</name></type> <name>dst_orientation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>video_transform_t</name></type> <name>video_format_GetTransform</name><parameter_list>(<parameter><decl><type><name>video_orientation_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>video_orientation_t</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>video_format_IsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_Print</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>video_transform_t</name></type> <name>transform_Inverse</name><parameter_list>( <parameter><decl><type><name>video_transform_t</name></type> <name>transform</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch <condition>( <expr><name>transform</name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>TRANSFORM_R90</name></expr>:</case>

<return>return <expr><name>TRANSFORM_R270</name></expr>;</return>

<case>case <expr><name>TRANSFORM_R270</name></expr>:</case>

<return>return <expr><name>TRANSFORM_R90</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>transform</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct>struct <name>subs_format_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x_origin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_y_origin</name></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">16</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_original_frame_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_original_frame_height</name></decl>;</decl_stmt>

}</block> <decl><name>spu</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

}</block> <decl><name>dvb</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_magazine</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_page</name></decl>;</decl_stmt> 

}</block> <decl><name>teletext</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_reorder_depth</name></decl>;</decl_stmt>

}</block> <decl><name>cc</name></decl>;</struct>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPU_PALETTE_DEFINED</name></cpp:macro> <cpp:value>0xbeefbeef</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>extra_languages_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>

}</block></struct></type> <name>extra_languages_t</name>;</typedef>

<enum>enum <name>es_format_category_e</name>

<block>{

<decl><name>UNKNOWN_ES</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>VIDEO_ES</name></decl>,

<decl><name>AUDIO_ES</name></decl>,

<decl><name>SPU_ES</name></decl>,

<decl><name>DATA_ES</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_CATEGORY_COUNT</name></cpp:macro> <cpp:value>(DATA_ES + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_PRIORITY_NOT_SELECTABLE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_PRIORITY_NOT_DEFAULTABLE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_PRIORITY_SELECTABLE_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_PRIORITY_MIN</name></cpp:macro> <cpp:value>ES_PRIORITY_NOT_SELECTABLE</cpp:value></cpp:define>

<struct>struct <name>es_format_t</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_original_fourcc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_group</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_priority</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_extra_languages</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>extra_languages_t</name> <modifier>*</modifier></type><name>p_extra_languages</name></decl>;</decl_stmt> 

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>audio_format_t</name></type> <name>audio</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>audio_replay_gain_t</name></type> <name>audio_replay_gain</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>video</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>subs_format_t</name></type> <name>subs</name></decl>;</decl_stmt> 

}</block>;</union>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitrate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_packetized</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>video_format_FixRgb</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>es_format_Init</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>es_format_InitFromVideo</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>es_format_Copy</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>es_format_Clean</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>es_format_IsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>es_format_Change</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>vlc_es_id_t</name> <modifier>*</modifier></type>

<name>vlc_es_id_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type>

<name>vlc_es_id_Release</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type>

<name>vlc_es_id_GetInputId</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type>

<name>vlc_es_id_IsStrIdStable</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>vlc_es_id_GetStrId</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name><name>enum</name> <name>es_format_category_e</name></name></type>

<name>vlc_es_id_GetCat</name><parameter_list>(<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
