<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_vector.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VECTOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ size_t cap; size_t size; type *data; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VECTOR_INITIALIZER</name></cpp:macro> <cpp:value>{ 0, 0, NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_init</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) ( (pv)-&gt;cap = 0, (pv)-&gt;size = 0, (pv)-&gt;data = NULL )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_destroy</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((pv)-&gt;data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_clear</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_destroy(pv), vlc_vector_init(pv) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VECTOR_MINCAP_</name></cpp:macro> <cpp:value>((size_t) 10)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_vector_min_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_vector_max_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_vector_between_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_vector_max_</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name>vlc_vector_min_</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_vector_enforce_size_t_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VECTOR_FAILFLAG_</name></cpp:macro> <cpp:value>(~(((size_t) -1) &gt;&gt; 1))</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>vlc_vector_reallocdata_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pcap</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>psize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>vlc_reallocarray</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pcap</name> <operator>|=</operator> <name>VLC_VECTOR_FAILFLAG_</name></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pcap</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <call><name>vlc_vector_min_</name><argument_list>(<argument><expr><operator>*</operator><name>psize</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>vlc_vector_test_and_reset_failflag_</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pcap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pcap</name> <operator>&amp;</operator> <name>VLC_VECTOR_FAILFLAG_</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pcap</name> <operator>&amp;=</operator> <operator>~</operator><name>VLC_VECTOR_FAILFLAG_</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_realloc_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>newcap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (pv)-&gt;data = vlc_vector_reallocdata_((pv)-&gt;data, newcap, sizeof(*(pv)-&gt;data), &amp;(pv)-&gt;cap, &amp;(pv)-&gt;size), !vlc_vector_test_and_reset_failflag_(&amp;(pv)-&gt;cap) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_resize_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>newcap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (pv)-&gt;cap == (newcap) || ( (newcap) &gt; 0 ? vlc_vector_realloc_(pv, newcap) : (vlc_vector_clear(pv), true) ) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>vlc_vector_growsize_</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>value</name> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_max_cap_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SIZE_MAX / 2 / sizeof(*(pv)-&gt;data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_reserve</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>mincap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_reserve_internal_(pv, vlc_vector_max_(mincap, VLC_VECTOR_MINCAP_))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_reserve_internal_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>mincap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (mincap) &lt;= (pv)-&gt;cap || ( (mincap) &lt;= vlc_vector_max_cap_(pv) &amp;&amp; vlc_vector_realloc_(pv, vlc_vector_between_(vlc_vector_growsize_((pv)-&gt;cap), mincap, vlc_vector_max_cap_(pv))) ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_shrink_to_fit</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) vlc_vector_resize_(pv, (pv)-&gt;size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_autoshrink</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) ( (pv)-&gt;cap &lt;= VLC_VECTOR_MINCAP_ || (pv)-&gt;cap &lt; vlc_vector_growsize_((pv)-&gt;size+5) || vlc_vector_resize_(pv, vlc_vector_max_((pv)-&gt;size+5, VLC_VECTOR_MINCAP_)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_check_same_ptr_type_</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) ((a) == (b))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_push</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_reserve(pv, (pv)-&gt;size + 1) &amp;&amp; ( (pv)-&gt;data[(pv)-&gt;size++] = (item), true ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_push_all</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>items</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_push_all_internal_(pv, items, vlc_vector_enforce_size_t_(count))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_push_all_internal_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>items</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_check_same_ptr_type_((pv)-&gt;data, items), vlc_vector_reserve(pv, (pv)-&gt;size + (count)) &amp;&amp; ( memcpy(&amp;(pv)-&gt;data[(pv)-&gt;size], items, (count) * sizeof(*(pv)-&gt;data)), (pv)-&gt;size += (count), true ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_insert_hole</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_insert_hole_internal_(pv, vlc_vector_enforce_size_t_(index), vlc_vector_enforce_size_t_(count))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_insert_hole_internal_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_reserve(pv, (pv)-&gt;size + (count)) &amp;&amp; ( (index) == (pv)-&gt;size || ( memmove(&amp;(pv)-&gt;data[(index) + (count)], &amp;(pv)-&gt;data[index], ((pv)-&gt;size - (index)) * sizeof(*(pv)-&gt;data)), true ) ) &amp;&amp; ( (pv)-&gt;size += (count), true ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_insert</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_insert_hole(pv, index, 1) &amp;&amp; ( (pv)-&gt;data[index] = (item), true ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_insert_all</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>items</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( vlc_vector_check_same_ptr_type_((pv)-&gt;data, items), vlc_vector_insert_hole(pv, index, count) &amp;&amp; ( memcpy(&amp;(pv)-&gt;data[index], items, (count) * sizeof(*(pv)-&gt;data)), true ) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_vector_reverse_array_</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_vector_rotate_array_left_</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>distance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_vector_reverse_array_</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_reverse_array_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>distance</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vector_reverse_array_</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_vector_rotate_array_right_</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>distance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_vector_rotate_array_left_</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vlc_vector_move_</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_vector_rotate_array_left_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>target</name> <operator>-</operator> <name>index</name> <operator>+</operator> <name>count</name></expr></argument>,

<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_vector_rotate_array_right_</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>, <argument><expr><name>index</name> <operator>-</operator> <name>target</name> <operator>+</operator> <name>count</name></expr></argument>,

<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_move_slice</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_move_slice_internal_(pv, vlc_vector_enforce_size_t_(index), vlc_vector_enforce_size_t_(count), vlc_vector_enforce_size_t_(target))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_move_slice_internal_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_move_((char *) (pv)-&gt;data, (index) * sizeof((pv)-&gt;data[0]), (count) * sizeof((pv)-&gt;data[0]), (target) * sizeof((pv)-&gt;data[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_move</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_move_slice(pv, index, 1, target)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_remove_slice_noshrink</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_remove_slice_noshrink_internal_(pv, vlc_vector_enforce_size_t_(index), vlc_vector_enforce_size_t_(count))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_remove_slice_noshrink_internal_</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((index) + (count) &lt; (pv)-&gt;size) memmove(&amp;(pv)-&gt;data[index], &amp;(pv)-&gt;data[(index) + (count)], ((pv)-&gt;size - (index) - (count)) * sizeof(*(pv)-&gt;data)); (pv)-&gt;size -= (count); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_remove_slice</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_vector_remove_slice_noshrink(pv, index, count); vlc_vector_autoshrink(pv); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_remove_noshrink</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_vector_remove_slice_noshrink(pv, index, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_remove</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_vector_remove_noshrink(pv, index); vlc_vector_autoshrink(pv); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_swap_remove</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (pv)-&gt;data[index] = (pv)-&gt;data[(pv)-&gt;size-1]; (pv)-&gt;size--; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_index_of</name><parameter_list>(<parameter><type><name>pv</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>pidx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ssize_t *out = pidx; size_t vlc_vector_find_idx_; for (vlc_vector_find_idx_ = 0; vlc_vector_find_idx_ &lt; (pv)-&gt;size; ++vlc_vector_find_idx_) if ((pv)-&gt;data[vlc_vector_find_idx_] == (item)) break; *out = vlc_vector_find_idx_ == (pv)-&gt;size ? -1 : (ssize_t) vlc_vector_find_idx_; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_vector_foreach</name><parameter_list>(<parameter><type><name>item</name></type></parameter>, <parameter><type><name>pv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t vlc_vector_idx_##item = 0; vlc_vector_idx_##item &lt; (pv)-&gt;size &amp;&amp; ((item) = (pv)-&gt;data[vlc_vector_idx_##item], true); ++vlc_vector_idx_##item)</cpp:value></cpp:define>

</unit>
