<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_objects.h"><struct_decl>struct <name>vlc_logger</name>;</struct_decl>

<struct_decl>struct <name>vlc_object_internals</name>;</struct_decl>

<struct_decl>struct <name>vlc_object_marker</name>;</struct_decl>

<struct>struct <name>vlc_object_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_internals</name></name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_marker</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>no_interact</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_OBJECT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((x)-&gt;obj, struct vlc_object_marker *: (x), default: (&amp;((x)-&gt;obj)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_cast</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_object_t</name> <modifier>*</modifier></type><name>VLC_OBJECT</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_cast</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct t; static inline struct vlc_object_t *VLC_OBJECT(struct t *d) { return (struct vlc_object_t *)d; }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_object_cast</name><argument_list>(<argument>libvlc_int_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>intf_thread_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vlc_player_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>playlist_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>stream_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>stream_directory_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>stream_extractor_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>decoder_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>filter_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>audio_output</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vout_thread_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vout_display_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vout_window_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>sout_instance_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>sout_stream_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>sout_access_out_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>extensions_manager_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>fingerprinter_thread_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>demux_meta_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>xml_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>services_discovery_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vlc_renderer_discovery_t</argument>)</argument_list></macro>

<macro><name>vlc_object_cast</name><argument_list>(<argument>vlc_medialibrary_module_t</argument>)</argument_list></macro>

<struct>struct <name>libvlc_int_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>VLC_API</name> <name>void</name> <modifier>*</modifier></type><name>vlc_object_create</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument> )</argument_list> <name>VLC_MALLOC</name> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_object_delete</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_delete</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_delete(VLC_OBJECT(obj))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>size_t</name></type> <name>vlc_list_children</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>vlc_object_t</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_object_typename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc_object_parent</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_parent</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_parent(VLC_OBJECT(o))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>vlc_object_logger</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>logger</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_logger</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_logger(VLC_OBJECT(o))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_get_name</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetString(obj, "module-name")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_create</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_create( VLC_OBJECT(a), b )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_find_name</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_find_name( VLC_OBJECT(a),b)</cpp:value></cpp:define>

<function><type><name>VLC_USED</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_int_t</name> <modifier>*</modifier></type><name>vlc_object_instance</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>libvlc_int_t</name> <operator>*</operator><operator>)</operator><name>parent</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_object_instance</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_object_instance(VLC_OBJECT(o))</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>vout_thread_t</name> <modifier>*</modifier></type><name>vout_Hold</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vout_Release</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>audio_output_t</name> <modifier>*</modifier></type><name>aout_Hold</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_Release</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>VLC_DEPRECATED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_object_hold</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><call><name>vlc_object_typename</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><literal type="string">"audio output"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_Hold</name><argument_list>(<argument><expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><literal type="string">"video output"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_Hold</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_object_release</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><call><name>vlc_object_typename</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><literal type="string">"audio output"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><literal type="string">"video output"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>VLC_MALLOC</name> <name>void</name> <modifier>*</modifier></type><name>vlc_obj_malloc</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>VLC_MALLOC</name> <name>void</name> <modifier>*</modifier></type><name>vlc_obj_calloc</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>VLC_MALLOC</name> <name>char</name> <modifier>*</modifier></type><name>vlc_obj_strdup</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_obj_free</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
