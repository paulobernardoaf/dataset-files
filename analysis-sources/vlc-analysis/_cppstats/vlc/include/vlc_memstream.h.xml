<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_memstream.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vlc_memstream</name>

<block>{

<union>union

<block>{

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_flush</name><argument_list>(<argument><expr>struct <name>vlc_memstream</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_close</name><argument_list>(<argument><expr>struct <name>vlc_memstream</name> <operator>*</operator><name>ms</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name>

<name>size_t</name></type> <name>vlc_memstream_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_putc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_puts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_vprintf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name>

<name>int</name></type> <name>vlc_memstream_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> VLC_FORMAT<parameter_list>(</parameter_list>2<operator>,</operator>3</function_decl>)<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_memstream_puts_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vlc_memstream_write</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_memstream_puts</name><parameter_list>(<parameter><type><name>ms</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(__builtin_strlen(s)) ? vlc_memstream_puts_len(ms,s,__builtin_strlen(s)) : vlc_memstream_puts(ms,s))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
