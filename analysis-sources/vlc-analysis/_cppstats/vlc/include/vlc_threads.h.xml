<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_threads.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_testcancel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETIMEDOUT</name></cpp:macro> <cpp:value>10060</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>vlc_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_CANCELED</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_NEED_SLEEP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_NEED_RWLOCK</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>vlc_threadvar_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>vlc_timer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_LOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_INPUT</name></cpp:macro> <cpp:value>THREAD_PRIORITY_ABOVE_NORMAL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_AUDIO</name></cpp:macro> <cpp:value>THREAD_PRIORITY_HIGHEST</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_OUTPUT</name></cpp:macro> <cpp:value>THREAD_PRIORITY_ABOVE_NORMAL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_HIGHEST</name></cpp:macro> <cpp:value>THREAD_PRIORITY_TIME_CRITICAL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_poll(u, n, t)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>vlc_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_CANCELED</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_NEED_RWLOCK</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>vlc_threadvar</name></name> <modifier>*</modifier></type><name>vlc_threadvar_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>vlc_timer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_LOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_INPUT</name></cpp:macro> <cpp:value>MAKESHORT(PRTYD_MAXIMUM / 2, PRTYC_REGULAR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_AUDIO</name></cpp:macro> <cpp:value>MAKESHORT(PRTYD_MAXIMUM, PRTYC_REGULAR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_OUTPUT</name></cpp:macro> <cpp:value>MAKESHORT(PRTYD_MAXIMUM / 2, PRTYC_REGULAR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_HIGHEST</name></cpp:macro> <cpp:value>MAKESHORT(0, PRTYC_TIMECRITICAL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_sigmask</name></cpp:macro> <cpp:value>sigprocmask</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_poll</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>vlc_poll_os2</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vlc_poll_os2</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>szFailed</name><index>[<expr><name>CCHMAXPATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DosLoadModule</name><argument_list>(<argument><expr><name>szFailed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szFailed</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"vlccore"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmod</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DosQueryProcAddr</name><argument_list>(<argument><expr><name>hmod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"_vlc_poll_os2"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PFN</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vlc_poll_os2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>vlc_poll_os2</name>)<argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_poll(u, n, t)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:elif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_USE_PTHREAD_CLEANUP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_NEED_SLEEP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_NEED_RWLOCK</name></cpp:macro></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>vlc_thread</name></name> <modifier>*</modifier></type><name>vlc_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_CANCELED</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_key_t</name></type> <name>vlc_threadvar_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>vlc_timer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_LOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_INPUT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_AUDIO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_OUTPUT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_HIGHEST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_poll</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ugly_timeout</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>timeout</name> <operator>&gt;=</operator> <literal type="number">50</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">50</literal></expr> </then><else>: <expr><name>timeout</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>-=</operator> <name>ugly_timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_testcancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>poll</name> <argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>ugly_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>timeout</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_poll(u, n, t)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_APPLE_C_SOURCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/semaphore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_USE_PTHREAD_CLEANUP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_t</name></type> <name>vlc_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_CANCELED</name></cpp:macro> <cpp:value>PTHREAD_CANCELED</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_rwlock_t</name></type> <name>vlc_rwlock_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_RWLOCK</name></cpp:macro> <cpp:value>PTHREAD_RWLOCK_INITIALIZER</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_key_t</name></type> <name>vlc_threadvar_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>vlc_timer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_LOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_INPUT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_AUDIO</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_OUTPUT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_HIGHEST</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_USE_PTHREAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_USE_PTHREAD_CLEANUP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>pthread_t</name></type> <name>handle</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_CANCELED</name></cpp:macro> <cpp:value>PTHREAD_CANCELED</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_rwlock_t</name></type> <name>vlc_rwlock_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_RWLOCK</name></cpp:macro> <cpp:value>PTHREAD_RWLOCK_INITIALIZER</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_key_t</name></type> <name>vlc_threadvar_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_timer</name></name> <modifier>*</modifier></type><name>vlc_timer_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_LOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_INPUT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_AUDIO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_OUTPUT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_THREAD_PRIORITY_HIGHEST</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<union>union <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <block>{

<decl_stmt><decl><type><name>atomic_uint</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uint</name></type> <name>recursion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><atomic>_Atomic <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></atomic></type> <name>owner</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>recursion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>

}</block> <decl><name>dummy</name></decl>;</struct>

}</block>;</union>

}</block></struct></type> <name>vlc_mutex_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_MUTEX</name></cpp:macro> <cpp:value>{ .value = ATOMIC_VAR_INIT(0), .recursion = ATOMIC_VAR_INIT(0), .owner = ATOMIC_VAR_INIT(NULL), }</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_mutex_init</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_mutex_init_recursive</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_mutex_lock</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_mutex_trylock</name><argument_list>( <argument><expr><name>vlc_mutex_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>bool</name></type> <name>vlc_mutex_held</name><argument_list>(<argument><expr><specifier>const</specifier> <name>vlc_mutex_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_mutex_assert</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(vlc_mutex_held(m))</cpp:value></cpp:define>

<struct_decl>struct <name>vlc_cond_waiter</name>;</struct_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_cond_waiter</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_cond_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_COND</name></cpp:macro> <cpp:value>{ NULL, VLC_STATIC_MUTEX }</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_cond_init</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_cond_signal</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_cond_wait</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vlc_cond_timedwait_daytime</name><parameter_list>(<parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<union>union <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>atomic_uint</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>vlc_sem_t</name>;</typedef>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_sem_init</name><parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_sem_post</name><parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_sem_wait</name><parameter_list>(<parameter><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_sem_timedwait</name><argument_list>(<argument><expr><name>vlc_sem_t</name> <operator>*</operator><name>sem</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <name>deadline</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBVLC_NEED_RWLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>vlc_rwlock</name>

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>state</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_rwlock_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_RWLOCK</name></cpp:macro> <cpp:value>{ VLC_STATIC_MUTEX, VLC_STATIC_COND, 0 }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_rwlock_init</name><parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_rwlock_destroy</name><parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_rwlock_rdlock</name><parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_rwlock_wrlock</name><parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_rwlock_unlock</name><parameter_list>(<parameter><decl><type><name>vlc_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>atomic_uint</name></type> <name>value</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_once_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STATIC_ONCE</name></cpp:macro> <cpp:value>{ ATOMIC_VAR_INIT(0) }</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_once</name><parameter_list>(<parameter><decl><type><name>vlc_once_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>once</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_once_inline</name><parameter_list>(<parameter><decl><type><name>vlc_once_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>once</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_once</name><argument_list>(<argument><expr><name>once</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_once</name><parameter_list>(<parameter><type><name>once</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_once_inline(once, cb)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_threadvar_create</name><parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destr</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_threadvar_delete</name><parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_threadvar_set</name><parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name> <modifier>*</modifier></type><name>vlc_threadvar_get</name><parameter_list>(<parameter><decl><type><name>vlc_threadvar_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_atomic_wait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vlc_atomic_timedwait</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vlc_atomic_timedwait_daytime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_atomic_notify_one</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_atomic_notify_all</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_clone</name><argument_list>(<argument><expr><name>vlc_thread_t</name> <operator>*</operator><name>th</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><call>(<modifier>*</modifier><name>entry</name>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>,

<argument><expr><name>int</name> <name>priority</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_cancel</name><parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_join</name><parameter_list>(<parameter><decl><type><name>vlc_thread_t</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_savecancel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_restorecancel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>vlc_cleanup_t</name></name></type> <name>vlc_cleanup_t</name>;</typedef>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_control_cancel</name><parameter_list>(<parameter><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>unsigned</name> <name>long</name></type> <name>vlc_thread_id</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>vlc_tick_t</name></type> <name>vlc_tick_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_tick_wait</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_tick_sleep</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_HARD_MIN_SLEEP</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(10)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SOFT_MIN_SLEEP</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(9)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>static</specifier>

<macro><name>__attribute__</name><argument_list>(<argument>(unused)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(noinline)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(error(<literal type="string">"sorry, cannot sleep for such short a time"</literal>))</argument>)</argument_list></macro>

<name>vlc_tick_t</name> <macro><name>impossible_delay</name><argument_list>( <argument>vlc_tick_t delay</argument> )</argument_list></macro>

<block>{

<expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay</name></expr>;

<return>return <expr><name>VLC_HARD_MIN_SLEEP</name></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier>

<macro><name>__attribute__</name><argument_list>(<argument>(unused)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(noinline)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(warning(<literal type="string">"use proper event handling instead of short delay"</literal>))</argument>)</argument_list></macro>

<name>vlc_tick_t</name> <macro><name>harmful_delay</name><argument_list>( <argument>vlc_tick_t delay</argument> )</argument_list></macro>

<block>{

<return>return <expr><name>delay</name></expr>;</return>

}</block></expr></expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_delay</name><parameter_list>( <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>((__builtin_constant_p(d &lt; VLC_HARD_MIN_SLEEP) &amp;&amp; (d &lt; VLC_HARD_MIN_SLEEP)) ? impossible_delay(d) : ((__builtin_constant_p(d &lt; VLC_SOFT_MIN_SLEEP) &amp;&amp; (d &lt; VLC_SOFT_MIN_SLEEP)) ? harmful_delay(d) : d))</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier>

<macro><name>__attribute__</name><argument_list>(<argument>(unused)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(noinline)</argument>)</argument_list></macro>

<macro><name>__attribute__</name><argument_list>(<argument>(error(<literal type="string">"deadlines can not be constant"</literal>))</argument>)</argument_list></macro>

<name>vlc_tick_t</name> <macro><name>impossible_deadline</name><argument_list>( <argument>vlc_tick_t deadline</argument> )</argument_list></macro>

<block>{

<return>return <expr><name>deadline</name></expr>;</return>

}</block></expr></expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_deadline</name><parameter_list>( <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(d) ? impossible_deadline(d) : d)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_delay</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_deadline</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_tick_sleep</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_tick_sleep(check_delay(d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_tick_wait</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_tick_wait(check_deadline(d))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_timer_create</name><argument_list>(<argument><expr><name>vlc_timer_t</name> <operator>*</operator><name>id</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>func</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>

<name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_timer_destroy</name><parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TIMER_DISARM</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TIMER_FIRE_ONCE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_timer_schedule</name><parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>interval</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_timer_disarm</name><parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name>timer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>VLC_TIMER_DISARM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_timer_schedule_asap</name><parameter_list>(<parameter><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>interval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>VLC_API</name> <name>unsigned</name></type> <name>vlc_timer_getoverrun</name><argument_list>(<argument><expr><name>vlc_timer_t</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>unsigned</name></type> <name>vlc_GetCPUCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>LIBVLC_USE_PTHREAD_CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_push</name><parameter_list>( <parameter><type><name>routine</name></type></parameter>, <parameter><type><name>arg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>pthread_cleanup_push (routine, arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_pop</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>pthread_cleanup_pop (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<struct>struct <name>vlc_cleanup_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_cleanup_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>proc</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_push</name><parameter_list>( <parameter><type><name>routine</name></type></parameter>, <parameter><type><name>arg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { vlc_control_cancel(&amp;(vlc_cleanup_t){ NULL, routine, arg })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_pop</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>vlc_control_cancel (NULL); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_push</name><parameter_list>(<parameter><type><name>routine</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert(false, "don't use vlc_cleanup_push in portable C++ code")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_cleanup_pop</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>static_assert(false, "don't use vlc_cleanup_pop in portable C++ code")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_cleanup_lock</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>(</operator><name>vlc_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mutex_cleanup_push</name><parameter_list>( <parameter><type><name>lock</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_cleanup_push (vlc_cleanup_lock, lock)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>vlc_cancel_addr_set</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_cancel_addr_clear</name><parameter_list>(<parameter><decl><type><name>atomic_uint</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>class</name></type> <name>vlc_mutex_locker</name>

<block>{<block_content>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_locker</name> <argument_list>(<argument><expr><name>vlc_mutex_t</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>lock</name> <argument_list>(<argument>m</argument>)</argument_list></macro>

<block>{

<expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;

}</block>

<operator>~</operator><macro><name>vlc_mutex_locker</name> <argument_list>(<argument>void</argument>)</argument_list></macro>

<block>{

<expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;

}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum

<block>{

<decl><name>VLC_AVCODEC_MUTEX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>VLC_GCRYPT_MUTEX</name></decl>,

<decl><name>VLC_XLIB_MUTEX</name></decl>,

<decl><name>VLC_MOSAIC_MUTEX</name></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>VLC_MTA_MUTEX</name></decl>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><name>VLC_MAX_MUTEX</name></decl>

}</block>;</enum>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_global_mutex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_global_lock</name><parameter_list>( <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_global_mutex(n, true)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_global_unlock</name><parameter_list>( <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_global_mutex(n, false)</cpp:value></cpp:define>

</unit>
