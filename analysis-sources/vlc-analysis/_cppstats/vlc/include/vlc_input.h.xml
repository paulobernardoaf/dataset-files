<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_input.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>input_resource_t</name></name></type> <name>input_resource_t</name>;</typedef>

<struct>struct <name>seekpoint_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>seekpoint_t</name> <modifier>*</modifier></type><name>vlc_seekpoint_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>point</name> <init>= <expr><operator>(</operator><name>seekpoint_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>seekpoint_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>point</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>point</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_seekpoint_Delete</name><parameter_list>( <parameter><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>point</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>point</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>point</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>point</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>seekpoint_t</name> <modifier>*</modifier></type><name>vlc_seekpoint_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>seekpoint_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>point</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>src</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>src</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>point</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>point</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_TITLE_MENU</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_TITLE_INTERACTIVE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>input_title_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>seekpoint</name></decl>;</decl_stmt>

}</block></struct></type> <name>input_title_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_title_t</name> <modifier>*</modifier></type><name>vlc_input_title_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>input_title_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_title_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>t</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_input_title_Delete</name><parameter_list>( <parameter><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>t</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_title_t</name> <modifier>*</modifier></type><name>vlc_input_title_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>input_title_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>vlc_input_title_New</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>dup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>=</operator> <operator>(</operator><name>seekpoint_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seekpoint_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>dup</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_seekpoint_Duplicate</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dup</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>input_attachment_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_input_attachment_Delete</name><parameter_list>( <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>a</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_attachment_t</name> <modifier>*</modifier></type><name>vlc_input_attachment_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>input_attachment_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_name</name></expr> ?</condition><then> <expr><name>psz_name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_mime</name></expr> ?</condition><then> <expr><name>psz_mime</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_description</name></expr> ?</condition><then> <expr><name>psz_description</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>likely</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>p_data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_attachment_t</name> <modifier>*</modifier></type><name>vlc_input_attachment_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>input_attachment_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_input_attachment_New</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_RATE_MIN</name></cpp:macro> <cpp:value>0.03125f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_RATE_MAX</name></cpp:macro> <cpp:value>31.25f</cpp:value></cpp:define>

</unit>
