<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_xml.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>xml_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_catalog_load</name>) <parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_catalog_add</name>) <parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><name>VLC_API</name> <name>xml_t</name> <modifier>*</modifier></type> <name>xml_Create</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xml_Create</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>xml_Create( VLC_OBJECT(a) )</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>xml_Delete</name><parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>xml_CatalogLoad</name><parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>catalog</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>pf_catalog_load</name></name><argument_list>( <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>xml_CatalogAdd</name><parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>xml</name><operator>-&gt;</operator><name>pf_catalog_add</name></name><argument_list>( <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>xml_reader_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_next_node</name>) <parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_next_attr</name>) <parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_use_dtd</name>) <parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_is_empty</name>) <parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><name>VLC_API</name> <name>xml_reader_t</name> <modifier>*</modifier></type> <name>xml_ReaderCreate</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xml_ReaderCreate</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>xml_ReaderCreate(VLC_OBJECT(a), s)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>xml_ReaderDelete</name><parameter_list>(<parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xml_ReaderNextNode</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pval</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>reader</name><operator>-&gt;</operator><name>pf_next_node</name></name><argument_list>( <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>pval</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_ReaderNextAttr</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pval</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>reader</name><operator>-&gt;</operator><name>pf_next_attr</name></name><argument_list>( <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>pval</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xml_ReaderUseDTD</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>reader</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>reader</name><operator>-&gt;</operator><name>pf_use_dtd</name></name><argument_list>( <argument><expr><name>reader</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xml_ReaderIsEmptyElement</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>reader</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>pf_is_empty</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>reader</name><operator>-&gt;</operator><name>pf_is_empty</name></name><argument_list>( <argument><expr><name>reader</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>XML_READER_ERROR</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>XML_READER_NONE</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>XML_READER_STARTELEM</name></decl>,

<decl><name>XML_READER_ENDELEM</name></decl>,

<decl><name>XML_READER_TEXT</name></decl>,

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
