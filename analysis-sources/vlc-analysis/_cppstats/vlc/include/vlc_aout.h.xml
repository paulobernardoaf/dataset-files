<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_aout.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_ADVANCE_TIME</name></cpp:macro> <cpp:value>(AOUT_MAX_PREPARE_TIME + VLC_TICK_FROM_SEC(1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_PREPARE_TIME</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MIN_PREPARE_TIME</name></cpp:macro> <cpp:value>AOUT_MAX_PTS_ADVANCE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_PTS_ADVANCE</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_PTS_DELAY</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(60)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_MAX_RESAMPLING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_es.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FMTS_IDENTICAL</name><parameter_list>( <parameter><type><name>p_first</name></type></parameter>, <parameter><type><name>p_second</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((p_first)-&gt;i_format == (p_second)-&gt;i_format) &amp;&amp; AOUT_FMTS_SIMILAR(p_first, p_second) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FMTS_SIMILAR</name><parameter_list>( <parameter><type><name>p_first</name></type></parameter>, <parameter><type><name>p_second</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((p_first)-&gt;i_rate == (p_second)-&gt;i_rate) &amp;&amp; ((p_first)-&gt;channel_type == (p_second)-&gt;channel_type) &amp;&amp; ((p_first)-&gt;i_physical_channels == (p_second)-&gt;i_physical_channels)&amp;&amp; ((p_first)-&gt;i_chan_mode == (p_second)-&gt;i_chan_mode) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FMT_LINEAR</name><parameter_list>( <parameter><type><name>p_format</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(aout_BitsPerSample((p_format)-&gt;i_format) != 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_SPDIFL</name></cpp:macro> <cpp:value>VLC_FOURCC('s','p','d','i')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_SPDIFB</name></cpp:macro> <cpp:value>VLC_FOURCC('s','p','d','b')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FMT_SPDIF</name><parameter_list>( <parameter><type><name>p_format</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((p_format)-&gt;i_format == VLC_CODEC_SPDIFL) || ((p_format)-&gt;i_format == VLC_CODEC_SPDIFB) || ((p_format)-&gt;i_format == VLC_CODEC_A52) || ((p_format)-&gt;i_format == VLC_CODEC_DTS) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FMT_HDMI</name><parameter_list>( <parameter><type><name>p_format</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (p_format)-&gt;i_format == VLC_CODEC_EAC3 ||(p_format)-&gt;i_format == VLC_CODEC_DTSHD ||(p_format)-&gt;i_format == VLC_CODEC_TRUEHD ||(p_format)-&gt;i_format == VLC_CODEC_MLP )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_STEREO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_RSTEREO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_LEFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_RIGHT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_DOLBYS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_HEADPHONES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_CHAN_MONO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_SPDIF_SIZE</name></cpp:macro> <cpp:value>6144</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A52_FRAME_NB</name></cpp:macro> <cpp:value>1536</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vlc_audio_output_events</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>timing_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>volume_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mute_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>policy_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>device_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hotplug_report</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>restart_request</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>gain_request</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<struct>struct <name>audio_output</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>stop</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>time_get</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>delay</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>play</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pause</name>)<parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flush</name>)<parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>drain</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>volume_set</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mute_set</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>device_select</name>)<parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>headphones</name></decl>;</decl_stmt> 

}</block> <decl><name>current_sink_info</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_audio_output_events</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>AOUT_CHANIDX_DISABLE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>AOUT_CHANIDX_LEFT</name></decl>,

<decl><name>AOUT_CHANIDX_RIGHT</name></decl>,

<decl><name>AOUT_CHANIDX_MIDDLELEFT</name></decl>,

<decl><name>AOUT_CHANIDX_MIDDLERIGHT</name></decl>,

<decl><name>AOUT_CHANIDX_REARLEFT</name></decl>,

<decl><name>AOUT_CHANIDX_REARRIGHT</name></decl>,

<decl><name>AOUT_CHANIDX_REARCENTER</name></decl>,

<decl><name>AOUT_CHANIDX_CENTER</name></decl>,

<decl><name>AOUT_CHANIDX_LFE</name></decl>,

<decl><name>AOUT_CHANIDX_MAX</name></decl>

}</block></enum></type> <name>vlc_chan_order_idx_t</name>;</typedef>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOUT_CHANIDX_MAX</name> <operator>==</operator> <name>AOUT_CHAN_MAX</name></expr></argument>, <argument><expr><literal type="string">"channel count mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_CHAN_REMAP_INIT</name></cpp:macro> <cpp:value>{ AOUT_CHANIDX_LEFT, AOUT_CHANIDX_RIGHT, AOUT_CHANIDX_MIDDLELEFT, AOUT_CHANIDX_MIDDLERIGHT, AOUT_CHANIDX_REARLEFT, AOUT_CHANIDX_REARRIGHT, AOUT_CHANIDX_REARCENTER, AOUT_CHANIDX_CENTER, AOUT_CHANIDX_LFE, }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_vlc_chan_order_wg4</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_RESTART_FILTERS</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_RESTART_OUTPUT</name></cpp:macro> <cpp:value>(AOUT_RESTART_FILTERS|0x2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_RESTART_STEREOMODE</name></cpp:macro> <cpp:value>(AOUT_RESTART_OUTPUT|0x4)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>unsigned</name></type> <name>aout_CheckChannelReorder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_ChannelReorder</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_Interleave</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>planes</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_Deinterleave</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>aout_CheckChannelExtraction</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_selection</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_layout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_order_dst</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pi_order_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_ChannelExtract</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst_channels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sample_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pi_selection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bits_per_sample</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>aout_FormatNbChannels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>VLC_API</name> <name>unsigned</name> <name>int</name></type> <name>aout_BitsPerSample</name><argument_list>( <argument><expr><name>vlc_fourcc_t</name> <name>i_format</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_FormatPrepare</name><parameter_list>( <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type> <name>p_format</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_FormatPrint</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aout_FormatPrint</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>aout_FormatPrint(VLC_OBJECT(o), t, f)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><specifier>const</specifier> <name>audio_sample_format_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VOLUME_DEFAULT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VOLUME_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>float</name></type> <name>aout_VolumeGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_VolumeSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_VolumeUpdate</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_MuteGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_MuteSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>aout_DeviceGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_DeviceSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_DevicesList</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_VolumeReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>volume_report</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_MuteReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>mute_report</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_PolicyReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cork</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>policy_report</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>cork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_DeviceReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>device_report</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_HotplugReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>hotplug_report</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>aout_GainRequest</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>gain_request</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_RestartRequest</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>restart_request</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>aout_TimeGetDefault</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aout_PauseDefault</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>paused</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>aout_EnableFilter</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>remap</name><index>[<expr><name>AOUT_CHANIDX_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>headphones</name></decl>;</decl_stmt>

}</block></struct></type> <name>aout_filters_cfg_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_FILTERS_CFG_INIT</name></cpp:macro> <cpp:value>(aout_filters_cfg_t) { .remap = AOUT_CHAN_REMAP_INIT, .headphones = false, };</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>aout_filters</name></name></type> <name>aout_filters_t</name>;</typedef>

<decl_stmt><decl><type><name>VLC_API</name> <name>aout_filters_t</name> <modifier>*</modifier></type><name>aout_FiltersNew</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>audio_sample_format_t</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>audio_sample_format_t</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>aout_filters_cfg_t</name> <operator>*</operator><name>cfg</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aout_FiltersNew</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>inf</name></type></parameter>,<parameter><type><name>outf</name></type></parameter>,<parameter><type><name>remap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>aout_FiltersNew(VLC_OBJECT(o),inf,outf,remap)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_FiltersDelete</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aout_FiltersDelete</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>aout_FiltersDelete(VLC_OBJECT(o),f)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>aout_FiltersAdjustResampling</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersPlay</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>aout_FiltersDrain</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_FiltersFlush</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>aout_FiltersChangeViewpoint</name><parameter_list>(<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>vout_thread_t</name> <modifier>*</modifier></type><name>aout_filter_GetVout</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
