<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\include\vlc_bits.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>bs_s</name></name></type> <name>bs_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>pf_byte_forward</name>)<parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>pf_byte_pos</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>pf_byte_remain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>bs_byte_callbacks_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bs_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_read_only</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bs_byte_callbacks_t</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl>;</decl_stmt>

}</block></struct></type> <name>bs_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_impl_bytes_forward</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator> <operator>&lt;</operator> <name>i_count</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_impl_bytes_remain</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bs_impl_bytes_pos</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_init_custom</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bs_byte_callbacks_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <operator>*</operator><name>cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_init</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_byte_callbacks_t</name></type> <name>cb</name> <init>= <expr><block>{

<expr><name>bs_impl_bytes_forward</name></expr>,

<expr><name>bs_impl_bytes_pos</name></expr>,

<expr><name>bs_impl_bytes_remain</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_write_init</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bs_refill</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name><name>s</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_byte_forward</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bs_eof</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>bs_pos</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">8</literal> <operator>*</operator> <call><name><name>s</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_byte_pos</name></name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>bs_remain</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">8</literal> <operator>*</operator> <call><name><name>s</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_byte_remain</name></name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_skip</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_count</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>/</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_byte_forward</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_count</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <name>i_count</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>i_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>-=</operator> <name>i_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>bs_read</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>i_mask</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x1ff</literal></expr>, <expr><literal type="number">0x3ff</literal></expr>, <expr><literal type="number">0x7ff</literal></expr>, <expr><literal type="number">0xfff</literal></expr>,

<expr><literal type="number">0x1fff</literal></expr>, <expr><literal type="number">0x3fff</literal></expr>, <expr><literal type="number">0x7fff</literal></expr>, <expr><literal type="number">0xffff</literal></expr>,

<expr><literal type="number">0x1ffff</literal></expr>, <expr><literal type="number">0x3ffff</literal></expr>, <expr><literal type="number">0x7ffff</literal></expr>, <expr><literal type="number">0xfffff</literal></expr>,

<expr><literal type="number">0x1fffff</literal></expr>, <expr><literal type="number">0x3fffff</literal></expr>, <expr><literal type="number">0x7fffff</literal></expr>, <expr><literal type="number">0xffffff</literal></expr>,

<expr><literal type="number">0x1ffffff</literal></expr>, <expr><literal type="number">0x3ffffff</literal></expr>, <expr><literal type="number">0x7ffffff</literal></expr>, <expr><literal type="number">0xfffffff</literal></expr>,

<expr><literal type="number">0x1fffffff</literal></expr>,<expr><literal type="number">0x3fffffff</literal></expr>,<expr><literal type="number">0x7fffffff</literal></expr>,<expr><literal type="number">0xffffffff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_shr</name></decl>, <decl><type ref="prev"/><name>i_drop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_drop</name> <operator>=</operator> <name>i_count</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>&gt;</operator> <name>i_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_shr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>-</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>|=</operator> <operator>(</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;&gt;</operator> <name>i_shr</name> <operator>)</operator><operator>&amp;</operator><name><name>i_mask</name><index>[<expr><name>i_count</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>-=</operator> <name>i_count</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_shr</name> <operator>=</operator> <name>i_count</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_shr</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name><operator>&amp;</operator><name><name>i_mask</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>i_shr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_drop</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_drop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator> <name>i_result</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>bs_read1</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_write</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_count</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>b_read_only</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_refill</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_bits</name> <operator>&gt;&gt;</operator> <name>i_count</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bs_aligned</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_align</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>%</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bs_write_align</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_left</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>v</name></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs_align_0</name><parameter_list>( <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>bs_write_align( s, 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs_align_1</name><parameter_list>( <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>bs_write_align( s, 1 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint_fast32_t</name></type> <name>bs_read_ue</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type> <name>bs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>bs</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bs</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>p_end</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int_fast32_t</name></type> <name>bs_read_se</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>val</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int_fast32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>

</then><else>: <expr><operator>-</operator><operator>(</operator><name>int_fast32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bs_forward</name></cpp:undef>

</unit>
