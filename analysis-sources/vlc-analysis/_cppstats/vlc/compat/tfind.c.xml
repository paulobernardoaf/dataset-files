<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\compat\tfind.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>node</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>llink</name></decl>, <modifier>*</modifier><name>rlink</name>;</decl_stmt>

}</block></struct></type> <name>node_t</name>;</typedef>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>

<name>tdelete</name><argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name>vrootp</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list>

const <name>void</name> <modifier>*</modifier><name>vkey</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vrootp</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<block>{<block_content>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rootp</name> <init>= <expr><operator>(</operator><name>node_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>vrootp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vkey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>compar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rootp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>rootp</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cmp</name> <operator>=</operator> <call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>rootp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rootp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>llink</name></name></expr> </then><else>: 

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>rlink</name></name></expr></else></ternary></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rootp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>llink</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>llink</name></name></expr>;</init> <condition><expr><name><name>q</name><operator>-&gt;</operator><name>llink</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>llink</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <operator>*</operator><name>rootp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>rootp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>rootp</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> 

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>tdestroy_recurse</name><parameter_list>(<parameter><decl><type><name>node_t</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_action</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>llink</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tdestroy_recurse</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>free_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>rlink</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tdestroy_recurse</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>free_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>free_action</name>) <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>

<name>tdestroy</name><argument_list>(<argument><expr><name>vrootp</name></expr></argument>, <argument><expr><name>freefct</name></expr></argument>)</argument_list>

<name>void</name> <modifier>*</modifier><name>vrootp</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freefct</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<block>{<block_content>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><operator>(</operator><name>node_t</name> <operator>*</operator><operator>)</operator> <name>vrootp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tdestroy_recurse</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>freefct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>

<name>tfind</name><argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name>vrootp</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list>

const <name>void</name> <modifier>*</modifier><name>vkey</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vrootp</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<block>{<block_content>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>rootp</name> <init>= <expr><operator>(</operator><name>node_t</name> <operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator><name>vrootp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vkey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>compar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rootp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>rootp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>*</operator><name>rootp</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rootp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>llink</name></name></expr> </then><else>: 

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>rlink</name></name></expr></else></ternary></expr>;</expr_stmt> 

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>

<name>tsearch</name><argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name>vrootp</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list>

const <name>void</name> <modifier>*</modifier><name>vkey</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vrootp</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<block>{<block_content>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rootp</name> <init>= <expr><operator>(</operator><name>node_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>vrootp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vkey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>compar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rootp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>rootp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>compar</name>)<argument_list>(<argument><expr><name>vkey</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>*</operator><name>rootp</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rootp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>llink</name></name></expr> </then><else>: 

<expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>rootp</name><operator>)</operator><operator>-&gt;</operator><name>rlink</name></name></expr></else></ternary></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>rootp</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vkey</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>twalk_recurse</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list>

const <name>node_t</name> <modifier>*</modifier><name>root</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VISIT</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>action</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>llink</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>rlink</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>preorder</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>llink</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>twalk_recurse</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>postorder</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>rlink</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>twalk_recurse</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>endorder</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>void</name></type>

<name>twalk</name><argument_list>(<argument><expr><name>vroot</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list>

const <name>void</name> <modifier>*</modifier><name>vroot</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VISIT</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vroot</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>twalk_recurse</name><argument_list>(<argument><expr><name>vroot</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
