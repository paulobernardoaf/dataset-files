<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\compat\nrand48.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>iterate48</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>subi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>a</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x5DEECE66D</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>c</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>mask</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>subi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>subi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <name><name>subi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>erand48</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>subi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><call><name>iterate48</name> <argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">281474976710655.</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>jrand48</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>subi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>iterate48</name> <argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>nrand48</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>subi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>iterate48</name> <argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</return>

</block_content>}</block></function>

</unit>
