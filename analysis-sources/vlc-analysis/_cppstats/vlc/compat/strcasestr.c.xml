<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\compat\strcasestr.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>strcasestr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_big</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_little</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_pos</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>psz_big</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_little</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>p_pos</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>p_pos</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p_pos</name></expr></argument> )</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_little</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur1</name> <init>= <expr><name>p_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur2</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>psz_little</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>cur1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur2</name>

<operator>&amp;&amp;</operator> <call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>cur1</name></expr></argument> )</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>cur2</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cur2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>cur2</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>p_pos</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
