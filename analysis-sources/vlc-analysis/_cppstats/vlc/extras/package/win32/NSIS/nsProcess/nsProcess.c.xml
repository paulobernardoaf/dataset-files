<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\extras\package\win32\NSIS\nsProcess\nsProcess.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pluginapi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSIS_MAX_STRLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SystemProcessInformation</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_SUCCESS</name></cpp:macro> <cpp:value>0x00000000L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_INFO_LENGTH_MISMATCH</name></cpp:macro> <cpp:value>0xC0000004L</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_SYSTEM_THREAD_INFO</name> <block>{

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ftCreationTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwStartAddress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOwningPID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwThreadID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCurrentPriority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBasePriority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwContextSwitches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwThreadState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnknown7</name></decl>;</decl_stmt>

}</block></struct></type> <name>SYSTEM_THREAD_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_SYSTEM_PROCESS_INFO</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwThreadCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>dwUnkown1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ftCreationTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>pszProcessName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBasePriority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwProcessID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwParentProcessID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHandleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwVirtualBytesPeak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwVirtualBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPageFaults</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWorkingSetPeak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWorkingSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPagedPool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNonPagedPool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPageFileBytesPeak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPageFileBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPrivateBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUnkown14</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEM_THREAD_INFO</name></type> <name><name>ati</name><index>[<expr><name>ANYSIZE_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SYSTEM_PROCESS_INFO</name>;</typedef>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szBuf</name><index>[<expr><name>NSIS_MAX_STRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>FIND_PROC_BY_NAME</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>szProcessName</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bTerminate</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bClose</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>__declspec</name><parameter_list>(<parameter><decl><type><name>dllexport</name></type></decl></parameter>)</parameter_list> _FindProcess<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwndParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>,

<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>variables</name></decl></parameter>, <parameter><decl><type><name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stacktop</name></decl></parameter>, <parameter><decl><type><name>extra_parameters</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EXDLL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nError</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>popstringn</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>NSIS_MAX_STRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nError</name><operator>=</operator><call><name>FIND_PROC_BY_NAME</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pushint</name><argument_list>(<argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__declspec</name><parameter_list>(<parameter><decl><type><name>dllexport</name></type></decl></parameter>)</parameter_list> _KillProcess<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwndParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>,

<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>variables</name></decl></parameter>, <parameter><decl><type><name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stacktop</name></decl></parameter>, <parameter><decl><type><name>extra_parameters</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EXDLL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nError</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>popstringn</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>NSIS_MAX_STRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nError</name><operator>=</operator><call><name>FIND_PROC_BY_NAME</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pushint</name><argument_list>(<argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__declspec</name><parameter_list>(<parameter><decl><type><name>dllexport</name></type></decl></parameter>)</parameter_list> _CloseProcess<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwndParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>,

<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>variables</name></decl></parameter>, <parameter><decl><type><name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stacktop</name></decl></parameter>, <parameter><decl><type><name>extra_parameters</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EXDLL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nError</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>popstringn</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>NSIS_MAX_STRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nError</name><operator>=</operator><call><name>FIND_PROC_BY_NAME</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pushint</name><argument_list>(<argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>__declspec</name><parameter_list>(<parameter><decl><type><name>dllexport</name></type></decl></parameter>)</parameter_list> _Unload<parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwndParent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_size</name></decl></parameter>,

<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>variables</name></decl></parameter>, <parameter><decl><type><name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>stacktop</name></decl></parameter>, <parameter><decl><type><name>extra_parameters</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hInst</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>ul_reason_for_call</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name> <name>CALLBACK</name></type> <name>EnumWindowsProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>NiceTerminate</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bClose</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>bSuccess</name></decl></parameter>, <parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>bFailed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bDone</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hProc</name><operator>=</operator><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name> <operator>|</operator> <name>PROCESS_QUERY_INFORMATION</name> <operator>|</operator> <name>SYNCHRONIZE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bClose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>EnumWindowsProc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ec</name> <operator>==</operator> <name>STILL_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bSuccess</name> <operator>=</operator> <name>bDone</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt></block_content></block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bSuccess</name> <operator>=</operator> <name>bDone</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bDone</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bSuccess</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bFailed</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FIND_PROC_BY_NAME</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>szProcessName</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bTerminate</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bClose</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>osvi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hLib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>uError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bFound</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bSuccess</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bFailed</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>osvi</name><operator>.</operator><name>dwOSVersionInfoSize</name></name><operator>=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetVersionEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osvi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">604</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>osvi</name><operator>.</operator><name>dwPlatformId</name></name> <operator>!=</operator> <name>VER_PLATFORM_WIN32_NT</name> <operator>&amp;&amp;</operator>

<name><name>osvi</name><operator>.</operator><name>dwPlatformId</name></name> <operator>!=</operator> <name>VER_PLATFORM_WIN32_WINDOWS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">605</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>osvi</name><operator>.</operator><name>dwPlatformId</name></name> <operator>==</operator> <name>VER_PLATFORM_WIN32_NT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>SYSTEM_PROCESS_INFO</name> <modifier>*</modifier></type><name>spi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEM_PROCESS_INFO</name> <modifier>*</modifier></type><name>spiCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSize</name><init>=<expr><literal type="number">0x4000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwData</name></decl>;</decl_stmt>

<function_decl><type><name>ULONG</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>NtQuerySystemInformationPtr</name>)<parameter_list>(<parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>LONG</name></type></decl></parameter>, <parameter><decl><type><name>PULONG</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>hLib</name><operator>=</operator><call><name>LoadLibraryW</name><argument_list>(<argument><expr><literal type="string">L"NTDLL.DLL"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>NtQuerySystemInformationPtr</name><operator>=</operator><operator>(</operator><call><call><name>ULONG</name><argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ULONG</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>PULONG</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>, <argument><expr><literal type="string">"NtQuerySystemInformation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NtQuerySystemInformationPtr</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>spi</name><operator>=</operator><call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LMEM_FIXED</name></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>uError</name><operator>=</operator><call>(<modifier>*</modifier><name>NtQuerySystemInformationPtr</name>)<argument_list>(<argument><expr><name>SystemProcessInformation</name></expr></argument>, <argument><expr><name>spi</name></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uError</name> <operator>==</operator> <name>STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uError</name> <operator>!=</operator> <name>STATUS_INFO_LENGTH_MISMATCH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">608</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">608</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dwSize</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">607</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">606</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uError</name> <operator>!=</operator> <name>STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>uError</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spiCount</name><operator>=</operator><name>spi</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spiCount</name><operator>-&gt;</operator><name>pszProcessName</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>lstrcpyn</name><argument_list>(<argument><expr><name>szName</name></expr></argument>, <argument><expr><name><name>spiCount</name><operator>-&gt;</operator><name>pszProcessName</name></name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>spiCount</name><operator>-&gt;</operator><name>pszProcessName</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>szName</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstrcmpi</name><argument_list>(<argument><expr><name>szName</name></expr></argument>, <argument><expr><name>szProcessName</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bFound</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bTerminate</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>NiceTerminate</name><argument_list>(<argument><expr><name><name>spiCount</name><operator>-&gt;</operator><name>dwProcessID</name></name></expr></argument>, <argument><expr><name>bClose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bSuccess</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spiCount</name><operator>-&gt;</operator><name>dwOffset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spiCount</name><operator>=</operator><operator>(</operator><name>SYSTEM_PROCESS_INFO</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>spiCount</name> <operator>+</operator> <name><name>spiCount</name><operator>-&gt;</operator><name>dwOffset</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSnapShot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bResult</name></decl>;</decl_stmt>

<function_decl><type><name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CreateToolhelp32SnapshotPtr</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>Process32FirstPtr</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPPROCESSENTRY32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>Process32NextPtr</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>LPPROCESSENTRY32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>hLib</name><operator>=</operator><call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"KERNEL32.DLL"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>CreateToolhelp32SnapshotPtr</name><operator>=</operator><operator>(</operator><call><call><name>HANDLE</name><argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>, <argument><expr><literal type="string">"CreateToolhelp32Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Process32FirstPtr</name><operator>=</operator><operator>(</operator><call><call><name>BOOL</name><argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>LPPROCESSENTRY32</name></expr></argument>)</argument_list></call><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>, <argument><expr><literal type="string">"Process32First"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Process32NextPtr</name><operator>=</operator><operator>(</operator><call><call><name>BOOL</name><argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>LPPROCESSENTRY32</name></expr></argument>)</argument_list></call><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>, <argument><expr><literal type="string">"Process32Next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CreateToolhelp32SnapshotPtr</name> <operator>&amp;&amp;</operator> <name>Process32NextPtr</name> <operator>&amp;&amp;</operator> <name>Process32FirstPtr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hSnapShot</name><operator>=</operator><call>(<modifier>*</modifier><name>CreateToolhelp32SnapshotPtr</name>)<argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name><operator>=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>bResult</name><operator>=</operator><call>(<modifier>*</modifier><name>Process32FirstPtr</name>)<argument_list>(<argument><expr><name>hSnapShot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bResult</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>pName</name><operator>=</operator><name><name>pe</name><operator>.</operator><name>szExeFile</name></name> <operator>+</operator> <call><name>lstrlen</name><argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>szExeFile</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>pName</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pName</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>--</operator><name>pName</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><operator>++</operator><name>pName</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><call><name>lstrlenA</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>szName</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>lstrcpyn</name><argument_list>(<argument><expr><name>szName</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstrcmpi</name><argument_list>(<argument><expr><name>szName</name></expr></argument>, <argument><expr><name>szProcessName</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bFound</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bTerminate</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>NiceTerminate</name><argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr></argument>, <argument><expr><name>bClose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bSuccess</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bResult</name><operator>=</operator><call>(<modifier>*</modifier><name>Process32NextPtr</name>)<argument_list>(<argument><expr><name>hSnapShot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hSnapShot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">611</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">610</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>uError</name><operator>=</operator><literal type="number">609</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bFound</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">603</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bTerminate</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bSuccess</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">601</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bFailed</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">602</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
