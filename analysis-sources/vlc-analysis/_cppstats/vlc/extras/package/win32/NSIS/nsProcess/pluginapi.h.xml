<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\extras\package\win32\NSIS\nsProcess\pluginapi.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsis_tchar.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NSISCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSISCALL</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXDLL_INIT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ g_stringsize=string_size; g_stacktop=stacktop; g_variables=variables; }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_stack_t</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_stack_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>stack_t</name>;</typedef>

<enum>enum

<block>{

<decl><name>INST_0</name></decl>, 

<decl><name>INST_1</name></decl>, 

<decl><name>INST_2</name></decl>, 

<decl><name>INST_3</name></decl>, 

<decl><name>INST_4</name></decl>, 

<decl><name>INST_5</name></decl>, 

<decl><name>INST_6</name></decl>, 

<decl><name>INST_7</name></decl>, 

<decl><name>INST_8</name></decl>, 

<decl><name>INST_9</name></decl>, 

<decl><name>INST_R0</name></decl>, 

<decl><name>INST_R1</name></decl>, 

<decl><name>INST_R2</name></decl>, 

<decl><name>INST_R3</name></decl>, 

<decl><name>INST_R4</name></decl>, 

<decl><name>INST_R5</name></decl>, 

<decl><name>INST_R6</name></decl>, 

<decl><name>INST_R7</name></decl>, 

<decl><name>INST_R8</name></decl>, 

<decl><name>INST_R9</name></decl>, 

<decl><name>INST_CMDLINE</name></decl>, 

<decl><name>INST_INSTDIR</name></decl>, 

<decl><name>INST_OUTDIR</name></decl>, 

<decl><name>INST_EXEDIR</name></decl>, 

<decl><name>INST_LANG</name></decl>, 

<decl><name>__INST_LAST</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>g_stringsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>g_stacktop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>g_variables</name></decl>;</decl_stmt>

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>popstring</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>popstringn</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>popint</name><parameter_list>()</parameter_list>;</function_decl> 

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>popint_or</name><parameter_list>()</parameter_list>;</function_decl> 

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>myatoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>unsigned</name> <name>NSISCALL</name></type> <name>myatou</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>myatoi_or</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>pushstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>pushint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TCHAR</name> <modifier>*</modifier> <name>NSISCALL</name></type> <name>getuservariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>setuservariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PopStringW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>popstring(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PushStringW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pushstring(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetUserVariableW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setuservariable(x,y)</cpp:value></cpp:define>

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringA</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>PushStringA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>SetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PopStringA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>popstring(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PushStringA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pushstring(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetUserVariableA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setuservariable(x,y)</cpp:value></cpp:define>

<function_decl><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringW</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>PushStringW</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>NSISCALL</name></type> <name>SetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
