<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\doc\libvlc\d3d9_player.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_WIDTH</name></cpp:macro> <cpp:value>900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN_HEIGHT</name></cpp:macro> <cpp:value>900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_LEFT</name></cpp:macro> <cpp:value>( 20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_RIGHT</name></cpp:macro> <cpp:value>(700 + BORDER_LEFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_TOP</name></cpp:macro> <cpp:value>( 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_BOTTOM</name></cpp:macro> <cpp:value>(700 + BORDER_TOP)</cpp:value></cpp:define>

<struct>struct <name>render_context</name>
<block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3D9Ex</name> <modifier>*</modifier></type><name>d3d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>d3ddev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>libvlc_d3d</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>IDirect3DTexture9</name> <modifier>*</modifier></type><name>renderTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>sharedHandled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>IDirect3DTexture9</name> <modifier>*</modifier></type><name>sharedRenderTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>sharedRenderSurface</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>backBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DVertexBuffer9</name> <modifier>*</modifier></type><name>rectangleFVFVertexBuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>sizeLock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ReportSize</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ReportOpaque</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ReportOpaque</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>CUSTOMVERTEX</name> <block>{<decl_stmt><decl><type><name>FLOAT</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>Z</name></decl>, <decl><type ref="prev"/><name>RHW</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>DWORD</name></type> <name>COLOR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FLOAT</name></type> <name>tu</name></decl>, <decl><type ref="prev"/><name>tv</name></decl>;</decl_stmt> }</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOMFVF</name></cpp:macro> <cpp:value>(D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Swap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderTarget</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>backBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>IDirect3DDevice9_Clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DCLEAR_TARGET</name></expr></argument>, <argument><expr><call><name>D3DCOLOR_XRGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_BeginScene</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_SetTexture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>IDirect3DBaseTexture9</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetStreamSource</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>CUSTOMVERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_SetFVF</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><name>CUSTOMFVF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_DrawPrimitive</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><name>D3DPT_TRIANGLEFAN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_EndScene</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_Present</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>vlc_device</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DDISPLAYMODE</name></type> <name>d3ddm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9Ex_GetAdapterDisplayMode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3ddm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedHandled</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name> <operator>=</operator> <name>vlc_device</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_AddRef</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreateTexture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>D3DUSAGE_RENDERTARGET</name></expr></argument>,
<argument><expr><name><name>d3ddm</name><operator>.</operator><name>Format</name></name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sharedHandled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreateTexture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>D3DUSAGE_RENDERTARGET</name></expr></argument>,
<argument><expr><name><name>d3ddm</name><operator>.</operator><name>Format</name></name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sharedHandled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DTexture9_GetSurfaceLevel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetRenderTarget</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3d9_format</name></name> <operator>=</operator> <name><name>d3ddm</name><operator>.</operator><name>Format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>libvlc_video_colorspace_BT709</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>libvlc_video_primaries_BT709</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>libvlc_video_transfer_func_SRGB</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_direct3d</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hWnd</name></name> <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>Direct3DCreate9Ex</name><argument_list>(<argument><expr><name>D3D_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d3d</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DPRESENT_PARAMETERS</name></type> <name>d3dpp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d3dpp</name><operator>.</operator><name>Windowed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3dpp</name><operator>.</operator><name>SwapEffect</name></name> <operator>=</operator> <name>D3DSWAPEFFECT_DISCARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3dpp</name><operator>.</operator><name>hDeviceWindow</name></name> <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3D9Ex_CreateDevice</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d</name></name></expr></argument>, <argument><expr><name>D3DADAPTER_DEFAULT</name></expr></argument>,
<argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>D3DCREATE_MULTITHREADED</name><operator>|</operator> <name>D3DCREATE_HARDWARE_VERTEXPROCESSING</name> <operator>|</operator> <name>D3DCREATE_PUREDEVICE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_GetRenderTarget</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>backBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>CUSTOMVERTEX</name></name></type> <name><name>rectangleVertices</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>BORDER_LEFT</name></expr>, <expr><name>BORDER_TOP</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><call><name>D3DCOLOR_ARGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>BORDER_RIGHT</name></expr>, <expr><name>BORDER_TOP</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><call><name>D3DCOLOR_ARGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>BORDER_RIGHT</name></expr>, <expr><name>BORDER_BOTTOM</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><call><name>D3DCOLOR_ARGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>BORDER_LEFT</name></expr>, <expr><name>BORDER_BOTTOM</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><call><name>D3DCOLOR_ARGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9Ex_CreateVertexBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rectangleVertices</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>D3DUSAGE_DYNAMIC</name><operator>|</operator><name>D3DUSAGE_WRITEONLY</name></expr></argument>,
<argument><expr><name>CUSTOMFVF</name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>pVoid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IDirect3DVertexBuffer9_Lock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pVoid</name></expr></argument>, <argument><expr><name>rectangleVertices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rectangleVertices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DVertexBuffer9_Unlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_direct3d</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>backBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>backBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>renderTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderSurface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharedRenderTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DVertexBuffer9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rectangleFVFVertexBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3D9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Setup_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_setup_device_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_setup_device_info_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>*</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d3d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3d9</name><operator>.</operator><name>adapter</name></name> <operator>=</operator> <name>D3DADAPTER_DEFAULT</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Cleanup_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Resize_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>report_size_change</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>report_opaque</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>report_opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportSize</name></name> <operator>=</operator> <name>report_size_change</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportOpaque</name></name> <operator>=</operator> <name>report_opaque</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportSize</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>ReportSize</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportOpaque</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>UpdateOutput_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_render_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Resize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>(</operator><name>IDirect3DDevice9</name><operator>*</operator><operator>)</operator><name><name>cfg</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Swap_cb</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Swap</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type> <name>StartRendering_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>enter</name></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>IDirect3DDevice9_Present</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>libvlc_d3d</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WindowProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>message</name> <operator>==</operator> <name>WM_CREATE</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>CREATESTRUCT</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>CREATESTRUCT</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>( <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>lpCreateParams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>LONG_PTR</name></type> <name>p_user_data</name> <init>= <expr><call><name>GetWindowLongPtr</name><argument_list>( <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_user_data</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>render_context</name> <operator>*</operator><operator>)</operator><name>p_user_data</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>message</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WM_SIZE</name></expr>:</case>
<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>BORDER_RIGHT</name> <operator>-</operator> <name>BORDER_LEFT</name><operator>)</operator> <operator>*</operator> <call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>SCREEN_WIDTH</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name>BORDER_BOTTOM</name> <operator>-</operator> <name>BORDER_TOP</name><operator>)</operator> <operator>*</operator> <call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>SCREEN_HEIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportSize</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>ReportSize</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ReportOpaque</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>WM_DESTROY</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name> <argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>WINAPI</name></type> <name>WinMain</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>,
<parameter><decl><type><name>HINSTANCE</name></type> <name>hPrevInstance</name></decl></parameter>,
<parameter><decl><type><name>LPSTR</name></type> <name>lpCmdLine</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nCmdShow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>render_context</name></name></type> <name>Context</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_media</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mp</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hPrevInstance</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>lpCmdLine</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>file_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>lpCmdLine</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>file_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>lpCmdLine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_libvlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_media</name> <operator>=</operator> <call><name>libvlc_media_new_path</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>file_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mp</name> <operator>=</operator> <call><name>libvlc_media_player_new_from_media</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Context</name><operator>.</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WNDCLASSEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WNDCLASSEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_HREDRAW</name> <operator>|</operator> <name>CS_VREDRAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>WindowProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <operator>(</operator><name>HBRUSH</name><operator>)</operator><name>COLOR_WINDOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <literal type="string">"WindowClass"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegisterClassEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>wr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SCREEN_WIDTH</name></expr>, <expr><name>SCREEN_HEIGHT</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AdjustWindowRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wr</name></expr></argument>, <argument><expr><name>WS_OVERLAPPEDWINDOW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hWnd</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"WindowClass"</literal></expr></argument>,
<argument><expr><literal type="string">"libvlc Demo app"</literal></expr></argument>,
<argument><expr><name>WS_OVERLAPPEDWINDOW</name></expr></argument>,
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, <argument><expr><name>CW_USEDEFAULT</name></expr></argument>,
<argument><expr><name><name>wr</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>wr</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>wr</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>wr</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>hInstance</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>nCmdShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_direct3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Context</name></expr></argument>, <argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>libvlc_video_set_output_callbacks</name><argument_list>( <argument><expr><name>p_mp</name></expr></argument>, <argument><expr><name>libvlc_video_engine_d3d9</name></expr></argument>,
<argument><expr><name>Setup_cb</name></expr></argument>, <argument><expr><name>Cleanup_cb</name></expr></argument>, <argument><expr><name>Resize_cb</name></expr></argument>, <argument><expr><name>UpdateOutput_cb</name></expr></argument>, <argument><expr><name>Swap_cb</name></expr></argument>, <argument><expr><name>StartRendering_cb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>( <argument><expr><name>p_mp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>TRUE</name></expr>)</condition>
<block>{<block_content>
<while>while<condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_QUIT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>libvlc_media_player_stop_async</name><argument_list>( <argument><expr><name>p_mp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_release</name><argument_list>( <argument><expr><name>p_mp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>Context</name><operator>.</operator><name>sizeLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_direct3d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>msg</name><operator>.</operator><name>wParam</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
