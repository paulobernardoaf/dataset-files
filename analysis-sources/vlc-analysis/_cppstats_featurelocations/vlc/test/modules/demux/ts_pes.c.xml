<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\modules\demux\ts_pes.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../modules/demux/mpeg/ts_streams.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../modules/demux/mpeg/ts_pid_fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../modules/demux/mpeg/ts_streams_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../modules/demux/mpeg/ts_pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Parse</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>priv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"recv: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%2.2x "</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>(<argument><expr><name>pp_append</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name></cpp:macro> <cpp:value>do {block_ChainRelease(output);output = NULL;block_ChainRelease(pes.gather.p_data);memset(&amp;pes, 0, sizeof(pes));pes.transport = TS_TRANSPORT_PES;pes.gather.pp_last = &amp;pes.gather.p_data;} while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if(!(a)) { RESET; fprintf(stderr, "failed line %d\n", __LINE__); return 1; } } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_FROMSZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {pkt = block_Alloc(sizeof(a) + b);ASSERT(pkt);memcpy(pkt-&gt;p_buffer, a, sizeof(a));for(size_t i=1; i&lt;1+b;i++)pkt-&gt;p_buffer[sizeof(a) + i] = i % 0xFF;} while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_FROM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PKT_FROMSZ(a, 0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outputcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outputsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_pes_parse_callback</name></type> <name>cb</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>p_obj</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>priv</name> <operator>=</operator> <operator>&amp;</operator><name>output</name></expr>,
<expr><operator>.</operator><name>pf_parse</name> <operator>=</operator> <name>Parse</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name></type> <name>pes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>.</operator><name>transport</name></name> <operator>=</operator> <name>TS_TRANSPORT_PES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aligned0</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputsize</name> <operator>==</operator> <literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>aligned0</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>outputsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aligned1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputsize</name> <operator>==</operator> <literal type="number">6</literal><operator>+</operator><literal type="number">3</literal><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>outputsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputsize</name> <operator>==</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputsize</name> <operator>==</operator> <literal type="number">188</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PKT_FROMSZ</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>, <argument><expr><literal type="number">188</literal><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pes</name><operator>.</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>aligned2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pes</name><operator>.</operator><name>b_broken_PUSI_conformance</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>.</operator><name>b_broken_PUSI_conformance</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputcount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>outputcount</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>split</name><init>=<expr><literal type="number">12</literal></expr></init></decl>;</init> <condition><expr><name>split</name><operator>&gt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>split</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>.</operator><name>b_broken_PUSI_conformance</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKT_FROM</name><argument_list>(<argument><expr><name>aligned2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>split</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>split</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ts_pes_Gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RESET</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
