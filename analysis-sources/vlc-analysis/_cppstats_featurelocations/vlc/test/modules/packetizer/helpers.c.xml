<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\modules\packetizer\helpers.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../modules/packetizer/startcode_helper.h"</cpp:file></cpp:include>

<struct>struct <name>results_s</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_set</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>results_s</name></name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_results</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>i_results_offset</name></decl></parameter>,
<parameter><function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_find</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_set</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pf_find</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"- entry %zu offset %ld\n"</literal></expr></argument>, <argument><expr><name>i_entry</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>p_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_entry</name> <operator>==</operator> <name>i_results</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_results</name><index>[<expr><name>i_entry</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name>i_results_offset</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>p_set</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_entry</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>i_entry</name> <operator>!=</operator> <name>i_results</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_annexb_sets</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>results_s</name></name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_results</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>i_results_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"checking bits code:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>check_set</name><argument_list>( <argument><expr><name>p_set</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument>, <argument><expr><name>i_results</name></expr></argument>, <argument><expr><name>i_results_offset</name></expr></argument>,
<argument><expr><name>startcode_FindAnnexB_Bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>startcode_FindAnnexB_Bits</name> <operator>!=</operator> <name>startcode_FindAnnexB</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"checking asm:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>check_set</name><argument_list>( <argument><expr><name>p_set</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument>, <argument><expr><name>i_results</name></expr></argument>, <argument><expr><name>i_results_offset</name></expr></argument>,
<argument><expr><name>startcode_FindAnnexB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"asm not built in, skipping test:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>test1_annexbdata</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x55</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>results_s</name></name></type> <name><name>test1_results</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"* Running tests on set 1:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>run_annexb_sets</name><argument_list>( <argument><expr><name>test1_annexbdata</name></expr></argument>,
<argument><expr><name>test1_annexbdata</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test1_annexbdata</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>test1_results</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>test1_results</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>i_dataoffset</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test1_annexbdata</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">111</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>i_dataoffset</name></expr>]</index></name></expr></argument>,
<argument><expr><name>test1_annexbdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test1_annexbdata</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"* Running tests on extended set 1:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>run_annexb_sets</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>,
<argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">4096</literal></expr></argument>,
<argument><expr><name>test1_results</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>test1_results</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i_dataoffset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
