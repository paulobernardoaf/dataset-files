<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\modules\packetizer\packetizer.h">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<enum>enum
<block>{
<decl><name>OK</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>,
<decl><name>FAIL</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>params_s</name>
<block>{
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rate_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rate_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_read_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_extra</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAILOUT</name><parameter_list>(<parameter><type><name>run</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ fprintf(stderr, "failed %s line %d\n", run, __LINE__); return 1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN</name><parameter_list>(<parameter><type><name>run</name></type></parameter>, <parameter><type><name>test</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(test(#test " " run, a, b, &amp;params) != res) BAILOUT(#test " " run)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(foo)) BAILOUT(run)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_packetizer</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>p_pack</name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_description</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>(<argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>decoder_t</name> <modifier>*</modifier></type><name>create_packetizer</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>den</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_pack</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_pack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_pack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_pack</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete_packetizer</name><argument_list>(<argument><expr><name>p_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_pack</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_packetize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>create_packetizer</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>,
<argument><expr><name><name>params</name><operator>-&gt;</operator><name>i_rate_num</name></name></expr></argument>,
<argument><expr><name><name>params</name><operator>-&gt;</operator><name>i_rate_den</name></name></expr></argument>,
<argument><expr><name><name>params</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_stream_MemoryNew</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>outchain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>outappend</name> <init>= <expr><operator>&amp;</operator><name>outchain</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>i_read_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>p_block</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>in</name> <operator>&amp;&amp;</operator> <name>outchain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>in</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>in</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>out</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"block #%u dts %"</literal><name>PRId64</name><literal type="string">" sz %"</literal><name>PRId64</name>
<literal type="string">" flags %x sz %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>i_count</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outappend</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>out</name></expr>)</condition>;</do>
</block_content>}</block> while<condition>(<expr><name>p_block</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>i_count</name> <operator>==</operator> <name><name>params</name><operator>-&gt;</operator><name>i_frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>i_rate_num</name></name> <operator>&amp;&amp;</operator> <name><name>params</name><operator>-&gt;</operator><name>i_rate_den</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>==</operator> <name><name>params</name><operator>-&gt;</operator><name>i_rate_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>==</operator> <name><name>params</name><operator>-&gt;</operator><name>i_rate_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>i_frame_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>outchain</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>outchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>params</name><operator>-&gt;</operator><name>b_extra</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_packetizer</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
