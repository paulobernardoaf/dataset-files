<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\libvlc\media_player.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>event</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>play_and_wait</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name> <init>= <expr><call><name>libvlc_media_player_event_manager</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerPlaying</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"Waiting for playing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerPlaying</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pause_and_wait</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name> <init>= <expr><call><name>libvlc_media_player_event_manager</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerPaused</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>libvlc_event_attach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerEndReached</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_set_pause</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>libvlc_media_player_get_state</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>libvlc_Playing</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"Waiting for pause\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerPaused</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaPlayerEndReached</name></expr></argument>, <argument><expr><name>on_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>test_audio_video</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>fs</name> <init>= <expr><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_set_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_set_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_toggle_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_toggle_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_set_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_get_fullscreen</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_video_get_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>libvlc_video_set_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>libvlc_video_set_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_video_get_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_video_set_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_video_set_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_video_get_scale</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>aouts</name> <init>= <expr><call><name>libvlc_audio_output_device_enum</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>libvlc_audio_output_device_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>aouts</name></expr></init></decl>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_audio_output_device_set</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_device</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>libvlc_audio_output_device_list_release</name><argument_list>( <argument><expr><name>aouts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_role</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>role</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_media_player_get_role</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>libvlc_role_Video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>role</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>libvlc_media_player_set_role</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>role</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>libvlc_media_player_get_role</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>role</name> <operator>&gt;</operator> <name>libvlc_role_Last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_player_set_media</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing set_media\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><call><name>libvlc_media_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_set_media</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>play_and_wait</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_stop_async</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_release</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_player_play_stop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing play and pause of %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>libvlc_media_player_new_from_media</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>play_and_wait</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_stop_async</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_release</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_player_pause_stop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>file</name> <init>= <expr><name>test_default_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing pause and stop of %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>libvlc_media_player_new_from_media</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_audio_video</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_role</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>play_and_wait</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_audio_video</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pause_and_wait</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_audio_video</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_stop_async</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_audio_video</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_release</name> <argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_media_player_set_media</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_player_play_stop</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_player_pause_stop</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
