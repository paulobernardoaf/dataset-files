<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\libvlc\media.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>media_parse_ended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>event</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name> <argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_media</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name> <init>= <expr><call><name>libvlc_media_tracks_get</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_tracks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><name><name>pp_tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"\ttrack(%d/%d): codec: %4.4s/%4.4s, "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>libvlc_track_audio</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"audio: channels: %u, rate: %u\n"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>audio</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_track_video</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"video: %ux%u, sar: %u/%u, fps: %u/%u\n"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_frame_rate_num</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>i_frame_rate_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_track_text</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"text: %s\n"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>subtitle</name><operator>-&gt;</operator><name>psz_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_track_unknown</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>libvlc_media_tracks_release</name><argument_list>(<argument><expr><name>pp_tracks</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"\tmedia doesn't have any tracks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name><name>enum</name> <name>libvlc_meta_t</name></name></type> <name>i</name> <init>= <expr><name>libvlc_meta_Title</name></expr></init></decl>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name>libvlc_meta_DiscTotal</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_meta</name> <init>= <expr><call><name>libvlc_media_get_meta</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_meta</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_log</name><argument_list>(<argument><expr><literal type="string">"\tmeta(%d): '%s'\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>psz_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_preparsed</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_parse_flag_t</name></type> <name>parse_flags</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_parsed_status_t</name></type> <name>i_expected_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"test_media_preparsed: %s, expected: %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>path</name></expr> ?</condition><then> <expr><name>path</name></expr> </then><else>: <expr><name>location</name></expr></else></ternary></expr></argument>,
<argument><expr><name>i_expected_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_location</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name> <init>= <expr><call><name>libvlc_media_event_manager</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_event_attach</name> <argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaParsedChanged</name></expr></argument>, <argument><expr><name>media_parse_ended</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>libvlc_media_parse_with_options</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>parse_flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_media_get_parsed_status</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i_expected_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_expected_status</name> <operator>==</operator> <name>libvlc_media_parsed_status_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_media</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_preparse_timeout</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>input_item_preparse_status</name></name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>p_sem</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>status</name> <operator>==</operator> <name>ITEM_PREPARSE_TIMEOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><name>p_sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_input_metadata_timeout</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wait_and_cancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"test_input_metadata_timeout: timeout: %d, wait_and_cancel: %d ms\n"</literal></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>wait_and_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>, <decl><type ref="prev"/><name><name>p_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_pipe</name><argument_list>(<argument><expr><name>p_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_fd_uri</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"fd://"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz_fd_uri</name></expr></argument>, <argument><expr><literal type="string">"fd://%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>p_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_item_NewFile</name><argument_list>(<argument><expr><name>psz_fd_uri</name></expr></argument>, <argument><expr><literal type="string">"test timeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ITEM_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>input_preparser_callbacks_t</name></name></type> <name>cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_preparse_ended</name> <operator>=</operator> <name>input_item_preparse_timeout</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>libvlc_MetadataRequest</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>,
<argument><expr><name>META_REQUEST_OPTION_SCOPE_LOCAL</name> <operator>|</operator>
<name>META_REQUEST_OPTION_FETCH_LOCAL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_and_cancel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>wait_and_cancel</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_MetadataCancel</name><argument_list>(<argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>p_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>p_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SUBITEMS_COUNT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_type_t</name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>test_media_subitems_list</name><index>[<expr><name>TEST_SUBITEMS_COUNT</name></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"directory"</literal></expr>, <expr><name>libvlc_media_type_directory</name></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"file.jpg"</literal></expr>, <expr><name>libvlc_media_type_file</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file.mkv"</literal></expr>, <expr><name>libvlc_media_type_file</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file.mp3"</literal></expr>, <expr><name>libvlc_media_type_file</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file.png"</literal></expr>, <expr><name>libvlc_media_type_file</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file.ts"</literal></expr>, <expr><name>libvlc_media_type_file</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subitem_parse_ended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>event</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name> <modifier>*</modifier></type><name>sem</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name> <argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subitem_added</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_SEPARATOR</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_SEPARATOR</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>subitems_found</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>media_subitem_added</name><operator>.</operator><name>new_child</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name> <init>= <expr><call><name>libvlc_media_get_mrl</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>FILE_SEPARATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"subitem_added, file: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SUBITEMS_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>test_media_subitems_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>!</operator><name><name>subitems_found</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_media_get_type</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>test_media_subitems_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subitems_found</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILE_SEPARATOR</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_subitems_media</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>play</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_items_expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_add_option</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><literal type="string">":ignore-filetypes= "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_add_option</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><literal type="string">":no-sub-autodetect-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>subitems_found</name><index>[<expr><name>TEST_SUBITEMS_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>em</name> <init>= <expr><call><name>libvlc_media_event_manager</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_event_attach</name> <argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaSubItemAdded</name></expr></argument>, <argument><expr><name>subitem_added</name></expr></argument>, <argument><expr><name>subitems_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>play</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>libvlc_event_attach</name> <argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaSubItemTreeAdded</name></expr></argument>, <argument><expr><name>subitem_parse_ended</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><call><name>libvlc_media_player_new_from_media</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_media_player_play</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_release</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_event_attach</name> <argument_list>(<argument><expr><name>em</name></expr></argument>, <argument><expr><name>libvlc_MediaParsedChanged</name></expr></argument>, <argument><expr><name>subitem_parse_ended</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>libvlc_media_parse_with_options</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>libvlc_media_parse_local</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_items_expected</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SUBITEMS_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"test if %s was added\n"</literal></expr></argument>, <argument><expr><name><name>test_media_subitems_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>subitems_found</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_media_subitems</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subitems_path</name> <init>= <expr><name>SRCDIR</name><literal type="string">"/samples/subitems"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>media</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media_subitems: path: '%s'\n"</literal></expr></argument>, <argument><expr><name>subitems_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_path</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>subitems_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_subitems_media</name> <argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_LOCATIONS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subitems_realpath</name> <init>= <expr><call><name>realpath</name> <argument_list>(<argument><expr><name>subitems_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>subitems_realpath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>schemes</name><index>[<expr><name>NB_LOCATIONS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"file://"</literal></expr>, <expr><literal type="string">"dir://"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_LOCATIONS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>location</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>schemes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>subitems_realpath</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media_subitems: location: '%s'\n"</literal></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_location</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_subitems_media</name> <argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>subitems_realpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSTATAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name> <argument_list>(<argument><expr><name>subitems_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media_subitems: fd: '%d'\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_fd</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_subitems_media</name> <argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> not testing subitems list via a fd location</cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing media_subitems failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media</name> <operator>=</operator> <call><name>libvlc_media_new_location</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"wrongfile://test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>media</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_subitems_media</name> <argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name> <argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>libvlc_new</name> <argument_list>(<argument><expr><name>test_defaults_nargs</name></expr></argument>,
<argument><expr><name>test_defaults_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_test_arg</name> <init>= <expr><ternary><condition><expr><name>i_argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_test_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_test_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_test_path</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>psz_test_arg</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_test_url</name> <operator>=</operator> <name>psz_test_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_test_path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_test_url</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_test_path</name> <operator>=</operator> <name>psz_test_arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>test_media_preparsed</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>psz_test_path</name></expr></argument>, <argument><expr><name>psz_test_url</name></expr></argument>,
<argument><expr><name>libvlc_media_parse_network</name></expr></argument>,
<argument><expr><name>libvlc_media_parsed_status_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_media_preparsed</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>SRCDIR</name><literal type="string">"/samples/image.jpg"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>libvlc_media_parse_local</name></expr></argument>,
<argument><expr><name>libvlc_media_parsed_status_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_preparsed</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"http://parsing_should_be_skipped.org/video.mp4"</literal></expr></argument>,
<argument><expr><name>libvlc_media_parse_local</name></expr></argument>,
<argument><expr><name>libvlc_media_parsed_status_skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_preparsed</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unknown://parsing_should_be_skipped.org/video.mp4"</literal></expr></argument>,
<argument><expr><name>libvlc_media_parse_local</name></expr></argument>,
<argument><expr><name>libvlc_media_parsed_status_skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_media_subitems</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>test_input_metadata_timeout</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_input_metadata_timeout</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
