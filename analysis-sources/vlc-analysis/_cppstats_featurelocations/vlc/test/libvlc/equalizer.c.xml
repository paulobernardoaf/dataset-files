<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\libvlc\equalizer.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_equalizer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>equalizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_presets</name></decl>, <decl><type ref="prev"/><name>u_bands</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>libvlc_new</name> <argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>libvlc_media_player_new</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer presets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u_presets</name> <operator>=</operator> <call><name>libvlc_audio_equalizer_get_preset_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>u_presets</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>u_presets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <call><name>libvlc_audio_equalizer_get_preset_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>equalizer</name> <operator>=</operator> <call><name>libvlc_audio_equalizer_new_from_preset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_audio_equalizer_release</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <call><name>libvlc_audio_equalizer_get_preset_name</name><argument_list>(<argument><expr><name>u_presets</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <call><name>libvlc_audio_equalizer_new_from_preset</name><argument_list>(<argument><expr><name>u_presets</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer bands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u_bands</name> <operator>=</operator> <call><name>libvlc_audio_equalizer_get_band_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>u_bands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>u_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>!=</operator> <call><name>libvlc_audio_equalizer_get_band_frequency</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_get_band_frequency</name><argument_list>(<argument><expr><name>u_bands</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer initialisation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>equalizer</name> <operator>=</operator> <call><name>libvlc_audio_equalizer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>u_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer preamp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">20.1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_preamp</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20.1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_preamp</name><argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer amp at index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>u_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">19.9f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">20.0f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">20.1f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">19.9f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">19.9f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20.0f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20.1f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">20.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>isnan</name><argument_list>(<argument><expr><call><name>libvlc_audio_equalizer_get_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><name>u_bands</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><literal type="number">19.9f</literal></expr></argument>, <argument><expr><name>u_bands</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing release NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_audio_equalizer_release</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing set equalizer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_media_player_set_equalizer</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_media_player_set_equalizer</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer-bands string limit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>u_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_audio_equalizer_set_amp_at_index</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">19.1234567f</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <call><name>libvlc_media_player_set_equalizer</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Testing equalizer cleanup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_audio_equalizer_release</name> <argument_list>(<argument><expr><name>equalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name> <argument_list>(<argument><expr><literal type="string">"Finished testing equalizer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_release</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name> <argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_equalizer</name> <argument_list>(<argument><expr><name>test_defaults_args</name></expr></argument>, <argument><expr><name>test_defaults_nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
