<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\config\chain.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_configuration.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_escaped</name></decl>;</decl_stmt>
}</block></struct></type><name>escape_sample_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>escape_sample_t</name></type> <name><name>escape_samples</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"azertyuiop"</literal></expr>, <expr><literal type="string">"azertyuiop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" test "</literal></expr>, <expr><literal type="string">" test "</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"it's"</literal></expr>, <expr><literal type="string">"it\\'s"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"''''"</literal></expr>, <expr><literal type="string">"\\'\\'\\'\\'"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"' a '"</literal></expr>, <expr><literal type="string">"\\' a \\'"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"\"quote\""</literal></expr>, <expr><literal type="string">"\\\"quote\\\""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" az\" "</literal></expr>, <expr><literal type="string">" az\\\" "</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"\\test"</literal></expr>, <expr><literal type="string">"\\\\test"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_config_StringEscape</name><parameter_list>()</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>config_StringEscape</name><argument_list>( <argument><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_escaped</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_config_StringUnEscape</name><parameter_list>()</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_escaped</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_StringUnescape</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name><name>escape_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>
}</block></struct></type><name>pair_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pair_t</name></type> <name><name>config</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type><name>chain_sample_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>chain_sample_t</name></type> <name><name>chain_samples</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"module1"</literal></expr>, <expr><literal type="string">"module1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bla{}"</literal></expr>, <expr><literal type="string">"bla"</literal></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"module{a=b}:module2{name=value}"</literal></expr>, <expr><literal type="string">"module"</literal></expr>, <expr><literal type="string">"module2{name=value}"</literal></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ã©Ã§â¬{a=b}"</literal></expr>, <expr><literal type="string">"Ã©Ã§â¬"</literal></expr>, <expr><name>NULL</name></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mod{listen=127.0.0.1:80}"</literal></expr>, <expr><literal type="string">"mod"</literal></expr>, <expr><name>NULL</name></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="string">"listen"</literal></expr>, <expr><literal type="string">"127.0.0.1:80"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"module:module2"</literal></expr>, <expr><literal type="string">"module"</literal></expr>, <expr><literal type="string">"module2"</literal></expr>, <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mod{Ã§Ã©=\"arg'\",bla='bip'}"</literal></expr>, <expr><literal type="string">"mod"</literal></expr>, <expr><name>NULL</name></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="string">"Ã§Ã©"</literal></expr>, <expr><literal type="string">"arg'"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bla"</literal></expr>, <expr><literal type="string">"bip"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mod{a=b, c=d, a_i=f}:mod2{b=c}"</literal></expr>, <expr><literal type="string">"mod"</literal></expr>, <expr><literal type="string">"mod2{b=c}"</literal></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"a_i"</literal></expr>, <expr><literal type="string">"f"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_config_ChainCreate</name><parameter_list>()</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_module</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cfg</name></expr></argument>, <argument><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_module</name></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>!</operator><name>psz_next</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_next</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_next</name></expr></argument>, <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><name>p_cfg</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>config</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>config</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>, <argument><expr><name><name>p_tmp</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>chain_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>config</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_tmp</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>p_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_string</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"bla"</literal></expr>,
<expr><literal type="string">"module1{a=b, b=c}"</literal></expr>,
<expr><literal type="string">"a{re=\"errtetyegzrf\", b=c, vetrjtrjt=erte234tth:12}"</literal></expr>,
<expr><literal type="string">"module1{a=b, b=c}:std{lang=C}"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_config_equality</name><parameter_list>( <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg1</name></decl></parameter>, <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><name>p_cfg1</name> <operator>&amp;&amp;</operator> <name>p_cfg2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg1</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_cfg2</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg1</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>, <argument><expr><name><name>p_cfg2</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cfg1</name> <operator>=</operator> <name><name>p_cfg1</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cfg2</name> <operator>=</operator> <name><name>p_cfg2</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>p_cfg1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_cfg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_config_ChainDuplicate</name><parameter_list>()</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_string</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_module</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cfg</name></expr></argument>, <argument><expr><name><name>ppsz_string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg_copy</name> <init>= <expr><call><name>config_ChainDuplicate</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_config_equality</name><argument_list>(<argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>p_cfg_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name>p_cfg_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing config chain escaping\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_config_StringEscape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing config chain un-escaping\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_config_StringUnEscape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing config_ChainCreate()\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_config_ChainCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing config_ChainDuplicate()\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_config_ChainDuplicate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
