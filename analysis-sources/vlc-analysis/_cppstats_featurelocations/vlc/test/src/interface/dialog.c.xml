<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\interface\dialog.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/vlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE</name></cpp:macro> <cpp:value>"VLC Dialogs test"</cpp:value></cpp:define>








<struct>struct <name>cb_answer</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_dismiss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_action</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>display_error_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error message: title: '%s', text: '%s'\n"</literal></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>display_login_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default_username</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_ask_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cb_answer</name></name> <modifier>*</modifier></type><name>p_ans</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"login dialog: title: '%s', text: '%s', "</literal>
<literal type="string">"default_username: '%s', b_ask_store: %d\n"</literal></expr></argument>,
<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>psz_default_username</name></expr></argument>, <argument><expr><name>b_ask_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_ans</name><operator>-&gt;</operator><name>b_dismiss</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_ans</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_id_post_login</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><name><name>p_ans</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>display_question_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_question_type</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_action2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cb_answer</name></name> <modifier>*</modifier></type><name>p_ans</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"question dialog: title: '%s', text: '%s', "</literal>
<literal type="string">"type: %d, cancel: '%s', action1: '%s', action2: '%s'\n"</literal></expr></argument>,
<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>psz_cancel</name></expr></argument>, <argument><expr><name>psz_action1</name></expr></argument>, <argument><expr><name>psz_action2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_ans</name><operator>-&gt;</operator><name>b_dismiss</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_ans</name><operator>-&gt;</operator><name>i_action</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_id_post_action</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>, <argument><expr><name><name>p_ans</name><operator>-&gt;</operator><name>i_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>display_progress_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_indeterminate</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cb_answer</name></name> <modifier>*</modifier></type><name>p_ans</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"progress dialog: title: '%s', text: '%s', "</literal>
<literal type="string">"indeterminate: %d, position: %f, cancel: '%s'\n"</literal></expr></argument>,
<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>b_indeterminate</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>psz_cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_ans</name><operator>-&gt;</operator><name>b_dismiss</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cancel_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_id_dismiss</name><argument_list>(<argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_progress_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_position</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_id</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"update_progress: %f, text: %s\n"</literal></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>set_answer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cb_answer</name></name> <modifier>*</modifier></type><name>p_ans</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_dismiss</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_ans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ans</name><operator>-&gt;</operator><name>b_dismiss</name></name> <operator>=</operator> <name>b_dismiss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ans</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>=</operator> <name>psz_username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ans</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>i_action</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_dialogs</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cb_answer</name></name> <modifier>*</modifier></type><name>p_ans</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dialog_wait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"%d/ Testing login..."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_passwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_store</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"Click OK"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_login</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_passwd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_store</name></expr></argument>, <argument><expr><literal type="string">"Click OK"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>, <argument><expr><literal type="string">"Click OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_user</name></expr></argument>, <argument><expr><literal type="string">"Click OK"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_login</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_passwd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_store</name></expr></argument>, <argument><expr><literal type="string">"Click Cancel"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>, <argument><expr><literal type="string">"Click Cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"%d/ Testing question..."</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><literal type="string">"Action1"</literal></expr></argument>, <argument><expr><literal type="string">"Action2"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Click Action1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><literal type="string">"Action1"</literal></expr></argument>, <argument><expr><literal type="string">"Action2"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Click Action2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><literal type="string">"Action1"</literal></expr></argument>, <argument><expr><literal type="string">"Action2"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Click Cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"%d/ Testing critical waiting error..."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_CRITICAL</name></expr></argument>,
<argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"%d/ Testing progress dialog..."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_id</name> <operator>=</operator> <call><name>vlc_dialog_display_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><literal type="number">0.5f</literal></expr></argument> ,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Indeterminate non cancellable dialog "</literal>
<literal type="string">"for %"</literal> <name>PRId64</name> <literal type="string">" us"</literal></expr></argument>, <argument><expr><name>i_dialog_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_dialog_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_position</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_id</name> <operator>=</operator> <call><name>vlc_dialog_display_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>f_position</name></expr></argument> ,
<argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Indeterminate cancellable dialog.\n"</literal>
<literal type="string">"Cancel It!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><call><name>vlc_dialog_is_cancelled</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_dialog_wait</name> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_id</name> <operator>=</operator> <call><name>vlc_dialog_display_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Non cancellable dialog in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>f_position</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_dialog_wait</name> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_position</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_update_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_position</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_id</name> <operator>=</operator> <call><name>vlc_dialog_display_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Non cancellable dialog in progress.\n"</literal>
<literal type="string">"float value: %f"</literal></expr></argument>, <argument><expr><name>f_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>f_position</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_dialog_wait</name> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_position</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_update_progress_text</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name>f_position</name></expr></argument>,
<argument><expr><literal type="string">"Non cancellable dialog in progress.\n"</literal>
<literal type="string">"float value: %f"</literal></expr></argument>, <argument><expr><name>f_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"%d/ Testing 2 modal dialogs at a time..."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_id</name> <operator>=</operator> <call><name>vlc_dialog_display_progress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>f_position</name></expr></argument> ,
<argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Indeterminate cancellable dialog.\n"</literal>
<literal type="string">"Cancel It!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_answer</name><argument_list>(<argument><expr><name>p_ans</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_CRITICAL</name></expr></argument>,
<argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TITLE</name></expr></argument>,
<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><call><name>vlc_dialog_is_cancelled</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_dialog_wait</name> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>ppsz_argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_test_all</name> <init>= <expr><name>i_argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ppsz_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_test_all</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"VLC_PLUGIN_PATH"</literal></expr></argument>, <argument><expr><literal type="string">"../modules"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"VLC_LIB_PATH"</literal></expr></argument>, <argument><expr><literal type="string">"../modules"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><call><name>libvlc_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing dialog callbacks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_dialog_cbs</name></type> <name>cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pf_display_error</name> <operator>=</operator> <name>display_error_cb</name></expr>,
<expr><operator>.</operator><name>pf_display_login</name> <operator>=</operator> <name>display_login_cb</name></expr>,
<expr><operator>.</operator><name>pf_display_question</name> <operator>=</operator> <name>display_question_cb</name></expr>,
<expr><operator>.</operator><name>pf_display_progress</name> <operator>=</operator> <name>display_progress_cb</name></expr>,
<expr><operator>.</operator><name>pf_cancel</name> <operator>=</operator> <name>cancel_cb</name></expr>,
<expr><operator>.</operator><name>pf_update_progress</name> <operator>=</operator> <name>update_progress_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cb_answer</name></name></type> <name>ans</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_dialogs</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_provider_set_callbacks</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_test_all</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing Qt dialog callbacks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"--no-qt-privacy-ask"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_libvlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_libvlc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>libvlc_InternalAddIntf</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><literal type="string">"qt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_dialogs</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>p_libvlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>p_libvlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
