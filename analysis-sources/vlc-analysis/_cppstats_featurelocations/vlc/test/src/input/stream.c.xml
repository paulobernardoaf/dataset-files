<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\input\stream.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_FILE_SIZE</name></cpp:macro> <cpp:value>(1024 * 1024)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_URL</name></cpp:macro> <cpp:value>"http://streams.videolan.org/streams/ogm/MJPEG.ogm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MD5</name></cpp:macro> <cpp:value>"4eaf9e8837759b670694398a33f02bc0"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>reader</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_close</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>pf_getsize</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_read</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_peek</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>pf_tell</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_seek</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>libc_getsize</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>fileno</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>fstat</name><argument_list>( <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>libc_read</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fread</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument> , <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>libc_peek</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i_last_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_pos</name> <operator>=</operator> <call><name>ftell</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_buf</name> <operator>=</operator> <name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>fseek</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>i_last_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>libc_tell</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i_ret</name> <init>= <expr><call><name>ftell</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>libc_seek</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>fseek</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>libc_close</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type>
<name>libc_open</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>reader</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>f</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_close</name></name> <operator>=</operator> <name>libc_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_getsize</name></name> <operator>=</operator> <name>libc_getsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>libc_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_peek</name></name> <operator>=</operator> <name>libc_peek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_tell</name></name> <operator>=</operator> <name>libc_tell</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>libc_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"libc"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_reader</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>stream_getsize</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>stream_read</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>stream_peek</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>pp_buf</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>stream_tell</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>stream_seek</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stream_close</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type>
<name>stream_open</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"-v"</literal></expr>,
<expr><literal type="string">"--ignore-config"</literal></expr>,
<expr><literal type="string">"-I"</literal></expr>,
<expr><literal type="string">"dummy"</literal></expr>,
<expr><literal type="string">"--no-media-library"</literal></expr>,
<expr><literal type="string">"--vout=dummy"</literal></expr>,
<expr><literal type="string">"--aout=dummy"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_reader</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>reader</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>( <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name><name>p_vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_reader</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name>p_vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_close</name></name> <operator>=</operator> <name>stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_getsize</name></name> <operator>=</operator> <name>stream_getsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>stream_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_peek</name></name> <operator>=</operator> <name>stream_peek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_tell</name></name> <operator>=</operator> <name>stream_tell</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>stream_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_vlc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"stream"</literal></expr>;</expr_stmt>
<return>return <expr><name>p_reader</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>read_at</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_readers</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_readers</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_read</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cmp_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_cmp_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_readers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_last_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"%s: %s %zu @ %"</literal><name>PRIu64</name><literal type="string">" (size: %"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_buf</name></expr> ?</condition><then> <expr><literal type="string">"read"</literal></expr> </then><else>: <expr><literal type="string">"peek"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_seek</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_pos</name> <operator>=</operator> <call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_tell</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_last_pos</name> <operator>==</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_read</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_tell</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>i_ret</name> <operator>+</operator> <name>i_last_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_peek</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>p_reader</name><operator>-&gt;</operator><name>pf_tell</name></name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>i_last_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <name>i_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i_ret</name> <operator>==</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <name>i_last_pos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_readers</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_cmp_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_cmp_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_cmp_buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_buf</name></expr> ?</condition><then> <expr><name>p_buf</name></expr> </then><else>: <expr><name>p_peek</name></expr></else></ternary></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_cmp_ret</name> <operator>=</operator> <name>i_ret</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_cmp_ret</name> <operator>==</operator> <name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cmp_buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_buf</name></expr> ?</condition><then> <expr><name>p_buf</name></expr> </then><else>: <expr><name>p_peek</name></expr></else></ternary></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cmp_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_readers</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_readers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_md5</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_AT</name><parameter_list>( <parameter><type><name>i_offset</name></type></parameter>, <parameter><type><name>i_read</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>read_at( pp_readers, i_readers, p_buf, i_offset, i_read, i_size )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_AT</name><parameter_list>( <parameter><type><name>i_offset</name></type></parameter>, <parameter><type><name>i_read</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>read_at( pp_readers, i_readers, NULL, i_offset, i_read, i_size )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_read_md5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>pp_readers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>pf_getsize</name><argument_list>( <argument><expr><name><name>pp_readers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"stream size: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_readers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>pf_getsize</name><argument_list>( <argument><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if<condition>( <expr><name>psz_md5</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>READ_AT</name><argument_list>( <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_ret</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_md5</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><name>psz_md5</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_read_md5</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_read_md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_read_md5</name></expr></argument>, <argument><expr><name>psz_md5</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_read_md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>i_size</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name><name>i_offset</name> <argument_list type="generic">&lt; <argument><expr><name>i_size</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_ret</name> <operator>=</operator> <name>READ_AT</name><operator>(</operator> <name>i_offset</name>, <literal type="number">4096</literal> <operator>)</operator> <operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_ret</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><name>i_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_AT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PEEK_AT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PEEK_AT</name><argument_list>( <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PEEK_AT</name><argument_list>( <argument><expr><name>i_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PEEK_AT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_rand</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_written</name> <operator>&lt;</operator> <name>i_size</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_tocopy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name> <operator>-</operator> <name>i_written</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><call><name>write</name><argument_list>( <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_tocopy</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_written</name> <operator>+=</operator> <name>i_ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_written</name> <operator>==</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reader</name></name> <modifier>*</modifier></type><name><name>pp_readers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_tmp_path</name><index>[]</index></name> <init>= <expr><literal type="string">"/tmp/libvlc_XXXXXX"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_tmp_fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Generating random file...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_tmp_fd</name> <operator>=</operator> <call><name>vlc_mkstemp</name><argument_list>( <argument><expr><name>psz_tmp_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rand</name><argument_list>( <argument><expr><name>i_tmp_fd</name></expr></argument>, <argument><expr><name>RAND_FILE_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing random file with libc, and stream...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_tmp_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"file://%s"</literal></expr></argument>, <argument><expr><name>psz_tmp_path</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>pp_readers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>libc_open</name><argument_list>( <argument><expr><name>psz_tmp_path</name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator> <name><name>pp_readers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stream_open</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>( <argument><expr><name>pp_readers</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>pf_close</name><argument_list>( <argument><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name>i_tmp_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing http url with stream...\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alarm</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>pp_readers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stream_open</name><argument_list>( <argument><expr><name>HTTP_URL</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"WARNING: can't test http url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>( <argument><expr><name>pp_readers</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HTTP_MD5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>pf_close</name><argument_list>( <argument><expr><name><name>pp_readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
