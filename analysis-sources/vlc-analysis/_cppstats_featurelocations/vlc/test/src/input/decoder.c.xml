<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\input\decoder.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../lib/libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decoder.h"</cpp:file></cpp:include>

<struct>struct <name>decoder_owner</name>
<block>{
<decl_stmt><decl><type><name>decoder_t</name></type> <name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>packetizer</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>dec_get_owner</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr>struct <name>decoder_owner</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>spu_new_buffer_decoder</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type> <name>p_subpic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt>
<return>return <expr><call><name>subpicture_New</name> <argument_list>(<argument><expr><name>p_subpic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>get_no_device</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_video</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_audio</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_cc</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_sub</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>p_subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decoder_load</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_packetizer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Init</name><argument_list>( <argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>b_frame_drop_allowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_packetizer</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>caps</name><index>[<expr><name>ES_CATEGORY_COUNT</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"video decoder"</literal></expr>,
<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"audio decoder"</literal></expr>,
<expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <literal type="string">"spu decoder"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>
<call><name>module_need</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name><name>caps</name><index>[<expr><name><name>decoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><literal type="string">"packetizer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Clean</name><argument_list>( <argument><expr><name>decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_decoder_destroy</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>(<argument><expr><name><name>owner</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>decoder_t</name> <modifier>*</modifier></type><name>test_decoder_create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name> <operator>&amp;&amp;</operator> <name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>packetizer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>packetizer</name> <operator>=</operator> <call><name>vlc_object_create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packetizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>owner</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>packetizer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>owner</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>packetizer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decoder</name> <operator>=</operator> <operator>&amp;</operator><name><name>owner</name><operator>-&gt;</operator><name>dec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>owner</name><operator>-&gt;</operator><name>packetizer</name></name> <operator>=</operator> <name>packetizer</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_video_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>get_no_device</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>queue_video</name></expr>,
<expr><operator>.</operator><name>queue_cc</name> <operator>=</operator> <name>queue_cc</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_audio_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>audio</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>queue_audio</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_spu_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>spu</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>buffer_new</name> <operator>=</operator> <name>spu_new_buffer_decoder</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>queue_sub</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_video_cbs</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_audio_cbs</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_spu_cbs</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>decoder_load</name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_load</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>decoder</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_decoder_process</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>packetizer</name> <init>= <expr><name><name>owner</name><operator>-&gt;</operator><name>packetizer</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name> <init>= <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_packetized_block</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p_packetized_block</name> <operator>=</operator>
<call><name><name>packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="string">"restarting module due to input format change\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>decoder_Clean</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decoder_load</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_packetized_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packetizer</name><operator>-&gt;</operator><name>pf_get_cc</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name> <init>= <expr><call><name><name>packetizer</name><operator>-&gt;</operator><name>pf_get_cc</name></name><argument_list>(<argument><expr><name>packetizer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_cc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p_packetized_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_packetized_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_packetized_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>p_packetized_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLCDEC_ECRITICAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_packetized_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name><name>decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
