<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\misc\variables.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/libvlc_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>psz_var_name</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"abcdef"</literal></expr>, <expr><literal type="string">"abcdefg"</literal></expr>, <expr><literal type="string">"abc123"</literal></expr>, <expr><literal type="string">"abc-123"</literal></expr>, <expr><literal type="string">"Ã©â¬!!"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_COUNT</name></cpp:macro> <cpp:value>(ARRAY_SIZE(psz_var_name))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_value_t</name></type> <name><name>var_value</name><index>[<expr><name>VAR_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_integer</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_IncInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DecInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_booleans</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_bool</name> <operator>=</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>RAND_MAX</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_ToggleBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_floats</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fracts</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>psz_var_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"123garbage"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"4/5garbage"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"6.7garbage"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"010"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"30"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"30.0"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"030.030"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">3003</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"60/2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"29.97"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">2997</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"30000/1001"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">30000</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">1001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".125"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"12:9"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"000000/00000000"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"12345/0"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>num</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_strings</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_tmp</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_tmp</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_address</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[<expr><name>VAR_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_address</name> <operator>=</operator> <operator>&amp;</operator><name><name>dummy</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_address</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>p_address</name></name> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_address</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>callback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_this</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>oldval</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_data</name> <operator>==</operator> <name>psz_var_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_callbacks</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>psz_var_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_temp</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_temp</name> <operator>==</operator> <name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>var_value</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><name><name>psz_var_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_limits</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name>INT64_MIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>var_Change</name><argument_list>( <argument>p_libvlc</argument>, <argument><literal type="string">"bla"</literal></argument>, <argument>VLC_VAR_SETMINMAX</argument>,
<argument>(vlc_value_t){ .i_int = -<literal type="number">1234</literal> }</argument>,
<argument>(vlc_value_t){ .i_int = <literal type="number">12345</literal> }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1234</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">12345</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123456</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1234</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1234</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">12346</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">12345</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETSTEP</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETSTEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_choices</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>texts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_DELCHOICE</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_int</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>texts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>texts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>texts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_CLEARCHOICES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_change</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>min</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1242</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <operator>+</operator><literal type="number">42</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>step</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETMINMAX</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETSTEP</name></expr></argument>, <argument><expr><name>step</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">26</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">39</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">27</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">26</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name><name>min</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name><name>max</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETSTEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name><name>step</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_creation_and_type</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">4212</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name>INT64_MIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <name>INT64_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">4212</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETMINMAX</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">4212</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">4212</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> , <argument><expr><name>VLC_VAR_GETSTEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">4212</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_SETSTEP</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> , <argument><expr><name>VLC_VAR_GETSTEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>==</operator> <literal type="number">4212</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOVAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"program"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"program"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOVAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>(</operator><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"bla"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOVAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_variables</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><name><name>p_vlc</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>srand</name><argument_list>( <argument><expr><call><name>time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for integers\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_integer</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for booleans\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_booleans</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for floats\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_floats</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for rationals\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_fracts</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for strings\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_strings</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing for addresses\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_address</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing the callbacks\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_callbacks</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing the limits\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_limits</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing choices\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_choices</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing var_Change()\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_change</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing type at creation\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_creation_and_type</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_vlc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_log</name><argument_list>( <argument><expr><literal type="string">"Testing the core variables\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_vlc</name> <operator>=</operator> <call><name>libvlc_new</name><argument_list>( <argument><expr><name>test_defaults_nargs</name></expr></argument>, <argument><expr><name>test_defaults_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_vlc</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_variables</name><argument_list>( <argument><expr><name>p_vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name>p_vlc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
