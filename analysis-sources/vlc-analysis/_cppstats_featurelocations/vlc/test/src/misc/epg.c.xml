<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\test\src\misc\epg.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libvlc/test.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_current</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>psz_name</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_name</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_order</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"order: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" current %s"</literal></expr></argument>, <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_events</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_names</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_names</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>==</operator> <name>i_names</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name> <operator>&amp;&amp;</operator>
<name><name>p_epg</name><operator>-&gt;</operator><name>pp_event</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>psz_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>psz_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPG_ADD</name><parameter_list>(<parameter><type><name>epg</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>duration</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {vlc_epg_event_t *p_evt = vlc_epg_event_New( start, start, duration );if( p_evt ){p_evt-&gt;psz_name = strdup( a );if( !p_evt-&gt;psz_name || !vlc_epg_AddEvent( epg, p_evt ) )vlc_epg_event_Delete( p_evt );}} while( 0 )</cpp:value></cpp:define>










<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--test %d\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>vlc_epg_New</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_order</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_events</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"ABCD"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_current</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_epg_SetCurrent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_current</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--test %d\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_epg</name> <operator>=</operator> <call><name>vlc_epg_New</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_order</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_events</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"ABCD"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--test %d\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_epg</name> <operator>=</operator> <call><name>vlc_epg_New</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">142</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">122</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_order</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_events</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"ABCDEF"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--test %d\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_epg</name> <operator>=</operator> <call><name>vlc_epg_New</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_epg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_epg_SetCurrent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EPG_ADD</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_order</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_events</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"ABCD"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_current</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
