<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_vout_window.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_VOUT_WINDOW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VOUT_WINDOW_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>














<struct_decl>struct <name>vout_window_t</name>;</struct_decl>
<struct_decl>struct <name>wl_display</name>;</struct_decl>
<struct_decl>struct <name>wl_surface</name>;</struct_decl>













<enum>enum <name>vout_window_type</name> <block>{
<decl><name>VOUT_WINDOW_TYPE_DUMMY</name></decl> ,
<decl><name>VOUT_WINDOW_TYPE_XID</name></decl> ,
<decl><name>VOUT_WINDOW_TYPE_HWND</name></decl> ,
<decl><name>VOUT_WINDOW_TYPE_NSOBJECT</name></decl> ,
<decl><name>VOUT_WINDOW_TYPE_ANDROID_NATIVE</name></decl> ,
<decl><name>VOUT_WINDOW_TYPE_WAYLAND</name></decl> ,
}</block>;</enum>







<enum>enum <name>vout_window_state</name> <block>{
<decl><name>VOUT_WINDOW_STATE_NORMAL</name></decl> ,
<decl><name>VOUT_WINDOW_STATE_ABOVE</name></decl> ,
<decl><name>VOUT_WINDOW_STATE_BELOW</name></decl> ,
}</block>;</enum>







<enum>enum <name>vout_window_mouse_event_type</name> <block>{
<decl><name>VOUT_WINDOW_MOUSE_MOVED</name></decl> ,
<decl><name>VOUT_WINDOW_MOUSE_PRESSED</name></decl> ,
<decl><name>VOUT_WINDOW_MOUSE_RELEASED</name></decl> ,
<decl><name>VOUT_WINDOW_MOUSE_DOUBLE_CLICK</name></decl> ,
}</block>;</enum>






<typedef>typedef <type><struct>struct <name>vout_window_mouse_event_t</name>
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>vout_window_mouse_event_type</name></name></type> <name>type</name></decl>;</decl_stmt> 













<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>int</name></type> <name>button_mask</name></decl>;</decl_stmt>
}</block></struct></type> <name>vout_window_mouse_event_t</name>;</typedef>







<typedef>typedef <type><struct>struct <name>vout_window_cfg_t</name> <block>{



<decl_stmt><decl><type><name>bool</name></type> <name>is_fullscreen</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>is_decorated</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>

}</block></struct></type> <name>vout_window_cfg_t</name>;</typedef>
















<struct>struct <name>vout_window_callbacks</name> <block>{











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>resized</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>closed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>state_changed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>windowed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fullscreened</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mouse_event</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>keyboard_event</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>output_event</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>




<typedef>typedef <type><struct>struct <name>vout_window_owner</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vout_window_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt> 
}</block></struct></type> <name>vout_window_owner_t</name>;</typedef>




<struct>struct <name>vout_window_operations</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>enable</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>disable</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>resize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_state</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unset_fullscreen</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_fullscreen</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_title</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>














<typedef>typedef <type><struct>struct <name>vout_window_t</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>









<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nsobject</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>anativewindow</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>wl</name></decl>;</decl_stmt> 
}</block> <decl><name>handle</name></decl>;</union>









<union>union <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x11</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>wl</name></decl>;</decl_stmt> 
}</block> <decl><name>display</name></decl>;</union>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt> 


<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>has_double_click</name></decl>;</decl_stmt> 

}</block> <decl><name>info</name></decl>;</struct>





<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_window_owner_t</name></type> <name>owner</name></decl>;</decl_stmt>
}</block></struct></type> <name>vout_window_t</name>;</typedef>












<function_decl><type><name>VLC_API</name> <name>vout_window_t</name> <modifier>*</modifier></type><name>vout_window_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_owner_t</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vout_window_Delete</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>vout_window_SetInhibition</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_SetState</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_state</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_SetSize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>resize</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_SetFullScreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_fullscreen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_fullscreen</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_UnsetFullScreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>unset_fullscreen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>unset_fullscreen</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_SetTitle</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_title</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>












<function_decl><type><name>VLC_API</name>
<name>int</name></type> <name>vout_window_Enable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name>
<name>void</name></type> <name>vout_window_Disable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportSize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>resized</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportClose</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>closed</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>closed</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportState</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>state_changed</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>state_changed</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vout_window_ReportWindowed</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vout_window_ReportFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_SendMouseEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>mouse_event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>mouse_event</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportMouseMoved</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name></type> <name>mouse</name> <init>= <expr><block>{
<expr><name>VOUT_WINDOW_MOUSE_MOVED</name></expr>, <expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_window_SendMouseEvent</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportMousePressed</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name></type> <name>mouse</name> <init>= <expr><block>{
<expr><name>VOUT_WINDOW_MOUSE_PRESSED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>button</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_window_SendMouseEvent</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportMouseReleased</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name></type> <name>mouse</name> <init>= <expr><block>{
<expr><name>VOUT_WINDOW_MOUSE_RELEASED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>button</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_window_SendMouseEvent</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportMouseDoubleClick</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_window_mouse_event_t</name></type> <name>mouse</name> <init>= <expr><block>{
<expr><name>VOUT_WINDOW_MOUSE_DOUBLE_CLICK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>button</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_window_SendMouseEvent</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportKeyPress</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>keyboard_event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>keyboard_event</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vout_window_ReportOutputDevice</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>output_event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>cbs</name><operator>-&gt;</operator><name>output_event</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
