<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_picture.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_PICTURE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_PICTURE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>atomic_uintptr_t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>memory_order_relaxed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>memory_order_release</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>plane_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixels</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_pixel_pitch</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_visible_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_visible_pitch</name></decl>;</decl_stmt> 

}</block></struct></type> <name>plane_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICTURE_PLANE_MAX</name></cpp:macro> <cpp:value>(VOUT_MAX_PLANES)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>picture_context_t</name>
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>copy</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_video_context</name></name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_context_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>picture_buffer_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_buffer_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_decoder_device</name></name></type> <name>vlc_decoder_device</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_video_context</name></name></type> <name>vlc_video_context</name>;</typedef>

<struct>struct <name>vlc_video_context_operations</name>
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>


<enum>enum <name>vlc_video_context_type</name>
<block>{
<decl><name>VLC_VIDEO_CONTEXT_NONE</name></decl>,
<decl><name>VLC_VIDEO_CONTEXT_VAAPI</name></decl>,
<decl><name>VLC_VIDEO_CONTEXT_VDPAU</name></decl>,
<decl><name>VLC_VIDEO_CONTEXT_DXVA2</name></decl>, 
<decl><name>VLC_VIDEO_CONTEXT_D3D11VA</name></decl>, 
<decl><name>VLC_VIDEO_CONTEXT_AWINDOW</name></decl>, 
<decl><name>VLC_VIDEO_CONTEXT_NVDEC</name></decl>,
<decl><name>VLC_VIDEO_CONTEXT_CVPX</name></decl>,
<decl><name>VLC_VIDEO_CONTEXT_MMAL</name></decl>,
}</block>;</enum>

<function_decl><type><name>VLC_API</name> <name>vlc_video_context</name> <modifier>*</modifier></type> <name>vlc_video_context_Create</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_video_context_type</name></name></type> <name>private_type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>private_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_video_context_Release</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name><name>enum</name> <name>vlc_video_context_type</name></name></type> <name>vlc_video_context_GetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name> <modifier>*</modifier></type><name>vlc_video_context_GetPrivate</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_video_context_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>vlc_video_context</name> <modifier>*</modifier></type><name>vlc_video_context_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>vlc_decoder_device</name> <modifier>*</modifier></type><name>vlc_video_context_HoldDevice</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>picture_t</name>
<block>{



<decl_stmt><decl><type><name>video_frame_format_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name><name>p</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_planes</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_still</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>b_progressive</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_fields</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>picture_t</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>refs</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_video_context</name><modifier>*</modifier></type> <name>picture_GetVideoContext</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>vctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type> <name>picture_New</name><argument_list>( <argument><expr><name>vlc_fourcc_t</name> <name>i_chroma</name></expr></argument>, <argument><expr><name>int</name> <name>i_width</name></expr></argument>, <argument><expr><name>int</name> <name>i_height</name></expr></argument>, <argument><expr><name>int</name> <name>i_sar_num</name></expr></argument>, <argument><expr><name>int</name> <name>i_sar_den</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type> <name>picture_NewFromFormat</name><argument_list>( <argument><expr><specifier>const</specifier> <name>video_format_t</name> <operator>*</operator><name>p_fmt</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_destroy</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name></decl>;</decl_stmt> 
}</block> <decl><name><name>p</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</struct>

}</block></struct></type> <name>picture_resource_t</name>;</typedef>






<decl_stmt><decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type> <name>picture_NewFromResource</name><argument_list>( <argument><expr><specifier>const</specifier> <name>video_format_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>picture_resource_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>picture_Destroy</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>picture_Hold</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>picture</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>picture_Release</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>refs</name> <init>= <expr><call><name>atomic_fetch_sub_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>(<argument><expr><name>refs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Destroy</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>picture_CopyProperties</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>picture_Reset</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>picture_CopyPixels</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>plane_CopyPixels</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>picture_Copy</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type><name>picture_Clone</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>picture_Export</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_image</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_override_width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_override_height</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_crop</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>picture_Setup</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>







<enum>enum
<block>{
<decl><name>Y_PLANE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>U_PLANE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V_PLANE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>A_PLANE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_PIXELS</name></cpp:macro> <cpp:value>p[Y_PLANE].p_pixels</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_PITCH</name></cpp:macro> <cpp:value>p[Y_PLANE].i_pitch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_PIXELS</name></cpp:macro> <cpp:value>p[U_PLANE].p_pixels</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_PITCH</name></cpp:macro> <cpp:value>p[U_PLANE].i_pitch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_PIXELS</name></cpp:macro> <cpp:value>p[V_PLANE].p_pixels</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_PITCH</name></cpp:macro> <cpp:value>p[V_PLANE].i_pitch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PIXELS</name></cpp:macro> <cpp:value>p[A_PLANE].p_pixels</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PITCH</name></cpp:macro> <cpp:value>p[A_PLANE].i_pitch</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>picture_SwapUV</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name>tmp_plane</name> <init>= <expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name> <operator>=</operator> <name>tmp_plane</name></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
