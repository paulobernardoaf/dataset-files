<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_block.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_BLOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BLOCK_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_DISCONTINUITY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TYPE_I</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TYPE_P</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TYPE_B</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TYPE_PB</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_HEADER</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_END_OF_SEQUENCE</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_CLOCK</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_SCRAMBLED</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_PREROLL</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_CORRUPTED</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_AU_END</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TOP_FIELD_FIRST</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_SINGLE_FIELD</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_INTERLACED_MASK</name></cpp:macro> <cpp:value>(BLOCK_FLAG_TOP_FIELD_FIRST|BLOCK_FLAG_BOTTOM_FIELD_FIRST|BLOCK_FLAG_SINGLE_FIELD)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_TYPE_MASK</name></cpp:macro> <cpp:value>(BLOCK_FLAG_TYPE_I|BLOCK_FLAG_TYPE_P|BLOCK_FLAG_TYPE_B|BLOCK_FLAG_TYPE_PB)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_CORE_PRIVATE_MASK</name></cpp:macro> <cpp:value>0x00ff0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_CORE_PRIVATE_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_PRIVATE_MASK</name></cpp:macro> <cpp:value>0xff000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_PRIVATE_SHIFT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<struct>struct <name>vlc_block_callbacks</name>
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>block_t</name>
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
}</block>;</struct>

















<function_decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_Init</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_Alloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_TryRealloc</name><argument_list>(<argument><expr><name>block_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ssize_t</name> <name>pre</name></expr></argument>, <argument><expr><name>size_t</name> <name>body</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>






















<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_Realloc</name><argument_list>(<argument><expr><name>block_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ssize_t</name> <name>pre</name></expr></argument>, <argument><expr><name>size_t</name> <name>body</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>













<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>block_Release</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_CopyProperties</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dup</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>( <argument><expr><name>p_dup</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dup</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_dup</name></expr>;</return>
</block_content>}</block></function>















<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_heap_Alloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_mmap_Alloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type> <name>block_shm_Alloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>



















<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_File</name><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>bool</name> <name>write</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_FilePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name> <name>write</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_Cleanup</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>block_cleanup_push</name><parameter_list>( <parameter><type><name>block</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_cleanup_push (block_Cleanup, block)</cpp:value></cpp:define>


















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_ChainAppend</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_list</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_list</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp_list</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_ChainLastAppend</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_last</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_last</name> <init>= <expr><name>p_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>ppp_last</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_last</name> <operator>=</operator> <name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>ppp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_ChainRelease</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>block_ChainExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_list</name> <operator>&amp;&amp;</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i_total</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_ChainProperties</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_list</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>+=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>pi_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>pi_length</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_length</name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>pi_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block_ChainGather</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_list</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_total</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_total</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>g</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>block_ChainExtract</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>g</name></expr>;</return>
</block_content>}</block></function>
















<decl_stmt><decl><type><name>VLC_API</name> <name>block_fifo_t</name> <modifier>*</modifier></type><name>block_FifoNew</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>block_FifoRelease</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>block_FifoEmpty</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>block_FifoPut</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_FifoGet</name><argument_list>(<argument><expr><name>block_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>












<function_decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>block_FifoShow</name><parameter_list>(<parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>size_t</name></type> <name>block_FifoSize</name><argument_list>(<argument><expr><name>block_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_DEPRECATED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_API</name> <name>size_t</name></type> <name>block_FifoCount</name><argument_list>(<argument><expr><name>block_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_DEPRECATED</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>block_fifo_t</name></name></type> <name>vlc_fifo_t</name>;</typedef>














<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_Lock</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_Unlock</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_Signal</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_Wait</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_WaitCond</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>vlc_fifo_TimedWaitCond</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_cond_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_fifo_QueueUnlocked</name><parameter_list>(<parameter><decl><type><name>vlc_fifo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>vlc_fifo_DequeueUnlocked</name><argument_list>(<argument><expr><name>vlc_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>vlc_fifo_DequeueAllUnlocked</name><argument_list>(<argument><expr><name>vlc_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>













<decl_stmt><decl><type><name>VLC_API</name> <name>size_t</name></type> <name>vlc_fifo_GetCount</name><argument_list>(<argument><expr><specifier>const</specifier> <name>vlc_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>VLC_API</name> <name>size_t</name></type> <name>vlc_fifo_GetBytes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>vlc_fifo_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_fifo_IsEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_fifo_GetCount</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_fifo_Cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_fifo_t</name> <operator>*</operator><operator>)</operator><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_fifo_CleanupPush</name><parameter_list>(<parameter><type><name>fifo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_cleanup_push(vlc_fifo_Cleanup, fifo)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
