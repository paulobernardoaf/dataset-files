<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_variables.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_VARIABLES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VARIABLES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_TYPE</name></cpp:macro> <cpp:value>0x00ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_CLASS</name></cpp:macro> <cpp:value>0x00f0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_FLAGS</name></cpp:macro> <cpp:value>0xff00</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_VOID</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_BOOL</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_INTEGER</name></cpp:macro> <cpp:value>0x0030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_STRING</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_FLOAT</name></cpp:macro> <cpp:value>0x0050</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_ADDRESS</name></cpp:macro> <cpp:value>0x0070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_COORDS</name></cpp:macro> <cpp:value>0x00A0</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_HASCHOICE</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_ISCOMMAND</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_DOINHERIT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_SETSTEP</name></cpp:macro> <cpp:value>0x0012</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_SETVALUE</name></cpp:macro> <cpp:value>0x0013</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_SETTEXT</name></cpp:macro> <cpp:value>0x0014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_GETTEXT</name></cpp:macro> <cpp:value>0x0015</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_GETMIN</name></cpp:macro> <cpp:value>0x0016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_GETMAX</name></cpp:macro> <cpp:value>0x0017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_GETSTEP</name></cpp:macro> <cpp:value>0x0018</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_ADDCHOICE</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_DELCHOICE</name></cpp:macro> <cpp:value>0x0021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_CLEARCHOICES</name></cpp:macro> <cpp:value>0x0022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_GETCHOICES</name></cpp:macro> <cpp:value>0x0024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_CHOICESCOUNT</name></cpp:macro> <cpp:value>0x0026</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VAR_SETMINMAX</name></cpp:macro> <cpp:value>0x0027</cpp:value></cpp:define>








<enum>enum <name>vlc_var_atomic_op</name> <block>{
<decl><name>VLC_VAR_BOOL_TOGGLE</name></decl>, 
<decl><name>VLC_VAR_INTEGER_ADD</name></decl>, 
<decl><name>VLC_VAR_INTEGER_OR</name></decl>, 
<decl><name>VLC_VAR_INTEGER_NAND</name></decl>,
}</block>;</enum>













<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_Destroy</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Change</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Type</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>








<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Set</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Get</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_SetChecked</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_GetChecked</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_GetAndSet</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_Inherit</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
































<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_AddCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_DelCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>vlc_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_TriggerCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_AddListCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_list_callback_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>var_DelListCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_list_callback_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_SetInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_SetBool</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_SetCoords</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_COORDS</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_SetFloat</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_SetString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>psz_string</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>int</name></type> <name>var_SetAddress</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_GetInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>var_GetBool</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>var_GetCoords</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>px</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>py</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><call><name>var_GetChecked</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_COORDS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>coords</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <operator>*</operator><name>py</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>var_GetFloat</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>f_float</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_GetString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_GetNonEmptyString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>var_GetAddress</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetChecked</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>val</name><operator>.</operator><name>p_address</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_IncInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetAndSet</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER_ADD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_DecInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetAndSet</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER_ADD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>var_OrInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetAndSet</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER_OR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>var_NAndInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetAndSet</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER_NAND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_CreateGetInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>var_CreateGetBool</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>var_CreateGetFloat</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_CreateGetString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_CreateGetNonEmptyString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>var_CreateGetAddress</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetAddress</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_CreateGetIntegerCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>
<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>var_CreateGetBoolCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>
<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>var_CreateGetFloatCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>
<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_CreateGetStringCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>
<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_CreateGetNonEmptyStringCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name>
<operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>var_CountChoices</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_CHOICESCOUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>var_ToggleBool</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetAndSet</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL_TOGGLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>var_InheritBool</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>var_InheritInteger</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>var_InheritFloat</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>f_float</name></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>f_float</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>var_InheritString</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>var_InheritAddress</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>val</name><operator>.</operator><name>p_address</name></name></expr>;</return>
</block_content>}</block></function>



















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_InheritURational</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>num</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>den</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>var_LocationParse</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Create</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Create(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Destroy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Destroy(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Change</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Change(VLC_OBJECT(a), b, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Type</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Type(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Set(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_Get</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_Get(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetChecked</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetChecked(VLC_OBJECT(o), n, t, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetChecked</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetChecked(VLC_OBJECT(o), n, t, v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_AddCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_AddCallback(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_DelCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_DelCallback(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_TriggerCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_TriggerCallback(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_AddListCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_AddListCallback(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_DelListCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_DelListCallback(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetInteger(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetBool</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetBool(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetCoords</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetCoords(VLC_OBJECT(o), n, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetFloat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetFloat(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetString</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetString(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_SetAddress</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_SetAddress(VLC_OBJECT(o), n, p)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetCoords</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetCoords(VLC_OBJECT(o), n, x, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_IncInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_IncInteger(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_DecInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_DecInteger(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_OrInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_OrInteger(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_NAndInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_NAndInteger(VLC_OBJECT(a), b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetInteger(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetBool</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetBool(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetFloat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetFloat(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetString</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetString(VLC_OBJECT(a), b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetNonEmptyString</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetNonEmptyString(VLC_OBJECT(a), b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetAddress</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetAddress( VLC_OBJECT(a), b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetIntegerCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetIntegerCommand( VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetBoolCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetBoolCommand( VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetFloatCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetFloatCommand( VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetStringCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetStringCommand( VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CreateGetNonEmptyStringCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CreateGetNonEmptyStringCommand( VLC_OBJECT(a),b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_CountChoices</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_CountChoices(VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_ToggleBool</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_ToggleBool(VLC_OBJECT(a),b )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritBool</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritBool(VLC_OBJECT(o), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritInteger</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritInteger(VLC_OBJECT(o), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritFloat</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritFloat(VLC_OBJECT(o), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritString</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritString(VLC_OBJECT(o), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritAddress</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritAddress(VLC_OBJECT(o), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_InheritURational</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_InheritURational(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetInteger</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetInteger(VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetBool</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetBool(VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetFloat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetFloat(VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetString</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetString(VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetNonEmptyString</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetNonEmptyString( VLC_OBJECT(a),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_GetAddress</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_GetAddress(VLC_OBJECT(a),b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>var_LocationParse</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_LocationParse(VLC_OBJECT(o), m, p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
