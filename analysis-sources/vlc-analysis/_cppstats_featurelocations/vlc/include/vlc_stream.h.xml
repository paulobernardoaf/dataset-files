<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_stream.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_STREAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STREAM_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<struct>struct <name>stream_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_location</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filepath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_preparsing</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name></decl>;</decl_stmt>

<union>union <block>{








<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</union>


<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt> 
















<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_read</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>block_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_block</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>eof</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_readdir</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_demux</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_seek</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_control</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
}</block>;</struct>




<enum>enum <name>stream_query_e</name>
<block>{

<decl><name>STREAM_CAN_SEEK</name></decl>, 
<decl><name>STREAM_CAN_FASTSEEK</name></decl>, 
<decl><name>STREAM_CAN_PAUSE</name></decl>, 
<decl><name>STREAM_CAN_CONTROL_PACE</name></decl>, 

<decl><name>STREAM_GET_SIZE</name><init>=<expr><literal type="number">6</literal></expr></init></decl>, 


<decl><name>STREAM_GET_PTS_DELAY</name> <init>= <expr><literal type="number">0x101</literal></expr></init></decl>,
<decl><name>STREAM_GET_TITLE_INFO</name></decl>, 
<decl><name>STREAM_GET_TITLE</name></decl>, 
<decl><name>STREAM_GET_SEEKPOINT</name></decl>, 
<decl><name>STREAM_GET_META</name></decl>, 
<decl><name>STREAM_GET_CONTENT_TYPE</name></decl>, 
<decl><name>STREAM_GET_SIGNAL</name></decl>, 
<decl><name>STREAM_GET_TAGS</name></decl>, 

<decl><name>STREAM_SET_PAUSE_STATE</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>, 
<decl><name>STREAM_SET_TITLE</name></decl>, 
<decl><name>STREAM_SET_SEEKPOINT</name></decl>, 


<decl><name>STREAM_SET_RECORD_STATE</name></decl>, 

<decl><name>STREAM_SET_PRIVATE_ID_STATE</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>, 
<decl><name>STREAM_SET_PRIVATE_ID_CA</name></decl>, 
<decl><name>STREAM_GET_PRIVATE_ID_STATE</name></decl>, 
}</block>;</enum>














<decl_stmt><decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_stream_Read</name><argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>















<decl_stmt><decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_stream_ReadPartial</name><argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>
<name>VLC_USED</name></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>vlc_stream_ReadBlock</name><argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>VLC_API</name> <name>uint64_t</name></type> <name>vlc_stream_Tell</name><argument_list>(<argument><expr><specifier>const</specifier> <name>stream_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>





















<decl_stmt><decl><type><name>VLC_API</name> <name>bool</name></type> <name>vlc_stream_Eof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>stream_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>












<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name> <name>offset</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_stream_vaControl</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_stream_Control</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_stream_vaControl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type><name>vlc_stream_Block</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_stream_ReadLine</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_stream_ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_stream_Delete</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>stream_t</name> <modifier>*</modifier></type><name>vlc_stream_CommonNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_stream_GetSize</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_GET_SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>stream_Size</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">62</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i_pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>stream_HasExtension</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>psz_filepath</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr>
</then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ext</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>extension</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_ContentType</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_GET_CONTENT_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_MimeType</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mime_type</name> <init>= <expr><call><name>stream_ContentType</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>mime_type</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>mime_type</name><index>[<expr><call><name>strcspn</name><argument_list>( <argument><expr><name>mime_type</name></expr></argument>, <argument><expr><literal type="string">" ;"</literal></expr></argument> )</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>mime_type</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>stream_IsMimeType</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><call><name>stream_MimeType</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mime</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>mime</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>










<decl_stmt><decl><type><name>VLC_API</name> <name>stream_t</name> <modifier>*</modifier></type><name>vlc_stream_MemoryNew</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>base</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><name>bool</name> <name>preserve</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_stream_MemoryNew</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_stream_MemoryNew(VLC_OBJECT(a), b, c, d)</cpp:value></cpp:define>






<decl_stmt><decl><type><name>VLC_API</name> <name>stream_t</name> <modifier>*</modifier></type> <name>vlc_stream_NewURL</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>)</argument_list>
<name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_stream_NewURL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_stream_NewURL(VLC_OBJECT(a), b)</cpp:value></cpp:define>







<typedef>typedef <type><name><name>struct</name> <name>vlc_stream_fifo</name></name></type> <name>vlc_stream_fifo_t</name>;</typedef>



















<function_decl><type><name>VLC_API</name> <name>vlc_stream_fifo_t</name> <modifier>*</modifier></type><name>vlc_stream_fifo_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_stream_fifo_Queue</name><parameter_list>(<parameter><decl><type><name>vlc_stream_fifo_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>vlc_stream_fifo_Write</name><parameter_list>(<parameter><decl><type><name>vlc_stream_fifo_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_stream_fifo_Close</name><parameter_list>(<parameter><decl><type><name>vlc_stream_fifo_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name> <name>stream_t</name><modifier>*</modifier></type> <name>vlc_stream_FilterNew</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_stream_filter</name></decl></parameter> )</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
