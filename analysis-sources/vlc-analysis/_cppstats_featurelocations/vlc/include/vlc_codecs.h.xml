<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_codecs.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_CODECS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODECS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>_GUID_DEFINED</name> <operator>||</operator> <name>defined</name> <name>GUID_DEFINED</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_DEFINED</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct <name>_GUID</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Data1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Data2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Data3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>Data4</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>GUID</name><operator>,</operator> *<name>REFGUID</name><operator>,</operator> *<name>LPGUID</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>GUID</name></type> <name>vlc_guid_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ATTRIBUTE_PACKED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_PACKED</name></cpp:macro> <cpp:value>__attribute__((__packed__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>1</name><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_PACKED</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR_PACKED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> FIXME</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WAVEFORMATEX_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WAVEFORMATEX_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<macro><name>ATTR_PACKED</name></macro>
<name>_WAVEFORMATEX</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wFormatTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nSamplesPerSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nAvgBytesPerSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nBlockAlign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wBitsPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cbSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVEFORMATEX</name><operator>,</operator> *<name>PWAVEFORMATEX</name><operator>,</operator> *<name>NPWAVEFORMATEX</name><operator>,</operator> *<name>LPWAVEFORMATEX</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WAVEFORMATEXTENSIBLE_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WAVEFORMATEXTENSIBLE_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<macro><name>ATTR_PACKED</name></macro>
<name>_WAVEFORMATEXTENSIBLE</name> <block>{
<decl_stmt><decl><type><name>WAVEFORMATEX</name></type> <name>Format</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wValidBitsPerSample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wSamplesPerBlock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wReserved</name></decl>;</decl_stmt> 
}</block> <decl><name>Samples</name></decl>;</union>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwChannelMask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GUID</name></type> <name>SubFormat</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVEFORMATEXTENSIBLE</name><operator>,</operator> *<name>PWAVEFORMATEXTENSIBLE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WAVEFORMATEXTENSIBLE_IEC61937_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WAVEFORMATEXTENSIBLE_IEC61937_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<macro><name>ATTR_PACKED</name></macro>
<name>_WAVEFORMATEXTENSIBLE_IEC61937</name> <block>{
<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name></type> <name>FormatExt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwEncodedSamplesPerSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwEncodedChannelCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwAverageBytesPerSec</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVEFORMATEXTENSIBLE_IEC61937</name><operator>,</operator> *<name>PWAVEFORMATEXTENSIBLE_IEC61937</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WAVEHEADER_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WAVEHEADER_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<macro><name>ATTR_PACKED</name></macro>
<name>_WAVEHEADER</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>MainChunkID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ChunkTypeID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SubChunkID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SubChunkLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Modus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>SampleFreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>BytesPerSec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>BytesPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>BitsPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>DataChunkID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>DataLength</name></decl>;</decl_stmt>
}</block></struct></type> <name>WAVEHEADER</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_VLC_BITMAPINFOHEADER_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VLC_BITMAPINFOHEADER_</name></cpp:macro></cpp:define>

<typedef>typedef <type><struct>struct
<name>ATTR_PACKED</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>biPlanes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>biBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biCompression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biSizeImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biXPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biYPelsPerMeter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biClrUsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biClrImportant</name></decl>;</decl_stmt>
}</block></struct></type> <name>VLC_BITMAPINFOHEADER</name><operator>,</operator> *<name>VLC_PBITMAPINFOHEADER</name><operator>,</operator> *<name>VLC_LPBITMAPINFOHEADER</name>;</typedef>

<typedef>typedef <type><struct>struct
<name>ATTR_PACKED</name>
<block>{
<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name></type> <name>bmiHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bmiColors</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VLC_BITMAPINFO</name><operator>,</operator> *<name>VLC_LPBITMAPINFO</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_RECT32_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RECT32_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<name>ATTR_PACKED</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <name>top</name>, <name>right</name>, <name>bottom</name>;</decl_stmt>
}</block></struct></type> <name>RECT32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_REFERENCE_TIME_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REFERENCE_TIME_</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>int64_t</name></type> <name>REFERENCE_TIME</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_VIDEOINFOHEADER_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VIDEOINFOHEADER_</name></cpp:macro></cpp:define>
<typedef>typedef <type><struct>struct
<name>ATTR_PACKED</name>
<block>{
<decl_stmt><decl><type><name>RECT32</name></type> <name>rcSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT32</name></type> <name>rcTarget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwBitRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dwBitErrorRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REFERENCE_TIME</name></type> <name>AvgTimePerFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name></type> <name>bmiHeader</name></decl>;</decl_stmt>
}</block></struct></type> <name>VIDEOINFOHEADER</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_ATTRIBUTE_PACKED</name></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_UNKNOWN</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_PCM</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ADPCM</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_IEEE_FLOAT</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ALAW</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_MULAW</name></cpp:macro> <cpp:value>0x0007</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DTS_MS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_WMAS</name></cpp:macro> <cpp:value>0x000a</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_IMA_ADPCM</name></cpp:macro> <cpp:value>0x0011</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_YAMAHA_ADPCM</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_TRUESPEECH</name></cpp:macro> <cpp:value>0x0022</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_GSM610</name></cpp:macro> <cpp:value>0x0031</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_MSNAUDIO</name></cpp:macro> <cpp:value>0x0032</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AMR_NB_2</name></cpp:macro> <cpp:value>0x0038</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_MSG723</name></cpp:macro> <cpp:value>0x0042</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_G726</name></cpp:macro> <cpp:value>0x0045</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_MPEG</name></cpp:macro> <cpp:value>0x0050</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_MPEGLAYER3</name></cpp:macro> <cpp:value>0x0055</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AMR_NB</name></cpp:macro> <cpp:value>0x0057</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AMR_WB</name></cpp:macro> <cpp:value>0x0058</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_G726_ADPCM</name></cpp:macro> <cpp:value>0x0064</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VOXWARE_RT29</name></cpp:macro> <cpp:value>0x0075</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DOLBY_AC3_SPDIF</name></cpp:macro> <cpp:value>0x0092</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VIVOG723</name></cpp:macro> <cpp:value>0x0111</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC</name></cpp:macro> <cpp:value>0x00FF</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC_MS</name></cpp:macro> <cpp:value>0xa106</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_SIPRO</name></cpp:macro> <cpp:value>0x0130</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_WMA1</name></cpp:macro> <cpp:value>0x0160</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_WMA2</name></cpp:macro> <cpp:value>0x0161</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_WMAP</name></cpp:macro> <cpp:value>0x0162</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_WMAL</name></cpp:macro> <cpp:value>0x0163</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_CREATIVE_ADPCM</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ULEAD_DV_AUDIO_NTSC</name></cpp:macro> <cpp:value>0x0215</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ULEAD_DV_AUDIO_PAL</name></cpp:macro> <cpp:value>0x0216</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ATRAC3</name></cpp:macro> <cpp:value>0x0270</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_SONY_ATRAC3</name></cpp:macro> <cpp:value>0x0272</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_IMC</name></cpp:macro> <cpp:value>0x0401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_INDEO_AUDIO</name></cpp:macro> <cpp:value>0x0402</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ON2_AVC</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_ON2_AVC_2</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_QNAP_ADTS</name></cpp:macro> <cpp:value>0x0AAC</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC_ADTS</name></cpp:macro> <cpp:value>0x1600</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC_2</name></cpp:macro> <cpp:value>0x1601</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC_LATM</name></cpp:macro> <cpp:value>0x1602</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_HEAAC</name></cpp:macro> <cpp:value>0x1610</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_A52</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DTS</name></cpp:macro> <cpp:value>0x2001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AVCODEC_AAC</name></cpp:macro> <cpp:value>0x706D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DIVIO_AAC</name></cpp:macro> <cpp:value>0x4143</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_GSM_AMR_FIXED</name></cpp:macro> <cpp:value>0x7A21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_GSM_AMR</name></cpp:macro> <cpp:value>0x7A22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DK3</name></cpp:macro> <cpp:value>0x0062</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_DK4</name></cpp:macro> <cpp:value>0x0061</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORBIS</name></cpp:macro> <cpp:value>0x566f</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_1</name></cpp:macro> <cpp:value>0x674f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_2</name></cpp:macro> <cpp:value>0x6750</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_3</name></cpp:macro> <cpp:value>0x6751</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_1PLUS</name></cpp:macro> <cpp:value>0x676f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_2PLUS</name></cpp:macro> <cpp:value>0x6770</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_VORB_3PLUS</name></cpp:macro> <cpp:value>0x6771</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_G723_1</name></cpp:macro> <cpp:value>0xa100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_AAC_3</name></cpp:macro> <cpp:value>0xa106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_SPEEX</name></cpp:macro> <cpp:value>0xa109</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_FLAC</name></cpp:macro> <cpp:value>0xf1ac</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WAVE_FORMAT_EXTENSIBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_FORMAT_EXTENSIBLE</name></cpp:macro> <cpp:value>0xFFFE</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_KSDATAFORMAT_SUBTYPE_ATRAC3P</name></cpp:macro> <cpp:value>{0xE923AABF, 0xCB58, 0x4471, {0xA1, 0x19, 0xFF, 0xFA, 0x01, 0xE4, 0xCE, 0x62}}</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_KSDATAFORMAT_SUBTYPE_UNKNOWN</name></cpp:macro> <cpp:value>{0x00000000, 0x0000, 0x0000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_WAVEFORMATEX_GUIDBASE</name></cpp:macro> <cpp:value>{0x00000000, 0x0000, 0x0010, {0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}}</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AMBISONIC_SUBTYPE_PCM</name></cpp:macro> <cpp:value>{0x00000001, 0x0721, 0x11D3, {0x86, 0x44, 0xC8, 0xC1, 0xCA, 0x00, 0x00, 0x00}}</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AMBISONIC_SUBTYPE_IEEE_FLOAT</name></cpp:macro> <cpp:value>{0x00000003, 0x0721, 0x11D3, {0x86, 0x44, 0xC8, 0xC1, 0xCA, 0x00, 0x00, 0x00}}</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_FRONT_LEFT</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_FRONT_RIGHT</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_FRONT_CENTER</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_LOW_FREQUENCY</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_BACK_LEFT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_BACK_RIGHT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_FRONT_LEFT_OF_CENTER</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_FRONT_RIGHT_OF_CENTER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_BACK_CENTER</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_SIDE_LEFT</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_SIDE_RIGHT</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_CENTER</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_FRONT_LEFT</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_FRONT_CENTER</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_FRONT_RIGHT</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_BACK_LEFT</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_BACK_CENTER</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_TOP_BACK_RIGHT</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAVE_SPEAKER_RESERVED</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block>
<decl><name><name>wave_format_tag_to_fourcc</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Raw audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>VLC_CODEC_S8</name></expr>, <expr><literal type="string">"PCM S8 audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>VLC_CODEC_S16L</name></expr>, <expr><literal type="string">"PCM S16L audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>VLC_CODEC_S24L</name></expr>, <expr><literal type="string">"PCM S24L audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>VLC_CODEC_S32L</name></expr>, <expr><literal type="string">"PCM S32L audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ADPCM</name></expr>, <expr><name>VLC_CODEC_ADPCM_MS</name></expr>, <expr><literal type="string">"ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_IEEE_FLOAT</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"IEEE Float audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_IEEE_FLOAT</name></expr>, <expr><name>VLC_CODEC_F32L</name></expr>, <expr><literal type="string">"PCM 32 (Float) audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_IEEE_FLOAT</name></expr>, <expr><name>VLC_CODEC_F64L</name></expr>, <expr><literal type="string">"PCM 64 (Float) audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ALAW</name></expr>, <expr><name>VLC_CODEC_ALAW</name></expr>, <expr><literal type="string">"A-Law"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_MULAW</name></expr>, <expr><name>VLC_CODEC_MULAW</name></expr>, <expr><literal type="string">"Mu-Law"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_IMA_ADPCM</name></expr>, <expr><name>VLC_CODEC_ADPCM_IMA_WAV</name></expr>, <expr><literal type="string">"Ima-ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_CREATIVE_ADPCM</name></expr>, <expr><name>VLC_CODEC_ADPCM_CREATIVE</name></expr>, <expr><literal type="string">"Creative ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_YAMAHA_ADPCM</name></expr>, <expr><name>VLC_CODEC_ADPCM_YAMAHA</name></expr>, <expr><literal type="string">"Yamaha ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_TRUESPEECH</name></expr>, <expr><name>VLC_CODEC_TRUESPEECH</name></expr>, <expr><literal type="string">"Truespeech"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_GSM610</name></expr>, <expr><name>VLC_CODEC_GSM_MS</name></expr>, <expr><literal type="string">"Microsoft WAV GSM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_MSNAUDIO</name></expr>, <expr><name>VLC_CODEC_GSM_MS</name></expr>, <expr><literal type="string">"Microsoft MSN Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_G726</name></expr>, <expr><name>VLC_CODEC_ADPCM_G726</name></expr>, <expr><literal type="string">"G.726 ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_G726_ADPCM</name></expr>, <expr><name>VLC_CODEC_ADPCM_G726</name></expr>, <expr><literal type="string">"G.726 ADPCM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_G723_1</name></expr>, <expr><name>VLC_CODEC_G723_1</name></expr>, <expr><literal type="string">"G.723.1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_MSG723</name></expr>, <expr><name>VLC_CODEC_G723_1</name></expr>, <expr><literal type="string">"Microsoft G.723 [G723.1]"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VIVOG723</name></expr>, <expr><name>VLC_CODEC_G723_1</name></expr>, <expr><literal type="string">"Vivo G.723.1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_MPEGLAYER3</name></expr>, <expr><name>VLC_CODEC_MP3</name></expr>, <expr><literal type="string">"Mpeg Audio Layer 3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_MPEG</name></expr>, <expr><name>VLC_CODEC_MPGA</name></expr>, <expr><literal type="string">"Mpeg Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AMR_NB</name></expr>, <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><literal type="string">"AMR NB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AMR_NB_2</name></expr>, <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><literal type="string">"AMR NB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AMR_WB</name></expr>, <expr><name>VLC_CODEC_AMR_WB</name></expr>, <expr><literal type="string">"AMR Wideband"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_SIPRO</name></expr>, <expr><name>VLC_CODEC_SIPR</name></expr>, <expr><literal type="string">"Sipr Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_A52</name></expr>, <expr><name>VLC_CODEC_A52</name></expr>, <expr><literal type="string">"A/52"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_WMA1</name></expr>, <expr><name>VLC_CODEC_WMA1</name></expr>, <expr><literal type="string">"Window Media Audio v1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_WMA2</name></expr>, <expr><name>VLC_CODEC_WMA2</name></expr>, <expr><literal type="string">"Window Media Audio v2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_WMAP</name></expr>, <expr><name>VLC_CODEC_WMAP</name></expr>, <expr><literal type="string">"Window Media Audio 9 Professional"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_WMAL</name></expr>, <expr><name>VLC_CODEC_WMAL</name></expr>, <expr><literal type="string">"Window Media Audio 9 Lossless"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_WMAS</name></expr>, <expr><name>VLC_CODEC_WMAS</name></expr>, <expr><literal type="string">"Window Media Audio 9 Speech"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ATRAC3</name></expr>, <expr><name>VLC_CODEC_ATRAC3</name></expr>, <expr><literal type="string">"Sony Atrac3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_SONY_ATRAC3</name></expr>, <expr><name>VLC_CODEC_ATRAC3</name></expr>, <expr><literal type="string">"Sony Atrac3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_DK3</name></expr>, <expr><name>VLC_CODEC_ADPCM_DK3</name></expr>, <expr><literal type="string">"Duck DK3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_DK4</name></expr>, <expr><name>VLC_CODEC_ADPCM_DK4</name></expr>, <expr><literal type="string">"Duck DK4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_DTS</name></expr>, <expr><name>VLC_CODEC_DTS</name></expr>, <expr><literal type="string">"DTS Coherent Acoustics"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_DTS_MS</name></expr>, <expr><name>VLC_CODEC_DTS</name></expr>, <expr><literal type="string">"DTS Coherent Acoustics"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_DIVIO_AAC</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio (Divio)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_QNAP_ADTS</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 ADTS Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC_ADTS</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 ADTS Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC_2</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC_3</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC_LATM</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 LATM Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_HEAAC</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AVCODEC_AAC</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_AAC_MS</name></expr>, <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><literal type="string">"MPEG-4 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORBIS</name></expr>, <expr><name>VLC_CODEC_VORBIS</name></expr>, <expr><literal type="string">"Vorbis Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_1</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 1 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_1PLUS</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 1+ Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_2</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 2 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_2PLUS</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 2+ Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_3</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 3 Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VORB_3PLUS</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Vorbis 3+ Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_SPEEX</name></expr>, <expr><name>VLC_CODEC_SPEEX</name></expr>, <expr><literal type="string">"Speex Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_FLAC</name></expr>, <expr><name>VLC_CODEC_FLAC</name></expr>, <expr><literal type="string">"FLAC Audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_GSM_AMR_FIXED</name></expr>, <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><literal type="string">"GSM-AMR Audio CBR, no SID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_GSM_AMR</name></expr>, <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><literal type="string">"GSM-AMR Audio VBR, SID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ULEAD_DV_AUDIO_NTSC</name></expr>, <expr><name>VLC_CODEC_ULEAD_DV_AUDIO_NTSC</name></expr>, <expr><literal type="string">"Ulead DV audio NTSC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ULEAD_DV_AUDIO_PAL</name></expr>, <expr><name>VLC_CODEC_ULEAD_DV_AUDIO_PAL</name></expr>, <expr><literal type="string">"Ulead DV audio PAL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_IMC</name></expr>, <expr><name>VLC_CODEC_IMC</name></expr>, <expr><literal type="string">"IMC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_INDEO_AUDIO</name></expr>, <expr><name>VLC_CODEC_INDEO_AUDIO</name></expr>, <expr><literal type="string">"Indeo Audio Coder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_VOXWARE_RT29</name></expr>, <expr><name>VLC_CODEC_METASOUND</name></expr>, <expr><literal type="string">"VoxWare MetaSound"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ON2_AVC</name></expr>, <expr><name>VLC_CODEC_ON2AVC</name></expr>, <expr><literal type="string">"On2 Audio for Video Codec (VP7)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>WAVE_FORMAT_ON2_AVC_2</name></expr>, <expr><name>VLC_CODEC_ON2AVC</name></expr>, <expr><literal type="string">"On2 Audio for Video Codec (VP6)"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>WAVE_FORMAT_UNKNOWN</name></expr>, <expr><name>VLC_CODEC_UNKNOWN</name></expr>, <expr><literal type="string">"Unknown"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>wf_tag_to_fourcc</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>fcc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tag</name> <operator>==</operator> <name>i_tag</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>fcc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>fcc</name> <operator>=</operator> <name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fourcc_to_wf_tag</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pi_tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>fcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>pi_tag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_tag</name> <operator>=</operator> <name><name>wave_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>guid_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block>
<decl><name><name>sub_format_tag_to_fourcc</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VLC_AMBISONIC_SUBTYPE_PCM</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Ambisonic B format (PCM)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_AMBISONIC_SUBTYPE_IEEE_FLOAT</name></expr>, <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"Ambisonic B format (IEEE float)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_KSDATAFORMAT_SUBTYPE_ATRAC3P</name></expr>, <expr><name>VLC_CODEC_ATRAC3P</name></expr>, <expr><literal type="string">"Sony Atrac3+"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_KSDATAFORMAT_SUBTYPE_UNKNOWN</name></expr>, <expr><name>VLC_CODEC_UNKNOWN</name></expr>, <expr><literal type="string">"Unknown"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>guidcmpbase</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>s2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator> <name><name>s1</name><operator>-&gt;</operator><name>Data2</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>Data2</name></name> <operator>&amp;&amp;</operator>
<name><name>s1</name><operator>-&gt;</operator><name>Data3</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>Data3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>Data4</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>Data4</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>guidcmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>s2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator> <name><name>s1</name><operator>-&gt;</operator><name>Data1</name></name> <operator>==</operator> <name><name>s2</name><operator>-&gt;</operator><name>Data1</name></name> <operator>&amp;&amp;</operator> <call><name>guidcmpbase</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_FMT</name></cpp:macro> <cpp:value>"0x%8.8x-0x%4.4x-0x%4.4x-0x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUID_PRINT</name><parameter_list>( <parameter><type><name>guid</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(unsigned)(guid).Data1, (guid).Data2, (guid).Data3, (guid).Data4[0],(guid).Data4[1],(guid).Data4[2],(guid).Data4[3], (guid).Data4[4],(guid).Data4[5],(guid).Data4[6],(guid).Data4[7]</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sf_tag_to_fourcc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid_tag</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>fcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>unknown</name> <init>= <expr><name>VLC_KSDATAFORMAT_SUBTYPE_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>waveformatex</name> <init>= <expr><name>VLC_WAVEFORMATEX_GUIDBASE</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sub_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid_tag</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>unknown</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sub_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid_tag</name></expr></argument>, <argument><expr><name>guid_tag</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_found</name> <operator>&amp;&amp;</operator> <call><name>guidcmpbase</name><argument_list>(<argument><expr><name>guid_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waveformatex</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wf_tag_to_fourcc</name><argument_list>(<argument><expr><name><name>guid_tag</name><operator>-&gt;</operator><name>Data1</name></name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>fcc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>fcc</name> <operator>=</operator> <name><name>sub_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <name><name>sub_format_tag_to_fourcc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
