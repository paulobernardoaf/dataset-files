<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_modules.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MODULES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_activate_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<struct_decl>struct <name>vlc_logger</name>;</struct_decl>

























<decl_stmt><decl><type><name>VLC_API</name> <name>module_t</name> <modifier>*</modifier></type><name>vlc_module_load</name><argument_list>(<argument><expr>struct <name>vlc_logger</name> <operator>*</operator><name>log</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cap</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>bool</name> <name>strict</name></expr></argument>,
<argument><expr><name>vlc_activate_t</name> <name>probe</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_module_load</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>strict</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic ((ctx), struct vlc_logger *: vlc_module_load((void *)(ctx), cap, name, strict, __VA_ARGS__), void *: vlc_module_load((void *)(ctx), cap, name, strict, __VA_ARGS__), default: vlc_module_load(vlc_object_logger((vlc_object_t *)(ctx)), cap, name, strict, __VA_ARGS__))</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VLC_API</name> <name>module_t</name> <modifier>*</modifier></type> <name>module_need</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>module_need</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>module_need(VLC_OBJECT(a),b,c,d)</cpp:value></cpp:define>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>module_t</name> <modifier>*</modifier></type><name>module_need_var</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>module_need</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>module_need_var</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>module_need_var(VLC_OBJECT(a),b,c)</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>module_unneed</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>module_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>module_unneed</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>module_unneed(VLC_OBJECT(a),b)</cpp:value></cpp:define>








<decl_stmt><decl><type><name>VLC_API</name> <name>bool</name></type> <name>module_exists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>VLC_API</name> <name>module_t</name> <modifier>*</modifier></type><name>module_find</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>VLC_API</name> <name>module_config_t</name> <modifier>*</modifier></type><name>module_config_get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>module</name></expr></argument>,
<argument><expr><name>unsigned</name> <operator>*</operator><specifier>restrict</specifier> <name>psize</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>module_config_free</name><parameter_list>( <parameter><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>module_list_free</name><parameter_list>(<parameter><decl><type><name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>VLC_API</name> <name>module_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>module_list_get</name><argument_list>(<argument><expr><name>size_t</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>









<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>module_provides</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>module_get_object</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_name</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>, <argument><expr><name>bool</name> <name>longname</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>module_GetLongName</name><parameter_list>( <parameter><type><name>m</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>module_get_name( m, true )</cpp:value></cpp:define>







<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_help</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_get_capability</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>module_get_score</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module_gettext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>module_t</name> <operator>*</operator><name>m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>module_t</name> <modifier>*</modifier></type><name>module_get_main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>module_find</name> <argument_list>(<argument><expr><literal type="string">"core"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>module_get_main</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>module_get_main()</cpp:value></cpp:define>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>module_is_main</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>module_t</name> <modifier>*</modifier></type> <name>p_module</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><call><name>module_get_object</name><argument_list>( <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"core"</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
