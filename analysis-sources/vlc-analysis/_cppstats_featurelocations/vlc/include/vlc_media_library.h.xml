<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_media_library.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MEDIA_LIBRARY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MEDIA_LIBRARY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>vlc_ml_media_type_t</name>
<block>{
<decl><name>VLC_ML_MEDIA_TYPE_UNKNOWN</name></decl>,
<decl><name>VLC_ML_MEDIA_TYPE_VIDEO</name></decl>,
<decl><name>VLC_ML_MEDIA_TYPE_AUDIO</name></decl>,
}</block></enum></type> <name>vlc_ml_media_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_media_subtype_t</name>
<block>{
<decl><name>VLC_ML_MEDIA_SUBTYPE_UNKNOWN</name></decl>,
<decl><name>VLC_ML_MEDIA_SUBTYPE_SHOW_EPISODE</name></decl>,
<decl><name>VLC_ML_MEDIA_SUBTYPE_MOVIE</name></decl>,
<decl><name>VLC_ML_MEDIA_SUBTYPE_ALBUMTRACK</name></decl>,
}</block></enum></type> <name>vlc_ml_media_subtype_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_file_type_t</name>
<block>{
<decl><name>VLC_ML_FILE_TYPE_UNKNOWN</name></decl>,
<decl><name>VLC_ML_FILE_TYPE_MAIN</name></decl>,
<decl><name>VLC_ML_FILE_TYPE_PART</name></decl>,
<decl><name>VLC_ML_FILE_TYPE_SOUNDTRACK</name></decl>,
<decl><name>VLC_ML_FILE_TYPE_SUBTITLE</name></decl>,
<decl><name>VLC_ML_FILE_TYPE_PLAYLIST</name></decl>,
}</block></enum></type> <name>vlc_ml_file_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_track_type_t</name>
<block>{
<decl><name>VLC_ML_TRACK_TYPE_UNKNOWN</name></decl>,
<decl><name>VLC_ML_TRACK_TYPE_VIDEO</name></decl>,
<decl><name>VLC_ML_TRACK_TYPE_AUDIO</name></decl>,
}</block></enum></type> <name>vlc_ml_track_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_thumbnail_size_t</name>
<block>{
<decl><name>VLC_ML_THUMBNAIL_SMALL</name></decl>,
<decl><name>VLC_ML_THUMBNAIL_BANNER</name></decl>,

<decl><name>VLC_ML_THUMBNAIL_SIZE_COUNT</name></decl>
}</block></enum></type> <name>vlc_ml_thumbnail_size_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_history_type_t</name>
<block>{
<decl><name>VLC_ML_HISTORY_TYPE_MEDIA</name></decl>,
<decl><name>VLC_ML_HISTORY_TYPE_NETWORK</name></decl>,
}</block></enum></type> <name>vlc_ml_history_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_thumbnail_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>b_generated</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_thumbnail_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_movie_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_imdb_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_movie_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_show_episode_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tvdb_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_episode_nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_season_number</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_show_episode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_show_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_artwork_mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tvdb_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_release_year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_episodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_seasons</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_show_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_album_track_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_track_nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_disc_nb</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_album_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_label_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_label_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_label_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_label_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_label_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_file_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_file_type_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_external</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_removable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_present</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_file_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_file_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_file_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_file_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_media_track_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_track_type_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bitrate</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nbChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sampleRate</name></decl>;</decl_stmt>
}</block> <decl><name>a</name></decl>;</struct>
<struct>struct
<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sarNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sarDen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_fpsNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_fpsDen</name></decl>;</decl_stmt>
}</block> <decl><name>v</name></decl>;</struct>
}</block>;</union>
}</block></struct></type> <name>vlc_ml_media_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_media_track_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_track_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_media_track_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_media_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_ml_media_type_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_subtype_t</name></type> <name>i_subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_ml_file_list_t</name><modifier>*</modifier></type> <name>p_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_track_list_t</name><modifier>*</modifier></type> <name>p_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_year</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_playcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>i_last_played_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_ml_thumbnail_t</name></type> <name><name>thumbnails</name><index>[<expr><name>VLC_ML_THUMBNAIL_SIZE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_favorite</name></decl>;</decl_stmt>

<union>union
<block>{
<decl_stmt><decl><type><name>vlc_ml_show_episode_t</name></type> <name>show_episode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_movie_t</name></type> <name>movie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_track_t</name></type> <name>album_track</name></decl>;</decl_stmt>
}</block>;</union>
}</block></struct></type> <name>vlc_ml_media_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_playlist_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_creation_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_artwork_mrl</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_playlist_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_artist_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_shortbio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_thumbnail_t</name></type> <name><name>thumbnails</name><index>[<expr><name>VLC_ML_THUMBNAIL_SIZE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_mb_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_album</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_tracks</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_artist_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_artist_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_artist_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_artist_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_album_t</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_thumbnail_t</name></type> <name><name>thumbnails</name><index>[<expr><name>VLC_ML_THUMBNAIL_SIZE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_artist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_year</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_album_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_genre_t</name>
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_tracks</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_genre_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_media_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_media_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_album_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_album_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_show_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_show_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_show_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_genre_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_genre_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_genre_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_playlist_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_playlist_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_playlist_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_entry_point_t</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_banned</name></decl>;</decl_stmt> 
}</block></struct></type> <name>vlc_ml_entry_point_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vlc_ml_entry_point_list_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_entry_point_t</name></type> <name><name>p_items</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_entry_point_list_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vlc_medialibrary_t</name></name></type> <name>vlc_medialibrary_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_medialibrary_module_t</name></name></type> <name>vlc_medialibrary_module_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_ml_event_callback_t</name></name></type> <name>vlc_ml_event_callback_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>vlc_ml_sorting_criteria_t</name>
<block>{





<decl><name>VLC_ML_SORTING_DEFAULT</name></decl>,
<decl><name>VLC_ML_SORTING_ALPHA</name></decl>,
<decl><name>VLC_ML_SORTING_DURATION</name></decl>,
<decl><name>VLC_ML_SORTING_INSERTIONDATE</name></decl>,
<decl><name>VLC_ML_SORTING_LASTMODIFICATIONDATE</name></decl>,
<decl><name>VLC_ML_SORTING_RELEASEDATE</name></decl>,
<decl><name>VLC_ML_SORTING_FILESIZE</name></decl>,
<decl><name>VLC_ML_SORTING_ARTIST</name></decl>,
<decl><name>VLC_ML_SORTING_PLAYCOUNT</name></decl>,
<decl><name>VLC_ML_SORTING_ALBUM</name></decl>,
<decl><name>VLC_ML_SORTING_FILENAME</name></decl>,
<decl><name>VLC_ML_SORTING_TRACKNUMBER</name></decl>,
}</block></enum></type> <name>vlc_ml_sorting_criteria_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>vlc_ml_query_params_t</name></name></type> <name>vlc_ml_query_params_t</name>;</typedef>
<struct>struct <name>vlc_ml_query_params_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nbResults</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_sorting_criteria_t</name></type> <name>i_sort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_desc</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>vlc_ml_get_queries</name>
<block>{
<decl><name>VLC_ML_GET_MEDIA</name></decl>, 
<decl><name>VLC_ML_GET_MEDIA_BY_MRL</name></decl>, 
<decl><name>VLC_ML_GET_INPUT_ITEM</name></decl>, 
<decl><name>VLC_ML_GET_INPUT_ITEM_BY_MRL</name></decl>,
<decl><name>VLC_ML_GET_ALBUM</name></decl>, 
<decl><name>VLC_ML_GET_ARTIST</name></decl>, 
<decl><name>VLC_ML_GET_GENRE</name></decl>, 
<decl><name>VLC_ML_GET_SHOW</name></decl>, 
<decl><name>VLC_ML_GET_PLAYLIST</name></decl>, 
}</block>;</enum>

<enum>enum <name>vlc_ml_list_queries</name>
<block>{


<decl><name>VLC_ML_LIST_VIDEOS</name></decl>, 
<decl><name>VLC_ML_COUNT_VIDEOS</name></decl>, 
<decl><name>VLC_ML_LIST_AUDIOS</name></decl>, 
<decl><name>VLC_ML_COUNT_AUDIOS</name></decl>, 
<decl><name>VLC_ML_LIST_ALBUMS</name></decl>, 
<decl><name>VLC_ML_COUNT_ALBUMS</name></decl>, 
<decl><name>VLC_ML_LIST_GENRES</name></decl>, 
<decl><name>VLC_ML_COUNT_GENRES</name></decl>, 
<decl><name>VLC_ML_LIST_ARTISTS</name></decl>, 
<decl><name>VLC_ML_COUNT_ARTISTS</name></decl>, 
<decl><name>VLC_ML_LIST_SHOWS</name></decl>, 
<decl><name>VLC_ML_COUNT_SHOWS</name></decl>, 
<decl><name>VLC_ML_LIST_PLAYLISTS</name></decl>, 
<decl><name>VLC_ML_COUNT_PLAYLISTS</name></decl>, 
<decl><name>VLC_ML_LIST_HISTORY</name></decl>, 
<decl><name>VLC_ML_LIST_STREAM_HISTORY</name></decl>, 


<decl><name>VLC_ML_LIST_ALBUM_TRACKS</name></decl>, 
<decl><name>VLC_ML_COUNT_ALBUM_TRACKS</name></decl>, 
<decl><name>VLC_ML_LIST_ALBUM_ARTISTS</name></decl>, 
<decl><name>VLC_ML_COUNT_ALBUM_ARTISTS</name></decl>, 


<decl><name>VLC_ML_LIST_ARTIST_ALBUMS</name></decl>, 
<decl><name>VLC_ML_COUNT_ARTIST_ALBUMS</name></decl>, 
<decl><name>VLC_ML_LIST_ARTIST_TRACKS</name></decl>, 
<decl><name>VLC_ML_COUNT_ARTIST_TRACKS</name></decl>, 


<decl><name>VLC_ML_LIST_GENRE_ARTISTS</name></decl>, 
<decl><name>VLC_ML_COUNT_GENRE_ARTISTS</name></decl>, 
<decl><name>VLC_ML_LIST_GENRE_TRACKS</name></decl>, 
<decl><name>VLC_ML_COUNT_GENRE_TRACKS</name></decl>, 
<decl><name>VLC_ML_LIST_GENRE_ALBUMS</name></decl>, 
<decl><name>VLC_ML_COUNT_GENRE_ALBUMS</name></decl>, 


<decl><name>VLC_ML_LIST_SHOW_EPISODES</name></decl>, 
<decl><name>VLC_ML_COUNT_SHOW_EPISODES</name></decl>, 


<decl><name>VLC_ML_LIST_MEDIA_LABELS</name></decl>, 
<decl><name>VLC_ML_COUNT_MEDIA_LABELS</name></decl>, 


<decl><name>VLC_ML_LIST_PLAYLIST_MEDIA</name></decl>, 
<decl><name>VLC_ML_COUNT_PLAYLIST_MEDIA</name></decl>, 


<decl><name>VLC_ML_LIST_MEDIA_OF</name></decl>, 
<decl><name>VLC_ML_COUNT_MEDIA_OF</name></decl>, 
<decl><name>VLC_ML_LIST_ARTISTS_OF</name></decl>, 
<decl><name>VLC_ML_COUNT_ARTISTS_OF</name></decl>, 
<decl><name>VLC_ML_LIST_ALBUMS_OF</name></decl>, 
<decl><name>VLC_ML_COUNT_ALBUMS_OF</name></decl>, 
}</block>;</enum>

<enum>enum <name>vlc_ml_parent_type</name>
<block>{
<decl><name>VLC_ML_PARENT_UNKNOWN</name></decl>,
<decl><name>VLC_ML_PARENT_ALBUM</name></decl>,
<decl><name>VLC_ML_PARENT_ARTIST</name></decl>,
<decl><name>VLC_ML_PARENT_SHOW</name></decl>,
<decl><name>VLC_ML_PARENT_GENRE</name></decl>,
<decl><name>VLC_ML_PARENT_PLAYLIST</name></decl>,
}</block>;</enum>

<enum>enum <name>vlc_ml_control</name>
<block>{

<decl><name>VLC_ML_ADD_FOLDER</name></decl>, 
<decl><name>VLC_ML_REMOVE_FOLDER</name></decl>, 
<decl><name>VLC_ML_BAN_FOLDER</name></decl>, 
<decl><name>VLC_ML_UNBAN_FOLDER</name></decl>, 
<decl><name>VLC_ML_LIST_FOLDERS</name></decl>, 
<decl><name>VLC_ML_IS_INDEXED</name></decl>, 





<decl><name>VLC_ML_RELOAD_FOLDER</name></decl>,


<decl><name>VLC_ML_PAUSE_BACKGROUND</name></decl>, 
<decl><name>VLC_ML_RESUME_BACKGROUND</name></decl>, 


<decl><name>VLC_ML_CLEAR_HISTORY</name></decl>, 


<decl><name>VLC_ML_NEW_EXTERNAL_MEDIA</name></decl>, 
<decl><name>VLC_ML_NEW_STREAM</name></decl>, 


<decl><name>VLC_ML_MEDIA_INCREASE_PLAY_COUNT</name></decl>, 
<decl><name>VLC_ML_MEDIA_GET_MEDIA_PLAYBACK_STATE</name></decl>, 
<decl><name>VLC_ML_MEDIA_SET_MEDIA_PLAYBACK_STATE</name></decl>, 
<decl><name>VLC_ML_MEDIA_GET_ALL_MEDIA_PLAYBACK_STATES</name></decl>, 
<decl><name>VLC_ML_MEDIA_SET_ALL_MEDIA_PLAYBACK_STATES</name></decl>, 
<decl><name>VLC_ML_MEDIA_SET_THUMBNAIL</name></decl>, 
<decl><name>VLC_ML_MEDIA_GENERATE_THUMBNAIL</name></decl>, 
<decl><name>VLC_ML_MEDIA_ADD_EXTERNAL_MRL</name></decl>, 
<decl><name>VLC_ML_MEDIA_SET_TYPE</name></decl>, 
}</block>;</enum>











<enum>enum <name>vlc_ml_playback_state</name>
<block>{
<decl><name>VLC_ML_PLAYBACK_STATE_RATING</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_PROGRESS</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_SPEED</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_TITLE</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_CHAPTER</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_PROGRAM</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_SEEN</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_VIDEO_TRACK</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_ASPECT_RATIO</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_ZOOM</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_CROP</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_DEINTERLACE</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_VIDEO_FILTER</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_AUDIO_TRACK</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_GAIN</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_AUDIO_DELAY</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_SUBTITLE_TRACK</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_SUBTITLE_DELAY</name></decl>,
<decl><name>VLC_ML_PLAYBACK_STATE_APP_SPECIFIC</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>vlc_ml_playback_states_all</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zoom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>current_video_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>current_audio_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_subtitle_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>crop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>deinterlace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>video_filter</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ml_playback_states_all</name>;</typedef>

<enum>enum <name>vlc_ml_event_type</name>
<block>{









<decl><name>VLC_ML_EVENT_MEDIA_ADDED</name></decl>,
<decl><name>VLC_ML_EVENT_MEDIA_UPDATED</name></decl>,
<decl><name>VLC_ML_EVENT_MEDIA_DELETED</name></decl>,
<decl><name>VLC_ML_EVENT_ARTIST_ADDED</name></decl>,
<decl><name>VLC_ML_EVENT_ARTIST_UPDATED</name></decl>,
<decl><name>VLC_ML_EVENT_ARTIST_DELETED</name></decl>,
<decl><name>VLC_ML_EVENT_ALBUM_ADDED</name></decl>,
<decl><name>VLC_ML_EVENT_ALBUM_UPDATED</name></decl>,
<decl><name>VLC_ML_EVENT_ALBUM_DELETED</name></decl>,
<decl><name>VLC_ML_EVENT_PLAYLIST_ADDED</name></decl>,
<decl><name>VLC_ML_EVENT_PLAYLIST_UPDATED</name></decl>,
<decl><name>VLC_ML_EVENT_PLAYLIST_DELETED</name></decl>,
<decl><name>VLC_ML_EVENT_GENRE_ADDED</name></decl>,
<decl><name>VLC_ML_EVENT_GENRE_UPDATED</name></decl>,
<decl><name>VLC_ML_EVENT_GENRE_DELETED</name></decl>,








<decl><name>VLC_ML_EVENT_DISCOVERY_STARTED</name></decl>,





<decl><name>VLC_ML_EVENT_DISCOVERY_PROGRESS</name></decl>,







<decl><name>VLC_ML_EVENT_DISCOVERY_COMPLETED</name></decl>,







<decl><name>VLC_ML_EVENT_RELOAD_STARTED</name></decl>,







<decl><name>VLC_ML_EVENT_RELOAD_COMPLETED</name></decl>,









<decl><name>VLC_ML_EVENT_ENTRY_POINT_ADDED</name></decl>,






<decl><name>VLC_ML_EVENT_ENTRY_POINT_REMOVED</name></decl>,






<decl><name>VLC_ML_EVENT_ENTRY_POINT_BANNED</name></decl>,






<decl><name>VLC_ML_EVENT_ENTRY_POINT_UNBANNED</name></decl>,






<decl><name>VLC_ML_EVENT_BACKGROUND_IDLE_CHANGED</name></decl>,







<decl><name>VLC_ML_EVENT_PARSING_PROGRESS_UPDATED</name></decl>,






<decl><name>VLC_ML_EVENT_MEDIA_THUMBNAIL_GENERATED</name></decl>,






<decl><name>VLC_ML_EVENT_HISTORY_CHANGED</name></decl>,



<decl><name>VLC_ML_EVENT_RESCAN_STARTED</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>vlc_ml_event_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
}</block> <decl><name>discovery_started</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
}</block> <decl><name>discovery_progress</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>discovery_completed</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
}</block> <decl><name>reload_started</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>reload_completed</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>entry_point_added</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>entry_point_removed</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>entry_point_banned</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_entry_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>entry_point_unbanned</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_percent</name></decl>;</decl_stmt>
}</block> <decl><name>parsing_progress</name></decl>;</struct>
<union>union
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>p_media</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_artist_t</name><modifier>*</modifier></type> <name>p_artist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_album_t</name><modifier>*</modifier></type> <name>p_album</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_playlist_t</name><modifier>*</modifier></type> <name>p_playlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_genre_t</name><modifier>*</modifier></type> <name>p_genre</name></decl>;</decl_stmt>
}</block> <decl><name>creation</name></decl>;</union>
<struct>struct
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_entity_id</name></decl>;</decl_stmt>
}</block> <decl><name>modification</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_entity_id</name></decl>;</decl_stmt>
}</block> <decl><name>deletion</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_idle</name></decl>;</decl_stmt>
}</block> <decl><name>background_idle_changed</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>p_media</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ml_thumbnail_size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name></decl>;</decl_stmt>
}</block> <decl><name>media_thumbnail_generated</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_ml_history_type_t</name></type> <name>history_type</name></decl>;</decl_stmt>
}</block> <decl><name>history_changed</name></decl>;</struct>
}</block>;</union>
}</block></struct></type> <name>vlc_ml_event_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vlc_ml_callback_t</name>)<parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_event_t</name><modifier>*</modifier></type> <name>p_event</name></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>vlc_medialibrary_callbacks_t</name>
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_send_event</name>)<parameter_list>( <parameter><decl><type><name>vlc_medialibrary_module_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_event_t</name><modifier>*</modifier></type> <name>p_event</name></decl></parameter> )</parameter_list>;</function_decl>
}</block></struct></type> <name>vlc_medialibrary_callbacks_t</name>;</typedef>

<struct>struct <name>vlc_medialibrary_module_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_sys</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_control</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_medialibrary_module_t</name></name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_list</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_medialibrary_module_t</name></name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>p_params</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_get</name>)<parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_medialibrary_module_t</name></name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_medialibrary_callbacks_t</name><modifier>*</modifier></type> <name>cbs</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>libvlc_MlCreate</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name><modifier>*</modifier></type> <name>p_libvlc</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>libvlc_MlRelease</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>vlc_ml_instance_get</name><argument_list>( <argument><expr><name>vlc_object_t</name><operator>*</operator> <name>p_obj</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_ml_instance_get</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_ml_instance_get( VLC_OBJECT(x) )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VLC_API</name> <name>void</name><modifier>*</modifier></type> <name>vlc_ml_get</name><argument_list>( <argument><expr><name>vlc_medialibrary_t</name><operator>*</operator> <name>p_ml</name></expr></argument>, <argument><expr><name>int</name> <name>i_query</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_ml_control</name><argument_list>( <argument><expr><name>vlc_medialibrary_t</name><operator>*</operator> <name>p_ml</name></expr></argument>, <argument><expr><name>int</name> <name>i_query</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_ml_list</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>p_params</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>vlc_ml_event_callback_t</name><modifier>*</modifier></type>
<name>vlc_ml_event_register_callback</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>vlc_ml_callback_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_event_unregister_callback</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_event_callback_t</name><modifier>*</modifier></type> <name>p_callback</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_event_unregister_from_callback</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_event_callback_t</name><modifier>*</modifier></type> <name>p_callback</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_show_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_show_t</name><modifier>*</modifier></type> <name>p_show</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_artist_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_artist_t</name><modifier>*</modifier></type> <name>p_artist</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_genre_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_genre_t</name><modifier>*</modifier></type> <name>p_genre</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_media_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>p_media</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_album_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_album_t</name><modifier>*</modifier></type> <name>p_album</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_playlist_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playlist_t</name><modifier>*</modifier></type> <name>p_playlist</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_label_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_label_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_file_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_file_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_artist_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_media_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_album_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_show_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_show_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_genre_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_genre_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_playlist_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playlist_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_entry_point_list_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_entry_point_list_t</name><modifier>*</modifier></type> <name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_ml_playback_states_all_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playback_states_all</name><modifier>*</modifier></type> <name>prefs</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_query_params_t</name></type> <name>vlc_ml_query_params_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_query_params_t</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>psz_pattern</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>i_nbResults</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>i_sort</name> <operator>=</operator> <name>VLC_ML_SORTING_DEFAULT</name></expr>,
<expr><operator>.</operator><name>b_desc</name> <operator>=</operator> <name>false</name></expr>
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_add_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_ADD_FOLDER</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_remove_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_REMOVE_FOLDER</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_ban_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_BAN_FOLDER</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_unban_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_UNBAN_FOLDER</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_list_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_entry_point_list_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_entrypoints</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_FOLDERS</name></expr></argument>, <argument><expr><name>pp_entrypoints</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_is_indexed</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>p_res</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_IS_INDEXED</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>p_res</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_reload_folder</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_RELOAD_FOLDER</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_pause_background</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_PAUSE_BACKGROUND</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_resume_background</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_RESUME_BACKGROUND</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_clear_history</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_CLEAR_HISTORY</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>vlc_ml_new_external_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_NEW_EXTERNAL_MEDIA</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>vlc_ml_new_stream</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_NEW_STREAM</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_increase_playcount</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_INCREASE_PLAY_COUNT</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_get_playback_state</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_state</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_result</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_GET_MEDIA_PLAYBACK_STATE</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>i_state</name></expr></argument>, <argument><expr><name>ppsz_result</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_set_playback_state</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_SET_MEDIA_PLAYBACK_STATE</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>i_state</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_get_all_playback_pref</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_playback_states_all</name><modifier>*</modifier></type> <name>prefs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>,<argument><expr><name>VLC_ML_MEDIA_GET_ALL_MEDIA_PLAYBACK_STATES</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_set_all_playback_states</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_ml_playback_states_all</name><modifier>*</modifier></type> <name>prefs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_SET_ALL_MEDIA_PLAYBACK_STATES</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_set_thumbnail</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter>, <parameter><decl><type><name>vlc_ml_thumbnail_size_t</name></type> <name>sizeType</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_SET_THUMBNAIL</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>sizeType</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_generate_thumbnail</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_thumbnail_size_t</name></type> <name>size_type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_desired_width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_desired_height</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>position</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_GENERATE_THUMBNAIL</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>,
<argument><expr><name>size_type</name></expr></argument>, <argument><expr><name>i_desired_width</name></expr></argument>, <argument><expr><name>i_desired_height</name></expr></argument>, <argument><expr><name>position</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_add_external_mrl</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_ADD_EXTERNAL_MRL</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ml_media_set_type</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_ml_media_type_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_ml_control</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_MEDIA_SET_TYPE</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_type</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>vlc_ml_get_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_media_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_MEDIA</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>vlc_ml_get_media_by_mrl</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_media_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_MEDIA_BY_MRL</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_item_t</name><modifier>*</modifier></type> <name>vlc_ml_get_input_item</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>input_item_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_INPUT_ITEM</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>input_item_t</name><modifier>*</modifier></type> <name>vlc_ml_get_input_item_by_mrl</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>input_item_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_INPUT_ITEM_BY_MRL</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_album_t</name><modifier>*</modifier></type> <name>vlc_ml_get_album</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_album_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_ALBUM</name></expr></argument>, <argument><expr><name>i_album_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_artist_t</name><modifier>*</modifier></type> <name>vlc_ml_get_artist</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_artist_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_ARTIST</name></expr></argument>, <argument><expr><name>i_artist_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_genre_t</name><modifier>*</modifier></type> <name>vlc_ml_get_genre</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_genre_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_GENRE</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_show_t</name><modifier>*</modifier></type> <name>vlc_ml_get_show</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_show_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_show_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_SHOW</name></expr></argument>, <argument><expr><name>i_show_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_playlist_t</name><modifier>*</modifier></type> <name>vlc_ml_get_playlist</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_playlist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_ml_playlist_t</name><operator>*</operator><operator>)</operator><call><name>vlc_ml_get</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_GET_PLAYLIST</name></expr></argument>, <argument><expr><name>i_playlist_id</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_media_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_MEDIA_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_media_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_MEDIA_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_artist_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ARTISTS_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_artists_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ARTISTS_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_albums_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ALBUMS_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_albums_of</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_parent_type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_parent_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ALBUMS_OF</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_parent_type</name></expr></argument>, <argument><expr><name>i_parent_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_album_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ALBUM_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_album_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_album_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ALBUM_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_album_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_album_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ALBUM_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_album_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_album_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_album_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ALBUM_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_album_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_artist_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ARTIST_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_artist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_artist_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ARTIST_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_artist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_artist_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ARTIST_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_artist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_artist_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_artist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ARTIST_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_artist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_video_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_VIDEOS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_video_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_VIDEOS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_audio_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_AUDIOS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_audio_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_AUDIOS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_genre_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_genres</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_genre_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_GENRES</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_genres</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_GENRES</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_include_all</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>b_include_all</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>includeAll</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>includeAll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_show_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_shows</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_show_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_SHOWS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_shows</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_SHOWS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_genre_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_GENRE_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_genre_artists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_GENRE_ARTISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_genre_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_GENRE_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_genre_tracks</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_GENRE_TRACKS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_genre_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_GENRE_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_genre_albums</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_genre_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_GENRE_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_genre_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_show_episodes</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_show_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_SHOW_EPISODES</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_show_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_show_episodes</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_show_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_GENRE_ALBUMS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_show_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_label_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_media_labels</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_label_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_MEDIA_LABELS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_media_labels</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_media_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_MEDIA_LABELS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_media_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_history</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_HISTORY</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_stream_history</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_STREAM_HISTORY</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_playlist_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_playlists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_playlist_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_PLAYLISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_playlists</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_PLAYLISTS</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>vlc_ml_list_playlist_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_playlist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_LIST_PLAYLIST_MEDIA</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_playlist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_ml_count_playlist_media</name><parameter_list>( <parameter><decl><type><name>vlc_medialibrary_t</name><modifier>*</modifier></type> <name>p_ml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_ml_query_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_playlist_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name>p_ml</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_ml_list</name><argument_list>( <argument><expr><name>p_ml</name></expr></argument>, <argument><expr><name>VLC_ML_COUNT_PLAYLIST_MEDIA</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>i_playlist_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_ml_release</name><parameter_list>( <parameter><type><name>OBJ</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>_Generic( ( OBJ ), vlc_ml_show_t*: vlc_ml_show_release, vlc_ml_artist_t*: vlc_ml_artist_release, vlc_ml_album_t*: vlc_ml_album_release, vlc_ml_genre_t*: vlc_ml_genre_release, vlc_ml_media_t*: vlc_ml_media_release, vlc_ml_playlist_t*: vlc_ml_playlist_release, vlc_ml_label_list_t*: vlc_ml_label_list_release, vlc_ml_file_list_t*: vlc_ml_file_list_release, vlc_ml_artist_list_t*: vlc_ml_artist_list_release, vlc_ml_media_list_t*: vlc_ml_media_list_release, vlc_ml_album_list_t*: vlc_ml_album_list_release, vlc_ml_show_list_t*: vlc_ml_show_list_release, vlc_ml_genre_list_t*: vlc_ml_genre_list_release, vlc_ml_playlist_list_t*: vlc_ml_playlist_list_release, vlc_ml_entry_point_list_t*: vlc_ml_entry_point_list_release, vlc_ml_playback_states_all*: vlc_ml_playback_states_all_release )( OBJ )</cpp:value></cpp:define>

















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_show_t</name><modifier>*</modifier></type> <name>show</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_show_release</name><argument_list>( <argument><expr><name>show</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_artist_t</name><modifier>*</modifier></type> <name>artist</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_artist_release</name><argument_list>( <argument><expr><name>artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_album_t</name><modifier>*</modifier></type> <name>album</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_album_release</name><argument_list>( <argument><expr><name>album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_genre_t</name><modifier>*</modifier></type> <name>genre</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_genre_release</name><argument_list>( <argument><expr><name>genre</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_media_t</name><modifier>*</modifier></type> <name>media</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_media_release</name><argument_list>( <argument><expr><name>media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playlist_t</name><modifier>*</modifier></type> <name>playlist</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_playlist_release</name><argument_list>( <argument><expr><name>playlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_label_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_label_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_file_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_file_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_artist_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_artist_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_media_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_media_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_album_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_album_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_show_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_show_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_genre_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_genre_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playlist_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_playlist_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_entry_point_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_entry_point_list_release</name><argument_list>( <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_ml_release</name><parameter_list>( <parameter><decl><type><name>vlc_ml_playback_states_all</name><modifier>*</modifier></type> <name>prefs</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vlc_ml_playback_states_all_release</name><argument_list>( <argument><expr><name>prefs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
