<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_opengl.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_GL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>






<struct_decl>struct <name>vout_window_t</name>;</struct_decl>
<struct_decl>struct <name>vout_window_cfg_t</name>;</struct_decl>
<struct_decl>struct <name>vout_display_cfg</name>;</struct_decl>




<typedef>typedef <type><name><name>struct</name> <name>vlc_gl_t</name></name></type> <name>vlc_gl_t</name>;</typedef>

<struct>struct <name>vlc_gl_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>makeCurrent</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>releaseCurrent</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>resize</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>swap</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type>(<modifier>*</modifier><name>getProcAddress</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroy</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{
<decl><name>VLC_GL_EXT_DEFAULT</name></decl>,
<decl><name>VLC_GL_EXT_EGL</name></decl>,
<decl><name>VLC_GL_EXT_WGL</name></decl>,
}</block> <decl><name>ext</name></decl>;</enum>

<union>union <block>{

<struct>struct <block>{

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>queryString</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>createImageKHR</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>destroyImageKHR</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>egl</name></decl>;</struct>

<struct>struct
<block>{
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>getExtensionsString</name>)<parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>wgl</name></decl>;</struct>
}</block>;</union>
}</block>;</struct>

<enum>enum <block>{
<decl><name>VLC_OPENGL</name></decl>,
<decl><name>VLC_OPENGL_ES2</name></decl>,
}</block>;</enum>











<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_gl_t</name> <modifier>*</modifier></type><name>vlc_gl_Create</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>vout_display_cfg</name> <operator>*</operator><name>cfg</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_gl_Release</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_gl_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_gl_MakeCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>gl</name><operator>-&gt;</operator><name>makeCurrent</name></name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_gl_ReleaseCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>gl</name><operator>-&gt;</operator><name>releaseCurrent</name></name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_gl_Resize</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gl</name><operator>-&gt;</operator><name>resize</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>gl</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_gl_Swap</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>gl</name><operator>-&gt;</operator><name>swap</name></name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_gl_GetProcAddress</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>gl</name><operator>-&gt;</operator><name>getProcAddress</name></name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_gl_t</name> <modifier>*</modifier></type><name>vlc_gl_surface_Create</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> struct <name>vout_window_cfg_t</name> <operator>*</operator></expr></argument>,
<argument><expr>struct <name>vout_window_t</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>vlc_gl_surface_CheckSize</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_gl_surface_Destroy</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_gl_StrHasToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>apilen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>api</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>apis</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>apis</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>apis</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>apis</name></expr></argument>, <argument><expr><name>api</name></expr></argument>, <argument><expr><name>apilen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memchr</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>apis</name><index>[<expr><name>apilen</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>apis</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>apis</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
