<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_demux.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_DEMUX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUX_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUXER_EOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUXER_EGENERIC</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUXER_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_UPDATE_TITLE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_UPDATE_SEEKPOINT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_UPDATE_META</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_UPDATE_TITLE_LIST</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>demux_meta_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_attachments</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl>;</decl_stmt> 
}</block></struct></type> <name>demux_meta_t</name>;</typedef>
















<enum>enum <name>demux_query_e</name>
<block>{





<decl><name>DEMUX_CAN_SEEK</name></decl>,







<decl><name>DEMUX_CAN_PAUSE</name> <init>= <expr><literal type="number">0x002</literal></expr></init></decl>,





<decl><name>DEMUX_CAN_CONTROL_PACE</name></decl>,






<decl><name>DEMUX_GET_PTS_DELAY</name> <init>= <expr><literal type="number">0x101</literal></expr></init></decl>,





<decl><name>DEMUX_GET_META</name> <init>= <expr><literal type="number">0x105</literal></expr></init></decl>,





<decl><name>DEMUX_GET_SIGNAL</name> <init>= <expr><literal type="number">0x107</literal></expr></init></decl>,











<decl><name>DEMUX_SET_PAUSE_STATE</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,







<decl><name>DEMUX_SET_TITLE</name></decl>,







<decl><name>DEMUX_SET_SEEKPOINT</name></decl>, 







<decl><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></decl>, 






<decl><name>DEMUX_GET_TITLE</name></decl>, 






<decl><name>DEMUX_GET_SEEKPOINT</name></decl>, 



<decl><name>DEMUX_GET_POSITION</name> <init>= <expr><literal type="number">0x300</literal></expr></init></decl>, 
<decl><name>DEMUX_SET_POSITION</name></decl>, 


<decl><name>DEMUX_GET_LENGTH</name></decl>, 
<decl><name>DEMUX_GET_TIME</name></decl>, 
<decl><name>DEMUX_SET_TIME</name></decl>, 

<decl><name>DEMUX_GET_NORMAL_TIME</name></decl>, 










<decl><name>DEMUX_GET_TITLE_INFO</name></decl>,





<decl><name>DEMUX_SET_GROUP_DEFAULT</name></decl>,
<decl><name>DEMUX_SET_GROUP_ALL</name></decl>,
<decl><name>DEMUX_SET_GROUP_LIST</name></decl>, 
<decl><name>DEMUX_SET_ES</name></decl>, 
<decl><name>DEMUX_SET_ES_LIST</name></decl>, 






<decl><name>DEMUX_SET_NEXT_DEMUX_TIME</name></decl>, 

<decl><name>DEMUX_GET_FPS</name></decl>, 


<decl><name>DEMUX_HAS_UNSUPPORTED_META</name></decl>, 


<decl><name>DEMUX_GET_ATTACHMENTS</name></decl>, 




<decl><name>DEMUX_CAN_RECORD</name></decl>, 









<decl><name>DEMUX_SET_RECORD_STATE</name></decl>,






<decl><name>DEMUX_CAN_CONTROL_RATE</name></decl>, 


<decl><name>DEMUX_SET_RATE</name></decl>, 







<decl><name>DEMUX_IS_PLAYLIST</name></decl>,



<decl><name>DEMUX_NAV_ACTIVATE</name></decl>,

<decl><name>DEMUX_NAV_UP</name></decl>,

<decl><name>DEMUX_NAV_DOWN</name></decl>,

<decl><name>DEMUX_NAV_LEFT</name></decl>,

<decl><name>DEMUX_NAV_RIGHT</name></decl>,

<decl><name>DEMUX_NAV_POPUP</name></decl>,

<decl><name>DEMUX_NAV_MENU</name></decl>, 





<decl><name>DEMUX_FILTER_ENABLE</name></decl>,
<decl><name>DEMUX_FILTER_DISABLE</name></decl>
}</block>;</enum>





<function_decl><type><name>VLC_API</name> <name>demux_t</name> <modifier>*</modifier></type><name>demux_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>demux_Delete</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>demux_vaControlHelper</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_end</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_bitrate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>demux_Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>demux_vaControl</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>demux_Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>demux_vaControl</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>demux_UpdateTitleFromStream</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>titlep</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>seekpointp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>updatep</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>seekpoint</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_GET_TITLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>title</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>&amp;&amp;</operator> <name>title</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>titlep</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>titlep</name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>updatep</name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_GET_SEEKPOINT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>seekpoint</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>&amp;&amp;</operator> <name>seekpoint</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>seekpointp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>seekpointp</name> <operator>=</operator> <name>seekpoint</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>updatep</name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>demux_UpdateTitleFromStream</name><parameter_list>(<parameter><type><name>demux</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>demux_UpdateTitleFromStream(demux, &amp;((demux_sys_t *)((demux)-&gt;p_sys))-&gt;current_title, &amp;((demux_sys_t *)((demux)-&gt;p_sys))-&gt;current_seekpoint, &amp;((demux_sys_t *)((demux)-&gt;p_sys))-&gt;updates)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>demux_IsPathExtension</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr>
</then><else>: <expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name> <argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_ext</name> <operator>||</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><name>psz_extension</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>demux_IsContentType</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stream_IsMimeType</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>demux_IsForced</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>demux_SetPosition</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>precise</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>absolute</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>current_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_POSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>current_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>pos</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_POSITION</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>precise</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>demux_SetTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>precise</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>absolute</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_GET_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_time</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>time</name> <operator>+=</operator> <name>current_time</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>precise</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>








<decl_stmt><decl><type><name>VLC_API</name> <name>decoder_t</name> <modifier>*</modifier></type> <name>demux_PacketizerNew</name><argument_list>( <argument><expr><name>demux_t</name> <operator>*</operator><name>p_demux</name></expr></argument>, <argument><expr><name>es_format_t</name> <operator>*</operator><name>p_fmt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_msg</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>demux_PacketizerDestroy</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl></parameter> )</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMUX_INIT_COMMON</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { p_demux-&gt;pf_control = Control; p_demux-&gt;pf_demux = Demux; p_demux-&gt;p_sys = calloc( 1, sizeof( demux_sys_t ) ); if( !p_demux-&gt;p_sys ) return VLC_ENOMEM;} while(0)</cpp:value></cpp:define>












<typedef>typedef <type><name><name>struct</name> <name>vlc_demux_chained_t</name></name></type> <name>vlc_demux_chained_t</name>;</typedef>



















<function_decl><type><name>VLC_API</name> <name>vlc_demux_chained_t</name> <modifier>*</modifier></type><name>vlc_demux_chained_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_demux_chained_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_demux_chained_Send</name><parameter_list>(<parameter><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_demux_chained_ControlVa</name><parameter_list>(<parameter><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_demux_chained_Control</name><parameter_list>(<parameter><decl><type><name>vlc_demux_chained_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>,
<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_demux_chained_ControlVa</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
