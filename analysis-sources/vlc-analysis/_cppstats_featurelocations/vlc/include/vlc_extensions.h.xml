<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_extensions.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_EXTENSIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXTENSIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_arrays.h"</cpp:file></cpp:include>


<typedef>typedef <type><name><name>struct</name> <name>extensions_manager_sys_t</name></name></type> <name>extensions_manager_sys_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>extensions_manager_t</name></name></type> <name>extensions_manager_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>extension_sys_t</name></name></type> <name>extension_sys_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>extension_t</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_author</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_shortdescription</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_icondata</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_icondata_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>extension_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt> 
}</block></struct></type> <name>extension_t</name>;</typedef>


<struct>struct <name>extensions_manager_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>extensions_manager_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt> 

<macro><name>DECL_ARRAY</name><argument_list>(<argument>extension_t*</argument>)</argument_list></macro> <expr_stmt><expr><name>extensions</name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 


<function_decl><type><name>int</name></type> ( <modifier>*</modifier><name>pf_control</name> ) <parameter_list>( <parameter><decl><type><name>extensions_manager_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
}</block>;</struct>


<enum>enum
<block>{

<decl><name>EXTENSION_ACTIVATE</name></decl>, 
<decl><name>EXTENSION_DEACTIVATE</name></decl>, 
<decl><name>EXTENSION_IS_ACTIVATED</name></decl>, 
<decl><name>EXTENSION_HAS_MENU</name></decl>, 
<decl><name>EXTENSION_GET_MENU</name></decl>, 
<decl><name>EXTENSION_TRIGGER_ONLY</name></decl>, 
<decl><name>EXTENSION_TRIGGER</name></decl>, 
<decl><name>EXTENSION_TRIGGER_MENU</name></decl>, 
<decl><name>EXTENSION_SET_INPUT</name></decl>, 
<decl><name>EXTENSION_PLAYING_CHANGED</name></decl>, 
<decl><name>EXTENSION_META_CHANGED</name></decl>, 
}</block>;</enum>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_Control</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_control</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name><name>p_mgr</name><operator>-&gt;</operator><name>pf_control</name></name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>i_control</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>__extension_GetBool</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_flag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_default</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>b_default</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>i_flag</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>b_default</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_Activate</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>extension_Control( mgr, EXTENSION_ACTIVATE, ext )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_Trigger</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>extension_Control( mgr, EXTENSION_TRIGGER, ext )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_Deactivate</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>extension_Control( mgr, EXTENSION_DEACTIVATE, ext )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_IsActivated</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__extension_GetBool( mgr, ext, EXTENSION_IS_ACTIVATED, false )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_HasMenu</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__extension_GetBool( mgr, ext, EXTENSION_HAS_MENU, false )</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_GetMenu</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>EXTENSION_GET_MENU</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>pppsz</name></expr></argument>, <argument><expr><name>ppi</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_TriggerMenu</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>EXTENSION_TRIGGER_MENU</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_SetInput</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>EXTENSION_SET_INPUT</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_PlayingChanged</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>EXTENSION_PLAYING_CHANGED</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>state</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_MetaChanged</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,
<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>extension_Control</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>EXTENSION_META_CHANGED</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_TriggerOnly</name><parameter_list>( <parameter><type><name>mgr</name></type></parameter>, <parameter><type><name>ext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__extension_GetBool( mgr, ext, EXTENSION_TRIGGER_ONLY, false )</cpp:value></cpp:define>







<typedef>typedef <type><name><name>struct</name> <name>extension_dialog_t</name></name></type> <name>extension_dialog_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>extension_widget_t</name></name></type> <name>extension_widget_t</name>;</typedef>


<typedef>typedef <type><enum>enum
<block>{
<decl><name>EXTENSION_EVENT_CLICK</name></decl>, 
<decl><name>EXTENSION_EVENT_CLOSE</name></decl>, 


}</block></enum></type> <name>extension_dialog_event_e</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>extension_dialog_event_e</name></type> <name>event</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>extension_dialog_command_t</name>;</typedef>



<struct>struct <name>extension_dialog_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt> 

<macro><name>DECL_ARRAY</name><argument_list>(<argument>extension_widget_t*</argument>)</argument_list></macro> <expr_stmt><expr><name>widgets</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_hide</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_kill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys_intf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt> 
}</block>;</struct>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>extension_DialogCommand</name><parameter_list>( <parameter><decl><type><name>extension_dialog_t</name><modifier>*</modifier></type> <name>p_dialog</name></decl></parameter>,
<parameter><decl><type><name>extension_dialog_event_e</name></type> <name>event</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>extension_dialog_command_t</name></type> <name>command</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>command</name><operator>.</operator><name>p_dlg</name></name> <operator>=</operator> <name>p_dialog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name><name>p_dialog</name><operator>-&gt;</operator><name>p_object</name></name></expr></argument>, <argument><expr><literal type="string">"dialog-event"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_DialogClosed</name><parameter_list>( <parameter><type><name>dlg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>extension_DialogCommand( dlg, EXTENSION_EVENT_CLOSE, NULL )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extension_WidgetClicked</name><parameter_list>( <parameter><type><name>dlg</name></type></parameter>, <parameter><type><name>wdg</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>extension_DialogCommand( dlg, EXTENSION_EVENT_CLICK, wdg )</cpp:value></cpp:define>



<typedef>typedef <type><enum>enum
<block>{
<decl><name>EXTENSION_WIDGET_LABEL</name></decl>, 
<decl><name>EXTENSION_WIDGET_BUTTON</name></decl>, 
<decl><name>EXTENSION_WIDGET_IMAGE</name></decl>, 
<decl><name>EXTENSION_WIDGET_HTML</name></decl>, 
<decl><name>EXTENSION_WIDGET_TEXT_FIELD</name></decl>, 
<decl><name>EXTENSION_WIDGET_PASSWORD</name></decl>, 
<decl><name>EXTENSION_WIDGET_DROPDOWN</name></decl>, 
<decl><name>EXTENSION_WIDGET_LIST</name></decl>, 
<decl><name>EXTENSION_WIDGET_CHECK_BOX</name></decl>, 
<decl><name>EXTENSION_WIDGET_SPIN_ICON</name></decl>, 
}</block></enum></type> <name>extension_widget_type_e</name>;</typedef>


<struct>struct <name>extension_widget_t</name>
<block>{

<decl_stmt><decl><type><name>extension_widget_type_e</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt> 


<struct>struct <name>extension_widget_value_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 
}</block> <decl><modifier>*</modifier><name>p_values</name></decl>;</struct> 


<decl_stmt><decl><type><name>bool</name></type> <name>b_checked</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_column</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_horiz_span</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_vert_span</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_hide</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_spin_loops</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>bool</name></type> <name>b_kill</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys_intf</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dialog</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
