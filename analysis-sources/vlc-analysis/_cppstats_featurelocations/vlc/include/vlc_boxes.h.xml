<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_boxes.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_BOXES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BOXES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>






<typedef>typedef <type><struct>struct <name>bo_t</name>
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>basesize</name></decl>;</decl_stmt>
}</block></struct></type> <name>bo_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bo_init</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>basesize</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bo_deinit</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bo_free</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_bo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bo_deinit</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bo_extend</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <operator>(</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>-</operator> <name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_start</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_total</name> <operator>&gt;=</operator> <name>i_size</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_growth</name> <init>= <expr><name><name>p_bo</name><operator>-&gt;</operator><name>basesize</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>i_total</name> <operator>&gt;=</operator> <name>i_size</name> <operator>+</operator> <name>i_growth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_growth</name> <operator>+=</operator> <name><name>p_bo</name><operator>-&gt;</operator><name>basesize</name></name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <name>i_growth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_SET_DECL_S</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>handler</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline bool func(bo_t *p_bo, size_t i_offset, type val){if (!bo_extend(p_bo, i_offset + sizeof(type)))return false;handler(&amp;p_bo-&gt;b-&gt;p_buffer[i_offset], val);return true;}</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_ADD_DECL_S</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>handler</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline bool func(bo_t *p_bo, type val){if(!p_bo-&gt;b || !handler(p_bo, p_bo-&gt;b-&gt;i_buffer, val))return false;p_bo-&gt;b-&gt;i_buffer += sizeof(type);return true;}</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_FUNC_DECL</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>handler</name></type></parameter>, <parameter><type><name>type</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>BO_SET_DECL_S( bo_set_ ##suffix ##be, handler ##BE, type )BO_SET_DECL_S( bo_set_ ##suffix ##le, handler ##LE, type )BO_ADD_DECL_S( bo_add_ ##suffix ##be, bo_set_ ##suffix ##be, type )BO_ADD_DECL_S( bo_add_ ##suffix ##le, bo_set_ ##suffix ##le, type )</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bo_set_8</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bo_extend</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bo_add_8</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>||</operator> <operator>!</operator><call><name>bo_set_8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<macro><name>BO_FUNC_DECL</name><argument_list>( <argument><literal type="number">16</literal></argument>, <argument>SetW</argument>, <argument>uint16_t</argument> )</argument_list></macro>
<macro><name>BO_FUNC_DECL</name><argument_list>( <argument><literal type="number">32</literal></argument>, <argument>SetDW</argument>, <argument>uint32_t</argument> )</argument_list></macro>
<macro><name>BO_FUNC_DECL</name><argument_list>( <argument><literal type="number">64</literal></argument>, <argument>SetQW</argument>, <argument>uint64_t</argument> )</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BO_FUNC_DECL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BO_SET_DECL_S</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BO_ADD_DECL_S</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bo_add_24be</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>||</operator> <operator>!</operator><call><name>bo_extend</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bo_swap_32be</name> <parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pos</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>||</operator> <name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_pos</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>bo_add_mem</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name> <operator>||</operator> <operator>!</operator><call><name>bo_extend</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>p_mem</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>bo_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p_bo</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_bo</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bo_add_fourcc</name><parameter_list>(<parameter><type><name>p_bo</name></type></parameter>, <parameter><type><name>fcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bo_add_mem(p_bo, 4, fcc)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
