<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_strings.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_STRINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STRINGS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>









<typedef>typedef <type><name><name>struct</name> <name>vlc_player_t</name></name></type> <name>vlc_player_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ascii_toupper</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <operator>(</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="char">'a'</literal> <operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ascii_tolower</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <operator>(</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal> <operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ascii_strcasecmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>psz1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>psz2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><operator>*</operator><name>s1</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ascii_strncasecmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>psz1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>psz2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1end</name> <init>= <expr><name>psz1</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><operator>*</operator><name>s1</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;</operator> <name>s1end</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>vlc_ascii_tolower</name><argument_list>( <argument><expr><operator>*</operator><name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>s1end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>d</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>













<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlc_xml_decode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>













<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_xml_encode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>VLC_MALLOC</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_b64_encode_binary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>base</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>)</argument_list>
<name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_b64_encode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>size_t</name></type> <name>vlc_b64_decode_binary_to_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_dst_max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>size_t</name></type> <name>vlc_b64_decode_binary</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>vlc_b64_decode</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_strftime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>vlc_strfplayer</name><parameter_list>( <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>str_format</name><parameter_list>( <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><call><name>vlc_strftime</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>vlc_strfplayer</name><argument_list>( <argument><expr><name>player</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>s1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s2</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_filenamecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>filename_sanitize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
