<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_configuration.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_CONFIGURATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CONFIGURATION_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>config_category_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_help</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
}</block></union></type> <name>module_value_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_string_list_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_integer_list_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>







<struct>struct <name>module_config_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>i_short</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>b_internal</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>b_unsaveable</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>b_safe</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>b_removed</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_longtext</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>module_value_t</name></type> <name>value</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>module_value_t</name></type> <name>orig</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>module_value_t</name></type> <name>min</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>module_value_t</name></type> <name>max</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint16_t</name></type> <name>list_count</name></decl>;</decl_stmt> 
<union>union
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt> 
}</block> <decl><name>list</name></decl>;</union> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>list_text</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt> 
}</block>;</struct>








<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>config_GetType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name>VLC_API</name> <name>int64_t</name></type> <name>config_GetInt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
















<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_PutInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>















<decl_stmt><decl><type><name>VLC_API</name> <name>float</name></type> <name>config_GetFloat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
















<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_PutFloat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>





















<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>config_GetPsz</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

















<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_PutPsz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>config_GetIntChoices</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator><operator>*</operator><name>values</name></expr></argument>,
<argument><expr><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>texts</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>config_GetPszChoices</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>values</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>texts</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>config_SaveConfigFile</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_SaveConfigFile</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>config_SaveConfigFile(VLC_OBJECT(a))</cpp:value></cpp:define>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_ResetAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>VLC_API</name> <name>module_config_t</name> <modifier>*</modifier></type><name>config_FindConfig</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<typedef>typedef <type><enum>enum <name>vlc_system_dir</name>
<block>{
<decl><name>VLC_PKG_DATA_DIR</name></decl>, 

<decl><name>VLC_PKG_LIB_DIR</name></decl>, 

<decl><name>VLC_PKG_LIBEXEC_DIR</name></decl>, 

<decl><name>VLC_PKG_INCLUDE_DIR_RESERVED</name></decl>,
<decl><name>VLC_SYSDATA_DIR</name></decl>, 


<decl><name>VLC_LIB_DIR</name></decl>, 

<decl><name>VLC_LIBEXEC_DIR</name></decl>, 

<decl><name>VLC_INCLUDE_DIR_RESERVED</name></decl>,
<decl><name>VLC_LOCALE_DIR</name></decl>, 
}</block></enum></type> <name>vlc_sysdir_t</name>;</typedef>












<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>config_GetSysPath</name><argument_list>(<argument><expr><name>vlc_sysdir_t</name> <name>dir</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list>
<name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>vlc_user_dir</name>
<block>{
<decl><name>VLC_HOME_DIR</name></decl>, 
<decl><name>VLC_CONFIG_DIR</name></decl>, 
<decl><name>VLC_USERDATA_DIR</name></decl>, 
<decl><name>VLC_CACHE_DIR</name></decl>, 

<decl><name>VLC_DESKTOP_DIR</name><init>=<expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>VLC_DOWNLOAD_DIR</name></decl>,
<decl><name>VLC_TEMPLATES_DIR</name></decl>,
<decl><name>VLC_PUBLICSHARE_DIR</name></decl>,
<decl><name>VLC_DOCUMENTS_DIR</name></decl>,
<decl><name>VLC_MUSIC_DIR</name></decl>,
<decl><name>VLC_PICTURES_DIR</name></decl>,
<decl><name>VLC_VIDEOS_DIR</name></decl>,
}</block></enum></type> <name>vlc_userdir_t</name>;</typedef>

<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>config_GetUserDir</name><argument_list>( <argument><expr><name>vlc_userdir_t</name></expr></argument> )</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_AddIntf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_RemoveIntf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>VLC_API</name> <name>bool</name></type> <name>config_ExistIntf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<struct>struct <name>config_chain_t</name>
<block>{
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt> 
}</block>;</struct>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_ChainParse</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>config_chain_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_ChainParse</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>config_ChainParse( VLC_OBJECT(a), b, c, d )</cpp:value></cpp:define>











<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_ChainParseOptions</name><parameter_list>( <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ppsz_opts</name></decl></parameter> )</parameter_list>;</function_decl>












<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type><name>config_ChainCreate</name><argument_list>( <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>ppsz_name</name></expr></argument>, <argument><expr><name>config_chain_t</name> <operator>*</operator><operator>*</operator><name>pp_cfg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_string</name></expr></argument> )</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>





<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>config_ChainDestroy</name><parameter_list>( <parameter><decl><type><name>config_chain_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>VLC_API</name> <name>config_chain_t</name> <modifier>*</modifier></type> <name>config_ChainDuplicate</name><argument_list>( <argument><expr><specifier>const</specifier> <name>config_chain_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>










<function_decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>config_StringUnescape</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>VLC_API</name> <name>char</name> <modifier>*</modifier></type> <name>config_StringEscape</name><argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_string</name></expr></argument> )</argument_list> <name>VLC_USED</name> <name>VLC_MALLOC</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
