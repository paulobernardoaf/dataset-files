<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_vlm.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_VLM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VLM_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>















<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_enabled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_input</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_input</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_option</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_option</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_output</name></decl>;</decl_stmt> 

<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_loop</name></decl>;</decl_stmt> 
}</block> <decl><name>broadcast</name></decl>;</struct> 

}</block></struct></type> <name>vlm_media_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>d_position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_paused</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_rate</name></decl>;</decl_stmt> 
}</block></struct></type> <name>vlm_media_instance_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
typedef struct
{

} vlm_schedule_t
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<enum>enum <name>vlm_event_type_e</name>
<block>{

<decl><name>VLM_EVENT_MEDIA_ADDED</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>VLM_EVENT_MEDIA_REMOVED</name></decl>,
<decl><name>VLM_EVENT_MEDIA_CHANGED</name></decl>,


<decl><name>VLM_EVENT_MEDIA_INSTANCE_STARTED</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>VLM_EVENT_MEDIA_INSTANCE_STOPPED</name></decl>,
<decl><name>VLM_EVENT_MEDIA_INSTANCE_STATE</name></decl>,
}</block>;</enum>

<typedef>typedef <type><enum>enum <name>vlm_state_e</name>
<block>{
<decl><name>VLM_INIT_S</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VLM_OPENING_S</name></decl>,
<decl><name>VLM_PLAYING_S</name></decl>,
<decl><name>VLM_PAUSE_S</name></decl>,
<decl><name>VLM_END_S</name></decl>,
<decl><name>VLM_ERROR_S</name></decl>,
}</block></enum></type> <name>vlm_state_e</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_instance_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlm_state_e</name></type> <name>input_state</name></decl>;</decl_stmt> 
}</block></struct></type> <name>vlm_event_t</name>;</typedef>


<enum>enum <name>vlm_query_e</name>
<block>{


<decl><name>VLM_GET_MEDIAS</name></decl>, 

<decl><name>VLM_CLEAR_MEDIAS</name></decl>, 


<decl><name>VLM_ADD_MEDIA</name></decl>, 

<decl><name>VLM_DEL_MEDIA</name></decl>, 

<decl><name>VLM_CHANGE_MEDIA</name></decl>, 

<decl><name>VLM_GET_MEDIA</name></decl>, 

<decl><name>VLM_GET_MEDIA_ID</name></decl>, 



<decl><name>VLM_GET_MEDIA_INSTANCES</name></decl>, 

<decl><name>VLM_CLEAR_MEDIA_INSTANCES</name></decl>, 

<decl><name>VLM_START_MEDIA_BROADCAST_INSTANCE</name></decl>, 

<decl><name>VLM_STOP_MEDIA_INSTANCE</name></decl>, 

<decl><name>VLM_PAUSE_MEDIA_INSTANCE</name></decl>, 

<decl><name>VLM_GET_MEDIA_INSTANCE_TIME</name></decl>, 

<decl><name>VLM_SET_MEDIA_INSTANCE_TIME</name></decl>, 

<decl><name>VLM_GET_MEDIA_INSTANCE_POSITION</name></decl>, 

<decl><name>VLM_SET_MEDIA_INSTANCE_POSITION</name></decl>, 


<decl><name>VLM_CLEAR_SCHEDULES</name></decl>, 



}</block>;</enum>








<struct>struct <name>vlm_message_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_child</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>child</name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VLC_API</name> <name>vlm_t</name> <modifier>*</modifier></type> <name>vlm_New</name><parameter_list>( <parameter><decl><type><name>libvlc_int_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlm_Delete</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlm_ExecuteCommand</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>vlm_Control</name><parameter_list>( <parameter><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>VLC_API</name> <name>vlm_message_t</name> <modifier>*</modifier></type> <name>vlm_MessageSimpleNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>vlm_message_t</name> <modifier>*</modifier></type> <name>vlm_MessageNew</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> VLC_FORMAT<parameter_list>(</parameter_list> 2<operator>,</operator> 3</function_decl> )</block_content></block><empty_stmt>;</empty_stmt></extern>
<function_decl><type><name>VLC_API</name> <name>vlm_message_t</name> <modifier>*</modifier></type> <name>vlm_MessageAdd</name><parameter_list>( <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>vlm_MessageDelete</name><parameter_list>( <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_Init</name><parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_media</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_option</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_option</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>psz_output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_media</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>vlm_media_Copy</name><parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlm_media_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_src</name></decl></parameter> )</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
vlm_media_Copy<parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlm_media_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_enabled</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>b_enabled</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND_CAST</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_option</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND_CAST</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_option</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>ppsz_option</name></name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>ppsz_option</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_output</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_output</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>broadcast</name><operator>.</operator><name>b_loop</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_Clean</name><parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_input</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_input</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_media</name><operator>-&gt;</operator><name>i_option</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_option</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>i_option</name></name></expr></argument>, <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>ppsz_option</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_media</name><operator>-&gt;</operator><name>psz_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlm_media_t</name> <modifier>*</modifier></type><name>vlm_media_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_media</name> <init>= <expr><operator>(</operator><name>vlm_media_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_media</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlm_media_Init</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_media</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_Delete</name><parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_media</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlm_media_Clean</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_media</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlm_media_t</name> <modifier>*</modifier></type><name>vlm_media_Duplicate</name><parameter_list>( <parameter><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlm_media_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>vlm_media_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dst</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlm_media_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_instance_Init</name><parameter_list>( <parameter><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_instance_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>d_position</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_instance_Clean</name><parameter_list>( <parameter><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_instance</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>vlm_media_instance_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>p_instance</name> <init>= <expr><operator>(</operator><name>vlm_media_instance_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlm_media_instance_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_instance</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlm_media_instance_Init</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_instance</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlm_media_instance_Delete</name><parameter_list>( <parameter><decl><type><name>vlm_media_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlm_media_instance_Clean</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_instance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
