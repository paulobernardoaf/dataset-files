<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_codec.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_CODEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>











<typedef>typedef <type><name><name>struct</name> <name>decoder_cc_desc_t</name></name></type> <name>decoder_cc_desc_t</name>;</typedef>

<struct>struct <name>decoder_owner_callbacks</name>
<block>{
<union>union
<block>{
<struct>struct
<block>{
<function_decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>get_device</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_update</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>picture_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>buffer_new</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>abort_pictures</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_abort</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>queue</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>queue_cc</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>decoder_cc_desc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>



<function_decl><type><name>vlc_tick_t</name></type> (<modifier>*</modifier><name>get_display_date</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>float</name></type> (<modifier>*</modifier><name>get_display_rate</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
}</block> <decl><name>video</name></decl>;</struct>
<struct>struct
<block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>format_update</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>queue</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
}</block> <decl><name>audio</name></decl>;</struct>
<struct>struct
<block>{

<function_decl><type><name>subpicture_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>buffer_new</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>queue</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>spu</name></decl>;</struct>
}</block>;</union>



<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_attachments</name>)<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter> )</parameter_list>;</function_decl>
}</block>;</struct>






<struct>struct <name>decoder_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type> <name>p_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_frame_drop_allowed</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>i_extra_picture_buffers</name></decl>;</decl_stmt>

<union>union
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCDEC_SUCCESS</name></cpp:macro> <cpp:value>VLC_SUCCESS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCDEC_ECRITICAL</name></cpp:macro> <cpp:value>VLC_EGENERIC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCDEC_RELOAD</name></cpp:macro> <cpp:value>(-100)</cpp:value></cpp:define>





















<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_decode</name> ) <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>




























<function_decl><type><name>block_t</name> <modifier>*</modifier></type> ( <modifier>*</modifier> <name>pf_packetize</name> )<parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>;</function_decl>
}</block>;</union>


<function_decl><type><name>void</name></type> ( <modifier>*</modifier> <name>pf_flush</name> ) <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>block_t</name> <modifier>*</modifier></type> ( <modifier>*</modifier> <name>pf_get_cc</name> ) <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_description</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>decoder_cc_desc_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_608_channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_708_channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_reorder_depth</name></decl>;</decl_stmt> 
}</block>;</struct>





<struct>struct <name>encoder_owner_callbacks</name>
<block>{
<struct>struct
<block>{
<function_decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_device</name>)<parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
}</block> <decl><name>video</name></decl>;</struct>
}</block>;</struct>









<function_decl><type><name>VLC_API</name> <name>vlc_decoder_device</name> <modifier>*</modifier></type><name>vlc_encoder_GetDecoderDevice</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>









<struct>struct <name>encoder_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type> <name>p_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type> ( <modifier>*</modifier> <name>pf_encode_video</name> )<parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>block_t</name> <modifier>*</modifier></type> ( <modifier>*</modifier> <name>pf_encode_audio</name> )<parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>block_t</name> <modifier>*</modifier></type> ( <modifier>*</modifier> <name>pf_encode_sub</name> )<parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>int</name></type> <name>i_threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_iframes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_bframes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_tolerance</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>encoder_owner_callbacks</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>
}</block>;</struct>

























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>decoder_GetDecoderDevice</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_assert</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_device</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_device</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>decoder_UpdateVideoOutput</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_out</name></decl></parameter> )</parameter_list>;</function_decl>
















<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>decoder_UpdateVideoFormat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>VLC_API</name> <name>picture_t</name> <modifier>*</modifier></type><name>decoder_NewPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>decoder_AbortPictures</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_abort</name></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>decoder_Init</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>decoder_Destroy</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>decoder_Clean</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decoder_QueueVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>queue</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>queue</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decoder_QueueCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>queue_cc</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>queue_cc</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument>, <argument><expr><name>p_desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decoder_QueueAudio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>queue</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>queue</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_aout_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decoder_QueueSub</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>queue</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>queue</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decoder_UpdateAudioFormat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>format_update</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>format_update</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><name>VLC_API</name> <name>block_t</name> <modifier>*</modifier></type> <name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>decoder_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name> <name>i_nb_samples</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>






<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>decoder_NewSubpicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type><name>p_dyn</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpicture</name> <init>= <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>buffer_new</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_dyn</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpicture</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"can't get output subpicture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_subpicture</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decoder_GetInputAttachments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attachment</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_attachment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>get_attachments</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>get_attachments</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>ppp_attachment</name></expr></argument>, <argument><expr><name>pi_attachment</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>decoder_GetDisplayDate</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>system_now</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_display_date</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_display_date</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument>, <argument><expr><name>system_now</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>decoder_GetDisplayRate</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>cbs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_display_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1.f</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>dec</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>get_display_rate</name></name><argument_list>( <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>










<enum>enum <name>vlc_decoder_device_type</name>
<block>{
<decl><name>VLC_DECODER_DEVICE_VAAPI</name></decl>,
<decl><name>VLC_DECODER_DEVICE_VDPAU</name></decl>,
<decl><name>VLC_DECODER_DEVICE_DXVA2</name></decl>,
<decl><name>VLC_DECODER_DEVICE_D3D11VA</name></decl>,
<decl><name>VLC_DECODER_DEVICE_VIDEOTOOLBOX</name></decl>,
<decl><name>VLC_DECODER_DEVICE_AWINDOW</name></decl>,
<decl><name>VLC_DECODER_DEVICE_NVDEC</name></decl>,
<decl><name>VLC_DECODER_DEVICE_MMAL</name></decl>,
}</block>;</enum>

<struct>struct <name>vlc_decoder_device_operations</name>
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_decoder_device</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>




<typedef>typedef <type><struct>struct <name>vlc_decoder_device</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>vlc_decoder_device_type</name></name></type> <name>type</name></decl>;</decl_stmt>















<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_decoder_device</name>;</typedef>







<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_decoder_device_Open</name>)<parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_callback_dec_device</name><parameter_list>(<parameter><type><name>activate</name></type></parameter>, <parameter><type><name>priority</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ vlc_decoder_device_Open open__ = activate; (void) open__; set_callback(activate) } set_capability( "decoder device", priority )</cpp:value></cpp:define>














<decl_stmt><decl><type><name>VLC_API</name> <name>vlc_decoder_device</name> <modifier>*</modifier></type>
<name>vlc_decoder_device_Create</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>vout_window_t</name> <operator>*</operator><name>window</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<function_decl><type><name>VLC_API</name> <name>vlc_decoder_device</name> <modifier>*</modifier></type>
<name>vlc_decoder_device_Hold</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>VLC_API</name> <name>void</name></type>
<name>vlc_decoder_device_Release</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
