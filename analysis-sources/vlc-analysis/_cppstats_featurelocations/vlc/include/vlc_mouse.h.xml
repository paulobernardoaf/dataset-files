<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_mouse.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_VLC_MOUSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VLC_MOUSE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<enum>enum <name>vlc_mouse_button</name>
<block>{
<decl><name>MOUSE_BUTTON_LEFT</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MOUSE_BUTTON_CENTER</name></decl>,
<decl><name>MOUSE_BUTTON_RIGHT</name></decl>,
<decl><name>MOUSE_BUTTON_WHEEL_UP</name></decl>,
<decl><name>MOUSE_BUTTON_WHEEL_DOWN</name></decl>,
<decl><name>MOUSE_BUTTON_WHEEL_LEFT</name></decl>,
<decl><name>MOUSE_BUTTON_WHEEL_RIGHT</name></decl>,
<decl><name>MOUSE_BUTTON_MAX</name></decl>
}</block>;</enum>




<typedef>typedef <type><struct>struct <name>vlc_mouse_t</name>
<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_double_click</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_mouse_t</name>;</typedef>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vlc_mouse_event</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mouse_Init</name><parameter_list>( <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>b_double_click</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mouse_SetPressed</name><parameter_list>( <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_button</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mouse_SetReleased</name><parameter_list>( <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_button</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mouse_SetPosition</name><parameter_list>( <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>i_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>i_y</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <name><name>p_mouse</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_button</name><operator>)</operator> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsLeftPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_mouse_IsPressed</name><argument_list>( <argument><expr><name>p_mouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsCenterPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_mouse_IsPressed</name><argument_list>( <argument><expr><name>p_mouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsRightPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_mouse_IsPressed</name><argument_list>( <argument><expr><name>p_mouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsWheelUpPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_mouse_IsPressed</name><argument_list>( <argument><expr><name>p_mouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_WHEEL_UP</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_IsWheelDownPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_mouse_IsPressed</name><argument_list>( <argument><expr><name>p_mouse</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_WHEEL_DOWN</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_mouse_GetMotion</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_y</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_x</name> <operator>=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>-</operator> <name><name>p_old</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_y</name> <operator>=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>-</operator> <name><name>p_old</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_HasChanged</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_old</name><operator>-&gt;</operator><name>i_x</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>||</operator> <name><name>p_old</name><operator>-&gt;</operator><name>i_y</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>||</operator>
<name><name>p_old</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_pressed</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_HasMoved</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_old</name><operator>-&gt;</operator><name>i_x</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>||</operator> <name><name>p_old</name><operator>-&gt;</operator><name>i_y</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_HasButton</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_old</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_pressed</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_HasPressed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_button</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>p_old</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;</operator> <name>i_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;</operator> <name>i_mask</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vlc_mouse_HasReleased</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_button</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>p_old</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;</operator> <name>i_mask</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_pressed</name></name> <operator>&amp;</operator> <name>i_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
