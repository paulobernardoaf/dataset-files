<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_addons.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_ADDONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ADDONS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>addon_type_t</name>
<block>{
<decl><name>ADDON_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ADDON_EXTENSION</name></decl>,
<decl><name>ADDON_PLAYLIST_PARSER</name></decl>,
<decl><name>ADDON_SERVICE_DISCOVERY</name></decl>,
<decl><name>ADDON_SKIN2</name></decl>,
<decl><name>ADDON_PLUGIN</name></decl>,
<decl><name>ADDON_INTERFACE</name></decl>,
<decl><name>ADDON_META</name></decl>,
<decl><name>ADDON_OTHER</name></decl>
}</block></enum></type> <name>addon_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>addon_state_t</name>
<block>{
<decl><name>ADDON_NOTINSTALLED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ADDON_INSTALLING</name></decl>,
<decl><name>ADDON_INSTALLED</name></decl>,
<decl><name>ADDON_UNINSTALLING</name></decl>
}</block></enum></type> <name>addon_state_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>addon_flags_t</name>
<block>{
<decl><name>ADDON_BROKEN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>ADDON_MANAGEABLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, 
<decl><name>ADDON_UPDATABLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
}</block></enum></type> <name>addon_flags_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDON_MAX_SCORE</name></cpp:macro> <cpp:value>(5 * 100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDON_UUID_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDON_UUID_PSZ_SIZE</name></cpp:macro> <cpp:value>(ADDON_UUID_SIZE * 2 + 4)</cpp:value></cpp:define>
<typedef>typedef <type><name>uint8_t</name></type> <name><name>addon_uuid_t</name><index>[<expr><name>ADDON_UUID_SIZE</name></expr>]</index></name>;</typedef>

<typedef>typedef <type><struct>struct <name>addon_file_t</name>
<block>{
<decl_stmt><decl><type><name>addon_type_t</name></type> <name>e_filetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_download_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>
}</block></struct></type> <name>addon_file_t</name>;</typedef>

<struct>struct <name>addon_entry_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>addon_type_t</name></type> <name>e_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addon_state_t</name></type> <name>e_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addon_flags_t</name></type> <name>e_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>addon_uuid_t</name></type> <name>uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_source_uri</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_image_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_image_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_version</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>i_downloads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_score</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_source_module</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_archive_uri</name></decl>;</decl_stmt> 
<macro><name>DECL_ARRAY</name><argument_list>(<argument>addon_file_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>files</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_custom</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>addons_finder_t</name></name></type> <name>addons_finder_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>addons_finder_sys_t</name></name></type> <name>addons_finder_sys_t</name>;</typedef>
<struct>struct <name>addons_finder_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_find</name> )<parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_retrieve</name> )<parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<macro><name>DECL_ARRAY</name><argument_list>( <argument>addon_entry_t *</argument> )</argument_list></macro> <expr_stmt><expr><name>entries</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>addons_finder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>addons_storage_t</name></name></type> <name>addons_storage_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>addons_storage_sys_t</name></name></type> <name>addons_storage_sys_t</name>;</typedef>
<struct>struct <name>addons_storage_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_install</name> )<parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_remove</name> )<parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>pf_catalog</name> ) <parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>addons_storage_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>addons_manager_t</name></name></type> <name>addons_manager_t</name>;</typedef>

<struct>struct <name>addons_manager_owner</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>addon_found</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addons_manager_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addon_entry_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>discovery_ended</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addons_manager_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>addon_changed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addons_manager_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addon_entry_t</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>addons_manager_private_t</name></name></type> <name>addons_manager_private_t</name>;</typedef>
<struct>struct <name>addons_manager_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>addons_manager_owner</name></name></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addons_manager_private_t</name> <modifier>*</modifier></type><name>p_priv</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name>VLC_API</name> <name>addon_entry_t</name> <modifier>*</modifier></type><name>addon_entry_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>addon_entry_t</name> <modifier>*</modifier></type><name>addon_entry_Hold</name><parameter_list>(<parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>addon_entry_Release</name><parameter_list>(<parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>VLC_API</name> <name>addons_manager_t</name> <modifier>*</modifier></type><name>addons_manager_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addons_manager_owner</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>addons_manager_Delete</name><parameter_list>( <parameter><decl><type><name>addons_manager_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>addons_manager_LoadCatalog</name><parameter_list>( <parameter><decl><type><name>addons_manager_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>addons_manager_Gather</name><parameter_list>( <parameter><decl><type><name>addons_manager_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>addons_manager_Install</name><parameter_list>( <parameter><decl><type><name>addons_manager_t</name> <modifier>*</modifier></type><name>p_manager</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>addon_uuid_t</name></type> <name>uuid</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>addons_manager_Remove</name><parameter_list>( <parameter><decl><type><name>addons_manager_t</name> <modifier>*</modifier></type><name>p_manager</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>addon_uuid_t</name></type> <name>uuid</name></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>addons_uuid_read</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uuid</name></decl></parameter>, <parameter><decl><type><name>addon_uuid_t</name> <modifier>*</modifier></type><name>p_uuid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_uuid</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_uuid</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>ADDON_UUID_PSZ_SIZE</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><name>i</name><operator>&lt;</operator><name>ADDON_UUID_PSZ_SIZE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>*</operator><operator>(</operator> <name>psz_uuid</name> <operator>+</operator> <name>i</name> <operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_uuid</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_uuid</name><operator>)</operator><index>[<expr><name>j</name><operator>++</operator></expr>]</index> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type> <name>addons_uuid_to_psz</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>addon_uuid_t</name> <modifier>*</modifier></type> <name>p_uuid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>ADDON_UUID_PSZ_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><name>i</name> <operator>&lt;</operator> <name>ADDON_UUID_SIZE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name><operator>==</operator> <literal type="number">7</literal> <operator>||</operator> <name>i</name><operator>==</operator> <literal type="number">9</literal> <operator>||</operator> <name>i</name><operator>==</operator> <literal type="number">11</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0xFF</literal> <operator>&amp;</operator> <operator>(</operator><operator>*</operator><name>p_uuid</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>psz</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
