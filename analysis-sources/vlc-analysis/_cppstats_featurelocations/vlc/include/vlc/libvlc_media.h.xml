<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc\libvlc_media.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_LIBVLC_MEDIA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LIBVLC_MEDIA_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<typedef>typedef <type><name><name>struct</name> <name>libvlc_media_t</name></name></type> <name>libvlc_media_t</name>;</typedef>


<typedef>typedef <type><enum>enum <name>libvlc_meta_t</name> <block>{
<decl><name>libvlc_meta_Title</name></decl>,
<decl><name>libvlc_meta_Artist</name></decl>,
<decl><name>libvlc_meta_Genre</name></decl>,
<decl><name>libvlc_meta_Copyright</name></decl>,
<decl><name>libvlc_meta_Album</name></decl>,
<decl><name>libvlc_meta_TrackNumber</name></decl>,
<decl><name>libvlc_meta_Description</name></decl>,
<decl><name>libvlc_meta_Rating</name></decl>,
<decl><name>libvlc_meta_Date</name></decl>,
<decl><name>libvlc_meta_Setting</name></decl>,
<decl><name>libvlc_meta_URL</name></decl>,
<decl><name>libvlc_meta_Language</name></decl>,
<decl><name>libvlc_meta_NowPlaying</name></decl>,
<decl><name>libvlc_meta_Publisher</name></decl>,
<decl><name>libvlc_meta_EncodedBy</name></decl>,
<decl><name>libvlc_meta_ArtworkURL</name></decl>,
<decl><name>libvlc_meta_TrackID</name></decl>,
<decl><name>libvlc_meta_TrackTotal</name></decl>,
<decl><name>libvlc_meta_Director</name></decl>,
<decl><name>libvlc_meta_Season</name></decl>,
<decl><name>libvlc_meta_Episode</name></decl>,
<decl><name>libvlc_meta_ShowName</name></decl>,
<decl><name>libvlc_meta_Actors</name></decl>,
<decl><name>libvlc_meta_AlbumArtist</name></decl>,
<decl><name>libvlc_meta_DiscNumber</name></decl>,
<decl><name>libvlc_meta_DiscTotal</name></decl>

}</block></enum></type> <name>libvlc_meta_t</name>;</typedef>










<typedef>typedef <type><enum>enum <name>libvlc_state_t</name>
<block>{
<decl><name>libvlc_NothingSpecial</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>libvlc_Opening</name></decl>,
<decl><name>libvlc_Buffering</name></decl>, 


<decl><name>libvlc_Playing</name></decl>,
<decl><name>libvlc_Paused</name></decl>,
<decl><name>libvlc_Stopped</name></decl>,
<decl><name>libvlc_Ended</name></decl>,
<decl><name>libvlc_Error</name></decl>
}</block></enum></type> <name>libvlc_state_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>libvlc_media_option_trusted</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>libvlc_media_option_unique</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><enum>enum <name>libvlc_track_type_t</name>
<block>{
<decl><name>libvlc_track_unknown</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>libvlc_track_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>libvlc_track_video</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>libvlc_track_text</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>libvlc_track_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>libvlc_media_stats_t</name>
<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_read_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_input_bitrate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_demux_read_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_demux_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_demux_corrupted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_demux_discontinuity</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_decoded_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_decoded_audio</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_displayed_pictures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_lost_pictures</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_played_abuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_lost_abuffers</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_media_stats_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>libvlc_audio_track_t</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rate</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_audio_track_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>libvlc_video_orient_t</name>
<block>{
<decl><name>libvlc_video_orient_top_left</name></decl>, 
<decl><name>libvlc_video_orient_top_right</name></decl>, 
<decl><name>libvlc_video_orient_bottom_left</name></decl>, 
<decl><name>libvlc_video_orient_bottom_right</name></decl>, 
<decl><name>libvlc_video_orient_left_top</name></decl>, 
<decl><name>libvlc_video_orient_left_bottom</name></decl>, 
<decl><name>libvlc_video_orient_right_top</name></decl>, 
<decl><name>libvlc_video_orient_right_bottom</name></decl> 
}</block></enum></type> <name>libvlc_video_orient_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>libvlc_video_projection_t</name>
<block>{
<decl><name>libvlc_video_projection_rectangular</name></decl>,
<decl><name>libvlc_video_projection_equirectangular</name></decl>, 

<decl><name>libvlc_video_projection_cubemap_layout_standard</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
}</block></enum></type> <name>libvlc_video_projection_t</name>;</typedef>






<typedef>typedef <type><struct>struct <name>libvlc_video_viewpoint_t</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>f_yaw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_pitch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_roll</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_field_of_view</name></decl>;</decl_stmt> 
}</block></struct></type> <name>libvlc_video_viewpoint_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>libvlc_video_multiview_t</name>
<block>{
<decl><name>libvlc_video_multiview_2d</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_sbs</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_tb</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_row</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_col</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_frame</name></decl>, 
<decl><name>libvlc_video_multiview_stereo_checkerboard</name></decl>, 
}</block></enum></type> <name>libvlc_video_multiview_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>libvlc_video_track_t</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_sar_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_sar_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_rate_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_rate_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_orient_t</name></type> <name>i_orientation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_projection_t</name></type> <name>i_projection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_viewpoint_t</name></type> <name>pose</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>libvlc_video_multiview_t</name></type> <name>i_multiview</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_video_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>libvlc_subtitle_track_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_encoding</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_subtitle_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>libvlc_media_track_t</name>
<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_original_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_track_type_t</name></type> <name>i_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_level</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>libvlc_audio_track_t</name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_track_t</name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_subtitle_track_t</name> <modifier>*</modifier></type><name>subtitle</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>

}</block></struct></type> <name>libvlc_media_track_t</name>;</typedef>






<typedef>typedef <type><enum>enum <name>libvlc_media_type_t</name> <block>{
<decl><name>libvlc_media_type_unknown</name></decl>,
<decl><name>libvlc_media_type_file</name></decl>,
<decl><name>libvlc_media_type_directory</name></decl>,
<decl><name>libvlc_media_type_disc</name></decl>,
<decl><name>libvlc_media_type_stream</name></decl>,
<decl><name>libvlc_media_type_playlist</name></decl>,
}</block></enum></type> <name>libvlc_media_type_t</name>;</typedef>






<typedef>typedef <type><enum>enum <name>libvlc_media_parse_flag_t</name>
<block>{



<decl><name>libvlc_media_parse_local</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,



<decl><name>libvlc_media_parse_network</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,



<decl><name>libvlc_media_fetch_local</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,



<decl><name>libvlc_media_fetch_network</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,





<decl><name>libvlc_media_do_interact</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
}</block></enum></type> <name>libvlc_media_parse_flag_t</name>;</typedef>








<typedef>typedef <type><enum>enum <name>libvlc_media_parsed_status_t</name>
<block>{
<decl><name>libvlc_media_parsed_status_skipped</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>libvlc_media_parsed_status_failed</name></decl>,
<decl><name>libvlc_media_parsed_status_timeout</name></decl>,
<decl><name>libvlc_media_parsed_status_done</name></decl>,
}</block></enum></type> <name>libvlc_media_parsed_status_t</name>;</typedef>




<typedef>typedef <type><enum>enum <name>libvlc_media_slave_type_t</name>
<block>{
<decl><name>libvlc_media_slave_type_subtitle</name></decl>,
<decl><name>libvlc_media_slave_type_audio</name></decl>,
}</block></enum></type> <name>libvlc_media_slave_type_t</name>;</typedef>





<typedef>typedef <type><struct>struct <name>libvlc_media_slave_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_slave_type_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_priority</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_media_slave_t</name>;</typedef>



















<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>libvlc_media_open_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>;</function_decl></typedef>















<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>libvlc_media_read_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>









<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>libvlc_media_seek_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>libvlc_media_close_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
















<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_location</name><parameter_list>(
<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_mrl</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_path</name><parameter_list>(
<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>;</function_decl>

























<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_fd</name><parameter_list>(
<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>;</function_decl>



























<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_callbacks</name><parameter_list>(
<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>instance</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_open_cb</name></type> <name>open_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_read_cb</name></type> <name>read_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_seek_cb</name></type> <name>seek_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_close_cb</name></type> <name>close_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_new_as_node</name><parameter_list>(
<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>



















<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_media_add_option</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_options</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_media_add_option_flag</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_options</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_media_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_media_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <name>char</name> <modifier>*</modifier></type><name>libvlc_media_get_mrl</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_t</name> <modifier>*</modifier></type><name>libvlc_media_duplicate</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>















<function_decl><type><name>LIBVLC_API</name> <name>char</name> <modifier>*</modifier></type><name>libvlc_media_get_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_meta_t</name></type> <name>e_meta</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_media_set_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_meta_t</name></type> <name>e_meta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <name>int</name></type> <name>libvlc_media_save_meta</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>











<function_decl><type><name>LIBVLC_API</name> <name>libvlc_state_t</name></type> <name>libvlc_media_get_state</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name> <name>bool</name></type> <name>libvlc_media_get_stats</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_stats_t</name> <modifier>*</modifier></type><name>p_stats</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORWARD_DECLARE_OBJECT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct a</cpp:value></cpp:define>









<function_decl><type><name>LIBVLC_API</name></type> <name>VLC_FORWARD_DECLARE_OBJECT</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>
libvlc_media_subitems<parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <name>libvlc_event_manager_t</name> <modifier>*</modifier></type>
<name>libvlc_media_event_manager</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>













<function_decl><type><name>LIBVLC_API</name> <name>libvlc_time_t</name></type>
<name>libvlc_media_get_duration</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>






























<function_decl><type><name>LIBVLC_API</name> <name>int</name></type>
<name>libvlc_media_parse_with_options</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_parse_flag_t</name></type> <name>parse_flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>LIBVLC_API</name> <name>void</name></type>
<name>libvlc_media_parse_stop</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_parsed_status_t</name></type>
<name>libvlc_media_get_parsed_status</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type>
<name>libvlc_media_set_user_data</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_new_user_data</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name> <name>void</name> <modifier>*</modifier></type><name>libvlc_media_get_user_data</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>LIBVLC_API</name>
<name>unsigned</name></type> <name>libvlc_media_tracks_get</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>tracks</name></decl></parameter> )</parameter_list>;</function_decl>

















<function_decl><type><name>LIBVLC_API</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libvlc_media_get_codec_description</name><parameter_list>( <parameter><decl><type><name>libvlc_track_type_t</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_media_tracks_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_tracks</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_count</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>LIBVLC_API</name>
<name>libvlc_media_type_t</name></type> <name>libvlc_media_get_type</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>




<typedef>typedef <type><name><name>struct</name> <name>libvlc_media_thumbnail_request_t</name></name></type> <name>libvlc_media_thumbnail_request_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>libvlc_thumbnailer_seek_speed_t</name>
<block>{
<decl><name>libvlc_media_thumbnail_seek_precise</name></decl>,
<decl><name>libvlc_media_thumbnail_seek_fast</name></decl>,
}</block></enum></type> <name>libvlc_thumbnailer_seek_speed_t</name>;</typedef>
























<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_thumbnail_request_t</name><modifier>*</modifier></type>
<name>libvlc_media_thumbnail_request_by_time</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_time_t</name></type> <name>time</name></decl></parameter>,
<parameter><decl><type><name>libvlc_thumbnailer_seek_speed_t</name></type> <name>speed</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter>, <parameter><decl><type><name>libvlc_picture_type_t</name></type> <name>picture_type</name></decl></parameter>,
<parameter><decl><type><name>libvlc_time_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>;</function_decl>
























<function_decl><type><name>LIBVLC_API</name> <name>libvlc_media_thumbnail_request_t</name><modifier>*</modifier></type>
<name>libvlc_media_thumbnail_request_by_pos</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>libvlc_thumbnailer_seek_speed_t</name></type> <name>speed</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter>, <parameter><decl><type><name>libvlc_picture_type_t</name></type> <name>picture_type</name></decl></parameter>,
<parameter><decl><type><name>libvlc_time_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type>
<name>libvlc_media_thumbnail_request_cancel</name><parameter_list>( <parameter><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>p_req</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <name>void</name></type>
<name>libvlc_media_thumbnail_request_destroy</name><parameter_list>( <parameter><decl><type><name>libvlc_media_thumbnail_request_t</name> <modifier>*</modifier></type><name>p_req</name></decl></parameter> )</parameter_list>;</function_decl>




















<function_decl><type><name>LIBVLC_API</name>
<name>int</name></type> <name>libvlc_media_slaves_add</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_slave_type_t</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_priority</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_media_slaves_clear</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>LIBVLC_API</name>
<name>unsigned</name> <name>int</name></type> <name>libvlc_media_slaves_get</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_slaves</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_media_slaves_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_slave_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_slaves</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl></parameter> )</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
