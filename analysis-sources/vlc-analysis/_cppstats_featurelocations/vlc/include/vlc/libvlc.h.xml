<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc\libvlc.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_LIBVLC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LIBVLC_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DLL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_API</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LIBVLC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_DEPRECATED</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>__GNUC__</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_DEPRECATED</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_DEPRECATED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<typedef>typedef <type><name><name>struct</name> <name>libvlc_instance_t</name></name></type> <name>libvlc_instance_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>libvlc_time_t</name>;</typedef>













<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libvlc_errmsg</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_clearerr</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libvlc_vprinterr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libvlc_printerr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



























































<function_decl><type><name>LIBVLC_API</name> <name>libvlc_instance_t</name> <modifier>*</modifier></type>
<name>libvlc_new</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_release</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>;</function_decl>







<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name>
<name>int</name></type> <name>libvlc_add_intf</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>;</function_decl>

















<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_set_exit_handler</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>;</function_decl>










<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_set_user_agent</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http</name></decl></parameter> )</parameter_list>;</function_decl>











<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_set_app_id</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>icon</name></decl></parameter> )</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_compiler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>libvlc_get_changeset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>;</function_decl>
















<typedef>typedef <type><name><name>struct</name> <name>libvlc_event_manager_t</name></name></type> <name>libvlc_event_manager_t</name>;</typedef>

<struct_decl>struct <name>libvlc_event_t</name>;</struct_decl>




<typedef>typedef <type><name>int</name></type> <name>libvlc_event_type_t</name>;</typedef>





<typedef>typedef <function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>libvlc_callback_t</name> )<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>libvlc_event_t</name></name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl></typedef>












<function_decl><type><name>LIBVLC_API</name> <name>int</name></type> <name>libvlc_event_attach</name><parameter_list>( <parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>p_event_manager</name></decl></parameter>,
<parameter><decl><type><name>libvlc_event_type_t</name></type> <name>i_event_type</name></decl></parameter>,
<parameter><decl><type><name>libvlc_callback_t</name></type> <name>f_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_event_detach</name><parameter_list>( <parameter><decl><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type><name>p_event_manager</name></decl></parameter>,
<parameter><decl><type><name>libvlc_event_type_t</name></type> <name>i_event_type</name></decl></parameter>,
<parameter><decl><type><name>libvlc_callback_t</name></type> <name>f_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_user_data</name></decl></parameter> )</parameter_list>;</function_decl>













<enum>enum <name>libvlc_log_level</name>
<block>{
<decl><name>LIBVLC_DEBUG</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>LIBVLC_NOTICE</name><init>=<expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>LIBVLC_WARNING</name><init>=<expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>LIBVLC_ERROR</name><init>=<expr><literal type="number">4</literal></expr></init></decl> 
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>vlc_log_t</name></name></type> <name>libvlc_log_t</name>;</typedef>





















<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_log_get_context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_log_get_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>













<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>libvlc_log_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_log_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl></typedef>














<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_log_unset</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>;</function_decl>


















<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_log_set</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>,
<parameter><decl><type><name>libvlc_log_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>;</function_decl>









<function_decl><type><name>LIBVLC_API</name> <name>void</name></type> <name>libvlc_log_set_file</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter> )</parameter_list>;</function_decl>






<typedef>typedef <type><struct>struct <name>libvlc_module_description_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_shortname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_longname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>libvlc_module_description_t</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>libvlc_module_description_t</name>;</typedef>






<function_decl><type><name>LIBVLC_API</name>
<name>void</name></type> <name>libvlc_module_description_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>LIBVLC_API</name>
<name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>libvlc_audio_filter_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>;</function_decl>












<function_decl><type><name>LIBVLC_API</name>
<name>libvlc_module_description_t</name> <modifier>*</modifier></type><name>libvlc_video_filter_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter> )</parameter_list>;</function_decl>
















<function_decl><type><name>LIBVLC_API</name>
<name>int64_t</name></type> <name>libvlc_clock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>libvlc_delay</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>pts</name> <operator>-</operator> <call><name>libvlc_clock</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
