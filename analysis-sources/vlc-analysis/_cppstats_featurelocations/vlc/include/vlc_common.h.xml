<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_common.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_COMMON_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_config.h"</cpp:file></cpp:include>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GCC_VERSION</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>,<parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__GNUC__ &gt; (maj)) || (__GNUC__ == (maj) &amp;&amp; __GNUC_MINOR__ &gt;= (min)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GCC_VERSION</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>,<parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__USE_MINGW_ANSI_STDIO</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRId64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRId64</name></cpp:macro> <cpp:value>"lld"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRIi64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIi64</name></cpp:macro> <cpp:value>"lli"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRIu64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIu64</name></cpp:macro> <cpp:value>"llu"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRIo64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIo64</name></cpp:macro> <cpp:value>"llo"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRIx64</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIx64</name></cpp:macro> <cpp:value>"llx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>__mingw_snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsnprintf</name></cpp:macro> <cpp:value>__mingw_vsnprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swprintf</name></cpp:macro> <cpp:value>_snwprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEPRECATED</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEPRECATED_ENUM</name></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEPRECATED_ENUM</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__clang__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORMAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__ ((format(gnu_printf,x,y)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORMAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__ ((format(printf,x,y)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORMAT_ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__ ((format_arg(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MALLOC</name></cpp:macro> <cpp:value>__attribute__ ((malloc))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_USED</name></cpp:macro> <cpp:value>__attribute__ ((warn_unused_result))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEPRECATED</name></cpp:macro></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEPRECATED_ENUM</name></cpp:macro></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORMAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FORMAT_ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MALLOC</name></cpp:macro></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_USED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_WEAK</name></cpp:macro> <cpp:value>__attribute__((weak))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_WEAK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>likely</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(p), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlikely</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_expect(!!(p), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unreachable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__builtin_unreachable()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>likely</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(p))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlikely</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!(p))</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unreachable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_assert_unreachable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(vlc_assert(!"unreachable"), unreachable())</cpp:value></cpp:define>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LIBVLC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_assert</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(pred)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_assert</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXTERN</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXTERN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>DLL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXPORT</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXPORT</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_API</name></cpp:macro> <cpp:value>VLC_EXTERN VLC_EXPORT</cpp:value></cpp:define>











<typedef>typedef <type><name>uint32_t</name></type> <name>vlc_fourcc_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FOURCC</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((uint32_t)d) | ( ((uint32_t)c) &lt;&lt; 8 ) | ( ((uint32_t)b) &lt;&lt; 16 ) | ( ((uint32_t)a) &lt;&lt; 24 ) )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TWOCC</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (uint16_t)(b) | ( (uint16_t)(a) &lt;&lt; 8 ) )</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_FOURCC</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((uint32_t)a) | ( ((uint32_t)b) &lt;&lt; 8 ) | ( ((uint32_t)c) &lt;&lt; 16 ) | ( ((uint32_t)d) &lt;&lt; 24 ) )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TWOCC</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (uint16_t)(a) | ( (uint16_t)(b) &lt;&lt; 8 ) )</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_fourcc_to_char</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fourcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_fourcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<typedef>typedef <type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>vlc_object_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>libvlc_int_t</name></name></type> <name>libvlc_int_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>date_t</name></name></type> <name>date_t</name>;</typedef>



<typedef>typedef <type><name><name>struct</name> <name>playlist_t</name></name></type> <name>playlist_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>playlist_item_t</name></name></type> <name>playlist_item_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>services_discovery_t</name></name></type> <name>services_discovery_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_renderer_discovery_t</name></name></type> <name>vlc_renderer_discovery_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_renderer_item_t</name></name></type> <name>vlc_renderer_item_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>module_t</name></name></type> <name>module_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>module_config_t</name></name></type> <name>module_config_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>config_category_t</name></name></type> <name>config_category_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>input_item_t</name></name></type> <name>input_item_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>input_item_node_t</name></name></type> <name>input_item_node_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>input_source_t</name></name></type> <name>input_source_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>stream_t</name></name></type> <name>stream_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>stream_t</name></name></type> <name>demux_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>es_out_t</name></name></type> <name>es_out_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>es_out_id_t</name></name></type> <name>es_out_id_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>seekpoint_t</name></name></type> <name>seekpoint_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>info_t</name></name></type> <name>info_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>info_category_t</name></name></type> <name>info_category_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>input_attachment_t</name></name></type> <name>input_attachment_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>audio_format_t</name></name></type> <name>audio_format_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>video_format_t</name></name></type> <name>video_format_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>subs_format_t</name></name></type> <name>subs_format_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>es_format_t</name></name></type> <name>es_format_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>video_palette_t</name></name></type> <name>video_palette_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_es_id_t</name></name></type> <name>vlc_es_id_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>audio_output</name></name></type> <name>audio_output_t</name>;</typedef>
<typedef>typedef <type><name>audio_format_t</name></type> <name>audio_sample_format_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vout_thread_t</name></name></type> <name>vout_thread_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_viewpoint_t</name></name></type> <name>vlc_viewpoint_t</name>;</typedef>

<typedef>typedef <type><name>video_format_t</name></type> <name>video_frame_format_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>picture_t</name></name></type> <name>picture_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>spu_t</name></name></type> <name>spu_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>subpicture_t</name></name></type> <name>subpicture_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>subpicture_region_t</name></name></type> <name>subpicture_region_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>image_handler_t</name></name></type> <name>image_handler_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>sout_instance_t</name></name></type> <name>sout_instance_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sout_input_t</name></name></type> <name>sout_input_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>sout_packetizer_input_t</name></name></type> <name>sout_packetizer_input_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sout_access_out_t</name></name></type> <name>sout_access_out_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sout_mux_t</name></name></type> <name>sout_mux_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sout_stream_t</name></name></type> <name>sout_stream_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>config_chain_t</name></name></type> <name>config_chain_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>session_descriptor_t</name></name></type> <name>session_descriptor_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>decoder_t</name></name></type> <name>decoder_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>encoder_t</name></name></type> <name>encoder_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>filter_t</name></name></type> <name>filter_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vlc_url_t</name></name></type> <name>vlc_url_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>iso639_lang_t</name></name></type> <name>iso639_lang_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>block_t</name></name></type> <name>block_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>block_fifo_t</name></name></type> <name>block_fifo_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>xml_t</name></name></type> <name>xml_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>xml_reader_t</name></name></type> <name>xml_reader_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vod_t</name></name></type> <name>vod_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vod_media_t</name></name></type> <name>vod_media_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vlm_t</name></name></type> <name>vlm_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlm_message_t</name></name></type> <name>vlm_message_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>vlc_meta_t</name></name></type> <name>vlc_meta_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>input_stats_t</name></name></type> <name>input_stats_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>addon_entry_t</name></name></type> <name>addon_entry_t</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>update_t</name></name></type> <name>update_t</name>;</typedef>




<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_address</name></decl>;</decl_stmt>
<struct>struct <block>{ <decl_stmt><decl><type><name>int32_t</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>y</name></decl>;</decl_stmt> }</block> <decl><name>coords</name></decl>;</struct>

}</block></union></type> <name>vlc_value_t</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SUCCESS</name></cpp:macro> <cpp:value>(-0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EGENERIC</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ENOMEM</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ETIMEOUT</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ENOMOD</name></cpp:macro> <cpp:value>(-4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ENOOBJ</name></cpp:macro> <cpp:value>(-5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ENOVAR</name></cpp:macro> <cpp:value>(-6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_EBADVAR</name></cpp:macro> <cpp:value>(-7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ENOITEM</name></cpp:macro> <cpp:value>(-8)</cpp:value></cpp:define>




<typedef>typedef <function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>vlc_callback_t</name> ) <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, 
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, 
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, 
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef> 




<typedef>typedef <function_decl><type><name>int</name></type> ( <modifier>*</modifier> <name>vlc_list_callback_t</name> ) <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, 
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, 
<parameter><decl><type><name>int</name></type></decl></parameter>, 
<parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>MAX_PATH</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syslimits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AvailabilityMacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS2EMX_PLAIN_CHAR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_BASE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_PM</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2safe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_tick.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_threads.h"</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((a) &gt; (b)) ? (a) : (b) )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((a) &lt; (b)) ? (a) : (b) )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__MIN(__MAX((v), (min)), (max))</cpp:value></cpp:define>






<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_align</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>v</name> <operator>+</operator> <operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>diagnose_if</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>vlc_align</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(diagnose_if<parameter_list>(<parameter/></parameter_list>(<parameter_list>(<parameter><decl><type><name>align</name> <modifier>&amp;</modifier></type> <parameter/></decl></parameter></parameter_list>(align - 1</function_decl>)) <expr_stmt><expr><operator>||</operator> <operator>(</operator><name>align</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></expr_stmt>)<operator>,</operator>
<expr_stmt><expr><literal type="string">"align must be power of 2"</literal></expr><operator>,</operator> <expr><literal type="string">"error"</literal></expr></expr_stmt>)))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>GCD</name> <parameter_list>( <parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>b</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>%</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>clip_uint8_vlc</name><parameter_list>( <parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>a</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>-</operator><name>a</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INT_FUNC</name><parameter_list>(<parameter><type><name>basename</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_INT_FUNC_TYPE(basename, unsigned, ) VLC_INT_FUNC_TYPE(basename, unsigned long, l) VLC_INT_FUNC_TYPE(basename, unsigned long long, ll)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INT_FUNC_TYPE</name><parameter_list>(<parameter><type><name>basename</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_USED static inline int vlc_##basename##suffix(type x) { return __builtin_##basename##suffix(x); }</cpp:value></cpp:define>





<macro><name>VLC_INT_FUNC</name><argument_list>(<argument>clz</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_clzll</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_clzl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_clzll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator>sizeof <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_clz</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_clzll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator>sizeof <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_ctz_generic</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_parity_generic</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_popcount_generic</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>x</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INT_FUNC_TYPE</name><parameter_list>(<parameter><type><name>basename</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_USED static inline int vlc_##basename##suffix(type x) { return vlc_##basename##_generic(x); }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>VLC_INT_FUNC</name><argument_list>(<argument>ctz</argument>)</argument_list></macro>
<macro><name>VLC_INT_FUNC</name><argument_list>(<argument>parity</argument>)</argument_list></macro>
<macro><name>VLC_INT_FUNC</name><argument_list>(<argument>popcount</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INT_GENERIC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((x), unsigned char: func(x), signed char: func(x), unsigned short: func(x), signed short: func(x), unsigned int: func(x), signed int: func(x), unsigned long: func##l(x), signed long: func##l(x), unsigned long long: func##ll(x), signed long long: func##ll(x))</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((x), unsigned char: (vlc_clz(x) - (sizeof (unsigned) - 1) * 8), unsigned short: (vlc_clz(x) - (sizeof (unsigned) - sizeof (unsigned short)) * 8), unsigned: vlc_clz(x), unsigned long: vlc_clzl(x), unsigned long long: vlc_clzll(x))</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_INT_GENERIC(vlc_ctz, x)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parity</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_INT_GENERIC(vlc_parity, x)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_popcount</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((x), signed char: vlc_popcount((unsigned char)(x)), signed short: vlc_popcount((unsigned short)(x)), default: VLC_INT_GENERIC(vlc_popcount ,x))</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_popcount</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_popcount</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_popcount</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_popcountl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_popcount</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_popcountll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>vlc_bswap16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>vlc_bswap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>vlc_bswap64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_bswap64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00000000000000FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000000000FF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000000000FF0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00000000FF000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000FF00000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FF0000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF00000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00000000000000FFULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000000000FF00ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000000000FF0000ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00000000FF000000ULL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x000000FF00000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000FF0000000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00FF000000000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF00000000000000ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>uadd_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_uadd_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <name>a</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>uaddl_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_uaddl_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <name>a</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>uaddll_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_uaddll_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <name>a</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_overflow</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic(*(r), unsigned: uadd_overflow(a, b, (unsigned *)(r)), unsigned long: uaddl_overflow(a, b, (unsigned long *)(r)), unsigned long long: uaddll_overflow(a, b, (unsigned long long *)(r)))</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>add_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>uadd_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>add_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>uaddl_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>add_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>uaddll_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>umul_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_umul_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <operator>(</operator><name>UINT_MAX</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>umull_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_umull_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <operator>(</operator><name>ULONG_MAX</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>umulll_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VLC_GCC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_umulll_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <operator>(</operator><name>ULLONG_MAX</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mul_overflow</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic(*(r), unsigned: umul_overflow(a, b, (unsigned *)(r)), unsigned long: umull_overflow(a, b, (unsigned long *)(r)), unsigned long long: umulll_overflow(a, b, (unsigned long long *)(r)))</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mul_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>umul_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mul_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>umull_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>mul_overflow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>umulll_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREENULL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { free( a ); a = NULL; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_STR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!str || !*str)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton16</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t)(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton32</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton64</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(i))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton16</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_bswap16(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton32</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_bswap32(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hton64</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_bswap64(i)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntoh16</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hton16(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntoh32</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hton32(i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntoh64</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hton64(i)</cpp:value></cpp:define>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>U16_AT</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ntoh16</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>U32_AT</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ntoh32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>U64_AT</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ntoh64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetWBE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U16_AT(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDWBE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U32_AT(p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetQWBE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U64_AT(p)</cpp:value></cpp:define>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>GetWLE</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>vlc_bswap16</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>GetDWLE</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>vlc_bswap32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>GetQWLE</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>vlc_bswap64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetWBE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>hton16</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetDWBE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dw</name> <operator>=</operator> <call><name>hton32</name> <argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetQWBE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>qw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>qw</name> <operator>=</operator> <call><name>hton64</name> <argument_list>(<argument><expr><name>qw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>qw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetWLE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>vlc_bswap16</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetDWLE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dw</name> <operator>=</operator> <call><name>vlc_bswap32</name> <argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetQWLE</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>qw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>qw</name> <operator>=</operator> <call><name>vlc_bswap64</name> <argument_list>(<argument><expr><name>qw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>qw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__MINGW32__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_OFF_T_</name></expr></argument> )</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>_off_t</name>;</typedef>
<typedef>typedef <type><name>_off_t</name></type> <name>off_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_OFF_T_</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>off_t</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off_t</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NONBLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swab</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>swab((char*) (a), (char*) (b), (c))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <name>den</name>;</decl_stmt>
}</block></struct></type> <name>vlc_rational_t</name>;</typedef>

<function_decl><type><name>VLC_API</name> <name>bool</name></type> <name>vlc_ureduce</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>container_of</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)(((char *)(ptr)) - offsetof(type, member)))</cpp:value></cpp:define>


<function><type><name>VLC_USED</name> <name>VLC_MALLOC</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>mul_overflow</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_reallocarray</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>mul_overflow</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_gettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid</name></decl></parameter>)</parameter_list> VLC_FORMAT_ARG<parameter_list>(</parameter_list>1</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_ngettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
VLC_FORMAT_ARG<parameter_list>(</parameter_list>1</function_decl>) <expr_stmt><expr><call><name>VLC_FORMAT_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_pgettext</name><parameter_list>( <parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>id</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_pgettext_aux( ctx "\004" id, id )</cpp:value></cpp:define>


<macro><name>VLC_FORMAT_ARG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_pgettext_aux</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><call><name>vlc_gettext</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>tr</name> <operator>==</operator> <name>ctx</name><operator>)</operator></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><name>tr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>xrealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nptr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>nptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>xstrdup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VLC_CompileBy</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VLC_CompileHost</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VLC_Compiler</name><argument_list>( <argument><expr><name>void</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_messages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_configuration.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEP_CHAR</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEP</name></cpp:macro> <cpp:value>"\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP_CHAR</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>";"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEP_CHAR</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEP</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP_CHAR</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>":"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_MSG</name></cpp:macro> <cpp:value>_("This program comes with NO WARRANTY, to the extent permitted by " "law.\nYou may redistribute it under the terms of the GNU General " "Public License;\nsee the file named COPYING for details.\n" "Written by the VideoLAN team; see the AUTHORS file.\n")</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
