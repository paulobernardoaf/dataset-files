<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_plugin.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBVLC_MODULES_MACROS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVLC_MODULES_MACROS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>






<enum>enum <name>vlc_module_properties</name>
<block>{
<decl><name>VLC_MODULE_CREATE</name></decl>,
<decl><name>VLC_CONFIG_CREATE</name></decl>,



<decl><name>VLC_MODULE_CPU_REQUIREMENT</name><init>=<expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>VLC_MODULE_SHORTCUT</name></decl>,
<decl><name>VLC_MODULE_CAPABILITY</name></decl>,
<decl><name>VLC_MODULE_SCORE</name></decl>,
<decl><name>VLC_MODULE_CB_OPEN</name></decl>,
<decl><name>VLC_MODULE_CB_CLOSE</name></decl>,
<decl><name>VLC_MODULE_NO_UNLOAD</name></decl>,
<decl><name>VLC_MODULE_NAME</name></decl>,
<decl><name>VLC_MODULE_SHORTNAME</name></decl>,
<decl><name>VLC_MODULE_DESCRIPTION</name></decl>,
<decl><name>VLC_MODULE_HELP</name></decl>,
<decl><name>VLC_MODULE_TEXTDOMAIN</name></decl>,




<decl><name>VLC_CONFIG_NAME</name><init>=<expr><literal type="number">0x1000</literal></expr></init></decl>,


<decl><name>VLC_CONFIG_VALUE</name></decl>,


<decl><name>VLC_CONFIG_RANGE</name></decl>,


<decl><name>VLC_CONFIG_ADVANCED_RESERVED</name></decl>,


<decl><name>VLC_CONFIG_VOLATILE</name></decl>,


<decl><name>VLC_CONFIG_PERSISTENT_OBSOLETE</name></decl>,


<decl><name>VLC_CONFIG_PRIVATE</name></decl>,


<decl><name>VLC_CONFIG_REMOVED</name></decl>,


<decl><name>VLC_CONFIG_CAPABILITY</name></decl>,


<decl><name>VLC_CONFIG_SHORTCUT</name></decl>,


<decl><name>VLC_CONFIG_OLDNAME_OBSOLETE</name></decl>,


<decl><name>VLC_CONFIG_SAFE</name></decl>,


<decl><name>VLC_CONFIG_DESC</name></decl>,


<decl><name>VLC_CONFIG_LIST_OBSOLETE</name></decl>,


<decl><name>VLC_CONFIG_ADD_ACTION_OBSOLETE</name></decl>,


<decl><name>VLC_CONFIG_LIST</name></decl>,



<decl><name>VLC_CONFIG_LIST_CB_OBSOLETE</name></decl>,



}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_HINT_CATEGORY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_HINT_USAGE</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_CATEGORY</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_SUBCATEGORY</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_SECTION</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_FLOAT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_INTEGER</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_RGB</name></cpp:macro> <cpp:value>0x41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_BOOL</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_STRING</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_PASSWORD</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_KEY</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_MODULE</name></cpp:macro> <cpp:value>0x84</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_MODULE_CAT</name></cpp:macro> <cpp:value>0x85</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_MODULE_LIST</name></cpp:macro> <cpp:value>0x86</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_MODULE_LIST_CAT</name></cpp:macro> <cpp:value>0x87</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_LOADFILE</name></cpp:macro> <cpp:value>0x8C</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_SAVEFILE</name></cpp:macro> <cpp:value>0x8D</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_DIRECTORY</name></cpp:macro> <cpp:value>0x8E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM_FONT</name></cpp:macro> <cpp:value>0x8F</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ITEM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; ~0xF) != 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_INTERFACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INTERFACE_GENERAL</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INTERFACE_MAIN</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INTERFACE_CONTROL</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INTERFACE_HOTKEYS</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_AUDIO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_GENERAL</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_AOUT</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_AFILTER</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_VISUAL</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_MISC</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_AUDIO_RESAMPLER</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_VIDEO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_VIDEO_GENERAL</name></cpp:macro> <cpp:value>301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_VIDEO_VOUT</name></cpp:macro> <cpp:value>302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_VIDEO_VFILTER</name></cpp:macro> <cpp:value>303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_VIDEO_SUBPIC</name></cpp:macro> <cpp:value>305</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_VIDEO_SPLITTER</name></cpp:macro> <cpp:value>306</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_INPUT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_GENERAL</name></cpp:macro> <cpp:value>401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_ACCESS</name></cpp:macro> <cpp:value>402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_DEMUX</name></cpp:macro> <cpp:value>403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_VCODEC</name></cpp:macro> <cpp:value>404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_ACODEC</name></cpp:macro> <cpp:value>405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_SCODEC</name></cpp:macro> <cpp:value>406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_INPUT_STREAM_FILTER</name></cpp:macro> <cpp:value>407</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_SOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_GENERAL</name></cpp:macro> <cpp:value>501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_STREAM</name></cpp:macro> <cpp:value>502</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_MUX</name></cpp:macro> <cpp:value>503</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_ACO</name></cpp:macro> <cpp:value>504</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_PACKETIZER</name></cpp:macro> <cpp:value>505</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_VOD</name></cpp:macro> <cpp:value>507</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_SOUT_RENDERER</name></cpp:macro> <cpp:value>508</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_ADVANCED</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_ADVANCED_MISC</name></cpp:macro> <cpp:value>602</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_ADVANCED_NETWORK</name></cpp:macro> <cpp:value>603</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_PLAYLIST</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_PLAYLIST_GENERAL</name></cpp:macro> <cpp:value>701</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_PLAYLIST_SD</name></cpp:macro> <cpp:value>702</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBCAT_PLAYLIST_EXPORT</name></cpp:macro> <cpp:value>703</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_API_VERSION_STRING</name></cpp:macro> <cpp:value>"4.0.4"</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONCATENATE</name><parameter_list>( <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>CRUDE_HACK( y, z )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRUDE_HACK</name><parameter_list>( <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>y##__##z</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PLUGIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SYMBOL</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>symbol</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_NAME_HIDDEN_SYMBOL</name></cpp:macro> <cpp:value>const char vlc_module_name[] = MODULE_STRING;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SYMBOL</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONCATENATE(symbol, MODULE_NAME)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_NAME_HIDDEN_SYMBOL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDECL_SYMBOL</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__PLUGIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLL_SYMBOL</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CDECL_SYMBOL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDECL_SYMBOL</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLL_SYMBOL</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLL_SYMBOL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLL_SYMBOL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__cplusplus</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN_SYMBOL</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN_SYMBOL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>EXTERN_SYMBOL</name></macro> <typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_set_cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_plugin_set</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_set (opaque, NULL, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_module_set</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_set (opaque, module, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_config_set</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_set (opaque, config, __VA_ARGS__)</cpp:value></cpp:define>

<function_decl><type><name>EXTERN_SYMBOL</name> <name>DLL_SYMBOL</name>
<name>int</name> <name>CDECL_SYMBOL</name> <name>VLC_SYMBOL</name></type>(<name>vlc_entry</name>)<parameter_list>(<parameter><decl><type><name>vlc_set_cb</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXTERN_SYMBOL</name> <name>DLL_SYMBOL</name>
<name>int</name> <name>CDECL_SYMBOL</name> <name>VLC_SYMBOL</name></type>(<name>vlc_entry_cfg_int_enum</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EXTERN_SYMBOL</name> <name>DLL_SYMBOL</name>
<name>int</name> <name>CDECL_SYMBOL</name> <name>VLC_SYMBOL</name></type>(<name>vlc_entry_cfg_str_enum</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_module_begin</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>EXTERN_SYMBOL DLL_SYMBOL int CDECL_SYMBOL VLC_SYMBOL(vlc_entry)(vlc_set_cb vlc_set, void *opaque) { module_t *module; module_config_t *config = NULL; if (vlc_plugin_set (VLC_MODULE_CREATE, &amp;module)) goto error; if (vlc_module_set (VLC_MODULE_NAME, (MODULE_STRING))) goto error;</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_module_end</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(void) config; return 0; error: return -1; } VLC_MODULE_NAME_HIDDEN_SYMBOL VLC_METADATA_EXPORTS</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_submodule</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>if (vlc_plugin_set (VLC_MODULE_CREATE, &amp;module)) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_shortcut</name><parameter_list>( <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ const char *shortcuts[] = { __VA_ARGS__ }; if (vlc_module_set (VLC_MODULE_SHORTCUT, sizeof(shortcuts)/sizeof(shortcuts[0]), shortcuts)) goto error; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_shortname</name><parameter_list>( <parameter><type><name>shortname</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set (VLC_MODULE_SHORTNAME, (const char *)(shortname))) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_description</name><parameter_list>( <parameter><type><name>desc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set (VLC_MODULE_DESCRIPTION, (const char *)(desc))) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_help</name><parameter_list>( <parameter><type><name>help</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set (VLC_MODULE_HELP, (const char *)(help))) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_capability</name><parameter_list>( <parameter><type><name>cap</name></type></parameter>, <parameter><type><name>score</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set (VLC_MODULE_CAPABILITY, (const char *)(cap)) || vlc_module_set (VLC_MODULE_SCORE, (int)(score))) goto error;</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_callback</name><parameter_list>(<parameter><type><name>activate</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set(VLC_MODULE_CB_OPEN, #activate, (void *)(activate))) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_callbacks</name><parameter_list>( <parameter><type><name>activate</name></type></parameter>, <parameter><type><name>deactivate</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>set_callback(activate) if (vlc_module_set(VLC_MODULE_CB_CLOSE, #deactivate, (void (*)(vlc_object_t *)){ deactivate })) goto error;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cannot_unload_broken_library</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>if (vlc_module_set (VLC_MODULE_NO_UNLOAD)) goto error;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_text_domain</name><parameter_list>( <parameter><type><name>dom</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if (vlc_plugin_set (VLC_MODULE_TEXTDOMAIN, (dom))) goto error;</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_type_inner</name><parameter_list>( <parameter><type><name>type</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_plugin_set (VLC_CONFIG_CREATE, (type), &amp;config);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_typedesc_inner</name><parameter_list>( <parameter><type><name>type</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_type_inner( type ) vlc_config_set (VLC_CONFIG_DESC, (const char *)(text), (const char *)(longtext));</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_typename_inner</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_typedesc_inner(type, text, longtext) vlc_config_set (VLC_CONFIG_NAME, (const char *)(name));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_string_inner</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_typename_inner(type, name, text, longtext) vlc_config_set (VLC_CONFIG_VALUE, (const char *)(v));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_int_inner</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_typename_inner(type, name, text, longtext) vlc_config_set (VLC_CONFIG_VALUE, (int64_t)(v));</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_category</name><parameter_list>( <parameter><type><name>i_id</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_type_inner( CONFIG_CATEGORY ) vlc_config_set (VLC_CONFIG_VALUE, (int64_t)(i_id));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_subcategory</name><parameter_list>( <parameter><type><name>i_id</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_type_inner( CONFIG_SUBCATEGORY ) vlc_config_set (VLC_CONFIG_VALUE, (int64_t)(i_id));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_section</name><parameter_list>( <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_typedesc_inner( CONFIG_SECTION, text, longtext )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_category_hint</name><parameter_list>(<parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_typedesc_inner( CONFIG_HINT_CATEGORY, text, longtext )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_usage_hint</name><parameter_list>( <parameter><type><name>text</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_typedesc_inner( CONFIG_HINT_USAGE, text, NULL )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_string</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_STRING, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_password</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_PASSWORD, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_loadfile</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_LOADFILE, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_savefile</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_SAVEFILE, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_directory</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_DIRECTORY, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_font</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_FONT, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_module</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>psz_caps</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_MODULE, name, text, longtext, value) vlc_config_set (VLC_CONFIG_CAPABILITY, (const char *)(psz_caps));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_module_list</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>psz_caps</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_MODULE_LIST, name, text, longtext, value) vlc_config_set (VLC_CONFIG_CAPABILITY, (const char *)(psz_caps));</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PLUGIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_module_cat</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>i_subcategory</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_MODULE_CAT, name, text, longtext, value) change_integer_range (i_subcategory , 0);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_module_list_cat</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>i_subcategory</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_MODULE_LIST_CAT, name, text, longtext, value) change_integer_range (i_subcategory , 0);</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_integer</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_int_inner(CONFIG_ITEM_INTEGER, name, text, longtext, value)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_rgb</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_int_inner(CONFIG_ITEM_RGB, name, text, longtext, value) change_integer_range( 0, 0xFFFFFF )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_key</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_string_inner(CONFIG_ITEM_KEY, "global-" name, text, longtext, KEY_UNSET) add_string_inner(CONFIG_ITEM_KEY, name, text, longtext, value)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_integer_with_range</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>i_min</name></type></parameter>, <parameter><type><name>i_max</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_integer( name, value, text, longtext, advc ) change_integer_range( i_min, i_max )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_float</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_typename_inner(CONFIG_ITEM_FLOAT, name, text, longtext) vlc_config_set (VLC_CONFIG_VALUE, (double)(v));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_float_with_range</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>f_min</name></type></parameter>, <parameter><type><name>f_max</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_float( name, value, text, longtext, advc ) change_float_range( f_min, f_max )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_bool</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>text</name></type></parameter>, <parameter><type><name>longtext</name></type></parameter>, <parameter><type><name>advc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_typename_inner(CONFIG_ITEM_BOOL, name, text, longtext) if (v) vlc_config_set (VLC_CONFIG_VALUE, (int64_t)true);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_obsolete_inner</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_type_inner( type ) vlc_config_set (VLC_CONFIG_NAME, (const char *)(name)); vlc_config_set (VLC_CONFIG_REMOVED);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_obsolete_bool</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_obsolete_inner( name, CONFIG_ITEM_BOOL )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_obsolete_integer</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_obsolete_inner( name, CONFIG_ITEM_INTEGER )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_obsolete_float</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_obsolete_inner( name, CONFIG_ITEM_FLOAT )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_obsolete_string</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_obsolete_inner( name, CONFIG_ITEM_STRING )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_short</name><parameter_list>( <parameter><type><name>ch</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_SHORTCUT, (int)(ch));</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_string_list</name><parameter_list>( <parameter><type><name>list</name></type></parameter>, <parameter><type><name>list_text</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_LIST, (size_t)(sizeof (list) / sizeof (char *)), (const char *const *)(list), (const char *const *)(list_text));</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_integer_list</name><parameter_list>( <parameter><type><name>list</name></type></parameter>, <parameter><type><name>list_text</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_LIST, (size_t)(sizeof (list) / sizeof (int)), (const int *)(list), (const char *const *)(list_text));</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_integer_range</name><parameter_list>( <parameter><type><name>minv</name></type></parameter>, <parameter><type><name>maxv</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_RANGE, (int64_t)(minv), (int64_t)(maxv));</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_float_range</name><parameter_list>( <parameter><type><name>minv</name></type></parameter>, <parameter><type><name>maxv</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_RANGE, (double)(minv), (double)(maxv));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_private</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_PRIVATE);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_volatile</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>change_private() vlc_config_set (VLC_CONFIG_VOLATILE);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>change_safe</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_config_set (VLC_CONFIG_SAFE);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CONFIG_INTEGER_ENUM</name><parameter_list>(<parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_SYMBOL DLL_SYMBOL int CDECL_SYMBOL VLC_SYMBOL(vlc_entry_cfg_int_enum)(const char *name, int64_t **values, char ***descs) { return (cb)(name, values, descs); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CONFIG_STRING_ENUM</name><parameter_list>(<parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_SYMBOL DLL_SYMBOL int CDECL_SYMBOL VLC_SYMBOL(vlc_entry_cfg_str_enum)(const char *name, char ***values, char ***descs) { return (cb)(name, values, descs); }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_META_EXPORT</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>EXTERN_SYMBOL DLL_SYMBOL const char * CDECL_SYMBOL VLC_SYMBOL(vlc_entry_ ##name)(void); EXTERN_SYMBOL DLL_SYMBOL const char * CDECL_SYMBOL VLC_SYMBOL(vlc_entry_ ##name)(void) { return value; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_API_VERSION_EXPORT</name></cpp:macro> <cpp:value>VLC_META_EXPORT(api_version, VLC_API_VERSION_STRING)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_COPYRIGHT_VIDEOLAN</name></cpp:macro> <cpp:value>"\x43\x6f\x70\x79\x72\x69\x67\x68\x74\x20\x28\x43\x29\x20\x74\x68" "\x65\x20\x56\x69\x64\x65\x6f\x4c\x41\x4e\x20\x56\x4c\x43\x20\x6d" "\x65\x64\x69\x61\x20\x70\x6c\x61\x79\x65\x72\x20\x64\x65\x76\x65" "\x6c\x6f\x70\x65\x72\x73"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LICENSE_LGPL_2_1_PLUS</name></cpp:macro> <cpp:value>"\x4c\x69\x63\x65\x6e\x73\x65\x64\x20\x75\x6e\x64\x65\x72\x20\x74" "\x68\x65\x20\x74\x65\x72\x6d\x73\x20\x6f\x66\x20\x74\x68\x65\x20" "\x47\x4e\x55\x20\x4c\x65\x73\x73\x65\x72\x20\x47\x65\x6e\x65\x72" "\x61\x6c\x20\x50\x75\x62\x6c\x69\x63\x20\x4c\x69\x63\x65\x6e\x73" "\x65\x2c\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x32\x2e\x31\x20\x6f" "\x72\x20\x6c\x61\x74\x65\x72\x2e"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LICENSE_GPL_2_PLUS</name></cpp:macro> <cpp:value>"\x4c\x69\x63\x65\x6e\x73\x65\x64\x20\x75\x6e\x64\x65\x72\x20\x74" "\x68\x65\x20\x74\x65\x72\x6d\x73\x20\x6f\x66\x20\x74\x68\x65\x20" "\x47\x4e\x55\x20\x47\x65\x6e\x65\x72\x61\x6c\x20\x50\x75\x62\x6c" "\x69\x63\x20\x4c\x69\x63\x65\x6e\x73\x65\x2c\x20\x76\x65\x72\x73" "\x69\x6f\x6e\x20\x32\x20\x6f\x72\x20\x6c\x61\x74\x65\x72\x2e"</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__LIBVLC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_COPYRIGHT</name></cpp:macro> <cpp:value>VLC_COPYRIGHT_VIDEOLAN</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MODULE_LICENSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_LGPL_2_1_PLUS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MODULE_COPYRIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_COPYRIGHT_EXPORT</name></cpp:macro> <cpp:value>VLC_META_EXPORT(copyright, VLC_MODULE_COPYRIGHT)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_COPYRIGHT_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MODULE_LICENSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LICENSE_EXPORT</name></cpp:macro> <cpp:value>VLC_META_EXPORT(license, VLC_MODULE_LICENSE)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LICENSE_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_METADATA_EXPORTS</name></cpp:macro> <cpp:value>VLC_API_VERSION_EXPORT VLC_COPYRIGHT_EXPORT VLC_LICENSE_EXPORT</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
