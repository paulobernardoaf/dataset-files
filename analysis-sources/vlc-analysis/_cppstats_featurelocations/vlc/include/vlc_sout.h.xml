<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_sout.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_SOUT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SOUT_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>











<struct>struct <name>sout_instance_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sout</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_out_pace_nocontrol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_wants_substreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
}</block>;</struct>








<struct>struct <name>sout_access_out_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_access</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_seek</name>)<parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_read</name>)<parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_write</name>)<parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_control</name>)<parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>access_out_query_e</name>
<block>{
<decl><name>ACCESS_OUT_CONTROLS_PACE</name></decl>, 
<decl><name>ACCESS_OUT_CAN_SEEK</name></decl>, 
}</block>;</enum>

<decl_stmt><decl><type><name>VLC_API</name> <name>sout_access_out_t</name> <modifier>*</modifier></type> <name>sout_AccessOutNew</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_access</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_name</name></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sout_AccessOutNew</name><parameter_list>( <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>access</name></type></parameter>, <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>sout_AccessOutNew( VLC_OBJECT(obj), access, name )</cpp:value></cpp:define>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_AccessOutDelete</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>sout_AccessOutSeek</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>sout_AccessOutRead</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>ssize_t</name></type> <name>sout_AccessOutWrite</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>sout_AccessOutControl</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>sout_AccessOutCanControlPace</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_ao</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>sout_AccessOutControl</name><argument_list>( <argument><expr><name>p_ao</name></expr></argument>, <argument><expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>









<struct>struct <name>sout_mux_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_addstream</name>)<parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_delstream</name>)<parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_mux</name>) <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_control</name>) <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>int</name></type> <name>i_nb_inputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_inputs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>b_add_stream_any_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_waiting_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_add_stream_start</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>sout_mux_query_e</name>
<block>{

<decl><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></decl>, 

<decl><name>MUX_GET_MIME</name></decl>, 
}</block>;</enum>

<struct>struct <name>sout_input_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>VLC_API</name> <name>sout_mux_t</name> <modifier>*</modifier></type> <name>sout_MuxNew</name><argument_list>( <argument><expr><name>sout_access_out_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_API</name> <name>sout_input_t</name> <modifier>*</modifier></type><name>sout_MuxAddStream</name><argument_list>( <argument><expr><name>sout_mux_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>es_format_t</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_MuxDeleteStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_MuxDelete</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>sout_MuxSendBuffer</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>int</name></type> <name>sout_MuxGetStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_MuxFlush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sout_MuxControl</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>



<enum>enum <name>sout_stream_query_e</name> <block>{
<decl><name>SOUT_STREAM_EMPTY</name></decl>, 
<decl><name>SOUT_STREAM_WANTS_SUBSTREAMS</name></decl>, 
<decl><name>SOUT_STREAM_ID_SPU_HIGHLIGHT</name></decl>, 
}</block>;</enum>

<struct>struct <name>sout_stream_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_instance_t</name> <modifier>*</modifier></type><name>p_sout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>


<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_add</name>)<parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_del</name>)<parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_send</name>)<parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_control</name>)<parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_flush</name>)<parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pace_nocontrol</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_StreamChainDelete</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_first</name></decl></parameter>, <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_last</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>VLC_API</name> <name>sout_stream_t</name> <modifier>*</modifier></type><name>sout_StreamChainNew</name><argument_list>(<argument><expr><name>sout_instance_t</name> <operator>*</operator><name>p_sout</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_chain</name></expr></argument>, <argument><expr><name>sout_stream_t</name> <operator>*</operator><name>p_next</name></expr></argument>, <argument><expr><name>sout_stream_t</name> <operator>*</operator><operator>*</operator><name>p_last</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>sout_StreamIdAdd</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>pf_add</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sout_StreamIdDel</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pf_del</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sout_StreamIdSend</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>pf_send</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sout_StreamFlush</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pf_flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pf_flush</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sout_StreamControlVa</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name></expr> ?</condition><then> <expr><call><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sout_StreamControl</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>sout_StreamControlVa</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>





<function_decl><type><name>VLC_API</name> <name>encoder_t</name> <modifier>*</modifier></type> <name>sout_EncoderCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sout_EncoderCreate</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sout_EncoderCreate(VLC_OBJECT(o),s)</cpp:value></cpp:define>




<decl_stmt><decl><type><name>VLC_API</name> <name>session_descriptor_t</name><modifier>*</modifier></type> <name>sout_AnnounceRegisterSDP</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument> )</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>
<function_decl><type><name>VLC_API</name> <name>void</name></type> <name>sout_AnnounceUnRegister</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>session_descriptor_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sout_AnnounceRegisterSDP</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>sdp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sout_AnnounceRegisterSDP(VLC_OBJECT (o), sdp, addr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sout_AnnounceUnRegister</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sout_AnnounceUnRegister(VLC_OBJECT (o), a)</cpp:value></cpp:define>




<struct_decl>struct <name>sockaddr</name>;</struct_decl>
<struct_decl>struct <name>vlc_memstream</name>;</struct_decl>

<decl_stmt><decl><type><name>VLC_API</name> <name>int</name></type> <name>vlc_sdp_Start</name><argument_list>(<argument><expr>struct <name>vlc_memstream</name> <operator>*</operator></expr></argument>, <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>obj</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>cfgpref</name></expr></argument>,
<argument><expr><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>slen</name></expr></argument>,
<argument><expr><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><name>addr</name></expr></argument>, <argument><expr><name>size_t</name> <name>alen</name></expr></argument>)</argument_list> <name>VLC_USED</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
