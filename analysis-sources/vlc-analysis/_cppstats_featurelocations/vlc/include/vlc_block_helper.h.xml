<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\include\vlc_block_helper.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_BLOCK_HELPER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BLOCK_HELPER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>block_bytestream_t</name>
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_block_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_base_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name></decl>;</decl_stmt> 
}</block></struct></type> <name>block_bytestream_t</name>;</typedef>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_BytestreamInit</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_base_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_BytestreamRelease</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_BytestreamEmpty</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_BytestreamRelease</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_BytestreamInit</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_BytestreamFlush</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>block</name> <operator>!=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>-=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_base_offset</name></name> <operator>-=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while<condition>( <expr><name>block</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>-=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>block_BytestreamPush</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bytestream</name><operator>-&gt;</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_block</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>block_BytestreamRemaining</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>&gt;</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_base_offset</name></name> <operator>+</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name> <operator>)</operator></expr> ?</condition><then>
<expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>-</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_base_offset</name></name> <operator>-</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VLC_USED</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>block_BytestreamPop</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_chain</name></name></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_old</name> <init>= <expr><name>p_block</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_old</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_block_old</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_total</name></name> <operator>-=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_WaitBytes</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_PeekBytes</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name>i_data</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr></init></decl>;</init>
<condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_size</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_GetBytes</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name>i_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_block</name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</init>
<condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&amp;&amp;</operator> <name>p_data</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_base_offset</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name> <operator>=</operator> <name>i_offset</name> <operator>+</operator> <name>i_copy</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_SkipBytes</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>block_GetBytes</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_SkipByte</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>block_GetBytes</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_PeekOffsetBytes</name><parameter_list>( <parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_peek_offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_remain</name> <init>= <expr><call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><name>p_bytestream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_remain</name> <operator>&lt;</operator> <name>i_data</name> <operator>+</operator> <name>i_peek_offset</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name>i_peek_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_block</name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</init>
<condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_size</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_size</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>block_startcode_helper_t</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>block_startcode_matcher_t</name>)<parameter_list>( <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_FindStartcodeFromOffset</name><parameter_list>(
<parameter><decl><type><name>block_bytestream_t</name> <modifier>*</modifier></type><name>p_bytestream</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_startcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_startcode_length</name></decl></parameter>,
<parameter><decl><type><name>block_startcode_helper_t</name></type> <name>p_startcode_helper</name></decl></parameter>,
<parameter><decl><type><name>block_startcode_matcher_t</name></type> <name>p_startcode_matcher</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_block_backup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name></decl>, <decl><type ref="prev"/><name>i_offset_backup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_caller_offset_backup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_match</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>*</operator><name>pi_offset</name> <operator>+</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>i_block_offset</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>p_block</name> <operator>=</operator> <name><name>p_bytestream</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</init>
<condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>-=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_offset</name> <operator>=</operator> <name>i_size</name></expr>;</init> <condition><expr><name>i_offset</name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</condition> <incr><expr><name>i_offset</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_startcode_helper</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>i_match</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>i_startcode_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_res</name> <init>= <expr><call><name>p_startcode_helper</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_res</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>+=</operator> <name>i_offset</name> <operator>+</operator> <operator>(</operator><name>p_res</name> <operator>-</operator> <operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <operator>(</operator><name>i_startcode_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_matched</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>p_startcode_matcher</name> <operator>)</operator></expr>
?</condition><then> <expr><call><name>p_startcode_matcher</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_match</name></expr></argument>, <argument><expr><name>p_startcode</name></expr></argument> )</argument_list></call></expr>
</then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>==</operator> <name><name>p_startcode</name><index>[<expr><name>i_match</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_matched</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_match</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block_backup</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset_backup</name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_caller_offset_backup</name> <operator>=</operator> <operator>*</operator><name>pi_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_match</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>i_startcode_length</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>+=</operator> <name>i_offset</name> <operator>-</operator> <name>i_match</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_match</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>i_match</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_block_backup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name>i_offset_backup</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_caller_offset_backup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>-=</operator> <name>i_match</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
