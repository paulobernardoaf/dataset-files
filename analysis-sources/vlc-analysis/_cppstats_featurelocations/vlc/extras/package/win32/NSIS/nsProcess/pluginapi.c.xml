<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\extras\package\win32\NSIS\nsProcess\pluginapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pluginapi.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g_stringsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>g_stacktop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>g_variables</name></decl>;</decl_stmt>



<function><type><name>int</name> <name>NSISCALL</name></type> <name>popstring</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stack_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_stacktop</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>g_stacktop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>th</name><operator>=</operator><operator>(</operator><operator>*</operator><name>g_stacktop</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lstrcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name><name>th</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g_stacktop</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>popstringn</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stack_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_stacktop</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>g_stacktop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>th</name><operator>=</operator><operator>(</operator><operator>*</operator><name>g_stacktop</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lstrcpyn</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name><name>th</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,<argument><expr><ternary><condition><expr><name>maxlen</name></expr>?</condition><then><expr><name>maxlen</name></expr></then><else>:<expr><name>g_stringsize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>g_stacktop</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>pushstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stack_t</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_stacktop</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>th</name><operator>=</operator><operator>(</operator><name>stack_t</name><operator>*</operator><operator>)</operator><call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>,<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stack_t</name></expr></argument>)</argument_list></sizeof><operator>+</operator><operator>(</operator><name>g_stringsize</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lstrcpyn</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>next</name></name><operator>=</operator><operator>*</operator><name>g_stacktop</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g_stacktop</name><operator>=</operator><name>th</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TCHAR</name> <modifier>*</modifier> <name>NSISCALL</name></type> <name>getuservariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>varnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>varnum</name> <operator>&gt;=</operator> <name>__INST_LAST</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>g_variables</name><operator>+</operator><name>varnum</name><operator>*</operator><name>g_stringsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>setuservariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&lt;</operator> <name>__INST_LAST</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>lstrcpy</name><argument_list>(<argument><expr><name>g_variables</name> <operator>+</operator> <name>varnum</name><operator>*</operator><name>g_stringsize</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringA</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name> <init>= <expr><operator>(</operator><name>wchar_t</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>g_stringsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><call><name>popstring</name><argument_list>(<argument><expr><name>wideStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>wideStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringNA</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>realLen</name> <init>= <expr><ternary><condition><expr><name>maxlen</name></expr> ?</condition><then> <expr><name>maxlen</name></expr> </then><else>: <expr><name>g_stringsize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name> <init>= <expr><operator>(</operator><name>wchar_t</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>realLen</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><call><name>popstringn</name><argument_list>(<argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>realLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>realLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>wideStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>PushStringA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name> <init>= <expr><operator>(</operator><name>wchar_t</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>g_stringsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pushstring</name><argument_list>(<argument><expr><name>wideStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>wideStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lstrcpyW</name><argument_list>(<argument><expr><name>wideStr</name></expr></argument>, <argument><expr><call><name>getuservariable</name><argument_list>(<argument><expr><name>varnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name> <init>= <expr><call><name>getuservariable</name><argument_list>(<argument><expr><name>varnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>SetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ansiStr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&lt;</operator> <name>__INST_LAST</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name> <init>= <expr><name>g_variables</name> <operator>+</operator> <name>varnum</name> <operator>*</operator> <name>g_stringsize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringW</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><call><name>popstring</name><argument_list>(<argument><expr><name>ansiStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>ansiStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>PopStringNW</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>realLen</name> <init>= <expr><ternary><condition><expr><name>maxlen</name></expr> ?</condition><then> <expr><name>maxlen</name></expr> </then><else>: <expr><name>g_stringsize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>realLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><call><name>popstringn</name><argument_list>(<argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>realLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>realLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>ansiStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>PushStringW</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GPTR</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pushstring</name><argument_list>(<argument><expr><name>ansiStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><operator>(</operator><name>HGLOBAL</name><operator>)</operator><name>ansiStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name> <init>= <expr><call><name>getuservariable</name><argument_list>(<argument><expr><name>varnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>GetUserVariableA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lstrcpyA</name><argument_list>(<argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><call><name>getuservariable</name><argument_list>(<argument><expr><name>varnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>SetUserVariableW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>varnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>wideStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wideStr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>varnum</name> <operator>&lt;</operator> <name>__INST_LAST</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ansiStr</name> <init>= <expr><name>g_variables</name> <operator>+</operator> <name>varnum</name> <operator>*</operator> <name>g_stringsize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wideStr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ansiStr</name></expr></argument>, <argument><expr><name>g_stringsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>int</name> <name>NSISCALL</name></type> <name>myatoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>v</name><operator>&lt;&lt;=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>v</name><operator>&lt;&lt;=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>-</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name><operator>*=</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>NSISCALL</name></type> <name>myatou</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>v</name><operator>*=</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>myatoi_or</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TCHAR</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>v</name><operator>&lt;&lt;=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>v</name><operator>&lt;&lt;=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>-</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name><operator>*=</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>+=</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>myatoi_or</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>popint</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>popstringn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>myatoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>NSISCALL</name></type> <name>popint_or</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>popstringn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>myatoi_or</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NSISCALL</name></type> <name>pushint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pushstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
