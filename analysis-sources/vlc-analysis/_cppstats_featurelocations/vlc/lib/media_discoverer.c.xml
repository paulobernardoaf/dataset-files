<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\lib\media_discoverer.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_discoverer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_internal.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_list_internal.h"</cpp:file></cpp:include> 

<struct>struct <name>libvlc_media_discoverer_t</name>
<block>{
<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type> <name>p_libvlc_instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type> <name>p_sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>catname_to_submedialist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>









<function><type><specifier>static</specifier> <name>void</name></type> <name>services_discovery_item_added</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type><name>p_mdis</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name> <init>= <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>libvlc_media_new_from_input_item</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument>,
<argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else


if<condition>( <expr><name>psz_cat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_mlist</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mdis</name><operator>-&gt;</operator><name>catname_to_submedialist</name></name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_mlist</name> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_catmd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_catmd</name> <operator>=</operator> <call><name>libvlc_media_new_as_node</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mlist</name> <operator>=</operator> <call><name>libvlc_media_subitems</name><argument_list>( <argument><expr><name>p_catmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlist</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mdis</name><operator>-&gt;</operator><name>catname_to_submedialist</name></name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>, <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_internal_add_media</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>p_catmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_catmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_internal_add_media</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument>, <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>services_discovery_item_removed</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type><name>p_mdis</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_index</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>==</operator> <name>p_item</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_internal_remove_index</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type>
<name>libvlc_media_discoverer_new</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type> <name>p_inst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"podcast"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type><name>p_mdis</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_mdis</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_mdis</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_mdis</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name> <operator>=</operator> <name>p_inst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name> <operator>=</operator> <call><name>libvlc_media_list_new</name><argument_list>( <argument><expr><name>p_inst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name><operator>-&gt;</operator><name>b_read_only</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mdis</name><operator>-&gt;</operator><name>catname_to_submedialist</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_retain</name><argument_list>( <argument><expr><name>p_inst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_mdis</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>services_discovery_callbacks</name></name></type> <name>sd_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>item_added</name> <operator>=</operator> <name>services_discovery_item_added</name></expr>,
<expr><operator>.</operator><name>item_removed</name> <operator>=</operator> <name>services_discovery_item_removed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>LIBVLC_API</name> <name>int</name></type>
<name>libvlc_media_discoverer_start</name><parameter_list>( <parameter><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type> <name>p_mdis</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>services_discovery_owner_t</name></name></type> <name>owner</name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name>sd_cbs</name></expr>,
<expr><name>p_mdis</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>=</operator> <call><name>vlc_sd_Create</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name><name>p_mdis</name><operator>-&gt;</operator><name>p_libvlc_instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>,
<argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"%s: no such discovery module found"</literal></expr></argument>, <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>LIBVLC_API</name> <name>void</name></type>
<name>libvlc_media_discoverer_stop</name><parameter_list>( <parameter><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type> <name>p_mdis</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name> <init>= <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_internal_end_reached</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>( <argument><expr><name>p_mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sd_Destroy</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>MediaListDictValueRelease</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>mlist</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name>mlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>obj</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libvlc_media_discoverer_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type> <name>p_mdis</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_discoverer_stop</name><argument_list>( <argument><expr><name>p_mdis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mdis</name><operator>-&gt;</operator><name>catname_to_submedialist</name></name></expr></argument>,
<argument><expr><name>MediaListDictValueRelease</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_release</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mdis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type>
<name>libvlc_media_discoverer_media_list</name><parameter_list>( <parameter><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type> <name>p_mdis</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_retain</name><argument_list>( <argument><expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_mlist</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>libvlc_media_discoverer_is_running</name><parameter_list>(<parameter><decl><type><name>libvlc_media_discoverer_t</name> <modifier>*</modifier></type> <name>p_mdis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_mdis</name><operator>-&gt;</operator><name>p_sd</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libvlc_media_discoverer_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_discoverer_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_longname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>libvlc_media_discoverer_list_get</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>p_inst</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_discoverer_category_t</name></type> <name>i_cat</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_discoverer_description_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_services</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_inst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppp_services</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_core_cat</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>libvlc_media_discoverer_devices</name></expr>:</case>
<expr_stmt><expr><name>i_core_cat</name> <operator>=</operator> <name>SD_CAT_DEVICES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_media_discoverer_lan</name></expr>:</case>
<expr_stmt><expr><name>i_core_cat</name> <operator>=</operator> <name>SD_CAT_LAN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_media_discoverer_podcasts</name></expr>:</case>
<expr_stmt><expr><name>i_core_cat</name> <operator>=</operator> <name>SD_CAT_INTERNET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_media_discoverer_localdirs</name></expr>:</case>
<expr_stmt><expr><name>i_core_cat</name> <operator>=</operator> <name>SD_CAT_MYCOMPUTER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_names</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ppsz_longnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_categories</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ppsz_names</name> <operator>=</operator> <call><name>vlc_sd_GetNames</name><argument_list>( <argument><expr><name><name>p_inst</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_longnames</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_categories</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_names</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppp_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_services</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name> <init>= <expr><name>ppsz_names</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_category</name> <init>= <expr><name>p_categories</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>ppsz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_name</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_category</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_category</name> <operator>==</operator> <name>i_core_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_nb_services</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>libvlc_media_discoverer_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_services</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nb_services</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>




<expr_stmt><expr><name>pp_services</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_nb_services</name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_media_discoverer_description_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_services</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_nb_services</name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_media_discoverer_description_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pp_services</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_services</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_services</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_services</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_services</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_longname</name> <init>= <expr><name>ppsz_longnames</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ppsz_name</name> <operator>=</operator> <name>ppsz_names</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_category</name> <operator>=</operator> <name>p_categories</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_service_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_discoverer_description_t</name> <modifier>*</modifier></type><name>p_service</name> <init>= <expr><name>p_services</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>ppsz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_name</name><operator>++</operator></expr><operator>,</operator> <expr><name>ppsz_longname</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_category</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>pp_services</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_category</name> <operator>==</operator> <name>i_core_cat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <operator>*</operator><name>ppsz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>psz_longname</name></name> <operator>=</operator> <operator>*</operator><name>ppsz_longname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name>i_cat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_services</name><index>[<expr><name>i_service_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_service</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_longname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_names</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_longnames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_categories</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_services</name> <operator>=</operator> <name>pp_services</name></expr>;</expr_stmt>
<return>return <expr><name>i_nb_services</name></expr>;</return>
</block_content>}</block></function>
</unit>
