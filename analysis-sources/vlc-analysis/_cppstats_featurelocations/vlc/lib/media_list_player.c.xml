<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\lib\media_list_player.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_list_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_events.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_internal.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_list_path.h"</cpp:file></cpp:include>















<struct>struct <name>libvlc_media_list_player_t</name>
<block>{
<decl_stmt><decl><type><name>libvlc_event_manager_t</name></type> <name>event_manager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seek_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>object_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>mp_callback_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>seek_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>current_playing_item_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_current_playing_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type> <name>p_mi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_playback_mode_t</name></type> <name>e_playback_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><specifier>static</specifier>
<name>int</name></type> <name>set_relative_playlist_position_and_play</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>p_mlp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_relative_position</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>object_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>object_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>assert_locked</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_mlp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_event_manager_t</name> <modifier>*</modifier></type> <name>mlist_em</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>libvlc_media_list_event_manager</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>libvlc_event_manager_t</name> <modifier>*</modifier></type> <name>mplayer_em</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>libvlc_media_player_event_manager</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>libvlc_media_list_path_t</name></type>
<name>get_next_path</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_parent_of_playing_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_sublist_of_playing_item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>libvlc_media_list_path_with_root_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sublist_of_playing_item</name> <operator>=</operator> <call><name>libvlc_media_list_sublist_at_path</name><argument_list>(
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>,
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_sublist_of_playing_item</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name>p_sublist_of_playing_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_sublist_of_playing_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>libvlc_media_list_path_copy_by_appending</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_parent_of_playing_item</name> <operator>=</operator> <call><name>libvlc_media_list_parentlist_at_path</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>,
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name>libvlc_media_list_path_depth</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>p_parent_of_playing_item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_path_copy</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> 


<while>while<condition>(<expr><name><name>ret</name><index>[<expr><name>depth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name>p_parent_of_playing_item</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>b_loop</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_parent_of_playing_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_parent_of_playing_item</name> <operator>=</operator> <call><name>libvlc_media_list_parentlist_at_path</name><argument_list>(
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>,
<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_parent_of_playing_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>libvlc_media_list_path_t</name></type>
<name>find_last_item</name><parameter_list>( <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_list_path_t</name></type> <name>current_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_sublist</name> <init>= <expr><call><name>libvlc_media_list_sublist_at_path</name><argument_list>(<argument><expr><name>p_mlist</name></expr></argument>, <argument><expr><name>current_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>last_item_path</name> <init>= <expr><name>current_item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_sublist</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name>p_sublist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>last_item_path</name> <operator>=</operator> <call><name>libvlc_media_list_path_copy_by_appending</name><argument_list>(<argument><expr><name>current_item</name></expr></argument>, <argument><expr><name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_item_path</name> <operator>=</operator> <call><name>find_last_item</name><argument_list>(<argument><expr><name>p_mlist</name></expr></argument>, <argument><expr><name>last_item_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_sublist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>last_item_path</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>libvlc_media_list_path_t</name></type>
<name>get_previous_path</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_parent_of_playing_item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>libvlc_media_list_path_with_root_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_parent_of_playing_item</name> <operator>=</operator> <call><name>libvlc_media_list_parentlist_at_path</name><argument_list>(
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>,
<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name>libvlc_media_list_path_depth</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>p_parent_of_playing_item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libvlc_media_list_path_copy</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>ret</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>b_loop</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>libvlc_media_list_count</name><argument_list>(<argument><expr><name>p_parent_of_playing_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>find_last_item</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>





<expr_stmt><expr><name><name>ret</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>find_last_item</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name>p_parent_of_playing_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>playlist_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type><name>mlp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>mlp</name><operator>-&gt;</operator><name>dead</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mlp</name><operator>-&gt;</operator><name>seek_offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_relative_playlist_position_and_play</name><argument_list>(<argument><expr><name>mlp</name></expr></argument>, <argument><expr><name><name>mlp</name><operator>-&gt;</operator><name>seek_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mlp</name><operator>-&gt;</operator><name>seek_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mlp</name><operator>-&gt;</operator><name>seek_pending</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>media_player_reached_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type> <name>p_event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name> <init>= <expr><name>p_user_data</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>seek_offset</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>seek_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mlist_item_deleted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>libvlc_event_t</name> <modifier>*</modifier></type> <name>p_event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_event</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_user_data</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>install_playlist_observer</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_attach</name><argument_list>(<argument><expr><call><name>mlist_em</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libvlc_MediaListItemDeleted</name></expr></argument>, <argument><expr><name>mlist_item_deleted</name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>uninstall_playlist_observer</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><call><name>mlist_em</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libvlc_MediaListItemDeleted</name></expr></argument>, <argument><expr><name>mlist_item_deleted</name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>install_media_player_observer</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_event_attach</name><argument_list>(<argument><expr><call><name>mplayer_em</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libvlc_MediaPlayerEndReached</name></expr></argument>, <argument><expr><name>media_player_reached_end</name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>uninstall_media_player_observer</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_detach</name><argument_list>(<argument><expr><call><name>mplayer_em</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libvlc_MediaPlayerEndReached</name></expr></argument>, <argument><expr><name>media_player_reached_end</name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_current_playing_item</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_list_path_t</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name> <operator>!=</operator> <name>path</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_md</name> <operator>=</operator> <call><name>libvlc_media_list_item_at_path</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_md</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>uninstall_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_set_media</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>, <argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>








<function><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type>
<name>libvlc_media_list_player_new</name><parameter_list>(<parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type> <name>p_instance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_mlp</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libvlc_media_list_player_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_mlp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>seek_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>dead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>object_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>seek_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_manager_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name> <operator>=</operator> <call><name>libvlc_media_player_new</name><argument_list>(<argument><expr><name>p_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>install_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>playlist_thread</name></expr></argument>, <argument><expr><name>p_mlp</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_player_release</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_mlp</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>libvlc_event_manager_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_release</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mlp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_mlp</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>dead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>seek_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>mp_callback_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>uninstall_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_release</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uninstall_playlist_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_manager_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_retain</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mlp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type>
<name>libvlc_media_list_player_event_manager</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_set_media_player</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type> <name>p_mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_oldmi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_retain</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uninstall_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_oldmi</name> <operator>=</operator> <name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name> <operator>=</operator> <name>p_mi</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>install_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_release</name><argument_list>(<argument><expr><name>p_oldmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type> <name>libvlc_media_list_player_get_media_player</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_player_retain</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_set_media_list</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_list_t</name> <modifier>*</modifier></type> <name>p_mlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uninstall_playlist_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_release</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_retain</name><argument_list>(<argument><expr><name>p_mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name> <operator>=</operator> <name>p_mlist</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install_playlist_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_play</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_relative_playlist_position_and_play</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>libvlc_media_list_player_pause</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_pause</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_list_player_set_pause</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_set_pause</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>, <argument><expr><name>do_pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>libvlc_media_list_player_is_playing</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_state_t</name></type> <name>state</name> <init>= <expr><call><name>libvlc_media_player_get_state</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>state</name> <operator>==</operator> <name>libvlc_Opening</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>libvlc_Playing</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>libvlc_state_t</name></type>
<name>libvlc_media_list_player_get_state</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>libvlc_media_player_get_state</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_list_player_play_item_at_index</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>path</name> <init>= <expr><call><name>libvlc_media_list_path_with_root_index</name><argument_list>(<argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_current_playing_item</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name> <init>= <expr><call><name>libvlc_media_player_get_media</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_md</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaListPlayerNextItemSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_list_player_next_item_set</name><operator>.</operator><name>item</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_list_player_play_item</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>, <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>path</name> <init>= <expr><call><name>libvlc_media_list_path_of_item</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Item not found in media list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_current_playing_item</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>uninstall_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_player_stop_async</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>install_media_player_observer</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaListPlayerStopped</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_stop_async</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stop</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>set_relative_playlist_position_and_play</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_relative_position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_locked</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"No media list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_lock</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_list_path_t</name></type> <name>path</name> <init>= <expr><name><name>p_mlp</name><operator>-&gt;</operator><name>current_playing_item_path</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_mlp</name><operator>-&gt;</operator><name>e_playback_mode</name></name> <operator>!=</operator> <name>libvlc_playback_mode_repeat</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_loop</name> <init>= <expr><operator>(</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>e_playback_mode</name></name> <operator>==</operator> <name>libvlc_playback_mode_loop</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i_relative_position</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>get_next_path</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>b_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_current_playing_item</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>i_relative_position</name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>i_relative_position</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>get_previous_path</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>b_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_current_playing_item</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i_relative_position</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>set_current_playing_item</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MEDIA_LIST_PLAYER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Playing:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_list_path_dump</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaListPlayerPlayed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_player_play</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_media_list_unlock</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaListPlayerNextItemSet</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name> <init>= <expr><call><name>libvlc_media_list_item_at_path</name><argument_list>(<argument><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>p_mlist</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_list_player_next_item_set</name><operator>.</operator><name>item</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mlp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_list_player_next</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failure</name> <init>= <expr><call><name>set_relative_playlist_position_and_play</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>failure</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_list_player_previous</name><parameter_list>(<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failure</name> <init>= <expr><call><name>set_relative_playlist_position_and_play</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>failure</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_list_player_set_playback_mode</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_list_player_t</name> <modifier>*</modifier></type> <name>p_mlp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_playback_mode_t</name></type> <name>e_mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mlp</name><operator>-&gt;</operator><name>e_playback_mode</name></name> <operator>=</operator> <name>e_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><name>p_mlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
