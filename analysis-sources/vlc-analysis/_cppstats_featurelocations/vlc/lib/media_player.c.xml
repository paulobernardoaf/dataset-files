<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\lib\media_player.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_http.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_internal.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_player_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"renderer_discoverer_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_INIT</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>snapshot_was_taken</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>media_attach_preparsed_event</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>media_detach_preparsed_event</name><parameter_list>(<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>libvlc_media_player_destroy</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_current_media_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>new_media</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><ternary><condition><expr><name>md</name></expr> ?</condition><then> <expr><name><name>md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_media</name> <operator>==</operator> <name>media</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>md</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>media_detach_preparsed_event</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_media</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <call><name>libvlc_media_new_from_input_item</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument>,
<argument><expr><name>new_media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>media_attach_preparsed_event</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerMediaChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_media_changed</name><operator>.</operator><name>new_media</name></name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>new_state</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>new_state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerStopped</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerEndReached</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerOpening</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerPlaying</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerPaused</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_error_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_error</name></name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_PLAYER_ERROR_NONE</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerNothingSpecial</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_ERROR_GENERIC</name></expr>:</case>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerEncounteredError</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_buffering_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_buffering</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerBuffering</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_buffering</name><operator>.</operator><name>new_cache</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name>new_buffering</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_capabilities_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_caps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_caps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>old_seekable</name> <init>= <expr><name>old_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_SEEK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>new_seekable</name> <init>= <expr><name>new_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_SEEK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_seekable</name> <operator>!=</operator> <name>old_seekable</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerSeekableChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_seekable_changed</name><operator>.</operator><name>new_seekable</name></name> <operator>=</operator> <name>new_seekable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>old_pauseable</name> <init>= <expr><name>old_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_PAUSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>new_pauseable</name> <init>= <expr><name>new_caps</name> <operator>&amp;</operator> <name>VLC_PLAYER_CAP_PAUSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_pauseable</name> <operator>!=</operator> <name>old_pauseable</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerPausableChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_pausable_changed</name><operator>.</operator><name>new_pausable</name></name> <operator>=</operator> <name>new_pauseable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_position_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>new_time</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_pos</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerPositionChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_position_changed</name><operator>.</operator><name>new_position</name></name> <operator>=</operator> <name>new_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerTimeChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_time_changed</name><operator>.</operator><name>new_time</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>new_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_length_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>new_length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerLengthChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_length_changed</name><operator>.</operator><name>new_length</name></name> <operator>=</operator>
<call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>new_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>track_type_from_cat</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>cat</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><name>libvlc_track_video</name></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><name>libvlc_track_audio</name></expr>;</return>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><name>libvlc_track_text</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>libvlc_track_unknown</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_track_list_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>VLC_PLAYER_LIST_ADDED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerESAdded</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>VLC_PLAYER_LIST_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerESDeleted</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_es_changed</name><operator>.</operator><name>i_type</name></name> <operator>=</operator>
<call><name>track_type_from_cat</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_es_changed</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_track_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>unselected_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>selected_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>unselected_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerESSelected</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_id</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>selected_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_es_changed</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <call><name>track_type_from_cat</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_es_changed</name><operator>.</operator><name>i_id</name></name> <operator>=</operator>
<call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name>selected_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_program_list_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_list_action</name></name></type> <name>action</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>prgm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>prgm</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>selected</name> <init>=
<expr><call><name>vlc_player_GetSelectedProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selected</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerScrambledChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_scrambled_changed</name><operator>.</operator><name>new_scrambled</name></name> <operator>=</operator> <name><name>selected</name><operator>-&gt;</operator><name>scrambled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_program_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unselected_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>selected_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>unselected_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selected_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>program</name> <init>=
<expr><call><name>vlc_player_GetSelectedProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerScrambledChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_scrambled_changed</name><operator>.</operator><name>new_scrambled</name></name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>scrambled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_title_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>new_title</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>new_idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>new_title</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerTitleChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_title_changed</name><operator>.</operator><name>new_title</name></name> <operator>=</operator> <name>new_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_chapter_selection_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>title_idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>new_chapter</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>new_chapter_idx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>title</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>title_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>new_chapter</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerChapterChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_chapter_changed</name><operator>.</operator><name>new_chapter</name></name> <operator>=</operator> <name>new_chapter_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_media_subitems_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>new_subitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr> ?</condition><then> <expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>media</name> <operator>==</operator> <name>current</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_add_subtree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument>, <argument><expr><name>new_subitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_cork_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>cork_count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>cork_count</name></expr> ?</condition><then> <expr><name>libvlc_MediaPlayerCorked</name></expr>
</then><else>: <expr><name>libvlc_MediaPlayerUncorked</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_vout_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_vout_action</name></name></type> <name>action</name></decl></parameter>,
<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>,
<parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vout</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>vlc_player_vout_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerVout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_vout</name><operator>.</operator><name>new_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_volume_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_volume</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerAudioVolume</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_audio_volume</name><operator>.</operator><name>volume</name></name> <operator>=</operator> <name>new_volume</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_mute_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>new_muted</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>new_muted</name></expr> ?</condition><then> <expr><name>libvlc_MediaPlayerMuted</name></expr>
</then><else>: <expr><name>libvlc_MediaPlayerUnmuted</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_audio_device_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerAudioDevice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_audio_device</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name></type> <name>vlc_player_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_current_media_changed</name> <operator>=</operator> <name>on_current_media_changed</name></expr>,
<expr><operator>.</operator><name>on_state_changed</name> <operator>=</operator> <name>on_state_changed</name></expr>,
<expr><operator>.</operator><name>on_error_changed</name> <operator>=</operator> <name>on_error_changed</name></expr>,
<expr><operator>.</operator><name>on_buffering_changed</name> <operator>=</operator> <name>on_buffering_changed</name></expr>,
<expr><operator>.</operator><name>on_capabilities_changed</name> <operator>=</operator> <name>on_capabilities_changed</name></expr>,
<expr><operator>.</operator><name>on_position_changed</name> <operator>=</operator> <name>on_position_changed</name></expr>,
<expr><operator>.</operator><name>on_length_changed</name> <operator>=</operator> <name>on_length_changed</name></expr>,
<expr><operator>.</operator><name>on_track_list_changed</name> <operator>=</operator> <name>on_track_list_changed</name></expr>,
<expr><operator>.</operator><name>on_track_selection_changed</name> <operator>=</operator> <name>on_track_selection_changed</name></expr>,
<expr><operator>.</operator><name>on_program_list_changed</name> <operator>=</operator> <name>on_program_list_changed</name></expr>,
<expr><operator>.</operator><name>on_program_selection_changed</name> <operator>=</operator> <name>on_program_selection_changed</name></expr>,
<expr><operator>.</operator><name>on_title_selection_changed</name> <operator>=</operator> <name>on_title_selection_changed</name></expr>,
<expr><operator>.</operator><name>on_chapter_selection_changed</name> <operator>=</operator> <name>on_chapter_selection_changed</name></expr>,
<expr><operator>.</operator><name>on_media_subitems_changed</name> <operator>=</operator> <name>on_media_subitems_changed</name></expr>,
<expr><operator>.</operator><name>on_cork_changed</name> <operator>=</operator> <name>on_cork_changed</name></expr>,
<expr><operator>.</operator><name>on_vout_changed</name> <operator>=</operator> <name>on_vout_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_aout_cbs</name></name></type> <name>vlc_player_aout_cbs</name> <init>= <expr><block>{
<expr><operator>.</operator><name>on_volume_changed</name> <operator>=</operator> <name>on_volume_changed</name></expr>,
<expr><operator>.</operator><name>on_mute_changed</name> <operator>=</operator> <name>on_mute_changed</name></expr>,
<expr><operator>.</operator><name>on_device_changed</name> <operator>=</operator> <name>on_audio_device_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type> <name>snapshot_was_taken</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaPlayerSnapshotTaken</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_player_snapshot_taken</name><operator>.</operator><name>psz_filename</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_item_preparsed_changed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_event</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>input_item_preparsed_changed</name><operator>.</operator><name>new_status</name></name> <operator>&amp;</operator> <name>ITEM_PREPARSED</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>libvlc_MediaParsedChanged</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>u</name><operator>.</operator><name>media_parsed_changed</name><operator>.</operator><name>new_status</name></name> <operator>=</operator> <name>libvlc_media_parsed_status_done</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_send</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>media_attach_preparsed_event</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_event_attach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,
<argument><expr><name>vlc_InputItemPreparsedChanged</name></expr></argument>,
<argument><expr><name>input_item_preparsed_changed</name></expr></argument>, <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>media_detach_preparsed_event</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_event_detach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,
<argument><expr><name>vlc_InputItemPreparsedChanged</name></expr></argument>,
<argument><expr><name>input_item_preparsed_changed</name></expr></argument>,
<argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type>
<name>libvlc_media_player_new</name><parameter_list>( <parameter><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>instance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type> <name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>vlc_object_create</name> <argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>p_libvlc_int</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name><operator>|</operator><name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"sout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"demux-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name><operator>|</operator><name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"gl"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"gles2"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-lock"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-unlock"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-display"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-data"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-setup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-cleanup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-chroma"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-width"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-height"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-pitch"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-type"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-setup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-cleanup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-resize-cb"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-update-output"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-swap"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-get-proc-address"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-make-current"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-metadata"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-select-plane"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"drawable-xid"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"drawable-hwnd"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"drawable-nsobject"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"drawable-androidwindow"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"video-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"sub-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-marquee"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-color"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-opacity"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-position"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-refresh"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-size"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-timeout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-x"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"marq-y"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-file"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-x"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-y"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-delay"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-repeat"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-opacity"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"logo-position"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"aout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"audio-device"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"mute"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"volume"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"corks"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-data"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-setup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-cleanup"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-play"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-pause"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-resume"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-flush"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-drain"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-set-volume"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-format"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-rate"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-channels"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"video-title-show"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"video-title-position"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"video-title-timeout"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"equalizer-preamp"</literal></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"equalizer-vlcfreqs"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>cookies</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cookies</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <call><name>vlc_http_cookies_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>cookies</name><operator>.</operator><name>p_address</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"http-cookies"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetChecked</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"http-cookies"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>, <argument><expr><name>cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name> <operator>=</operator> <name>instance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name> <operator>=</operator> <call><name>vlc_player_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VLC_PLAYER_LOCK_REENTRANT</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_player_cbs</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>aout_listener</name></name> <operator>=</operator>
<call><name>vlc_player_aout_AddListener</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_player_aout_cbs</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>aout_listener</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error3</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_event_manager_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"snapshot-file"</literal></expr></argument>, <argument><expr><name>snapshot_was_taken</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_retain</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mp</name></expr>;</return>

<label><name>error3</name>:</label>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>error2</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>error1</name>:</label>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type>
<name>libvlc_media_player_new_from_media</name><parameter_list>( <parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type> <name>p_md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type> <name>p_mi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_mi</name> <operator>=</operator> <call><name>libvlc_media_player_new</name><argument_list>( <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_mi</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_retain</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>media_attach_preparsed_event</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>media_detach_preparsed_event</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_mi</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>libvlc_media_player_destroy</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"snapshot-file"</literal></expr></argument>, <argument><expr><name>snapshot_was_taken</name></expr></argument>, <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_aout_RemoveListener</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>aout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Delete</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>media_detach_preparsed_event</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>libvlc_event_manager_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_mi</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_http_cookie_jar_t</name> <modifier>*</modifier></type><name>cookies</name> <init>= <expr><call><name>var_GetAddress</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"http-cookies"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>cookies</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"http-cookies"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_http_cookies_destroy</name><argument_list>( <argument><expr><name>cookies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_instance_t</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_release</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>libvlc_media_player_release</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>destroy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destroy</name> <operator>=</operator> <operator>!</operator><operator>--</operator><name><name>p_mi</name><operator>-&gt;</operator><name>i_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>destroy</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_player_destroy</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>libvlc_media_player_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mi</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>libvlc_media_player_set_media</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>media_detach_preparsed_event</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>libvlc_media_release</name><argument_list>( <argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_md</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_media_retain</name><argument_list>( <argument><expr><name>p_md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>media_attach_preparsed_event</name><argument_list>(<argument><expr><name>p_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name> <operator>=</operator> <name>p_md</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetCurrentMedia</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name><name>p_md</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name> <operator>=</operator> <name><name>p_md</name><operator>-&gt;</operator><name>p_libvlc_instance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>libvlc_media_t</name> <modifier>*</modifier></type>
<name>libvlc_media_player_get_media</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_media_t</name> <modifier>*</modifier></type><name>p_m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_m</name> <operator>=</operator> <name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_m</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_media_retain</name><argument_list>( <argument><expr><name>p_m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_m</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>libvlc_event_manager_t</name> <modifier>*</modifier></type>
<name>libvlc_media_player_event_manager</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_mi</name><operator>-&gt;</operator><name>event_manager</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_player_play</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_IsPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_set_pause</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paused</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paused</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_CanPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_player_pause</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_TogglePause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>libvlc_media_player_is_playing</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_player_IsPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_media_player_stop_async</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_set_renderer</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>libvlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_litem</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>renderer</name> <init>= <expr><call><name>libvlc_renderer_item_to_vlc</name><argument_list>(<argument><expr><name>p_litem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SetRenderer</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_callbacks</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>lock_cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unlock_cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>display_cb</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-lock"</literal></expr></argument>, <argument><expr><name>lock_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-unlock"</literal></expr></argument>, <argument><expr><name>unlock_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-display"</literal></expr></argument>, <argument><expr><name>display_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-data"</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"vmem"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_format_callbacks</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_format_cb</name></type> <name>setup</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_cleanup_cb</name></type> <name>cleanup</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-setup"</literal></expr></argument>, <argument><expr><name>setup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-cleanup"</literal></expr></argument>, <argument><expr><name>cleanup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_format</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chroma</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pitch</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-chroma"</literal></expr></argument>, <argument><expr><name>chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vmem-pitch"</literal></expr></argument>, <argument><expr><name>pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_video_set_output_callbacks</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_engine_t</name></type> <name>engine</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_output_setup_cb</name></type> <name>setup_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_output_cleanup_cb</name></type> <name>cleanup_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_output_set_resize_cb</name></type> <name>resize_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_update_output_cb</name></type> <name>update_output_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_swap_cb</name></type> <name>swap_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_makeCurrent_cb</name></type> <name>makeCurrent_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_getProcAddress_cb</name></type> <name>getProcAddress_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_frameMetadata_cb</name></type> <name>metadata_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_video_output_select_plane_cb</name></type> <name>select_plane_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>libvlc_video_engine_disable</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No engine set must default to 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"wextern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>engine</name> <operator>==</operator> <name>libvlc_video_engine_gles2</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"gles2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"gles2"</literal></expr></argument>, <argument><expr><literal type="string">"vgl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>engine</name> <operator>==</operator> <name>libvlc_video_engine_opengl</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"gl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"gl"</literal></expr></argument>, <argument><expr><literal type="string">"vgl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>engine</name> <operator>==</operator> <name>libvlc_video_engine_d3d11</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"direct3d11"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">"d3d11"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>engine</name> <operator>==</operator> <name>libvlc_video_engine_d3d9</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"direct3d9"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">"d3d9"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>engine</name> <operator>==</operator> <name>libvlc_video_engine_disable</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-type"</literal></expr></argument>, <argument><expr><name>engine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-setup"</literal></expr></argument>, <argument><expr><name>setup_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-cleanup"</literal></expr></argument>, <argument><expr><name>cleanup_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-resize-cb"</literal></expr></argument>, <argument><expr><name>resize_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-update-output"</literal></expr></argument>, <argument><expr><name>update_output_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-swap"</literal></expr></argument>, <argument><expr><name>swap_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-get-proc-address"</literal></expr></argument>, <argument><expr><name>getProcAddress_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-make-current"</literal></expr></argument>, <argument><expr><name>makeCurrent_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-metadata"</literal></expr></argument>, <argument><expr><name>metadata_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-select-plane"</literal></expr></argument>, <argument><expr><name>select_plane_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_player_set_nsobject</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>drawable</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-nsobject"</literal></expr></argument>, <argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>drawable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_printerr</name> <argument_list>(<argument><expr><literal type="string">"can't set nsobject: APPLE build required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type> <name>libvlc_media_player_get_nsobject</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>var_GetAddress</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-nsobject"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_mi</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_player_set_xwindow</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>drawable</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>drawable</name></expr> ?</condition><then> <expr><literal type="string">"embed-xid,any"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-xid"</literal></expr></argument>, <argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>libvlc_media_player_get_xwindow</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_GetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-xid"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_player_set_hwnd</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>drawable</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"dec-dev"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>drawable</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"embed-hwnd,any"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-hwnd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>drawable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_printerr</name> <argument_list>(<argument><expr><literal type="string">"can't set hwnd: WIN32 build required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>libvlc_media_player_get_hwnd</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>var_GetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-hwnd"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_mi</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_media_player_set_android_context</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_awindow_handler</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>p_mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>var_SetAddress</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"drawable-androidwindow"</literal></expr></argument>, <argument><expr><name>p_awindow_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_awindow_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_printerr</name> <argument_list>(<argument><expr><literal type="string">"can't set android context: ANDROID build required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_set_callbacks</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_play_cb</name></type> <name>play_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_pause_cb</name></type> <name>pause_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_resume_cb</name></type> <name>resume_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_flush_cb</name></type> <name>flush_cb</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_drain_cb</name></type> <name>drain_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-play"</literal></expr></argument>, <argument><expr><name>play_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-pause"</literal></expr></argument>, <argument><expr><name>pause_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-resume"</literal></expr></argument>, <argument><expr><name>resume_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-flush"</literal></expr></argument>, <argument><expr><name>flush_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-drain"</literal></expr></argument>, <argument><expr><name>drain_cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-data"</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"aout"</literal></expr></argument>, <argument><expr><literal type="string">"amem,none"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_set_volume_callback</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_set_volume_cb</name></type> <name>cb</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-set-volume"</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_set_format_callbacks</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_setup_cb</name></type> <name>setup</name></decl></parameter>,
<parameter><decl><type><name>libvlc_audio_cleanup_cb</name></type> <name>cleanup</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-setup"</literal></expr></argument>, <argument><expr><name>setup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-cleanup"</literal></expr></argument>, <argument><expr><name>cleanup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_audio_set_format</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>channels</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-format"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-rate"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"amem-channels"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>libvlc_time_t</name></type> <name>libvlc_media_player_get_length</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name> <init>= <expr><call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_time_t</name></type> <name>i_time</name> <init>= <expr><call><name>from_mtime</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_time</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_time_t</name></type> <name>libvlc_media_player_get_time</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tick</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_time_t</name></type> <name>i_time</name> <init>= <expr><call><name>from_mtime</name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_time</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_set_time</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>libvlc_time_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tick</name> <init>= <expr><call><name>to_mtime</name><argument_list>(<argument><expr><name>i_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_seek_speed</name></name></type> <name>speed</name> <init>= <expr><ternary><condition><expr><name>b_fast</name></expr> ?</condition><then> <expr><name>VLC_PLAYER_SEEK_FAST</name></expr>
</then><else>: <expr><name>VLC_PLAYER_SEEK_PRECISE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SeekByTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>tick</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_set_position</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fast</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_seek_speed</name></name></type> <name>speed</name> <init>= <expr><ternary><condition><expr><name>b_fast</name></expr> ?</condition><then> <expr><name>VLC_PLAYER_SEEK_FAST</name></expr>
</then><else>: <expr><name>VLC_PLAYER_SEEK_PRECISE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SeekByPos</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_media_player_get_position</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_position</name> <init>= <expr><call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f_position</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_set_chapter</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chapter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>chapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_chapter</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_chapter</name> <init>= <expr><call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_chapter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_chapter_count</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>title</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_chapter_count_for_title</name><parameter_list>(
<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_title</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>i_title</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>titles</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>titles_count</name> <init>= <expr><call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>titles_count</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>=
<expr><call><name>vlc_player_title_list_GetAt</name><argument_list>(<argument><expr><name>titles</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_set_title</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_title</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_title</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_title_count</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>titles</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_full_title_descriptions</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>libvlc_title_description_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>pp_titles</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>titles</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_title_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>descs</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>descs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>descs</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>=
<expr><call><name>vlc_player_title_list_GetAt</name><argument_list>(<argument><expr><name>titles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_title_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_title_descriptions_release</name><argument_list>(<argument><expr><name>descs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>descs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>title</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_titles</name> <operator>=</operator> <name>descs</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_title_descriptions_release</name><parameter_list>( <parameter><decl><type><name>libvlc_title_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_titles</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_titles</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_titles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_titles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_titles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_full_chapter_descriptions</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_chapters_of_title</name></decl></parameter>,
<parameter><decl><type><name>libvlc_chapter_description_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>pp_chapters</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>titles</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>titles_count</name> <init>= <expr><call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_chapters_of_title</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>titles_count</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name> <init>=
<expr><call><name>vlc_player_title_list_GetAt</name><argument_list>(<argument><expr><name>titles</name></expr></argument>, <argument><expr><name>i_chapters_of_title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_chapter_count</name> <init>= <expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_chapter_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>descs</name> <init>=
<expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>i_chapter_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>descs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_chapter_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>descs</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_chapter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_chapter</name></name> <modifier>*</modifier></type><name>chapter</name> <init>= <expr><operator>&amp;</operator><name><name>title</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_chapter_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_chapter_descriptions_release</name><argument_list>(<argument><expr><name>descs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>descs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>chapter_end</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>i_chapter_count</name> <operator>-</operator> <literal type="number">1</literal></expr>
?</condition><then> <expr><name><name>title</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>
</then><else>: <expr><name><name>title</name><operator>-&gt;</operator><name>length</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>chapter_end</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i_chapter_count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_chapters</name> <operator>=</operator> <name>descs</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_chapter_descriptions_release</name><parameter_list>( <parameter><decl><type><name>libvlc_chapter_description_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_chapters</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chapters</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_next_chapter</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_previous_chapter</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectPrevChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_set_rate</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_media_player_get_rate</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_state_t</name></type> <name>libvlc_media_player_get_state</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_error</name></name></type> <name>error</name> <init>= <expr><call><name>vlc_player_GetError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>VLC_PLAYER_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>libvlc_Error</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<return>return <expr><name>libvlc_Stopped</name></expr>;</return>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>
<return>return <expr><name>libvlc_Ended</name></expr>;</return>
<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>
<return>return <expr><name>libvlc_Opening</name></expr>;</return>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<return>return <expr><name>libvlc_Playing</name></expr>;</return>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<return>return <expr><name>libvlc_Paused</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_media_player_is_seekable</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name> <init>= <expr><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_seekable</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_navigate</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name><modifier>*</modifier></type> <name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>navigate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>vlc_player_nav</name></name></type> <name><name>map</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>VLC_PLAYER_NAV_ACTIVATE</name></expr>, <expr><name>VLC_PLAYER_NAV_UP</name></expr>, <expr><name>VLC_PLAYER_NAV_DOWN</name></expr>,
<expr><name>VLC_PLAYER_NAV_LEFT</name></expr>, <expr><name>VLC_PLAYER_NAV_RIGHT</name></expr>, <expr><name>VLC_PLAYER_NAV_POPUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>navigate</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Navigate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>map</name><index>[<expr><name>navigate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type>
<name>libvlc_get_track_description</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>ret</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>tr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>tr</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>tr</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_track_description_list_release</name><parameter_list>( <parameter><decl><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type><name>p_td</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type><name>p_actual</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_before</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_actual</name> <operator>=</operator> <name>p_td</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>p_actual</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_actual</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_before</name> <operator>=</operator> <name>p_actual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_actual</name> <operator>=</operator> <name><name>p_before</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_before</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_media_player_can_pause</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_can_pause</name> <init>= <expr><call><name>vlc_player_CanPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_can_pause</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_media_player_program_scrambled</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_program_scrambled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_program</name></name> <modifier>*</modifier></type><name>program</name> <init>=
<expr><call><name>vlc_player_GetSelectedProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_program_scrambled</name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>scrambled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<return>return <expr><name>b_program_scrambled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_media_player_next_frame</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_NextVideoFrame</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>position_subpicture_alignment</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>libvlc_position_center</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><index>[<expr><name>libvlc_position_left</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>,
<expr><index>[<expr><name>libvlc_position_right</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>,
<expr><index>[<expr><name>libvlc_position_top</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>,
<expr><index>[<expr><name>libvlc_position_top_left</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>,
<expr><index>[<expr><name>libvlc_position_top_right</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>,
<expr><index>[<expr><name>libvlc_position_bottom</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>,
<expr><index>[<expr><name>libvlc_position_bottom_left</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>,
<expr><index>[<expr><name>libvlc_position_bottom_right</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>libvlc_media_player_set_video_title_display</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>libvlc_position_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>position</name> <operator>&gt;=</operator> <name>libvlc_position_disable</name> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;=</operator> <name>libvlc_position_bottom_right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>position</name> <operator>!=</operator> <name>libvlc_position_disable</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"video-title-show"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"video-title-position"</literal></expr></argument>, <argument><expr><name><name>position_subpicture_alignment</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"video-title-timeout"</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"video-title-show"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_add_slave</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>libvlc_media_slave_type_t</name></type> <name>i_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_select</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><ternary><condition><expr><name>i_type</name> <operator>==</operator> <name>libvlc_media_slave_type_subtitle</name></expr>
?</condition><then> <expr><name>SPU_ES</name></expr>
</then><else>: <expr><name>AUDIO_ES</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_AddAssociatedMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>b_select</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQZ_BAND_VALUE_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>libvlc_media_player_set_equalizer</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>libvlc_equalizer_t</name> <modifier>*</modifier></type><name>p_equalizer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bands</name><index>[<expr><name>EQZ_BANDS_MAX</name> <operator>*</operator> <name>EQZ_BAND_VALUE_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_equalizer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EQZ_BANDS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>( <argument><expr><name>bands</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bands</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><literal type="string">" %.07f"</literal></expr></argument>,
<argument><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_amp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bands</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"equalizer-preamp"</literal></expr></argument>, <argument><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument>, <argument><expr><name>bands</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p_equalizer</name></expr> ?</condition><then> <expr><literal type="string">"equalizer"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>( <argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_equalizer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-preamp"</literal></expr></argument>, <argument><expr><name><name>p_equalizer</name><operator>-&gt;</operator><name>f_preamp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument>, <argument><expr><name>bands</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p_equalizer</name></expr> ?</condition><then> <expr><literal type="string">"equalizer"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>roles</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>libvlc_role_Music</name></expr>]</index> <operator>=</operator> <literal type="string">"music"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Video</name></expr>]</index> <operator>=</operator> <literal type="string">"video"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Communication</name></expr>]</index> <operator>=</operator> <literal type="string">"communication"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Game</name></expr>]</index> <operator>=</operator> <literal type="string">"game"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Notification</name></expr>]</index> <operator>=</operator> <literal type="string">"notification"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Animation</name></expr>]</index> <operator>=</operator> <literal type="string">"animation"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Production</name></expr>]</index> <operator>=</operator> <literal type="string">"production"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Accessibility</name></expr>]</index> <operator>=</operator> <literal type="string">"accessibility"</literal></expr>,
<expr><index>[<expr><name>libvlc_role_Test</name></expr>]</index> <operator>=</operator> <literal type="string">"test"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>libvlc_media_player_set_role</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>var_SetString</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>, <argument><expr><name><name>roles</name><index>[<expr><name>role</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_media_player_get_role</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_GetString</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>roles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cast_</name></cpp:macro> <cpp:value>libvlc_video_color_space_t</cpp:value></cpp:define>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>libvlc_video_colorspace_BT601</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_SPACE_BT601</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_colorspace_BT709</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_SPACE_BT709</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_colorspace_BT2020</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_SPACE_BT2020</name></expr></argument>
, <argument><expr><literal type="string">"libvlc video colorspace mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cast_</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cast_</name></cpp:macro> <cpp:value>libvlc_video_transfer_func_t</cpp:value></cpp:define>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>libvlc_video_transfer_func_LINEAR</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_LINEAR</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_SRGB</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_SRGB</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_BT470_BG</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_BT470_BG</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_BT470_M</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_BT470_M</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_BT709</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_BT709</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_PQ</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_SMPTE_ST2084</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_SMPTE_240</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_SMPTE_240</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_transfer_func_HLG</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>TRANSFER_FUNC_HLG</name></expr></argument>
, <argument><expr><literal type="string">"libvlc video transfer function mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cast_</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cast_</name></cpp:macro> <cpp:value>libvlc_video_color_primaries_t</cpp:value></cpp:define>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>libvlc_video_primaries_BT601_525</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_BT601_525</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_primaries_BT601_625</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_BT601_625</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_primaries_BT709</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_BT709</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_primaries_BT2020</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_BT2020</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_primaries_DCI_P3</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_DCI_P3</name> <operator>&amp;&amp;</operator>
<name>libvlc_video_primaries_BT470_M</name> <operator>==</operator> <operator>(</operator><name>cast_</name><operator>)</operator><name>COLOR_PRIMARIES_BT470_M</name></expr></argument>
, <argument><expr><literal type="string">"libvlc video color primaries mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cast_</name></cpp:undef>
</unit>
