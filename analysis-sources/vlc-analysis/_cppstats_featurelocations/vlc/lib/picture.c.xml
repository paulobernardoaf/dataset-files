<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\lib\picture.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"picture_internal.h"</cpp:file></cpp:include>

<struct>struct <name>libvlc_picture_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_picture_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name><modifier>*</modifier></type> <name>converted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_time_t</name></type> <name>time</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>libvlc_picture_t</name><modifier>*</modifier></type> <name>libvlc_picture_new</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>input</name></decl></parameter>,
<parameter><decl><type><name>libvlc_picture_type_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>crop</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pic</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>input</name><operator>-&gt;</operator><name>date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name></decl>;</decl_stmt>
<switch>switch <condition>( <expr><name>type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>libvlc_picture_Argb</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_ARGB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_picture_Jpg</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_JPEG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>libvlc_picture_Png</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_PNG</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>( <expr><call><name>picture_Export</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>converted</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>input</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>crop</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_picture_retain</name><parameter_list>( <parameter><decl><type><name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_picture_release</name><parameter_list>( <parameter><decl><type><name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>vlc_atomic_rc_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>pic</name><operator>-&gt;</operator><name>converted</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>converted</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_picture_save</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>file</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><call><name>fwrite</name><argument_list>( <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>converted</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>converted</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>libvlc_picture_get_buffer</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>converted</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>converted</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_picture_type_t</name></type> <name>libvlc_picture_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>libvlc_picture_get_stride</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>libvlc_picture_Argb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>libvlc_picture_get_width</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>libvlc_picture_get_height</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_time_t</name></type> <name>libvlc_picture_get_time</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>libvlc_picture_t</name><modifier>*</modifier></type> <name>pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pic</name><operator>-&gt;</operator><name>time</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
