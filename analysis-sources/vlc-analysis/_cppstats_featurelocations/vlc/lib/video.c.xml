<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\lib\video.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvlc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"media_player_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetVouts</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_player_vout_HoldAll</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vout_thread_t</name> <modifier>*</modifier></type><name>GetVout</name> <parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pp_vouts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_vout</name> <operator>=</operator> <name><name>pp_vouts</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>libvlc_printerr</name> <argument_list>(<argument><expr><literal type="string">"Video output not active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_vout</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>libvlc_set_fullscreen</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fullscreen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>b_fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>b_fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>libvlc_get_fullscreen</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_GetBool</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_toggle_fullscreen</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_fullscreen</name> <init>= <expr><call><name>var_ToggleBool</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"fullscreen"</literal></expr></argument>, <argument><expr><name>b_fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_key_input</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>on</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_mouse_input</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>on</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libvlc_video_take_snapshot</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filepath</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>psz_filepath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>GetVout</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-width"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-width"</literal></expr></argument>, <argument><expr><name>i_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-height"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-height"</literal></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-path"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-path"</literal></expr></argument>, <argument><expr><name>psz_filepath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-format"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"snapshot-format"</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"video-snapshot"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_size</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>py</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>libvlc_media_track_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><call><name>libvlc_media_tracks_get</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>p_md</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_type</name> <operator>==</operator> <name>libvlc_track_video</name> <operator>&amp;&amp;</operator> <name>num</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>video</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>video</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>libvlc_media_tracks_release</name><argument_list>(<argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_cursor</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>py</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>GetVout</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_vout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_GetCoords</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>libvlc_media_player_has_vout</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>libvlc_video_get_scale</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_scale</name> <init>= <expr><call><name>var_GetFloat</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_GetBool</name> <argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_scale</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f_scale</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_scale</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mp</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_scale</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isfinite</name><argument_list>(<argument><expr><name>f_scale</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>f_scale</name> <operator>!=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetFloat</name> <argument_list>(<argument><expr><name>p_mp</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>f_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>p_mp</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>f_scale</name> <operator>==</operator> <literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isfinite</name><argument_list>(<argument><expr><name>f_scale</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>f_scale</name> <operator>!=</operator> <literal type="number">0.f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetFloat</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>, <argument><expr><name>f_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>var_SetBool</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>, <argument><expr><name>f_scale</name> <operator>==</operator> <literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>libvlc_video_get_aspect_ratio</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_aspect_ratio</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_aspect</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psz_aspect</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_aspect</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>psz_aspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>psz_aspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>libvlc_video_viewpoint_t</name> <modifier>*</modifier></type><name>libvlc_video_new_viewpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_video_viewpoint_t</name> <modifier>*</modifier></type><name>p_vp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>p_vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_vp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_vp</name><operator>-&gt;</operator><name>f_yaw</name></name> <operator>=</operator> <name><name>p_vp</name><operator>-&gt;</operator><name>f_pitch</name></name> <operator>=</operator> <name><name>p_vp</name><operator>-&gt;</operator><name>f_roll</name></name> <operator>=</operator> <name><name>p_vp</name><operator>-&gt;</operator><name>f_field_of_view</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<return>return <expr><name>p_vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_update_viewpoint</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>libvlc_video_viewpoint_t</name> <modifier>*</modifier></type><name>p_viewpoint</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_absolute</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>update</name> <init>= <expr><block>{
<expr><operator>.</operator><name>yaw</name> <operator>=</operator> <name><name>p_viewpoint</name><operator>-&gt;</operator><name>f_yaw</name></name></expr>,
<expr><operator>.</operator><name>pitch</name> <operator>=</operator> <name><name>p_viewpoint</name><operator>-&gt;</operator><name>f_pitch</name></name></expr>,
<expr><operator>.</operator><name>roll</name> <operator>=</operator> <name><name>p_viewpoint</name><operator>-&gt;</operator><name>f_roll</name></name></expr>,
<expr><operator>.</operator><name>fov</name> <operator>=</operator> <name><name>p_viewpoint</name><operator>-&gt;</operator><name>f_field_of_view</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name> <init>= <expr><ternary><condition><expr><name>b_absolute</name></expr> ?</condition><then> <expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr>
</then><else>: <expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_UpdateViewpoint</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_spu</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_spu</name> <init>= <expr><ternary><condition><expr><name>track</name></expr> ?</condition><then> <expr><call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_spu</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_spu_count</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type>
<name>libvlc_video_get_spu_description</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>libvlc_get_track_description</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_set_spu</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_spu</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetSubtitleTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetSubtitleTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_spu</name> <operator>==</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Track identifier not found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>libvlc_video_get_spu_delay</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_player_GetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_set_spu_delay</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>i_delay</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>i_delay</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libvlc_video_set_crop</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>geometry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vouts</name> <init>= <expr><call><name>GetVouts</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_crop_ratio</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>geometry</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>den</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>geometry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>, <argument><expr><literal type="string">"%u:%u"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>libvlc_video_set_crop</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_crop_window</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>geometry</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>, <argument><expr><literal type="string">"%ux%u+%u+%u"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_video_set_crop</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_crop_border</name><parameter_list>(<parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>right</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>geometry</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>geometry</name></expr></argument>, <argument><expr><literal type="string">"%u+%u+%u+%u"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libvlc_video_set_crop</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_teletext</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>var_GetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_teletext</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_page</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_page</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_SetTeletextEnabled</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_page</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_page</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_key</name> <init>= <expr><name>i_page</name> <operator>==</operator> <name>libvlc_teletext_key_red</name>
<operator>||</operator> <name>i_page</name> <operator>==</operator> <name>libvlc_teletext_key_green</name>
<operator>||</operator> <name>i_page</name> <operator>==</operator> <name>libvlc_teletext_key_yellow</name>
<operator>||</operator> <name>i_page</name> <operator>==</operator> <name>libvlc_teletext_key_blue</name>
<operator>||</operator> <name>i_page</name> <operator>==</operator> <name>libvlc_teletext_key_index</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_key</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Invalid key action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_SetTeletextEnabled</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectTeletextPage</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>(<argument><expr><literal type="string">"Invalid page number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_track_count</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>libvlc_track_description_t</name> <modifier>*</modifier></type>
<name>libvlc_video_get_track_description</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>libvlc_get_track_description</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_get_track</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type> <name>track</name> <init>=
<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><ternary><condition><expr><name>track</name></expr> ?</condition><then> <expr><call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>libvlc_video_set_track</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name><name>p_mi</name><operator>-&gt;</operator><name>player</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetVideoTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetVideoTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_track</name> <operator>==</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Track identifier not found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_video_set_deinterlace</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deinterlace</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deinterlace</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>deinterlace</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deinterlace</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_mode</name>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"blend"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"bob"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"discard"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"linear"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"mean"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"yadif"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"yadif2x"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"phosphor"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"ivtc"</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_mode</name> <operator>&amp;&amp;</operator> <name>deinterlace</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>deinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name> <argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_mode</name> <operator>&amp;&amp;</operator> <name>deinterlace</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>, <argument><expr><name>deinterlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pp_vouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>get_filter_str</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_add</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filter_type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filter_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filter_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><call><name>module_find</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_obj</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"Unable to find filter module \"%s\"."</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>module_provides</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"video filter"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_filter_type</name> <operator>=</operator> <literal type="string">"video-filter"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>module_provides</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub source"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_filter_type</name> <operator>=</operator> <literal type="string">"sub-source"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>module_provides</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub filter"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_filter_type</name> <operator>=</operator> <literal type="string">"sub-filter"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><literal type="string">"Unknown video filter type."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>psz_filter_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_add</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_string</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>psz_string</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%s:%s"</literal></expr> </then><else>: <expr><literal type="string">"%s%s"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name>psz_parser</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>*</operator><operator>(</operator><name>psz_parser</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_parser</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>(</operator><name>psz_string</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>psz_string</name></expr></argument> )</argument_list></call> <operator>-</operator><literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>psz_string</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>psz_string</name></expr></argument> )</argument_list></call> <operator>-</operator><literal type="number">1</literal> <operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_filter_type</name> <operator>=</operator> <name>psz_filter_type</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_filter_value</name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>find_sub_source_by_name</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>GetVout</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sources</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_sources</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"%s not enabled"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_sources</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_sources</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>opt_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_value</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_expected_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_sub_source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>opt</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>new_val</name> <init>= <expr><operator>*</operator><name>val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_opt_name</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>get_filter_str</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_opt_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>VLC_VAR_STRING</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>i_expected_type</name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Invalid argument to %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Invalid argument to %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>



<expr_stmt><expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>psz_opt_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_vout_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vouts</name> <init>= <expr><call><name>GetVouts</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vout_count</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_vout_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetChecked</name><argument_list>( <argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_opt_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_sub_source</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"sub-source"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name><name>pp_vouts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>new_val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>opt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>opt</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_enabled</name> <init>= <expr><call><name>find_sub_source_by_name</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>b_enabled</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>
<return>return <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>
<return>return <expr><call><name>lroundf</name><argument_list>(<argument><expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Invalid argument to %s in %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"get int"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>
<name>get_float</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>opt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>opt</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_VAR_FLOAT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Invalid argument to %s in %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"get float"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type>
<name>marq_option_bynumber</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name></type> <name><name>optlist</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"marq"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-marquee"</literal></expr>, <expr><name>VLC_VAR_STRING</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-color"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-opacity"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-position"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-refresh"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-size"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-timeout"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-x"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"marq-y"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>num_opts</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>optlist</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> sizeof<operator>(</operator><operator>*</operator><name>optlist</name><operator>)</operator></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><ternary><condition><expr><name>option</name> <operator>&lt;</operator> <name>num_opts</name></expr> ?</condition><then> <expr><name>optlist</name><operator>+</operator><name>option</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Unknown marquee option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>libvlc_video_get_marquee_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_int</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"marq"</literal></expr></argument>, <argument><expr><call><name>marq_option_bynumber</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_video_set_marquee_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>, <argument><literal type="string">"marq"</literal></argument>, <argument>marq_option_bynumber(option)</argument>, <argument>VLC_VAR_INTEGER</argument>,
<argument>&amp;(vlc_value_t) { .i_int = value }</argument>, <argument>true</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>libvlc_video_set_marquee_string</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>, <argument><literal type="string">"marq"</literal></argument>, <argument>marq_option_bynumber(option)</argument>, <argument>VLC_VAR_STRING</argument>,
<argument>&amp;(vlc_value_t){ .psz_string = (char *)value }</argument>, <argument>true</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type>
<name>logo_option_bynumber</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name></type> <name><name>vlogo_optlist</name><index>[]</index></name> <init>=

<expr><block>{
<expr><block>{ <expr><literal type="string">"logo"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-file"</literal></expr>, <expr><name>VLC_VAR_STRING</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-x"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-y"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-delay"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-repeat"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-opacity"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logo-position"</literal></expr>, <expr><name>VLC_VAR_INTEGER</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>num_vlogo_opts</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlogo_optlist</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> sizeof<operator>(</operator><operator>*</operator><name>vlogo_optlist</name><operator>)</operator></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><ternary><condition><expr><name>option</name> <operator>&lt;</operator> <name>num_vlogo_opts</name></expr> ?</condition><then> <expr><name>vlogo_optlist</name><operator>+</operator><name>option</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Unknown logo option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libvlc_video_set_logo_string</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>,<argument><literal type="string">"logo"</literal></argument>,<argument>logo_option_bynumber(option)</argument>, <argument>VLC_VAR_STRING</argument>,
<argument>&amp;(vlc_value_t){ .psz_string = (char *)psz_value }</argument>, <argument>true</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>libvlc_video_set_logo_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>, <argument><literal type="string">"logo"</literal></argument>, <argument>logo_option_bynumber(option)</argument>, <argument>VLC_VAR_INTEGER</argument>,
<argument>&amp;(vlc_value_t) { .i_int = value }</argument>, <argument>true</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>libvlc_video_get_logo_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_int</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"logo"</literal></expr></argument>, <argument><expr><call><name>logo_option_bynumber</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type>
<name>adjust_option_bynumber</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>opt_t</name></type> <name><name>optlist</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"adjust"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"contrast"</literal></expr>, <expr><name>VLC_VAR_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"brightness"</literal></expr>, <expr><name>VLC_VAR_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hue"</literal></expr>, <expr><name>VLC_VAR_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"saturation"</literal></expr>, <expr><name>VLC_VAR_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><name>VLC_VAR_FLOAT</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>num_opts</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>optlist</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> sizeof<operator>(</operator><operator>*</operator><name>optlist</name><operator>)</operator></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>opt_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><ternary><condition><expr><name>option</name> <operator>&lt;</operator> <name>num_opts</name></expr> ?</condition><then> <expr><name>optlist</name><operator>+</operator><name>option</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libvlc_printerr</name><argument_list>( <argument><expr><literal type="string">"Unknown adjust option"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>libvlc_video_set_adjust_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>, <argument><literal type="string">"adjust"</literal></argument>, <argument>adjust_option_bynumber(option)</argument>, <argument>VLC_VAR_INTEGER</argument>,
<argument>&amp;(vlc_value_t) { .i_int = value }</argument>, <argument>false</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>libvlc_video_get_adjust_int</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_int</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"adjust"</literal></expr></argument>, <argument><expr><call><name>adjust_option_bynumber</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>libvlc_video_set_adjust_float</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<macro><name>set_value</name><argument_list>( <argument>p_mi</argument>, <argument><literal type="string">"adjust"</literal></argument>, <argument>adjust_option_bynumber(option)</argument>, <argument>VLC_VAR_FLOAT</argument>,
<argument>&amp;(vlc_value_t) { .f_float = value }</argument>, <argument>false</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>libvlc_video_get_adjust_float</name><parameter_list>( <parameter><decl><type><name>libvlc_media_player_t</name> <modifier>*</modifier></type><name>p_mi</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>option</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_float</name><argument_list>( <argument><expr><name>p_mi</name></expr></argument>, <argument><expr><literal type="string">"adjust"</literal></expr></argument>, <argument><expr><call><name>adjust_option_bynumber</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
