<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\compat\clock_nanosleep.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/clock_types.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>clock_nanosleep</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clock_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>rqtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>rmtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rqtp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rqtp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>rqtp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>rqtp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>&gt;=</operator> <name>NSEC_PER_SEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name>clock_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLOCK_MONOTONIC</name></expr>:</case>
<case>case <expr><name>CLOCK_REALTIME</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>TIMER_ABSTIME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts_now</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>clock_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_now</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ts_rel</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>rqtp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>ts_now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts_rel</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>rqtp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>ts_now</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts_rel</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts_rel</name><operator>.</operator><name>tv_sec</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts_rel</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <name>NSEC_PER_SEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ts_rel</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>ts_rel</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ts_rel</name><operator>.</operator><name>tv_nsec</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_testcancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



</block_content>}</block> while <condition>(<expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts_rel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>



<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nanosleep</name><argument_list>(<argument><expr><name>rqtp</name></expr></argument>, <argument><expr><name>rmtp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
