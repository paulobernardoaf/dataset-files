<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\compat\strverscmp.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_N</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_I</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_F</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_Z</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>







<function><type><name>int</name></type> <name>strverscmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>next_state</name><index>[]</index></name> <init>=
<expr><block>{

<expr><name>S_N</name></expr>, <expr><name>S_I</name></expr>, <expr><name>S_Z</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_I</name></expr>, <expr><name>S_I</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_F</name></expr>, <expr><name>S_F</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_F</name></expr>, <expr><name>S_Z</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>result_type</name><index>[]</index></name> <init>=
<expr><block>{


<expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>LEN</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>,
<expr><name>CMP</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>LEN</name></expr>, <expr><name>LEN</name></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>LEN</name></expr>, <expr><name>LEN</name></expr>,
<expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>,
<expr><name>CMP</name></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>p2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><operator>*</operator><name>p1</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name> <init>= <expr><operator>*</operator><name>p2</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>S_N</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>diff</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>diff</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>next_state</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>p2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>+=</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>result_type</name><index>[<expr><name>state</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c2</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CMP</name></expr>:</case>
<return>return <expr><name>diff</name></expr>;</return>

<case>case <expr><name>LEN</name></expr>:</case>
<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><ternary><condition><expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>diff</name></expr></else></ternary></expr>;</return>

<default>default:</default>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
