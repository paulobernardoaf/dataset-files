<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\compat\gai_strerror.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_BADFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADFLAGS</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_NONAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NONAME</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_AGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_AGAIN</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_FAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAIL</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_NODATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NODATA</name></cpp:macro> <cpp:value>-5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_FAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAMILY</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_SOCKTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SOCKTYPE</name></cpp:macro> <cpp:value>-7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_SERVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SERVICE</name></cpp:macro> <cpp:value>-8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_ADDRFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_ADDRFAMILY</name></cpp:macro> <cpp:value>-9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MEMORY</name></cpp:macro> <cpp:value>-10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_OVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_OVERFLOW</name></cpp:macro> <cpp:value>-11</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAI_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SYSTEM</name></cpp:macro> <cpp:value>-12</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>gai_errlist</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Error 0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_BADFLAGS</name></expr>, <expr><literal type="string">"Invalid flag used"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_NONAME</name></expr>, <expr><literal type="string">"Host or service not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_AGAIN</name></expr>, <expr><literal type="string">"Temporary name service failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_FAIL</name></expr>, <expr><literal type="string">"Non-recoverable name service failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_NODATA</name></expr>, <expr><literal type="string">"No data for host name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_FAMILY</name></expr>, <expr><literal type="string">"Unsupported address family"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_SOCKTYPE</name></expr>, <expr><literal type="string">"Unsupported socket type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_SERVICE</name></expr>, <expr><literal type="string">"Incompatible service for socket type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_ADDRFAMILY</name></expr>, <expr><literal type="string">"Unavailable address family for host name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_MEMORY</name></expr>, <expr><literal type="string">"Memory allocation failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_OVERFLOW</name></expr>, <expr><literal type="string">"Buffer overflow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EAI_SYSTEM</name></expr>, <expr><literal type="string">"System error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gai_unknownerr</name><index>[]</index></name> <init>= <expr><literal type="string">"Unrecognized error number"</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gai_strerror</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name><name>gai_errlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name><name>gai_errlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>gai_errlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>gai_unknownerr</name></expr>;</return>
</block_content>}</block></function>
</unit>
