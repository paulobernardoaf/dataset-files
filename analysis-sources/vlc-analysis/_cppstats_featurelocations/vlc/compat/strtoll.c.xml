<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\compat\strtoll.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>strtoll</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>newbase</name> <init>= <expr><ternary><condition><expr><name>base</name></expr> ?</condition><then> <expr><name>base</name></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nptr</name> <operator>+=</operator> <call><name>strspn</name><argument_list>( <argument><expr><name>nptr</name></expr></argument>, <argument><expr><literal type="string">"\t "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>nptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>nptr</name> <operator>==</operator> <literal type="char">'0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>newbase</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>nptr</name> <operator>==</operator> <literal type="char">'x'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>newbase</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>base</name> <operator>&amp;&amp;</operator> <name>newbase</name> <operator>!=</operator> <name>base</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>endptr</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_value</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>newbase</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<while>while<condition>( <expr><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_value</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_value</name> <operator>+=</operator> <operator>(</operator> <operator>*</operator><name>nptr</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><name>endptr</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<while>while<condition>( <expr><operator>(</operator><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_valc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_valc</name> <operator>=</operator> <operator>*</operator><name>nptr</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_valc</name> <operator>=</operator> <operator>*</operator><name>nptr</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>nptr</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nptr</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_valc</name> <operator>=</operator> <operator>*</operator><name>nptr</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_value</name> <operator>*=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_value</name> <operator>+=</operator> <name>i_valc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><name>endptr</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>i_value</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>newbase</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>i_value</name> <operator>*</operator> <name>sign</name></expr>;</return>
</block_content>}</block></function>
</unit>
