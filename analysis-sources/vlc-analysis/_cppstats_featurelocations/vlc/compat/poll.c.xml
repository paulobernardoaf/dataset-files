<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\compat\poll.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> (<name>poll</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name><name>rdset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wrset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>exset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><name>rdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><name>wrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><name>exset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>fd</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLRDNORM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLWRNORM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLPRI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>exset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>div_t</name></type> <name>d</name> <init>= <expr><call><name>div</name> <argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rdset</name></expr></argument>, <argument><expr><name>wrset</name></expr></argument>, <argument><expr><name>exset</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tv</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EBADF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name> <argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <name>POLLNVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<return>return <expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rdset</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>POLLRDNORM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wrset</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>POLLWRNORM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>exset</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>POLLPRI</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>poll_compat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>to</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>timeout</name></expr> </then><else>: <expr><name>INFINITE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>SleepEx</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WSAEVENT</name> <modifier>*</modifier></type><name>evts</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>nfds</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>WSAEVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>evts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><name>WSA_WAIT_FAILED</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mask</name> <init>= <expr><name>FD_CLOSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rdset</name></decl>, <decl><type ref="prev"/><name>wrset</name></decl>, <decl><type ref="prev"/><name>exset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLRDNORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLWRNORM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CONNECT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLPRI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>FD_OOB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>WSACreateEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WSACloseEvent</name><argument_list>(<argument><expr><name><name>evts</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>evts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAENOTSOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLNVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLRDNORM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLWRNORM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name> <operator>|</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLPRI</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>WSA_WAIT_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>WSA_WAIT_EVENT_0</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WSA_WAIT_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSAWaitForMultipleEvents</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>evts</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>ne</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAEnumNetworkEvents</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ne</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ne</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSACloseEvent</name><argument_list>(<argument><expr><name><name>evts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_CONNECT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLWRNORM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_CONNECT_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_CLOSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLRDNORM</name><operator>)</operator> <operator>|</operator> <name>POLLHUP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_CLOSE_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_ACCEPT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLRDNORM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_ACCEPT_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_OOB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLPRI</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_OOB_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_READ</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLRDNORM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_READ_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_WRITE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLWRNORM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_WRITE_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>evts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>WSA_WAIT_IO_COMPLETION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>poll_compat</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>poll_compat</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
